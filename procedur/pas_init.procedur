$$$$ PAS_INIT
* PAS_INIT  PROCEDUR  CB215821  18/09/18    21:15:03     9925
'DEBPROC' PAS_INIT   PRECED*'TABLE'  ;
*cette procedure cree l'etat initial des inconnues , le met dans conti.
* initialise au passage les tables de sorties en mettant l'etat
* initial sous l'indice 0
* on fait complique car on veut pouvoir continuer des
* calculs sauvegardes avant que la table de continuation n'existe
WTAB   =PRECED.'WTABLE' ;

TABSAUV=WTAB  .'TABSAUV';
'SI' ( 'EXIS' PRECED 'CONTINUATION');
   conti=PRECED.'CONTINUATION';
   inouv=faux;
   WTAB.'TEMPS0'=conti.'TEMPS';
'SINON';
*  il suffit d'initialiser a zero ou de reprendre ce qui est donne
*  par l'utilisateur ( vitesses initiales ,temperatuires initiales etc..
   conti='TABL';
   inouv=vrai;
   PRECED.'CONTINUATION'= CONTI;
'FINSI';
*---------- initialisation du temps et table sortie temps
'SI' ('EXIS' PRECED TEMPS) ;
   NSOR= ('DIME' (PRECED . 'TEMPS' )) - 1;
   WTAB.'NSOR'=NSOR;
  'SI' ('EXIS' conti 'TEMPS');
     WTAB.'TEMPS0'=conti.'TEMPS';
     TEMP0=WTAB.'TEMPS0';
  'SINON';
    TEMP0=PRECED.'TEMPS' . NSOR;
    WTAB.'TEMPS0'=TEMP0;
  'FINSI';
'SINON';
   NSOR= 0;   PRECED.'TEMPS'='TABLE';
      'SI' WTAB.'FREQUENTIEL' ;
   TEMP0 = WTAB.'TEMPS0' ;
      'SINON' ;
   TEMP0 = 0.D0 ;
      'FINSI' ;
   PRECED.'TEMPS' . 0 = TEMP0 ;
   WTAB.'TEMPS0'=TEMP0;
   WTAB.'NSOR'=NSOR;
'FINSI';
conti.'TEMPS'=WTAB.'TEMPS0';

************************************************************************
*--------  pour la mecanique
************************************************************************
'SI' WTAB.'FOR_MECA' ;
   MO_TOT=WTAB.'MO_TOT';
*---------- initialisation du deplacement et table sortie
  'SI' ('NON' ('EXIS' PRECED 'DEPLACEMENTS' ));
     DDDD = 'ZERO' MO_TOT 'DEPLACEM';
     DEP_COUR = 'CHANGER' 'CHPO'  MO_TOT DDDD;
     'DETRUIRE' DDDD;
     PRECED.'DEPLACEMENTS' = 'TABLE';
     PRECED.'DEPLACEMENTS'. 0 = DEP_COUR;
  'FINSI';
*  WTAB.'FOR'= 'FORM' PRECED.'DEPLACEMENTS'. NSOR ;
  'FORM' WTAB.'FOR0';
'SI' inouv;
   conti.'DEPLACEMENTS'= PRECED. 'DEPLACEMENTS' . NSOR;
*  conti.'GEODEB'=WTAB.'FOR';conti.'GEOFIN'=conti.'GEODEB';
'FINS';
*--------- initialisation des contraintes et table de sortie
  'SI' ('NON' ('EXIS' PRECED 'CONTRAINTES'));
      SIG_COUR = 'ZERO' MO_TOT 'CONTRAIN';
      PRECED.'CONTRAINTES' = 'TABLE';
      PRECED.'CONTRAINTES'. 0 = SIG_COUR;
  'FINSI';
'SI' inouv; conti.'CONTRAINTES' = PRECED.'CONTRAINTES'.NSOR;'FINS';
*---------  initialisation des vitesses et table de sortie
  'SI' (WTAB.'DYNAMIQUE' 'OU' ('EXISTE' WTAB 'MOD_LIA'));
     'SI'  ('EXISTE' PRECED 'VITESSES')  ;
        TABINT=INDEX (PRECED.'VITESSES');
        IND0=TABINT.('DIME' TABINT);
        VIT_COUR=PRECED.'VITESSES' . IND0;
     'SINON';
        DDDD = 'ZERO' MO_TOT 'DEPLACEMENTS';
        VIT_COUR = 'CHANGER' 'CHPO'  MO_TOT DDDD;
        'DETRUIRE' DDDD;
        PRECED.'VITESSES'=TABLE;
        PRECED.'VITESSES'. 0 = VIT_COUR;
     'FINSI';
'SI' inouv;  conti.'VITESSES'=VIT_COUR;'FINS';
  'FINSI';
  'SI' WTAB.'DYNAMIQUE';
     'SI'  ('EXISTE' PRECED 'ACCELERATIONS') ;
        TABINT=INDEX (PRECED.'ACCELERATIONS') ;
        IND0=TABINT.('DIME' TABINT);
        ACC_COUR=PRECED.'ACCELERATIONS' . IND0;
     'SINON';
        DDDD = 'ZERO' MO_TOT 'DEPLACEMENTS';
        ACC_COUR = 'CHANGER' 'CHPO'  MO_TOT DDDD;
        'DETRUIRE' DDDD;
        PRECED.'ACCELERATIONS'=TABLE;
        PRECED.'ACCELERATIONS'. 0 = ACC_COUR;
     'FINSI';
'SI' inouv;  conti.'ACCELERATIONS'=ACC_COUR;'FINS';
  'FINSI';
*----------  REACTIONS  et table de sortie
  'SI' ('NON' ('EXIS' PRECED 'REACTIONS'));
      'SI' ('EXIS' PRECED 'BLOCAGES_MECANIQUES');
     REA_COUR='REAC' PRECED.'BLOCAGES_MECANIQUES' conti.'DEPLACEMENTS';
      'SINON' ;
     REA_COUR = 'CHAN' 'CHPO' MO_TOT ('ZERO'  MO_TOT 'FORCES') ;
      'FINSI' ;
     PRECED.'REACTIONS' = TABLE;
     PRECED.'REACTIONS' . 0 = REA_COUR;
  'FINSI';
'SI' inouv; conti.'REACTIONS'=PRECED.'REACTIONS'.NSOR;'FINS';
*------------ variables_internes et table de sortie
  'SI' WTAB.'IPLAVI';
    'SI' ('EXIS' PRECED 'VARIABLES_INTERNES' );
       TABINT=INDEX (PRECED.'VARIABLES_INTERNES');
       IND0=TABINT.('DIME' TABINT) ;
       VAR_COUR=PRECED.'VARIABLES_INTERNES' . IND0;
    'SINON';
       VAR_COUR = 'ZERO' MO_TOT 'VARINTER';
       PRECED.'VARIABLES_INTERNES' = 'TABLE';
       PRECED.'VARIABLES_INTERNES'. 0 = VAR_COUR;
    'FINSI';
'SI' inouv;    conti.'VARIABLES_INTERNES'=VAR_COUR;'FINS';
  'FINSI';
*--------- initialisation des tables pour un tracking
  'SI' ('EXIS' PRECED.'MODELE' 'MATE' 'EFEM');
  'SI' ('EXIS' PRECED 'TRACKING');
  'SI' (PRECED.'TRACKING');
     'SI' ('NON' ('EXIS' PRECED 'PROOTS'));
         PRECED.'PROOTS' = 'TABLE';
         PRECED.'PROOTS'. 0 = 0.;
     'FINSI';
*     'SI' inouv; conti.'PROOTS' = PRECED.'PROOTS'.NSOR;'FINS';
     'SI' ('NON' ('EXIS' PRECED 'EROOTS'));
         PRECED.'EROOTS' = 'TABLE';
         PRECED.'EROOTS'. 0 = 0.;
     'FINSI';
*     'SI' inouv; conti.'PROOTS' = PRECED.'PROOTS'.NSOR;'FINS';
     'SI' ('NON' ('EXIS' PRECED 'NROOTS'));
         PRECED.'NROOTS' = 0;
     'FINSI';
*     'SI' inouv; conti.'EROOTS' = PRECED.'EROOTS'.NSOR;'FINS';
     'SI' ('NON' ('EXIS' PRECED 'TABISO'));
         PRECED.'TABISO' = 'TABLE';
         PRECED.'TABISO'. 0 = 0.;
     'FINSI';
*     'SI' inouv; conti.'TABISO' = PRECED.'TABISO'.NSOR;'FINS';
     'SI' ('NON' ('EXIS' PRECED 'RESTH'));
         PRECED.'RESTH' = 'TABLE';
         PRECED.'RESTH'. 0 = 0.;
     'FINSI';
*     'SI' inouv; conti.'RESTH' = PRECED.'RESTH'.NSOR;'FINS';
     'SI' ('NON' ('EXIS' PRECED 'ISOTEST'));
         PRECED.'ISOTEST' = 'TABLE';
         PRECED.'ISOTEST'. 0 = 0.;
     'FINSI';
*     'SI' inouv; conti.'ISOTEST' = PRECED.'ISOTEST'.NSOR;'FINS';
     'SI' ('NON' ('EXIS' PRECED 'ISOTOT'));
         PRECED.'ISOTOT' = 'TABLE';
         PRECED.'ISOTOT'. 0 = 0.;
     'FINSI';
*     'SI' inouv; conti.'ISOTOT' = PRECED.'ISOTOT'.NSOR;'FINS';
     'SI' ('NON' ('EXIS' PRECED 'MESH_ISO'));
         PRECED.'MESH_ISO' = 'TABLE';
         PRECED.'MESH_ISO'. 0 = 0.;
     'FINSI';
*     'SI' inouv; conti.'MESH_ISO' = PRECED.'MESH_ISO'.NSOR;'FINS';
     'SI' ('NON' ('EXIS' PRECED 'MESH'));
         PRECED.'MESH' = 'TABLE';
         PRECED.'MESH'. 0 = 0.;
     'FINSI';
*     'SI' inouv; conti.'MESH' = PRECED.'MESH'.NSOR;'FINS';
  'FINSI';
  'FINSI';
  'FINSI';
*--------- initialisation de table pour non-local HELM
  'SI' WTAB.'NLOC' ;
     'SI' ('EGA' WTAB.'NON_LOCAL' 'HELM');
        WTAB.'HELMHOLTZ' = 'TABLE' ;
        MOLVIA = 'EXTR' WTAB.'NLOC_MODL' 'NLOC' ;
        NHELM = 'DIME' MOLVIA ;
        WTAB.'HELMHOLTZ' . 'N_VARI_NL'= NHELM ;
        GEOHELM = 'EXTR' WTAB.'NLOC_MODL' 'MAIL' ;
        MAHELM = 'REDU' WTAB.MA_TOTAL WTAB.'NLOC_MODL' ;
        DDVA = 'EXTR' MAHELM 'COVA' ;
*
        'REPE' BH NHELM ;
          WTAB.'HELMHOLTZ'. &BH  = 'TABLE' ;
          LEMO  = 'EXTR' MOLVIA &BH ;
          WTAB.'HELMHOLTZ'. &BH. 'NOM' = LEMO ;
          'SI' ('EXIS' DDVA LEMO) ;
             WTAB.'HELMHOLTZ'. &BH. 'CTE' = FAUX ;
          'SINON' ;
             WTAB.'HELMHOLTZ'. &BH. 'CTE' = VRAI ;
          'FINSI' ;
          MOPRE = 'EXTR' LEMO 1 3 ;
          'SI' ('NEG' MOPRE 'ERF') ;
             LEMOD = 'MODE' GEOHELM 'THERMIQUE' 'ISOTROPE' ;
          'SINON' ;
             'SI' ( 'NEG' ('VALE' 'DIME') 3 );
               'ERRE' 'formulation non-locale indisponible' ;
             'FINSI' ;
             LEMOD = 'MODE' GEOHELM 'THERMIQUE' 'ANISOTROPE' ;
          'FINSI' ;
          WTAB.'HELMHOLTZ'. &BH . 'H_MODELE' = LEMOD ;
          'SI' ('EGA' &BH 1 ) ;
             WTAB.'HELMHOLTZ'. 'H_CAPA' =
                'CAPA' LEMOD ('MATE' LEMOD 'RHO' 1. 'C' 1.) ;
          'FINSI' ;
        'FIN' BH ;
     'FINSI';
  'FINSI';
*---------- deformations inelastiques et table de sortie
  'SI' ('EXISTE' PRECED 'DEFORMATIONS_INELASTIQUES');
      TABINT=INDEX (PRECED.'DEFORMATIONS_INELASTIQUES');
      IND0=TABINT.('DIME' TABINT);
      DEI_COUR=PRECED.'DEFORMATIONS_INELASTIQUES' . IND0;
  'SINON';
      DEI_COUR = 'ZERO' MO_TOT 'DEFINELA';
      'SI' ('EXIS' TABSAUV  'DEFIN');
         'SI' TABSAUV.'DEFIN';
            PRECED.'DEFORMATIONS_INELASTIQUES'='TABLE';
            PRECED.'DEFORMATIONS_INELASTIQUES' . 0=DEI_COUR;
         'FINSI';
      'FINSI';
  'FINSI';
'SI' inouv;  conti.'DEFORMATIONS_INELASTIQUES'=DEI_COUR;'FINS';
*-----------  deformations  totales et table de sortie
  'SI' ('EXISTE' PRECED 'DEFORMATIONS');
      TABINT=INDEX (PRECED.'DEFORMATIONS');
      IND0=TABINT.('DIME' TABINT);
      DEF_COUR=PRECED.'DEFORMATIONS' . IND0;
  'SINON';
      DEF_COUR = 'ZERO' MO_TOT 'DEFORMATIONS';
      'SI' ('EXIS' TABSAUV  'DEFTO');
         'SI' TABSAUV.'DEFTO';
            PRECED.'DEFORMATIONS'='TABLE';
            PRECED.'DEFORMATIONS' . 0=DEF_COUR;
         'FINSI';
      'FINSI';
  'FINSI';
'SI' inouv;  conti.'DEFORMATIONS'=DEF_COUR;'FINS';
* SP : initialisation DFGRAD reportee dans UNPAS :
  WTAB.'DFGRAD' = 'MOT' 'INCONNU' ;
* en cas de chargement thermique initialisation de wtab.tet1 et wtab.tet2
  'SI' ( 'EXIS' WTAB.'CHARGEMENT' 'T');
     WTAB.'TET1' = 'TIRE' WTAB.'CHARGEMENT' 'T' TEMP0;
     WTAB.'TET2' = WTAB.'TET1';
  'FINSI';
* en cas de chargement de deformations initiales initialisation
*  de defor1 etdefor2
  'SI' WTAB.'CHAR_DEFI';
     WTAB.'DEFOR1'='TIRE' WTAB.'CHARGEMENT' 'DEFI' WTAB.'TEMPS0';
     WTAB.'DEFOR2'= WTAB.'DEFOR1';
   'FINSI';
'FINSI';

************************************************************************
*-----------pour la thermique
************************************************************************
'SI' WTAB.'FOR_THER';
*---------- initialisation de la temperatuure et table de sortie
  'SI' ('EXISTE' PRECED 'TEMPERATURES');
     TABINT  = INDEX (PRECED.'TEMPERATURES');
     IND0    = TABINT.('DIME' TABINT );
     TH_COUR = PRECED.'TEMPERATURES' . IND0;
    'SI' (IND0 '>EG' 2) ;
       WTAB.'TET0'=PRECED.'TEMPERATURES' . (IND0 - 2);
    'FINSI';
  'SINON';
     DDDD = 'ZERO' WTAB.'MOD_T' 'TEMPERAT' ;
     TH_COUR = 'CHANGER' 'CHPO' WTAB.'MOD_T' DDDD;
     PRECED.'TEMPERATURES'    = 'TABL';
     PRECED.'TEMPERATURES'. 0 = TH_COUR;
  'FINSI';
  'SI' INOUV ;
     CONTI.'TEMPERATURES' ='CHAN' 'ATTRIBUT' TH_COUR 'NATURE' 'DIFFUS';
  'FINS';

    WTAB.'TET1'   = TH_COUR;
    WTAB.'TET2'   = TH_COUR;
   'SI' ('NON' ('EXIS' PRECED 'REACTIONS_THERMIQUES')) ;
     'SI' ('EXIS' PRECED 'BLOCAGES_THERMIQUES') ;
        QTH_COUR ='REAC' PRECED.'BLOCAGES_THERMIQUES' TH_COUR ;
     'SINON' ;
        QTH_COUR ='CHAN' 'CHPO' WTAB.'MOD_T'
                        ('ZERO' WTAB.'MOD_T' 'FORCES') ;
     'FINSI' ;
      PRECED.'REACTIONS_THERMIQUES'     = 'TABL'   ;
      PRECED.'REACTIONS_THERMIQUES' . 0 = QTH_COUR ;
   'FINS' ;
   'SI' inouv;
     conti.'REACTIONS_THERMIQUES' = PRECED.'REACTIONS_THERMIQUES'.NSOR ;
   'FINS';
*----------  initialisation proportions de phase et table sortie
   'SI' WTAB.'PHASE';
      'SI' ( 'EXISTE' PRECED 'PROPORTIONS_PHASE');
         TABINT=INDEX (PRECED.'PROPORTIONS_PHASE');
         IND0=TABINT.('DIME' TABINT);
         PP_COUR=PRECED.'PROPORTIONS_PHASE' . IND0;
      'SINON';
         DDDD= WTAB.'MAT_PHA' 'EXCO' TPHA;
         DDD = EXTRAI WTAB.'MAT_PHA' 'COVA';
         'SI' ( 'EXISTE' DDD 'TPHA');
             DDDD = 'VARI' 'NUAG' WTAB.'MOD_PHA'
                    DDD  WTAB.'CHARGEMENT' 'NOEUD';
         'FINSI';
         DDD=('CHANG' DDDD WTAB.'MOD_PHA' 'NOEUD') 'NOMC' 'T';
         XXXX = 'CHANG' 'CHAM' TH_COUR  WTAB.'MOD_PHA'
                 'NOEUD';XXXX = XXXX 'NOMC' 'T';
         PRECED.'PROPORTIONS_PHASE'='TABL';
         PP_COUR=(MASQ DDD EGINFE XXXX) 'NOMC' 'PPHA';
         PRECED.'PROPORTIONS_PHASE' . 0 =PP_COUR;

      'FINSI';
      'SI' inouv;
         conti.'PROPORTIONS_PHASE'=PP_COUR;
      'FINS';
       WTAB.'PROPPHAS'=PP_COUR;
   'FINSI';
'FINSI';
*'FINSI';

************************************************************************
*-----------pour la metallurgie (T.L. en juin 2018)
************************************************************************
'SI' WTAB.'FOR_METALLU' ;
* PROPORTIONS de PHASES metallurgique
  'SI' ('EXIS' PRECED 'PROPORTIONS_PHASES') ;
    TAB_PROP ='INDE' (PRECED.'PROPORTIONS_PHASES');  'COMM' 'TAB_PROP est une table dan le quel on range les NOMS des indexs de la table PRECED.PROPORTIONS_PHASES';
    IND0     = TAB_PROP. ('DIME' TAB_PROP)        ;  'COMM' 'IND0  = le nom du dernier index de la table PRECED.PROPORTIONS_PHASES';
    CHMET0   = PRECED.'PROPORTIONS_PHASES'.IND0   ;  'COMM' 'CHMET0= la valeur du dernier indice de PRECED.PROPORTIONS_PHASES';
  'SINO' ;
*    Valeurs par defaut : ZERO pour toutes les phases sauf la premiere : 1.D0
     CHMET0  ='ZERO' WTAB.'MOD_MET' 'VARINTER';
     LISCO   ='EXTR' WTAB.'MOD_MET' 'VARI';
     CMP1    ='EXCO' CHMET0 ('EXTR' LISCO 1) ('EXTR' LISCO 1);
     CHMET0  = CHMET0 + (CMP1 + 1.D0);
     PRECED.'PROPORTIONS_PHASES'    ='TABL' ;
     PRECED.'PROPORTIONS_PHASES'. 0 = CHMET0;
  'FINS' ;
  'SI' INOUV ;
     conti . 'PROPORTIONS_PHASES' = CHMET0 ;
  'FINS' ;
'FINSI' ;
************************************************************************
*----------------- Initialisations pour la diffusion ------------------*
************************************************************************
'SI' WTAB.'FOR_DIFF' ;
  'SI' ('EXIS' PRECED 'CONCENTRATIONS') ;
    TABIND0  = 'INDE' (PRECED.'CONCENTRATIONS') ;
    IND0     = TABIND0 . ('DIME' TABIND0) ;
    CHCO0    = PRECED. 'CONCENTRATIONS' . IND0 ;
  'SINO' ;
    CHCO0    = 'ZERO' WTAB. 'MOD_DIF' 'DEPLACEMENTS' ;
    CHCO0    = 'CHAN' 'CHPO' WTAB. 'MOD_DIF' CHCO0 ;
    PRECED.'CONCENTRATIONS'    = 'TABL' ;
    PRECED.'CONCENTRATIONS'. 0 = CHCO0 ;
  'FINS' ;
  'SI' INOUV ;
    CONTI . 'CONCENTRATIONS' ='CHAN' 'ATTRIBUT' CHCO0  'NATURE' 'DIFFUS';
  'FINS' ;
  WTAB . 'CO1' = CHCO0 ; WTAB . 'CO2' = CHCO0 ;
  'SI' ('NON' ('EXIS' PRECED 'REACTIONS_DIFFUSIONS')) ;
    'SI' ('EXIS' PRECED 'BLOCAGES_DIFFUSIONS') ;
      QDI_COUR = 'REAC' PRECED.'BLOCAGES_DIFFUSIONS' CHCO0 ;
    'SINON' ;
      QDI_COUR = 'CHAN' 'CHPO' WTAB.'MOD_DIF'
        ('ZERO' WTAB.'MOD_DIF' 'FORCES') ;
    'FINSI' ;
    PRECED.'REACTIONS_DIFFUSIONS'   = 'TABL' ;
    PRECED.'REACTIONS_DIFFUSIONS' . 0 = QDI_COUR ;
  'FINS' ;
  'SI' INOUV ;
    CONTI . 'REACTIONS_DIFFUSIONS' =
      PRECED . 'REACTIONS_DIFFUSIONS'. NSOR ;
  'FINS' ;
'FINS' ;

*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
PRECED.'ESTIMATION'='COPIER' conti;
'FINP';


