$$$$ SIGNDERI
* SIGNDERI  PROCEDUR  BP208322  16/05/24    21:15:17     8932
DEBPROC SIGNDERI  EVSIG1*'EVOLUTIO' ;
*
*   PROC{DURE SIGNDERI
*   ------------------
*   EV02 =  SIGNDERI  EVO1
*
*   LA DIRECTIVE SIGNDERI  AJOUTE UNE DROITE @ L'ACC{LEROGRAMME POUR
*   AVOIR LES VITESSE ET D{PLACEMENT NULS AUX TEMPS INITIAL ET FINAL.
*
*   EVO1  :  SIGNAL @ CORRIGER        (TYPE EVOLUTION)
*   EVO2  :  SIGNAL CORRIG{           (TYPE EVOLUTION)
*
LRSIG = 'EXTR' EVSIG1 'ORDO' 1 ;   NNSIG = 'DIME' LRSIG  ;
*
LRACC   = 'EXTR' EVSIG1 'ORDO' 1 ;  NP = 'DIME' LRACC  ;
LRTPS   = 'EXTR' EVSIG1 'ABSC' 1 ;  TLAST = 'EXTR' LRTPS NP ;
ZDT     = ( 'EXTR' LRTPS 2 ) '-' ( 'EXTR' LRTPS 1 ) ;
LRACC1  = 'ENLE'   LRACC  1   ;  LRACC  = 'ENLE'  LRACC  NP ;
LRTPSMN = 'ENLE'   LRTPS   NP ;  NP = NP '-' 1 ;
EVZ2    =  'EVOL' 'MANU' 'TEMPS' LRTPSMN  ' ' LRACC ;
LRANPN1 =  LRACC '+' LRACC1 ;
*
*          COND. INITIALES
D0 = 0. ;  V0 = 0. ;
VN = V0 ;  DN = D0 ; ZI = 1 ;
'REPETER' ZLOOP1 ( NP '-' 1 ) ;
     VN = VN '+' ( 'EXTR' LRANPN1  ZI ) ;
     DN = DN '+'  VN  ;
     ZI = ZI '+' 1 ;
'FIN' ZLOOP1 ;
VLAST =  VN '*' ZDT '*' 0.5    ;
DLAST = 0.5 '*' ZDT '*' ( ( DN '*' ZDT ) '+'
( 'EXTR' ( 'INTG' EVZ2 ) 1 ) ) ;
TLAST2 = TLAST '*' TLAST ; TLAST3 = TLAST2 '*' TLAST ;
*
AUX1 = ( ( VLAST '*' TLAST ) '-' ( 2. '*' DLAST ) ) '/'  TLAST3 ;
AUX2 = ( ( 3. '*' DLAST ) '-' ( VLAST '*' TLAST ) ) '/'  TLAST2 ;
AUX5 = 6. '*' AUX1 ; AUX6 = 2. '*' AUX2 ;
LAUX5T = ( 'PROG' NNSIG '*' AUX5 ) '*' LRTPS ;
LAUX6  = 'PROG' NNSIG '*' AUX6 ;
LRSIGC = LRSIG '-' LAUX5T '-' LAUX6 ;  'REMP' LRSIGC 1 0. ;
EVSIG2 = 'EVOL' 'MANU' 'TEMPS'   LRTPS  ' '   LRSIGC ;
*
'FINPROC' EVSIG2  ;

