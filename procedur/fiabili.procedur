$$$$ FIABILI
* FIABILI   PROCEDUR  CHLOE     01/10/30    21:17:45     4221
debproc fiabili   tab*table;
*
nfois1=dime tab . points_initiaux;
si (non (exis tab resu));
tab . resu =table;
finsi;
tab . npar=2;
verbose=faux;
nbflim = dime (tab . fct_limite);
nbva = dime (tab .  param_va);
S3=-0.7071067811865475d0;
si (non (exis tab . resu limite));
      tab . resu . limite = table;
      repe bou4 nbflim;
      tab . resu . limite . &bou4 = prog;
      fin bou4;
      repe bou5 nbva;
           tab . resu . (extr &bou5 (tab . noms_des_variables))
           =prog;
     fin bou5;
     tab . resu . distance = prog;
finsi;

comp1=0;
comp2=0;
si (non (exis tab exploration));
tab . exploration = faux;
finsi;
si (tab . exploration);
nbx = dime tab . resu . limite . 1;
it1=0;
xdmin=1e6;
ndmin=0;
xproc=0;
xdist2=1e30;
mdist2=1e30;
xprocb=0;
xprocc=0;
xdist2=1e30;
mdist2b=1e30;
mdist2c=1e30;

repe bnbx nbx;
aa=extr &bnbx tab . resu . limite . 1;
si (<eg aa 0);
   bb=extr &bnbx tab . resu . distance;
   si ( <  bb xdmin);
      xdmin=bb;
      ndmin=&bnbx;
   finsi;
finsi;
fin bnbx;
*
x=prog;
repe bou5 nbva;
     x=x et (prog (extr ndmin
     tab . resu . (extr &bou5 (tab . noms_des_variables))));
fin bou5;
_tab12 = table;
_tab12 . param_va= tab . param_va;
_tab12 . noms_des_variables = tab . noms_des_variables;
_tab12 . transformation_directe = vrai;
_tab12 . points_espace_physique = x;
si (exis tab matcov);
   nataf  _tab12  ;
   lr_a1 = _tab12 . matrice_de_decorrelation;
   u =_tab12 . points_espace_reference;
sinon;
   nataf    _tab12;
   u  =_tab12 . points_espace_reference;
finsi;
repe bnbx nbx;

si (non (ega &bnbx ndmin));
   x1=prog;
   repe bou5 nbva;
      x1=x1 et ( prog (extr &bnbx
      tab . resu . (extr &bou5 (tab . noms_des_variables))));
   fin bou5;
   _tab12 . points_espace_physique = x1;
   si (exis tab matcov);
      nataf  _tab12  ;
      lr_a1 = _tab12 . matrice_de_decorrelation;
      u1 =_tab12 . points_espace_reference;
   sinon;
      nataf    _tab12;
      u1  =_tab12 . points_espace_reference;
    finsi;
    u2=u1 - u;
    aux=0;
    dist2=0;
    repe bou5 nbva;
        aa=extr &bou5 u2;
*
        dist2=dist2 + (aa * aa);
    fin bou5;
    si (> dist2 0);
    si (> (extr &bnbx tab . resu . limite . 1) 0);
    si (< dist2  mdist2);
ee=extr &bnbx tab . resu . distance;
ff=extr ndmin tab . resu . distance;
    si (< ee ff);
       mdist2=dist2;
       xproc=&bnbx;
    finsi;
    finsi;
    sinon;
       si (< dist2 mdist2b);
       mdist2b=dist2;
       xprocb=&bnbx;
       finsi;
       si (> dist2 mdist2b);
       si (< dist2 mdist2c);
          mdist2c=dist2;
          xprocc=&bnbx;
       finsi;
       finsi;
    finsi;
    finsi;
finsi;
fin bnbx;
*
   xvar1 = table;
   xvar2 = table;
   xvar3 = table;
   xvar4 = table;

repe bou5 nbva ;
si (>  ndmin 0);
xvar1 . &bou5 = extr ndmin
tab . resu . (extr &bou5 tab . noms_des_variables);
finsi;
si (> xproc 0);
xvar2 . &bou5 = extr xproc
tab . resu . (extr &bou5 tab . noms_des_variables);
finsi;
si (> xprocb 0);
xvar3 . &bou5 = extr xprocb
tab . resu . (extr &bou5 tab . noms_des_variables);
finsi;
si (> xprocc 0);
xvar4 . &bou5 = extr xprocc
tab . resu . (extr &bou5 tab . noms_des_variables);
finsi;
si (>  ndmin 0);
si (> xproc 0);
si (< xvar1 . &bou5 xvar2 . &bou5);
   remp &bou5 tab . param_optimisation . vxmax (xvar2 . &bou5);
   tab . resu . reprise . vxmax . &bou5 =xvar2 . &bou5;
finsi;
si (> xvar1 . &bou5 xvar2 . &bou5);
   remp &bou5 tab . param_optimisation . vxmin (xvar2 . &bou5);
   tab . resu . reprise . vxmin . &bou5 =xvar2 . &bou5;
finsi;
finsi;
si (> xprocb 0);
si (< xvar1 . &bou5 xvar3 . &bou5);
   remp &bou5 tab . param_optimisation . vxmax (xvar3 . &bou5);
   tab . resu . reprise . vxmax . &bou5 =xvar3 . &bou5;
finsi;
si (> xvar1 . &bou5 xvar3 . &bou5);
   remp &bou5 tab . param_optimisation . vxmin (xvar3 . &bou5);
   tab . resu . reprise . vxmin . &bou5 =xvar3 . &bou5;
finsi;
finsi;
aa = extr &bou5 tab . param_optimisation . vxmin;
bb = extr &bou5 tab . param_optimisation . vxmax;
si (> xprocc 0);
si (< aa xvar4 . &bou5);
si (> xvar1 . &bou5 xvar4 . &bou5);
   remp &bou5 tab . param_optimisation . vxmin (xvar4 . &bou5);
   tab . resu . reprise . vxmin . &bou5 =xvar4 . &bou5;
finsi;
finsi;
si (> bb xvar4 . &bou5);
si (< xvar1 . &bou5 xvar4 . &bou5);
   remp &bou5 tab . param_optimisation . vxmax (xvar4 . &bou5);
   tab . resu . reprise . vxmax . &bou5 =xvar4 . &bou5;
finsi;
finsi;
finsi;
finsi;
fin bou5;
tab . resu . reprise . dernier =entier (ndmin / (nbva + 1));
finsi;






repe bou1 nfois1;
*
ii=&bou1;
si (non (exis tab . resu  reprise));
tab . resu . ii = table;
tab . resu . ii . indfiab=prog;
tab . resu . ii . proba_defaillance = prog;
repe bbou nbflim;
tab . resu . ii .  &bbou =table;
tab . resu . ii . &bbou . limite =prog;
tab . resu . ii . &bbou . grad_limite =table;
repe bbu1 nbva;
tab . resu . ii . &bbou . grad_limite . &bbu1 =prog;
fin bbu1;
fin bbou;
tab . resu . grad_distance =table;
repe bou5 nbva;
tab . resu . grad_distance . &bou5 = prog ;
fin bou5;
finsi;

*
*tab1 . vx0 contient les valeurs initiales des variables
*dans l espace centre reduit
tab1 =table vecteur;
tab1 . vx0 =table vecteur;
tab1 . vf = table vecteur;
tab1 . mc = table vecteur;
tab1 . vxmin = table vecteur;
tab1 . vxmax = table vecteur;
tab1 . vcmax = table vecteur;
*
repe bouc nbflim ;
   tab1 . mc . &bouc = table vecteur;
fin bouc;
si (exis (tab  . param_optimisation) methode);
   tab1 . methode = tab  . param_optimisation . methode  ;
finsi;
si (exis (tab  . param_optimisation)  t0);
   tab1 . t0 =tab  . param_optimisation . t0;
finsi;
si (exis (tab  . param_optimisation)  s0);
   tab1 . s0 =tab  . param_optimisation . s0;
finsi;
si (exis tab max_iteration);
    tab1 . maxiteration =  tab .param_optimisation . maxiteration;
finsi;
si (exis tab   max_iteration);
    nfois = tab .  max_iteration;
sinon;
    nfois=100;
finsi;
************************************************************
*initialisation de tab1 . vxo, tab1 . vxmin; tab1 . vxmax
************************************************************
repeter bou5 nbva;
    tab1 . vx0 . &bou5     = extr &bou5 (tab . points_initiaux . ii);
    tab1 .  vxmin . &bou5
         = extr &bou5 (tab . param_optimisation . vxmin);
    tab1 .  vxmax . &bou5
         = extr &bou5 (tab . param_optimisation . vxmax);
fin bou5;
si (exis (tab . resu)  'REPRISE');
si (ega tab . resu . reprise . dernier 0);
        der = entier (  (dime  tab . resu . limite . 1) / (nbva + 1));
sinon;
        der = tab . resu . reprise . dernier;
finsi;
   repe bou5 nbva;

        tab1 . vx0 . &bou5 = extr der
        tab . resu . ii . (extr &bou5 (tab . noms_des_variables));
        tab1 .  vxmin . &bou5
             = tab . resu . reprise . vxmin . &bou5;
        tab1 .  vxmax . &bou5
             = tab . resu . reprise . vxmax . &bou5;
   fin bou5;
   idmin =  tab . resu . ii . atteint_en;
   zrepri = vrai;

sinon;

      tab . resu . reprise = table ;
      tab . resu . reprise . vxmin = table;
      tab . resu . reprise . vxmax = table;
      der=0;
      zrepri=faux;
finsi;

************************************************************
*auxvf contient d(distance) / du
************************************************************
 _tab12=table;
_tab12 . transformation_directe = vrai;
 _tab12 . points_espace_physique = tab . points_initiaux . ii;
 _tab12 . param_va= tab . param_va;
_tab12 . noms_des_variables = tab . noms_des_variables;
si (existe tab matcov);
    _tab12 . matcov= tab . matcov;
    nataf   _tab12 ;
    lr_a= _tab12 . matrice_de_decorrelation;
    u = _tab12 . points_espace_reference ;
sinon;
    nataf   _tab12;
    u = _tab12 . points_espace_reference ;
finsi;
************************************************************
*calcul de la jacobienne de nataf du/dx
************************************************************
*matrice identité dans bb et son équivalent en listreel dans lbb
aux = prog 1;
repeter bou7 nbva;
   j = &bou7 - 1;
   si (neg j 0);
      repeter bou8 j;
         aux = aux et (prog 0);
      fin bou8;
   finsi;
   si (neg &bou7 1);
      aux= aux et (prog 1);
   finsi;
   j=nbva - &bou7;
   si (neg j 0);
      repeter bou9 j;
         aux= aux et (prog 0);
      fin bou9;
   finsi;
fin bou7;
cc = vale dime;
si (EGA cc 2);
   _p0=0 0;
sinon;
   opti dime 3;
   _p0=0 0 0;
finsi;
_mp0=manu poi1 _p0;
aa=tab . noms_des_variables;
*bb jamais utilise
bb=manu rigidite _mp0 aa dual aa aux ;
lbb=aux * 1.;
*lbb pas tres utile non plus
*fin matrice identite
**
*




**bb1 matrice triangulaire qui contient sur sa diagonale
** les dui/dxi du cas independant

************************************************************
*initialisation de tab1 . mc et tab1 . vcmax
************************************************************

************************************************************
*initialisation des tableaux resultats
************************************************************

************************************************************
*initialisation de , tab1 . vxmin; tab1 . vxmax
************************************************************
tmin=table;
dmin=1e6;
dproc=1e50;
zstrat=faux;
zstra1=faux;
zstra2=faux;
si (zrepri);
zbouc=vrai;
prem=faux;
sinon;
zbouc=faux;
prem=vrai;
finsi;
detect=faux;
iproc=0;
oldidmin=0;
oldiproc=0;
xder=1;
xder1=0;
xder2=0;
xder3 = 0;
************************************************************
repe bou10  nfois ;
************************************************************
*
*      tab1 = exce tab1;
*
************************************************************
* on essaye de reperer le flip-flop
*recuperation des variables dans tab1;
*on remplit les valeurs des fonctions et de leurs derivees
*
*d 'abord la distance
*
*
_aux=prog;
repe bou25 nbva;
    _aux=_aux et (prog (  tab1 . vx0 . &bou25));
fin bou25;
x=_aux;
_tab12 . transformation_directe = vrai;
_tab12 . points_espace_physique = x;
si (exis tab matcov);
   nataf  _tab12  ;
   lr_a1 = _tab12 . matrice_de_decorrelation;
   u =_tab12 . points_espace_reference;
sinon;
   nataf    _tab12;
   u  =_tab12 . points_espace_reference;
finsi;
*
aux=0;
repeter bou2  nbva;
   auxx=extr &bou2 u;
   aux=aux+ (auxx * auxx);
fin bou2;
* calcul de la distance
aux=aux ** 0.5;
tab1 . vf . 0 =aux ;
*
* on recherche si on a deja trouve cette distance
*
si (> (&bou10 + der) (xder + 1 ));
repe xb11 ((&bou10 + der) - (xder + 1));
   aux1=extr ((&bou10 + der) - &xb11) tab . resu . ii . indfiab ;
  si (< (abs((aux - aux1)/aux))  1e-50);
xtab=table;
xnor=0;
repe bou5 nbva;
xtab . &bou5 =extr ((&bou10 + der) - &xb11)
 tab . resu . ii . (extr &bou5 (tab . noms_des_variables));
xnor=xnor +
 (abs( (xtab . &bou5 - tab1 . vx0 . &bou5)/tab1 . vx0 . &bou5));
fin bou5;
      si (< xnor 1e-50);
         xbouc=( &xb11);
         zbouc=vrai;
         detect=vrai;
      quitter xb11;
      finsi;
   finsi;
fin xb11;
finsi;
*
si (zbouc);
   zbouc=faux;
   xtab1=table;

repe bou5 nbva;
   xtab1 . &bou5 = 0;
fin bou5;
si ( (<eg idmin xder )
*et (ega xder1 1) et (ega xder2 1)
);
repe xb12 ((&bou10 + der) -  1 ) ;
   si (> (extr &xb12  tab . resu . ii . 1  . limite)  0);
      dist2=0;
      repe bou5 nbva;
         dist2=dist2 + ((extr  idmin
tab . resu . ii . (extr &bou5 (tab . noms_des_variables)))
-
(extr  &xb12
tab . resu . ii . (extr &bou5 (tab . noms_des_variables)))) ** 2;
     fin bou5;
     si (< dist2 dproc);
        dproc=dist2;
        iproc=&xb12;
     finsi;
   finsi;
fin xb12;
   si ((> iproc 0 ) et
(non ((ega oldidmin idmin) et (ega oldiproc iproc)))
*et (faux)
*ou (ega xbouc 1)
);
*
   repe bou5 nbva;
        tab1 . vx0 . &bou5 =((extr idmin
        tab . resu . ii . (extr &bou5 (tab . noms_des_variables)))
+
           (extr iproc
 tab . resu . ii . (extr &bou5 (tab . noms_des_variables)))) * 0.5;
   fin bou5;
oldidmin=idmin;
oldiproc=iproc;
   repe bou5 nbva;
      si (< tab1 . vx0 . &bou5 tab1 . vxmin . &bou5);
         tab1 . vxmin . &bou5 = tab1 . vx0 . &bou5;
      finsi;
      si (> tab1 . vx0 . &bou5 tab1 . vxmax . &bou5);
         tab1 . vxmax . &bou5 = tab1 . vx0 . &bou5;
      finsi;
   fin bou5;
si (> xder1 1);
 si (< tab1 . t0 0.9);
   tt=mini (prog (tab1 . t0 + 0.1) 1);
 sinon;
    si (>eg tab1 . t0 0.95);
       mess 'on a du mal a converger';
       quitter bou10;
    finsi;
   tt=mini (prog (tab1 . t0 + 0.1) 1);
 finsi;

   tab1 . t0 =tt;
   tab  . param_optimisation . t0 =tt ;
 xder1 = 1;
finsi;
xder1=xder1 + 1;
   xder=(&bou10 + der);
   sinon;
   repe xb1 xbouc;
      repe bou5 nbva;
         xtab . &bou5 = extr ( (&bou10 + der) - (&xb1 ))
         tab . resu . ii . (extr &bou5 (tab . noms_des_variables));
        xtab1 . &bou5=xtab1 . &bou5  + (xtab . &bou5 / xbouc);
     fin bou5;
   fin xb1;
   repe bou5 nbva;
       tab1 . vx0 . &bou5 = xtab1 . &bou5;
   fin bou5;
   xder=(&bou10 + der);
si (> xder2 1);
 si (< tab1 . t0 0.9);
   tt=mini (prog (tab1 . t0 + 0.1) 1);
 sinon;
    si (>eg tab1 . t0 0.95);
       mess 'on a du mal a converger';
       quitter bou10;
    finsi;
   tt=mini (prog (tab1 . t0 + 0.1) 1);
 finsi;

   tab1 . t0 =tt;
   tab  . param_optimisation . t0 =tt ;
 xder2 = 0;
finsi;
xder2=xder2 + 1;
   finsi;
sinon;
   repe bou5 nbva;
        tab1 . vx0 . &bou5 = extr idmin
        tab . resu . ii . (extr &bou5 (tab . noms_des_variables));
   fin bou5;
xder=(&bou10 + der);
*
si (> xder3 1);
 si (< tab1 . t0 0.9);
   tt=mini (prog (tab1 . t0 + 0.1) 1);
 sinon;
    si (>eg tab1 . t0 0.95);
       mess 'on a du mal a converger';
       quitter bou10;
    finsi;
   tt=mini (prog (tab1 . t0 + 0.1) 1);
 finsi;

   tab1 . t0 =tt;
   tab  . param_optimisation . t0 =tt ;
 xder3 = 1;
finsi;
xder3=xder3 + 1;
xder1 = 0;
xder2 = 0;
finsi;
*         tab . param_optimisation . methode = mov;


_aux=prog;
repe bou25 nbva;
    _aux=_aux et (prog (  tab1 . vx0 . &bou25));
fin bou25;
x=_aux;
_tab12 . transformation_directe = vrai;
_tab12 . points_espace_physique = x;
si (exis tab matcov);
   nataf  _tab12  ;
   lr_a1 = _tab12 . matrice_de_decorrelation;
   u =_tab12 . points_espace_reference;
sinon;
   nataf    _tab12;
   u  =_tab12 . points_espace_reference;
finsi;
*
aux=0;
repeter bou2  nbva;
   auxx=extr &bou2 u;
   aux=aux+ (auxx * auxx);
fin bou2;
* calcul de la distance
aux=aux ** 0.5;
tab1 . vf . 0 =aux ;
finsi;

*
auxvf=prog;
repeter bou3  nbva;
   auxx=extr &bou3 u;
   si (ega (tab1 . vf . 0) 0.);
      auxvf= auxvf et (prog 1);
   sinon;
      auxvf=auxvf et (prog ( (auxx) / (tab1 . vf . 0)));
   finsi;
fin bou3;

si (exis  tab matcov);
  bb_a1=manu rigidite _mp0 aa dual aa quel lr_a1 ;
    aux2 = manu chpo _mp0 1 (extr 1 aa) (extr 1 u) nature discret;
 si (neg nbva 1);
    repe bou12 (nbva - 1);
     aux2 = aux2 et
  ( manu chpo _mp0 1  (extr (&bou12 + 1) aa) (extr (&bou12 + 1) u)
     nature discret);
     fin bou12;
 finsi;
   u1 = bb_a1 * aux2;
   u2 =prog;
  repe bou13 nbva;
   u2=u2 et (prog (extr u1 _p0 (extr &bou13 aa))) ;
  fin bou13;
sinon;
  u2=u   ;
finsi;

aux1 =prog;
repeter bou6 nbva;
aab=extr &bou6 x;
tabz=tab . param_va . &bou6;
  tamp1 = fdens aab tabz;
aab=extr &bou6  u2;
tabz1=table;
tabz1 . typva = loi_normale_standard;
  tamp2 = fdens aab tabz1;
  aux1=aux1 et (prog (tamp1/tamp2));
fin bou6;

************************************************************
  aux2 = manu chpo _mp0 1 (extr 1 aa) (extr 1 aux1) nature discret;
si (neg nbva 1);
    repe bou12 (nbva - 1);
     aux2 = aux2 et
( manu chpo _mp0 1  (extr (&bou12 + 1) aa) (extr (&bou12 + 1) aux1)
     nature discret);
     fin bou12;
finsi;
************************************************************
aux3=prog;
repe bo40 nbva;
  repe bo41 nbva;
   toto = (extr (nbva  * (&bo40 - 1) + &bo41) lbb) *
   (extr &bo40 aux1);
    aux3 = aux3 et (prog toto);
   fin bo41;
fin bo40;
bb1=manu rigidite _mp0 aa dual aa aux3 ;
************************************************************
*calcul des derivees de la distance
************************************************************
aux4 = manu chpo _mp0 1 (extr 1 aa) (extr 1 auxvf) nature discret;
  si (neg nbva 1);
    repe bou12 (nbva - 1);
     aux4 = aux4 et
   (manu chpo _mp0 1  (extr (&bou12 + 1) aa) (extr (&bou12 + 1) auxvf)
     nature discret);
     fin bou12;
  finsi;
   aux5b=bb1 * aux4;
si (existe tab matcov);
   aux5= resou bb_a1 aux5b;
   aux5b=aux5;
finsi;
   repeter bou5 nbva;
     aux6 = extr aux5b _p0 (extr &bou5 tab . noms_des_variables)  ;
     tab1 . vf .  &bou5 = aux6;
     tab . resu . grad_distance . &bou5 =
tab . resu . grad_distance . &bou5 et (prog aux6);
   fin bou5;
************************************************************************
*****************************************************************
 tab . resu . distance = tab . resu . distance et
(  prog tab1 . vf . 0) ;
      repe bou5 nbva;
          si (ega &bou5 1);
             comp1=comp1 + 1;
          finsi;
           tab . resu . (extr &bou5 (tab . noms_des_variables))
           =
           tab . resu . (extr &bou5 (tab . noms_des_variables))
           et (prog (extr &bou5 x));
     fin bou5;
si (non (existe  tab  grad_fct_limite ));
   h1=0.00001;
   lrx1=prog nbva * 0.;
   lr2=prog;
   REPETER bou5 nbva;
      lrx2=lrx1 * 1.;
      var = tab1 . vx0 . &bou5;
      var1=abs (var * h1);
      remp lrx2 &bou5 var1;
      x1 =x + lrx2;
          si (ega &bou5 1);
             comp1=comp1 + 1;
          finsi;
          repe bou5b nbva;
             tab . resu . (extr &bou5b (tab . noms_des_variables))
              =
             tab . resu . (extr &bou5b (tab . noms_des_variables))
             et (prog (extr &bou5b x1));
          fin bou5b;

      _tab12 . transformation_directe = vrai;
      _tab12 . points_espace_physique = x1;
      si (exis tab matcov);
         nataf  _tab12  ;
         lr_a1 = _tab12 . matrice_de_decorrelation;
         u =_tab12 . points_espace_reference;
      sinon;
         nataf    _tab12;
         u  =_tab12 . points_espace_reference;
      finsi;
*
      aux=0;
      repeter bou2  nbva;
      auxx=extr &bou2 u;
      aux=aux+ (auxx * auxx);
      fin bou2;
* calcul de la distance
      aux=aux ** 0.5;
      tab . resu . distance = tab . resu . distance et
       (prog aux);
   fin bou5;
finsi;
****************************************************************
repeter bou4 nbflim;
aux = texte (tab . fct_limite . &bou4) ;
auxl= aux (x) ;
tab1 . mc . &bou4 . 0=auxl;
tab .resu . ii . &bou4 . limite
         =tab . resu . ii .  &bou4 . limite et (prog auxl);

tab . resu . limite . &bou4 =
tab . resu . limite . &bou4 et (prog auxl);

si (ega &bou10 1);
   tmin . &bou4=abs(auxl);
   indmin=1;
finsi;
si (ega (&bou10 + der) 1);
   tmin . &bou4=abs(auxl);
   indmin=1;
   idmin= 0;
si (< auxl 0);
   dmin = tab1 . vf . 0;
   idmin=1 ;
finsi;
finsi;
si (< auxl 0);
si (< tab1 . vf . 0  dmin);
dmin = tab1 . vf . 0;
idmin= (&bou10 + der);
finsi;
finsi;
si (< (abs(auxl)) tmin . &bou4);
tmin . &bou4 = abs(auxl);
indmin= (&bou10 + der);
finsi;
si (non (existe  tab  grad_fct_limite ));
h1=0.00001;
lrx1=prog nbva * 0.;
lr2=prog;
REPETER bou5 nbva;
lrx2=lrx1 * 1.;
var = tab1 . vx0 . &bou5;
var1=abs (var * h1);
remp lrx2 &bou5 var1;
x1 =x + lrx2;
auxl1=aux ( x1);
tab . resu . limite . &bou4 =
tab . resu . limite . &bou4 et (prog auxl1);
lr2=lr2 et ( prog  ((auxl1 - auxl)/var1));
fin bou5;
lisr2=lr2;
sinon;
aux = texte (tab . grad_fct_limite . &bou4) ;
lisr2 = aux (x) ;
finsi;
repeter bou5 nbva;
tab1 . mc . &bou4 . &bou5 = extr &bou5 lisr2;
tab . resu . ii . &bou4 . grad_limite . &bou5 =
tab . resu . ii . &bou4 . grad_limite . &bou5 et
 (prog (extr &bou5 lisr2));
fin bou5;
tab1 . vcmax . &bou4 = extr (tab . param_optimisation . vcmax) &bou4;
ny=dime (tab .resu . ii . &bou4 . limite);
si (> ny (tab . npar ));
si ( (> auxl (abs(extr (ny - (tab . npar))
 tab .resu . ii . &bou4 . limite))) et
(non (ega (&bou10 + der) (indmin + 2)))
);
*si ((> idmin 1) et (> ny (idmin + 2) )
*);
   zstrat=vrai;
   zstra1=vrai;
   zstra2=vrai;
finsi;
finsi;
fin bou4 ;



tab . resu . ii . indfiab  =tab . resu . ii . indfiab
et (prog (tab1 . vf . 0));
si (EGA (&bou10 + der) 1);
   repeter bou11 nbva;
     tab . resu . ii . (extr &bou11 (tab . noms_des_variables))
      = prog (tab1 . vx0 . &bou11);
   fin bou11;
sinon;
    repeter bou11 nbva;
      tab . resu . ii . (extr &bou11 (tab . noms_des_variables))
      =tab . resu . ii . (extr &bou11 (tab . noms_des_variables))
      et ( prog (tab1 . vx0 . &bou11));
   fin bou11;
finsi;
*

************************************************************
*mise en oeuvre du changement de strategie
*
* mise a jour , tab1 . vxmin; tab1 . vxmax
************************************************************
si (zstrat);
   si (prem);
      xder=(&bou10 + der);
      nx1=idmin - 1;
      nx2=idmin;
      si (ega nx1 0);
         nx1=(&bou10 + der) - 1;
         nx2=(&bou10 + der);
      finsi;
      prem=faux;
      toto=1;
      tab1 . vf . 0 = dmin;
remp (tab . resu . ii . indfiab) (&bou10 + der) dmin;
      repe bou5 nbva;
         tab1 . vf . &bou5 =extr idmin
           tab . resu . grad_distance . &bou5;
remp (tab . resu . grad_distance . &bou5)
 (&bou10 + der) tab1 . vf . &bou5 ;
         tab1 . vx0 .&bou5 =extr idmin
         tab . resu . ii . (extr &bou5 (tab . noms_des_variables));
remp (tab . resu . ii . (extr &bou5 (tab . noms_des_variables)))
 (&bou10 + der) tab1 . vx0 .&bou5 ;
      fin bou5;
      repe bou4 nbflim;
           tab1 . mc . &bou4 . 0=extr idmin
               tab .resu . ii . &bou4 . limite;
remp (tab .resu . ii . &bou4 . limite) (&bou10 + der)
                     tab1 . mc . &bou4 . 0;
           repe bou5 nbva;
              tab1 . mc . &bou4 . &bou5 = extr idmin
              tab . resu . ii . &bou4 . grad_limite . &bou5;
remp (tab . resu . ii . &bou4 . grad_limite . &bou5) (&bou10 + der)
 tab1 . mc . &bou4 . &bou5;
           fin bou5;
      fin bou4;
   sinon;
      si (ega toto 1);
         nx1=nx2;
         nx2=(&bou10 + der);
         toto=toto + 1;
      sinon;
         nx1=(&bou10 + der) - 1;
         nx2=(&bou10 + der) ;
      finsi;
   finsi;
   nlim=1;
   xlim1=extr nx1 tab . resu . ii . nlim . limite;
   xlim2=extr nx2 tab . resu . ii . nlim . limite;
   xdist1=extr nx1 tab . resu . ii . indfiab;
   xdist2=extr nx2 tab . resu . ii . indfiab;
   xvar1 = table;
   xvar2 = table;
   xvar3=table;
   repe bou5 nbva;
      xvar1 . &bou5 = extr nx1
      tab . resu . ii . (extr &bou5 (tab . noms_des_variables));
      xvar2 . &bou5 = extr nx2
      tab . resu . ii . (extr &bou5 (tab . noms_des_variables));
      xvar3 . &bou5 = extr idmin
      tab . resu . ii . (extr &bou5 (tab . noms_des_variables));
   fin bou5;
   si (>eg 0 (xlim1 * xlim2));
      si (< xlim1 0);
         si (< xdist1 xdist2);
            repe bou5 nbva;
               si (<  xvar1 . &bou5 xvar2 . &bou5);
****                  tab1 .  vxmax . &bou5 =xvar2 . &bou5;
               sinon;
****                  tab1 .  vxmin . &bou5 =xvar2 . &bou5;
               finsi;
            fin bou5;
         sinon;
            repe bou5 nbva;
               si (<  xvar1 . &bou5 xvar2 . &bou5);
                  si (> xvar3 . &bou5 xvar1 . &bou5);
                     tab1 .  vxmin . &bou5 =xvar1 . &bou5;
                  finsi;
               sinon;
                  si (< xvar3 . &bou5 xvar1 . &bou5);
                     tab1 .  vxmax . &bou5 =xvar1 . &bou5;
                  finsi;
               finsi;
            fin bou5;
         finsi;
      sinon;
         si (< xdist1 xdist2);
            repe bou5 nbva;
               si (<  xvar1 . &bou5 xvar2 . &bou5);
                  si (> xvar3 . &bou5 xvar1 . &bou5);
                     tab1 .  vxmin . &bou5 =xvar1 . &bou5;
                  finsi;
               sinon;
                  si (< xvar3 . &bou5 xvar1 . &bou5);
                     tab1 .  vxmax . &bou5 =xvar1 . &bou5;
                  finsi;
               finsi;
            fin bou5;
         sinon;
            repe bou5 nbva;
               si (<  xvar1 . &bou5 xvar2 . &bou5);
****                  tab1 .  vxmax . &bou5 =xvar2 . &bou5;
               sinon;
****                  tab1 .  vxmin . &bou5 =xvar2 . &bou5;
               finsi;
            fin bou5;
         finsi;
      finsi;
   sinon;
* les points sont de part et d autre de la frontiere
    si (< xlim1 0);
         si (< xdist1 xdist2);
            repe bou5 nbva;
               si (<  xvar1 . &bou5 xvar2 . &bou5);
****                  tab1 .  vxmax . &bou5 =xvar2 . &bou5;
               sinon;
****                  tab1 .  vxmin . &bou5 =xvar2 . &bou5;
               finsi;
            fin bou5;
         sinon;
            repe bou5 nbva;
               si (<  xvar1 . &bou5 xvar2 . &bou5);
                  si (> xvar3 . &bou5 xvar1 . &bou5);
                     tab1 .  vxmin . &bou5 =xvar1 . &bou5;
                  finsi;
               sinon;
                  si (< xvar3 . &bou5 xvar1 . &bou5);
                     tab1 .  vxmax . &bou5 =xvar1 . &bou5;
                  finsi;
               finsi;
            fin bou5;
         finsi;
      sinon;
         si (< xdist1 xdist2);
            repe bou5 nbva;
               si (<  xvar1 . &bou5 xvar2 . &bou5);
                  si (> xvar3 . &bou5 xvar1 . &bou5);
                     tab1 .  vxmin . &bou5 =xvar1 . &bou5;
                  finsi;
               sinon;
                  si (< xvar3 . &bou5 xvar1 . &bou5);
                     tab1 .  vxmax . &bou5 =xvar1 . &bou5;
                  finsi;
               finsi;
            fin bou5;
         sinon;
            repe bou5 nbva;
               si (<  xvar1 . &bou5 xvar2 . &bou5);
****                  tab1 .  vxmax . &bou5 =xvar2 . &bou5;
               sinon;
****                  tab1 .  vxmin . &bou5 =xvar2 . &bou5;
               finsi;
            fin bou5;
         finsi;
      finsi;
    finsi;
finsi;

************************************************************
************************************************************
************************************************************



**
si( (> (&bou10 + der) 1) et( non (detect)));
   si (ega  (tab1 . vf . 0) 0.);
      crit=abs ((extr ((&bou10 + der) - 1) (tab . resu . ii . indfiab))
           - (tab1 . vf . 0));
   sinon;
      crit=
          abs ((extr ((&bou10 + der) - 1 ) (tab . resu . ii . indfiab))
          - (tab1 . vf . 0) / (tab1 . vf . 0));
   finsi;
sinon;
   crit=1;
finsi;
ax1 =-1 * (tab1 . vf . 0) * S3;
tab . resu . ii . proba_defaillance =
tab . resu . ii . proba_defaillance et (prog ((1 - (erf ax1))*0.5d0 ));
*
tab . resu . ii . facteurs_de_sensibilite=
u / (tab1 . vf . 0);
si (exis  tab matcov);
   aux2=prog;
   aux4=prog;
   repe bac1 nbva;
      aux3=0;
      repe bac2 nbva;
         auxa=extr ((&bac1 - 1) * (nbva) + &bac2) lr_a1;
         auxb=1. / (extr ( &bac1) aux1);
         aux2= aux2 et (prog (auxa * auxb));
         aux3=aux3+((auxa * auxb)*(auxa * auxb));
      fin bac2;
      aux4=aux4 et (prog (aux3**0.5));
   fin bac1;
   bb_1=manu rigidite _mp0 aa dual aa aux2 ;
   aux5=prog;
   tib=table;
   repe bac1 nbva;
      si (ega &bac1 1);
         au2 = manu chpo _mp0 1
             (extr 1 aa) (extr 1 aux4) nature discret;
      sinon;
         au2 = manu chpo _mp0 1 (extr 1 aa) (0.) nature discret;
      finsi;
      repe bou12 (nbva - 1);
         si (ega &bac1 (&bou12 + 1));
            au2 = au2 et
            ( manu chpo _mp0 1  (extr (&bou12 + 1) aa)
            (extr (&bou12 + 1) aux4) nature discret);
         sinon;
             au2 = au2 et
             ( manu chpo _mp0 1  (extr (&bou12 + 1) aa) (0.)
             nature discret);
         finsi;
      fin bou12;
      au3 = resou bb_1 au2;
      tib . &bac1 = au3;
  fin bac1;
  vgam=prog;
  ax=0;
  repe bggf nbva;
     aux=0;
     repe bgf nbva;
        auxc =extr &bgf tab . resu . ii . facteurs_de_sensibilite;
        auxb = extr (tib . &bgf) _p0 (extr &bggf aa);
        aux=aux + (auxc * auxb);
     fin bgf;
       vgam=vgam et (prog aux);
       ax=ax + (aux**2);
  fin bggf;
  ax1 = ax**0.5;
  vgam=vgam / ax1;
  tab . resu . ii . vecteurs_des_sensibilites=vgam;
finsi;
*
si (non (ega xder ((&bou10 + der) - 1)));
si (existe tab critere);
   si (<eg crit tab . critere) ;
      si (non (ega idmin ((&bou10 + der) - 1))) ;
      quitter fiabili;
      finsi;
   finsi;
sinon;
   si (<eg crit 1e-6);
      si (non (ega idmin ((&bou10 + der) - 1))) ;
      quitter fiabili;
      finsi;
   finsi;
finsi;
finsi;
detect=faux;
      tab . resu . reprise . dernier = (&bou10 + der);
      repe bou5 nbva;
      tab . resu . reprise . vxmin . &bou5 = tab1 . vxmin . &bou5;
      tab . resu . reprise . vxmax . &bou5 = tab1 . vxmax . &bou5;
      fin bou5;
      si (> idmin 0);
      tab . resu . ii . indice_fiabilite = extr idmin
      tab . resu . ii . indfiab;
      tab . resu . ii . atteint_en = idmin;
      finsi;
************************************************************
*
mess 'iteration ' (&bou10 + der) 'distance = '  tab1 . vf . 0
 'limite = ' tab1 . mc . 1 . 0 ;
si (verbose);
repe bou5 nbva;
mess '6 tab1 . vxmin . &bou5=' tab1 . vxmin . &bou5
'tab1 . vx0 . &bou5=' tab1 . vx0 . &bou5
'tab1 . vxmax . &bou5=' tab1 . vxmax . &bou5;
fin bou5;
finsi;
      tab1 = exce tab1;
*
************************************************************
fin bou10;
fin bou1;



finproc tab;



