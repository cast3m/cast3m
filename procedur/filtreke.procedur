$$$$ FILTREKE
* FILTREKE  PROCEDUR  MAGN      15/07/27    21:15:04     8592
*
* VERSION DU 16-12-97
*

 DEBP FILTREKE ;
 ARGU RX*TABLE ;
* Filtre sur K et Epsilon
* - Echelle de vitesse (K**0.5) inférieure à une fraction (alfk)
*   de Uref (vitesse caractéristique) (alfk=1 pour l'instant)
*   Uref=max(UN,U0)
*  - K > K0
*  - Epsilon tel que l'echelle de longueur reste inférieure
*   à (L0/a) où L0 = diamètre enceinte et a=f(Re)
*   => Nut < Uref*L0/a

 rv=rx.'EQEX' ;
 iarg=rx.'IARG' ;
 NASTOK = rv.'NAVISTOK' ;

 'SI' (('EGA' NASTOK 0) ou ('EGA' IARG 2)) ;

* Ancien Filtre sur K et Epsilon
*- Echelle de vitesse (K**0.5) inférieure à une fraction (alfk)
* de U0 (vitesse caractéristique) (alfk=1 pour l'instant)
* K > 0  Epsilon tel que l'echelle de longueur reste inférieure
* à L0 diamètre enceinte
*   => Nut < U0*L0

 si( non ( ega iarg 2)) ;
 mess 'Procedure FILTREKE : nombre d arguments incorrect ' iarg ;
 quitter FILTREKE  ;
 finsi ;
 si ( ega ('TYPE' rx.'ARG1') 'MOT     ') ;
 U1=rv.'INCO'.(rx.'ARG1') ;
 sinon ;
 si ( ega ('TYPE' (rx.'ARG1')) 'FLOTTANT') ;
 U1=rx.'ARG1' ;
 sinon ;
 mess 'Procedure FILTREKE : type argument 1 invalide ' ;
 quitter FILTREKE ;
 finsi ;
 finsi ;

 si ( ega ('TYPE' rx.'ARG2') 'MOT     ') ;
 L0=rv.'INCO'.(rx.'ARG2') ;
 sinon ;
 si ( ega ('TYPE' (rx.'ARG2')) 'FLOTTANT') ;
 L0=rx.'ARG2' ;
 sinon ;
 mess 'Procedure FILTREKE : type argument 2 invalide ' ;
 quitter FILTREKE ;
 finsi ;
 finsi ;


 nic=dime (rx.'LISTINCO') ;
 si( non ( ega nic 2)) ;
 mess 'Procedure FILTREKE : nombre d inconnues incorrect ' nic ;
 quitter FILTREKE ;
 finsi ;
 nomi1=extr 1 (rx.'LISTINCO');
 nomi2=extr 2 (rx.'LISTINCO');
 nom1= mot (text (chai nomi1)) ;
 nom2= mot (text (chai nomi2)) ;

 en=rv.'INCO'.nom2 ;
 kn=rv.'INCO'.nom1 ;
*Rec=100.;
 k0 = 1.e-10 ;

*lcu1=extr u1 'COMP'         ;
*mdu2=u1 lcu1 'PSCA' u1 lcu1 ;
*mdu=mdu2 ** 0.5 ;
*Re=kops (kops (kops mdu '*' L0) '/' nu) '+' (Rec / 10.) ;
*a= exp (kops Rec '/' Re ) ;

 mdu2=u1*u1 ;
 a=0.09 ;

 kn=kops kn '|<' k0 ;
 kn=kops kn '>|' mdu2 ;

 E0= kops (kops kn '**' 1.5) '*' (a / L0) ;
 en=kops en '|<' E0 ;

 rv.'INCO'.'EN'=en ;
 rv.'INCO'.'KN'=kn ;

 si( non ( ega NASTOK 0 ) ) ;
 as2 ama1  = 'KOPS' 'MATRIK' ;
 RESPRO as2 ama1 ;
 finsi ;

'QUITTER' FILTREKE ;
'FINSI'  ;

 si( non ( ega iarg 4)) ;
 mess 'Procedure FILTREKE : nombre d arguments incorrect ' iarg ;
 quitter FILTREKE  ;
 finsi ;
 si ( ega ('TYPE' rx.'ARG1') 'MOT     ') ;
 U1=rv.'INCO'.(rx.'ARG1') ;
 sinon ;
 si ( ega ('TYPE' (rx.'ARG1')) 'FLOTTANT') ;
 U1=rx.'ARG1' ;
 sinon ;
 mess 'Procedure FILTREKE : type argument 1 invalide ' ;
 quitter FILTREKE ;
 finsi ;
 finsi ;

 si ( ega ('TYPE' rx.'ARG2') 'MOT     ') ;
 L0=rv.'INCO'.(rx.'ARG2') ;
 sinon ;
 si ( ega ('TYPE' (rx.'ARG2')) 'FLOTTANT') ;
 L0=rx.'ARG2' ;
 sinon ;
 mess 'Procedure FILTREKE : type argument 2 invalide ' ;
 quitter FILTREKE ;
 finsi ;
 finsi ;

 si ( ega ('TYPE' rx.'ARG3') 'MOT     ') ;
 NU=rv.'INCO'.(rx.'ARG3') ;
 sinon ;
 si ( ega ('TYPE' (rx.'ARG3')) 'FLOTTANT') ;
 NU=rx.'ARG3' ;
 sinon ;
 mess 'Procedure FILTREKE : type argument 3 invalide ' ;
 quitter FILTREKE ;
 finsi ;
 finsi ;

 si ( ega ('TYPE' rx.'ARG4') 'MOT     ') ;
 UN=rv.'INCO'.(rx.'ARG4') ;
 sinon ;
 si ( ega ('TYPE' (rx.'ARG4')) 'CHPOINT') ;
 UN=rx.'ARG4' ;
 sinon ;
 mess 'Procedure FILTREKE : type argument 4 invalide ' ;
 quitter FILTREKE ;
 finsi ;
 finsi ;


 nic=dime (rx.'LISTINCO') ;
 si( non ( ega nic 2)) ;
 mess 'Procedure FILTREKE : nombre d inconnues incorrect ' nic ;
 quitter FILTREKE ;
 finsi ;

 nomi1=extr 1 (rx.'LISTINCO');
 nomi2=extr 2 (rx.'LISTINCO');
 nom1= mot (text (chai nomi1)) ;
 nom2= mot (text (chai nomi2)) ;

 en=rv.'INCO'.nom2 ;
 kn=rv.'INCO'.nom1 ;

 Rec=100.;
 k0 = 1.e-10 ;
 cnu=0.09;

 lcu=extr un 'COMP'       ;
 mdu=un lcu 'PSCA' un lcu ;
 mdu=mdu ** 0.5 ;

 Re=kops (kops (kops mdu '*' L0) '/' nu) '+' (Rec / 10.) ;
 a= exp (kops Rec '/' Re ) ;

 mdu = kops mdu '|<' u1 ;
 mdu2= kops mdu '*' mdu ;

 kn=kops kn '|<' k0 ;
 kn=kops kn '>|' mdu2 ;

 E0= kops (kops kn '**' 1.5) '*' (a / L0) ;
 en=kops en '|<' E0 ;

 rv.'INCO'.nom2=en ;
 rv.'INCO'.nom1=kn ;

 as2 ama1  = 'KOPS' 'MATRIK' ;
 RESPRO as2 ama1 ;

 FINPROC ;


