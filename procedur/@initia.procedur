$$$$ @INITIA
* @INITIA   PROCEDUR  KICH      99/05/31    21:15:08     3569
DEBP @INITIA ttt*TABLE ;

*-----------------------------------------------------------------------
* @INITIA : initialise le tableau de calcul en
*          - stockant les conditions aux limites (blocages + rigidite)
*            et les contraintes initiales (mises a 0)
*          - initialisant a 0 les deformations plastiques, variables
*            internes ...
*          - resolvant le probleme elastique a l'iteration 0
*-----------------------------------------------------------------------

  ttt . 'DEPLACEMENTS'            = tabl ;
  ttt . 'DEFORMATIONS'            = tabl ;
  ttt . 'CONTRAINTES'             = tabl ;
  ttt . 'DEFORMATIONS_PLASTIQUES' = tabl ;
  ttt . 'VARIABLES_INTERNES'      = tabl ;
  ttt . 'CONTRAINTES_PLASTIQUES'  = tabl ;
  ttt . 'FORCES_PLASTIQUES'       = tabl ;
  ttt . 'CRITERE_PLASTICITE'      = tabl ;
  ttt . 'CONVERGENCE'             = tabl ;
  si ((vale DIME) ega 2) ;
    ttt . EP2D = tabl ;
    ttt . VA2D = tabl ;
  finsi ;
  si ((vale DIME) ega 3) ;
    ttt . EP3D = tabl ;
    ttt . VA3D = tabl ;
  finsi ;

*** stockage des donnees

  ttt . 'BLOCAGES_MECANIQUES'   = (ttt . 'BLOCAGES_MECANIQUES') et
                                  (rigi (ttt . 'MODELE')
                                  (ttt . 'CARACTERISTIQUES')) ;
  ttt . 'CONTRAINTES_INITIALES' = zero (ttt . 'MODELE') CONTRAIN ;

*** initialisation des tableaux de calcul

  ttt . 'CONVERGENCE'             . 0 = FAUX ;
*  ttt . 'DEFORMATIONS_PLASTIQUES' . 0 = zero (ttt . 'MODELE') DEFORMAT ;
  ttt . 'DEFORMATIONS_PLASTIQUES' . 0 = zero (ttt . 'MODELE') DEFINELA ;
  ttt . 'VARIABLES_INTERNES'      . 0 = zero (ttt . 'MODELE') VARINTER ;
 lm2 = extr ttt . modele deformat ;
 lm1 = extr ttt . 'DEFORMATIONS_PLASTIQUES' . 0 comp ;
 def_ut = changer comp ttt . 'DEFORMATIONS_PLASTIQUES' . 0 lm1 lm2 ;
 def_ut = changer def_ut type 'DEFORMATIONS' ;
*  ttt . 'CONTRAINTES_PLASTIQUES'  . 0 = (ttt . 'MODELE')
*                   (hook (ttt . 'MODELE') (ttt . 'CARACTERISTIQUES')) *
*                   (ttt . 'DEFORMATIONS_PLASTIQUES' . 0) ;
  ttt . 'CONTRAINTES_PLASTIQUES'  . 0 = (ttt . 'MODELE')
                   (hook (ttt . 'MODELE') (ttt . 'CARACTERISTIQUES')) *
                  def_ut  ;
  ttt . 'FORCES_PLASTIQUES'       . 0 = bsig (ttt . 'MODELE')
                   (ttt . 'CONTRAINTES_PLASTIQUES' . 0) ;

  si ((vale DIME) ega 2) ;
*    ttt . EP2D . 0 = zero (MOD . 1) DEFORMAT ;
    ttt . EP2D . 0 = zero (MOD . 1) DEFINELA ;
    ttt . VA2D . 0 = zero (MOD . 1) VARINTER ;
  finsi ;
  si ((vale DIME) ega 3) ;
*    ttt . EP3D . 0 = zero (MOD . 1) DEFORMAT ;
    ttt . EP3D . 0 = zero (MOD . 1) DEFINELA ;
    ttt . VA3D . 0 = zero (MOD . 1) VARINTER ;
  finsi ;

*** solution elastique a l'iteration 0

  ttt . 'DEPLACEMENTS' . 0 = reso (ttt . 'BLOCAGES_MECANIQUES')
                                  (ttt . 'CHARGEMENT') ;
  ttt . 'DEFORMATIONS' . 0 = epsi (ttt . 'MODELE')
                                  (ttt . 'DEPLACEMENTS' . 0) ;
  ttt . 'CONTRAINTES'  . 0 = sigm (ttt . 'MODELE')
                                  (ttt . 'CARACTERISTIQUES')
                                  (ttt . 'DEPLACEMENTS' . 0) ;

FINP ttt ;

