$$$$ MRCSHELL
* MRCSHELL  PROCEDUR  AF221230  16/11/03    21:15:12     9139
DEBPROC MRCSHELL TYP_CAL1*'MOT     '
   TAB_IN*'TABLE' TOL_1*'FLOTTANT'
   L_ELE1/'LISTENTI';
*
* --------------------------------------------------------
*  Procedure MRCSHELL
*    Computation of security coef Lambda
*
*  Develeppers:
*    Alberto FRAU
*    DEN/DANS/DM2S/SEMT/EMSI
*    Nicolas ILE
*    DEN/DANS/DM2S/SEMT/EMSI
*
*  INPUT:
*    TYP_CAL1:       Calculation option
*                          'RECTANGLE'
*                          'ELLIPSOIDE'
*    TAB_IN.'MAILLAGE':                Maillage du voile [MAILLAGE]
*    TAB_IN.'EFFORT_SEISME':           MCHAML de la matrice
*                                      representant l'enveloppe des
*                                      efforts sismiques (voir SISSIB)
*    TAB_IN.'EFFORT_STATIQUE':         MCHAML des efforts statiques qui
*                                      agissent sur le voile
*                                      (issu EFFMARTI)
*    TAB_IN.'CARACTERISTIQUES_EXTERNE':MCHAML contenant les
*                                      caracteristiques de la couche
*                                      externe selon le modele de MARTI
*                                      (voir EFFMARTI):
*                                     'RHO1' taux d'acier direction 1
*                                     'RHO2' taux d'acier direction 2
*                                     'ENRO' Enrobage
*    TAB_IN.'CARACTERISTIQUES_INTERNE':MCHAML contenant les
*                                      caracteristiques de la couche
*                                      interne selon le modele de MARTI
*                                      (voir EFFMARTI):
*                                     'RHO1' taux d'acier direction 1
*                                     'RHO2' taux d'acier direction 2
*                                     'ENRO' Enrobage
*    TAB_IN.'CARACTERISTIQUES_CORE':  MCHAML contenant les
*                                     caracteristiques et le coeficient
*                                     pour la couche intermediaire
*                                     selon le modele de MARTI
*                                     'H' Epaisseur Totale
*                                     'RHOT' taux d'acier transversale
*                                     'COTH' Facteur de cisaillement
*    TAB_IN.'FC_BET':                 Resistance caracteristique beton
*                                       [FLOTTANT]
*    TAB_IN.'GAM_C':                  Coef gammac  1.5/1.2 EC2/EC8
*                                       [FLOTTANT]
*    TAB_IN.'ALP_C':                  Coef alpa    1.0     EC2
*                                       [FLOTTANT]
*    TAB_IN.'NU_C':                   Coef nu      0.6*(1-250/fck) EC2
*                                       [FLOTTANT]
*    TAB_IN.'FS_ACI':                 resistance caracteristique de l'acier
*                                       [FLOTTANT]
*    TAB_IN.'GAM_S':                  Coef gammas  1.15 EC2
*                                       [FLOTTANT]
*    TOL_1:          Tollerance [FLOTTANT]
*    L_ELE1:         Liste des elements sur lesquels on veut sortir les
*                    graphiques des surfaces limites et des enveloppes
*                    (sans ou avec covariance - RECTANGLE ou ELLISPOIDE)
*                    pour les couches externes, interne et
*                    intermediaire (pas necessaire) [LISTREEL]
*  OUTPUT:
*   TT2:             Table Contenant:
*    .'CH_LAMBDA_E': MCHAML les valeurs des marges pour la couche
*                           externe (composent LAME)
*    .'CH_LAMBDA_I': MCHAML des valeurs des marges pour la couche
*                           interne (composent LAMI)
*    .'CH_LAMBDA_C': MCHAML des valeurs des marges pour la couche
*                           intermediaire (composent LAMC)
*    .'CARTE_E':     Maillage avec deux colorations pour indiquer les
*                    element avec une marge superieure à 1 ou
*                    inferieure (couche externe):
*                      ROUGE   elements ->  Lambda < 1.0
*                      VERT    elements ->  Lambda > 1.0
*    .'CARTE_I':     Maillage avec deux colorations pour indiquer les
*                    element avec une marge superieure à 1 ou
*                    inferieure (couche interne):
*                      ROUGE   elements ->  Lambda < 1.0
*                      VERT    elements ->  Lambda > 1.0
*    .'CARTE_C':     Maillage avec deux colorations pour indiquer les
*                    element avec une marge superieure à 1 ou
*                    inferieure (couche intermediaire):
*                      ROUGE   elements ->  Lambda < 1.0
*                      VERT    elements ->  Lambda > 1.0
*    .'GRAPHIQUES':  Sous table pour les outils de graphique:
*      .I.                    Ieme element
*        .'LIMITE_E':            Surface limite de la couche externe
*                                [MAILLAGE]
*        .'LIMITE_E':            Surface limite de la couche interne
*                                [MAILLAGE]
*        .'LIMITE_C':            Surface limite de la couche
*                                intermediaire [MAILLAGE]
*        .'RECTANGLE_E':         enveloppe couche externe sans prise
*                                en compte des covariances
*                                (methode RECTANGLE) [MAILLAGE]
*        .'RECTANGLE_I':         enveloppe couche interne sans prise
*                                en compte des covariances
*                                (methode RECTANGLE) [MAILLAGE]
*        .'RECTANGLE_I':         enveloppe couche intermediaire
*                                sans prise en compte des covariances
*                                (methode RECTANGLE) [MAILLAGE]
*        .'ELLIPSOIDE_E':        enveloppe couche externe avec prise
*                                en compte des covariances
*                                (methode ELLIPSOIDE) [MAILLAGE]
*        .'ELLIPSOIDE_I':        enveloppe couche interne avec prise
*                                en compte des covariances
*                                (methode ELLIPSOIDE) [MAILLAGE]
*        .'ELLIPSOIDE_I':        enveloppe couche intermediaire
*                                avec prise en compte des covariances
*                                (methode ELLIPSOIDE) [MAILLAGE]
*        .'RECTANGLE_E_AUG':     enveloppe couche externe sans prise
*                                en compte des covariances amplifie par
*                                la marge LAME
*                                (methode RECTANGLE) [MAILLAGE]
*        .'RECTANGLE_I_AUG':     enveloppe couche interne sans prise
*                                en compte des covariances amplifie par
*                                la marge LAMI
*                                (methode RECTANGLE) [MAILLAGE]
*        .'RECTANGLE_C_AUG':     enveloppe couche intermediaire sans prise
*                                en compte des covariances amplifie par
*                                la marge LAMC
*                                (methode RECTANGLE) [MAILLAGE]
*        .'ELLIPSOIDE_E_AUG':    enveloppe couche externe avec prise
*                                en compte des covariances amplifie par
*                                la marge LAME
*                                (methode ELLIPSOIDE) [MAILLAGE]
*        .'ELLIPSOIDE_I_AUG':    enveloppe couche interne avec prise
*                                en compte des covariances amplifie par
*                                la marge LAMI
*                                (methode ELLIPSOIDE) [MAILLAGE]
*        .'ELLIPSOIDE_C_AUG':    enveloppe couche intermediaire avec
*                                prise en compte des covariances
*                                amplifie par la marge LAMC
*                                (methode ELLIPSOIDE) [MAILLAGE]
*
* --------------------------------------------------------
*
MAI_V = TAB_IN.'MAILLAGE';
CH_SEI1 = TAB_IN.'EFFORT_SEISME';
CH_STA1 = TAB_IN.'EFFORT_STATIQUE';
CH_CARE = TAB_IN.'CARACTERISTIQUES_EXTERNE';
CH_CARI = TAB_IN.'CARACTERISTIQUES_INTERNE';
CH_CARC = TAB_IN.'CARACTERISTIQUES_CORE';
*D_VOI1 = TAB_IN.'D';
FCBET1 = TAB_IN.'FC_BET';
GAMC = TAB_IN.'GAM_C';
ALPC1 = TAB_IN.'ALP_C';
NUC1 = TAB_IN.'NU_C';
FSACI1 = TAB_IN.'FS_ACI';
GAMS1 = TAB_IN.'GAM_S';
*
'MESS' ;
'MESS' '**************************************************************';
'MESS' '            Calculs des coef de securite                      ';
'MESS' '**************************************************************';
'MESS';
*
*  controle of input data
'SI' (NEG (TYP_CAL1)  'ELLIPSOIDE');
  'SI' (NEG (TYP_CAL1)  'RECTANGLE');
    'MESS' ' ERROR....Type de calcul erronee!!!';
    'QUIT' LAM_RCM;
  'FINSI';
'FINSI';
'SI' (('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 1) 'C11E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 2) 'C22E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 3) 'C33E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 4) 'C12E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 5) 'C13E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 6) 'C23E'));
'SINON';
  'SI' (('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 7) 'C11I') 'ET'
        ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 8) 'C22I') 'ET'
        ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 9) 'C33I') 'ET'
        ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 10) 'C12I') 'ET'
        ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 11) 'C13I') 'ET'
        ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 12) 'C23I'));
  'SINON';
    'SI' (('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 13) 'CV11') 'ET'
          ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 14) 'CV22') 'ET'
          ('NEG' ('EXTR' ('EXTR' CH_SEI1 'COMP') 15) 'CV12'));
      'MESS' ' ERROR....MCHAML seisme';
      'MESS' '          composantes erronee!!!';
      'QUIT' LAM_RCM;
    'FINSI';
  'FINSI';
'FINSI';
'SI' (('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 1) 'N11E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 2) 'N22E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 3) 'N12E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 4) 'N11I') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 5) 'N22I') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 6) 'N12I'));
    'MESS' ' ERROR....MCHAML statique';
    'MESS' '          composantes erronee!!!';
'FINSI';
'SI' (('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 1) 'N11E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 2) 'N22E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 3) 'N12E') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 4) 'N11I') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 5) 'N22I') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_STA1 'COMP') 6) 'N12I'));
    'MESS' ' ERROR....MCHAML seisme';
    'MESS' '          composantes erronee!!!';
'FINSI';
'SI' (('NEG' ('EXTR' ('EXTR' CH_CARE 'COMP') 1) 'RHO1') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_CARE 'COMP') 2) 'RHO2') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_CARE 'COMP') 3) 'ENRO'));
    'MESS' ' ERROR....MCHAML caracteristiques couche externe';
    'MESS' '          composantes erronee!!!';
'FINSI';
'SI' (('NEG' ('EXTR' ('EXTR' CH_CARI 'COMP') 1) 'RHO1') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_CARI 'COMP') 2) 'RHO2') 'ET'
      ('NEG' ('EXTR' ('EXTR' CH_CARI 'COMP') 3) 'ENRO'));
    'MESS' ' ERROR....MCHAML caracteristiques couche interne';
    'MESS' '          composantes erronee!!!';
'FINSI';
*
* creation of the table output
TT2 = 'TABLE';
*
* creation of the MCHAML field for the output
CH_LAME = 'VIDE' MCHAML;
CH_LAMI = 'VIDE' MCHAML;
CH_LAMC = 'VIDE' MCHAML;
MAI_REE = 'VIDE' MAILLAGE;
MAI_REI = 'VIDE' MAILLAGE;
MAI_REC = 'VIDE' MAILLAGE;
MODTOT = 'VIDE' MMODEL;
*
* number of element shear wall
N_ELE1 = 'NBEL' MAI_V;
*
*  Ellipsoide methode
'SI' ('EGA' TYP_CAL1 'ELLIPSOIDE');
*------------------ Calcul par l'ellipsoide ---------------------------*
'MESS' ' ------------------------------------------------------------';
'MESS' '                     Methode Ellipsoide';
'MESS' ' ------------------------------------------------------------';
'MESS';
*
* loop for the layer (external or intenal)
I_IE1 = 1;
'REPE' IND_IE1 (3);
*
* I_IE1 = 1 External layer
'SI' (I_IE1 'EGA' 1);
  'MESS';
  'MESS' ' Membrane Exterieure';
'FINSI';
*
* I_IE1 = 2 Internal layer
'SI' (I_IE1 'EGA' 2);
  'MESS';
  'MESS' ' Membrane Interieure';
'FINSI';
*
'SI' (I_IE1 'EGA' 3);
  'MESS';
  'MESS' ' Core';
'FINSI';
*
* loop for the element
I_ELE1 = 1;
'REPE' IND_ELE1 (N_ELE1);
* element I
ELE_VOI1 = MAI_V ELEM I_ELE1;
* extracting the forces and characteristics for the external layer
'SI' (I_IE1 'EGA' 1);
  RHOXS = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'RHO1' 1 1 1;
  RHOYS = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'RHO2' 1 1 1;
  ENR1 =  'EXTR' ('REDU' CH_CARE ELE_VOI1) 'ENRO' 1 1 1;
*
  N11 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C11E' 1 1 1)**(0.5);
  N11N22 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C12E' 1 1 1);
  N11N12 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C13E' 1 1 1);
  N22 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C22E' 1 1 1)**(0.5);
  N22N12 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C23E' 1 1 1);
  N12 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C33E' 1 1 1)**(0.5);
  N110 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N11E' 1 1 1);
  N220 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N22E' 1 1 1);
  N120 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N12E' 1 1 1);
*
* seismic stress
  N11 = ((N11)/((2.0)*(ENR1)));
  N22 = ((N22)/((2.0)*(ENR1)));
  N12 = ((N12)/((2.0)*(ENR1)));
  N11N22 = ((N11N22)/(((2.0)*(ENR1))**(2.0)));
  N11N12 = ((N11N12)/(((2.0)*(ENR1))**(2.0)));
  N22N12 = ((N22N12)/(((2.0)*(ENR1))**(2.0)));
*
* static stress
  N110 = ((N110)/((2.0)*(ENR1)));
  N220 = ((N220)/((2.0)*(ENR1)));
  N120 = ((N120)/((2.0)*(ENR1)));
*
'FINSI';
* extracting the force and characteristics for the internal layer
'SI' (I_IE1 'EGA' 2);
  RHOXS = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'RHO1' 1 1 1;
  RHOYS = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'RHO2' 1 1 1;
  ENR1 =  'EXTR' ('REDU' CH_CARI ELE_VOI1) 'ENRO' 1 1 1;
*
  N11 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C11I' 1 1 1)**(0.5);
  N11N22 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C12I' 1 1 1);
  N11N12 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C13I' 1 1 1);
  N22 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C22I' 1 1 1)**(0.5);
  N22N12 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C23I' 1 1 1);
  N12 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C33I' 1 1 1)**(0.5);
  N110 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N11I' 1 1 1);
  N220 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N22I' 1 1 1);
  N120 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N12I' 1 1 1);
*
* seismic stress
  N11 =    ((N11)/((2.0)*(ENR1)));
  N22 =    ((N22)/((2.0)*(ENR1)));
  N12 =    ((N12)/((2.0)*(ENR1)));
  N11N22 = ((N11N22)/(((2.0)*(ENR1))**(2.0)));
  N11N12 = ((N11N12)/(((2.0)*(ENR1))**(2.0)));
  N22N12 = ((N22N12)/(((2.0)*(ENR1))**(2.0)));
*
* static stress
  N110 =   ((N110)/((2.0)*(ENR1)));
  N220 =   ((N220)/((2.0)*(ENR1)));
  N120 =   ((N120)/((2.0)*(ENR1)));
*
'FINSI';
*
* extracting the force and characteristics for the internal layer
'SI' (I_IE1 'EGA' 3);
  RHOT = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'RHOT' 1 1 1;
  ENR1 =  'EXTR' ('REDU' CH_CARE ELE_VOI1) 'ENRO' 1 1 1;
  ENR2 =  'EXTR' ('REDU' CH_CARI ELE_VOI1) 'ENRO' 1 1 1;
  H_11 = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'H' 1 1 1;
  D_11 = H_11 - ((2.0)*(ENR1)) - ((2.0)*(ENR2));
  CO_TH1 = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'COTH' 1 1 1;
*
  V1 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'CV11' 1 1 1)**(0.5);
  V1V2 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'CV12' 1 1 1);
  V2 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'CV22' 1 1 1)**(0.5);
*
  V10 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'V1T' 1 1 1);
  V20 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'V2T' 1 1 1);
*
* seismic stress
  T1 =    ((V1)/((D_11)));
  T2 =    ((V2)/((D_11)));
  T1T2 = ((V1V2)/(((D_11))**(2.0)));
*
* static stress
  T10 =   ((V10)/((D_11)));
  T20 =   ((V20)/((D_11)));
*
'FINSI';
*
*    Verification Core -----------------------------------------
'SI' (I_IE1 'EGA' 3);
* --------------------------------------------------------------
TTL1 = TABLE;
TTL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
TTL1.'T1'         =  T10;
TTL1.'T2'         =  T20;
TTL1.'FCK'         = FCBET1;
TTL1.'FSK_T'       = FSACI1;
TTL1.'RHO_T'       = RHOT;
TTL1.'GAMMA_C'     = GAMC;
TTL1.'ALPA_C'      = ALPC1;
TTL1.'GAMMA_S'     = GAMS1;
TTL1.'NU_C'        = NUC1;
TTL1.'COT_THETA'     = CO_TH1;
T_ST1 = G_ULTI2D TTL1;
*
'SI' (T_ST1 '<EG' 0.0);
  LAM_FIN = 0.0;
  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                  LAM_FIN '.....Sig0 externe';
  'MESS' TIT1;
  MOD1    = 'MODE' ELE_VOI1 'MECANIQUE' 'ELASTIQUE' 'ISOTROPE';
  MODTOT  = MODTOT 'ET' MOD1;
  CH_LAMC = CH_LAMC 'ET' ('MANU' 'CHML' ELE_VOI1 'LAMC' LAM_FIN);
  MAI_REC = MAI_REC 'ET' (ELE_VOI1 'COUL' 'ROUG');
  OUBL LAM_FIN;
'SINON';

*
* Start of the iteration
P1 = 0. 0. 0.;
P2 = 1. 0. 0.;
P3 = 2. 0. 0.;
*
MAI1 = P1;
*  Matrix X
MATX1 = VIDE 'RIGIDITE'/'RIGIDITE';
MATX1 = MATX1 'ET' ('MANU' 'RIGIDITE' MAI1 (MOTS 'UX' 'UY')
  ('PROG' (T1*T1) T1T2
           T1T2  (T2*T2)));
*
* Static state stress
EF_ST0 = 'MANU' 'CHPO' MAI1 2 'FX' T10 'FY' T20;
EF_ST0 = 'CHAN' 'ATTRIBUT' EF_ST0 'NATURE' 'DISCRET';
*
* Initial Vecteur
ALP_0 =  'MANU' 'CHPO' MAI1 2 'UX' 2.0 'UY' 2.0;
XALP_0 = (MATX1*ALP_0)/(('XTMX' MATX1 ALP_0)**(0.5));
XALP_0 = ('CHAN' ATTRIBUT XALP_0 NATURE DISCRET) + EF_ST0;
SB0 =    ('XTX' (XALP_0 - EF_ST0))**(0.5);
RB0 =     SB0;
LAMB0 =   RB0/SB0;
*
* incremental step
H_VAL1 = (SB0)/(100000.0);
H_VAL2 = (SB0)/(100000.0);
*
* direction used for the ellispoide methode
TB_DIR = 'TABLE';
TB_DIR. 1 = 'MANU' 'CHPO' MAI1 2 'UX'  1.0 'UY'  0.0 ;
TB_DIR. 2 = 'MANU' 'CHPO' MAI1 2 'UX'  0.0 'UY'  1.0 ;
TB_DIR. 3 = 'MANU' 'CHPO' MAI1 2 'UX' -1.0 'UY'  0.0 ;
TB_DIR. 4 = 'MANU' 'CHPO' MAI1 2 'UX'  0.0 'UY'  -1.0;
*
* loop for each direction
I_K1 = 1;
'REPE' IND3 (4);
*
  TAB_ITE = 'TABLE';
  TAB_ITE. 0 = 'TABLE';
  TAB_ITE. 0 . 'ALPA' = ALP_0;
  TAB_ITE. 0 . 'LAMBDA' = LAMB0;
  TAB_ITE. 0 . 'RB' = RB0;
*
  ALP_K = (TB_DIR. I_K1);
  I_M1 = 1;
*  first loop in order to have n_elllips=n_limite
  'REPE' IND2 (200);
*   sauving Lambda for j iteraction
    TAB_ITE. I_M1 = 'TABLE';
    TAB_ITE. I_M1 . 'ALPA' = ALP_K;
*   determination of the stress state for the chosen direction
    XALP_J = (MATX1*ALP_K)/(('XTMX' MATX1 ALP_K)**(0.5));
    XALP_J = ('CHAN' ATTRIBUT XALP_J NATURE DISCRET) + EF_ST0;
*   nomalisez vector of hte rayon of the ellipsoide for the
*   chosen direction
    SBJ = ('XTX' (XALP_J - EF_ST0))**(0.5);
    BJ = (XALP_J - EF_ST0)/(SBJ);
*   rayon of the ellipsoide for the chosen direction
    RBVAL1 = (TAB_ITE.(I_M1 - 1). 'RB');
*   second loop in order to have f=0
    I_I1 = 1;
    REPE IND1 (200);
*     strees state x0, x0+h, x0-h
      VV1 = (RBVAL1 + H_VAL1)*(BJ);
      VV2 = (RBVAL1 - H_VAL1)*(BJ);
      VV3 = (RBVAL1)*(BJ);
      VV1 = ('CHAN' 'ATTRIBUT' VV1 'NATURE' 'DISCRET') + EF_ST0;
      VV2 = ('CHAN' 'ATTRIBUT' VV2 'NATURE' 'DISCRET') + EF_ST0;
      VV3 = ('CHAN' 'ATTRIBUT' VV3 'NATURE' 'DISCRET') + EF_ST0;
*
      T1V1 = 'EXTR' VV1 'FX' MAI1;
      T2V1 = 'EXTR' VV1 'FY' MAI1;

      T1V2 = 'EXTR' VV2 'FX' MAI1;
      T2V2 = 'EXTR' VV2 'FY' MAI1;

      T1V3 = 'EXTR' VV3 'FX' MAI1;
      T2V3 = 'EXTR' VV3 'FY' MAI1;

      'OUBL' VV1;
      'OUBL' VV2;
      'OUBL' VV3;
*     calculation of f and D terms
      TTL1 = TABLE;
      TTL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
      TTL1.'T1'         =  T1V3;
      TTL1.'T2'         =  T2V3;
      TTL1.'FCK'         = FCBET1;
      TTL1.'FSK_T'       = FSACI1;
      TTL1.'RHO_T'       = RHOT;
      TTL1.'GAMMA_C'     = GAMC;
      TTL1.'ALPA_C'      = ALPC1;
      TTL1.'GAMMA_S'     = GAMS1;
      TTL1.'NU_C'        = NUC1;
      TTL1.'COT_THETA'     = CO_TH1;
*
      TTL2 = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
      TTL2.'T1'         =  T1V1;
      TTL2.'T2'         =  T2V1;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_T'       = FSACI1;
      TTL2.'RHO_T'       = RHOT;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'COT_THETA'     = CO_TH1;
*
      TTL3 = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
      TTL3.'T1'         =  T1V2;
      TTL3.'T2'         =  T2V2;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_T'       = FSACI1;
      TTL3.'RHO_T'       = RHOT;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'GAMMA_S'     = GAMS1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'COT_THETA'     = CO_TH1;
*
      F_VAL1 = G_ULTI2D TTL1;
      D_VAL1 = ((G_ULTI2D TTL2) -
            (G_ULTI2D TTL3))/((2.0)*(H_VAL1));
*     controle
      'SI' (('ABS'(F_VAL1)) '<' TOL_1);
*       convergence!!!
        RBJ = RBVAL1;
        'QUIT' IND1;
      'SINON';
        'SI' (I_I1 'EGA' 200);
*         end of loop, we take the last value!!!
          RBJ = RBVAL1;
          'QUIT' IND1;
        'FINSI';
*        Check beetwen 2 values of R (radius)!!!
        'SI' (I_I1 > 2);
          'SI' ((ABS((RBVAL1 - RBVAL2)/(RBVAL1))) < ((TOL_1)*(1.e-10)));
            RBJ = RBVAL1;
            'QUIT' IND1;
          'FINSI';
        'FINSI';
*       case when D is equal to zero
        'SI' (('ABS'(D_VAL1)) < 1.E-16);
          RBVAL2 = RBVAL1;
          RBVAL1 = ((1.1)*(RBVAL1));
        'SINON';
*       otherwise
          RBVAL2 = RBVAL1;
          RBVAL1 = RBVAL1 - ((F_VAL1)/(D_VAL1));
        'FINSI';
      'FINSI';
*
      I_I1 = I_I1 + 1;
    'FIN' IND1;
*   computation of lambda
    LAMBJ = RBJ/SBJ;
    TAB_ITE. I_M1 . 'LAMBDA' = LAMBJ;
    TAB_ITE. I_M1 . 'RB' = RBJ;
    XCOUB1 = (((TAB_ITE. I_M1 .'LAMBDA')*(TAB_ITE. I_M1 .'LAMBDA'))*
           (MATX1));
*   amplified stress state using the lambda coef
    XALP_L = (XCOUB1*ALP_K)/(('XTMX' XCOUB1 ALP_K)**(0.5));
    XALP_L = ('CHAN' ATTRIBUT XALP_L  NATURE DISCRET) + EF_ST0;
*   Dh*ex  ; Dh*ey ; Dh*ez
    DE_HX = 'MANU' 'CHPO' MAI1 2 'FX' H_VAL2 'FY' 0.0 ;
    DE_HY = 'MANU' 'CHPO' MAI1 2 'FX' 0.0 'FY' H_VAL2 ;
*   x0*lam + Dh*ex  ; x0*lam + Dh*ey ; x0*lam + Dh*ez
    VV_HXP = XALP_L + DE_HX;
    VV_HYP = XALP_L + DE_HY;
*   x0*lam + Dh*ex  ; x0*lam + Dh*ey ; x0*lam + Dh*ez
    VV_HXN = XALP_L - DE_HX;
    VV_HYN = XALP_L - DE_HY;
*   x0*lam
    VV_0 = XALP_L;
*
    VV_HXP1 = 'EXTR' VV_HXP 'FX' MAI1;
    VV_HXP2 = 'EXTR' VV_HXP 'FY' MAI1;
    VV_HYP1 = 'EXTR' VV_HYP 'FX' MAI1;
    VV_HYP2 = 'EXTR' VV_HYP 'FY' MAI1;
*
    VV_HXN1 = 'EXTR' VV_HXN 'FX' MAI1;
    VV_HXN2 = 'EXTR' VV_HXN 'FY' MAI1;
    VV_HYN1 = 'EXTR' VV_HYN 'FX' MAI1;
    VV_HYN2 = 'EXTR' VV_HYN 'FY' MAI1;
*
    VV_01 = 'EXTR' VV_HXP 'FX' MAI1;
    VV_02 = 'EXTR' VV_HXP 'FY' MAI1;
*
    TTL2 = TABLE;
    TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
    TTL2.'T1'         =  VV_HXP1;
    TTL2.'T2'         =  VV_HXP2;
    TTL2.'FCK'         = FCBET1;
    TTL2.'FSK_T'       = FSACI1;
    TTL2.'RHO_T'       = RHOT;
    TTL2.'GAMMA_C'     = GAMC;
    TTL2.'ALPA_C'      = ALPC1;
    TTL2.'GAMMA_S'     = GAMS1;
    TTL2.'NU_C'        = NUC1;
    TTL2.'COT_THETA'     = CO_TH1;
    TTL3 = TABLE;
    TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
    TTL3.'T1'         =  VV_HXN1;
    TTL3.'T2'         =  VV_HXN2;
    TTL3.'FCK'         = FCBET1;
    TTL3.'FSK_T'       = FSACI1;
    TTL3.'RHO_T'       = RHOT;
    TTL3.'GAMMA_C'     = GAMC;
    TTL3.'ALPA_C'      = ALPC1;
    TTL3.'GAMMA_S'     = GAMS1;
    TTL3.'NU_C'        = NUC1;
    TTL3.'COT_THETA'     = CO_TH1;
    VAL_X1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL2));
*
    TTL2 = TABLE;
    TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
    TTL2.'T1'         =  VV_HYP1;
    TTL2.'T2'         =  VV_HYP2;
    TTL2.'FCK'         = FCBET1;
    TTL2.'FSK_T'       = FSACI1;
    TTL2.'RHO_T'       = RHOT;
    TTL2.'GAMMA_C'     = GAMC;
    TTL2.'ALPA_C'      = ALPC1;
    TTL2.'GAMMA_S'     = GAMS1;
    TTL2.'NU_C'        = NUC1;
    TTL2.'COT_THETA'     = CO_TH1;
    TTL3 = TABLE;
    TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
    TTL3.'T1'         =  VV_HYN1;
    TTL3.'T2'         =  VV_HYN2;
    TTL3.'FCK'         = FCBET1;
    TTL3.'FSK_T'       = FSACI1;
    TTL3.'RHO_T'       = RHOT;
    TTL3.'GAMMA_C'     = GAMC;
    TTL3.'ALPA_C'      = ALPC1;
    TTL3.'GAMMA_S'     = GAMS1;
    TTL3.'NU_C'        = NUC1;
    TTL3.'COT_THETA'     = CO_TH1;
    VAL_Y1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL2));
*
*   costruction n_limit
    DELTG1 = 'MANU' 'CHPO' MAI1 'UX' ((-1.0)*(VAL_X1))
                            'UY' ((-1.0)*(VAL_Y1));
*
*   variable for the convergence test
    ID1_CON = 0;
*   check on the n_limit
    'SI' ((('XTX' DELTG1)**(0.5)) < 1.E-7);
*     if |n_limit|=0 rotate the chosen direction by 10 degrees
      MATR1 = 'VIDE' 'RIGIDITE'/'RIGIDITE';
      MATR1 = MATR1 'ET'
         ('MANU' 'RIGIDITE' MAI1 ('MOTS' 'UX' 'UY')
            ('PROG'  (COS(10.0)) ((-1.0)*(SIN(10.0)))
                     (SIN(10.0))      (COS(10.0))
                         0.0             0.0        ));
      AAA1 = MATR1*ALP_K;
      DELTG1 = MANU CHPO MAI1 'UX' (EXTR AAA1 MAI1 'FX')
                              'UY' (EXTR AAA1 MAI1 'FY');
    'FINSI';
*   convergence test
    VET_TEST = (TAB_ITE. I_M1 . 'ALPA')
             - (TAB_ITE. (I_M1 - 1) . 'ALPA');
*
    'SI' ((('XTX' VET_TEST)**(0.5)) '<' 0.001);
*     deduction of the final value of Lambda
      'SI' ((TAB_ITE. I_M1 . 'LAMBDA') '>' 0.0);
        'SI' ('NEG' ('TYPE' LAM_FIN) 'FLOTTANT');
          LAM_FIN = (TAB_ITE. I_M1 . 'LAMBDA');
        'SINON';
          'SI' (LAM_FIN '>' (TAB_ITE. I_M1 . 'LAMBDA'));
            LAM_FIN = (TAB_ITE. I_M1 . 'LAMBDA');
          'FINSI';
        'FINSI';
      'FINSI';
      'QUIT' IND2;
    'SINON';
      'SI' (I_M1 'EGA' 200);
        ID1_CON = 1;
        'SI' ((TAB_ITE. I_M1 . 'LAMBDA') '>' 0.0);
          'SI' ('NEG' ('TYPE' LAM_FIN) 'FLOTTANT');
            LAM_FIN = (TAB_ITE. I_M1 . 'LAMBDA');
          'SINON';
            'SI' (LAM_FIN '>' (TAB_ITE. I_M1 . 'LAMBDA'));
              LAM_FIN = (TAB_ITE. I_M1 . 'LAMBDA');
            'FINSI';
          'FINSI';
        'FINSI';
      'SINON';
*       otherwise update the n_limit
        ALP_K = DELTG1/((XTX DELTG1)**(0.5));
      'FINSI';
    'FINSI';
    I_M1 = I_M1 + 1;
  'FIN' IND2;
I_K1 = I_K1 + 1;
'FIN' IND3;

*
*  screen message
'SI' (ID1_CON 'EGA' 0);
  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                    LAM_FIN;
  'MESS' TIT1;
'FINSI';
'SI' (ID1_CON 'EGA' 1);
  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                     LAM_FIN '.....Attention non convergence';

  'SI' ('EGA' ('TYPE' LL_ERRE1) 'LISTENTI');
     LL_ERRE1 = LL_ERRE1 ET ('LECT' I_ELE1);
  'SINON';
     LL_ERRE1 = ('LECT' I_ELE1);
  'FINSI';
'FINSI';
*
'SI' (I_IE1 'EGA' 3);
  MOD1    = 'MODE' ELE_VOI1 'MECANIQUE' 'ELASTIQUE' 'ISOTROPE';
  MODTOT  = MODTOT 'ET' MOD1;
  CH_LAMC = CH_LAMC 'ET' ('MANU' 'CHML' ELE_VOI1 'LAMC' LAM_FIN);
  'SI' (LAM_FIN '<' 1.0);
    MAI_REC = MAI_REC 'ET' (ELE_VOI1 'COUL' 'ROUG');
  'SINON';
    MAI_REC = MAI_REC 'ET' (ELE_VOI1 'COUL' 'VERT');
  'FINSI';
'FINSI';
'OUBL' LAM_FIN;
'OUBL' LAM_FIN2;
'FINSI';
* Verification Externe et interne-------------------------------
'SINON';
* --------------------------------------------------------------
*
* Test about the static state stress
TTL1               = TABLE;
TTL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
TTL1.'S11'         = N110;
TTL1.'S22'         = N220;
TTL1.'S12'         = N120;
TTL1.'FCK'         = FCBET1;
TTL1.'FSK_1'       = FSACI1;
TTL1.'FSK_2'       = FSACI1;
TTL1.'RHO_1'       = RHOXS;
TTL1.'RHO_2'       = RHOYS;
TTL1.'GAMMA_C'     = GAMC;
TTL1.'ALPA_C'      = ALPC1;
TTL1.'NU_C'        = NUC1;
TTL1.'GAMMA_S'     = GAMS1;
*
T_ST1 = G_ULTI2D TTL1;
'SI' (T_ST1 '<EG' 0.0);
  LAM_FIN = 0.0;
  TIT1 = 'CHAINE' '  Element ' I_IE1 ' Lambda='
                  LAM_FIN '.....Sig0 externe';
  'MESS' TIT1;
*
*  results stored in the MCHAML field
  'SI' (I_IE1 'EGA' 1);
    MOD1    = 'MODE' ELE_VOI1 'MECANIQUE' 'ELASTIQUE' 'ISOTROPE';
    MODTOT  = MODTOT 'ET' MOD1;
*    CH_LAME = CH_LAME 'ET' ('MANU' 'CHML' MOD1 'LAME' LAM_FIN);
    CH_LAME = CH_LAME 'ET' ('MANU' 'CHML' ELE_VOI1 'LAME' LAM_FIN);
    'SI' (LAM_FIN '<' 1.0);
      MAI_REE = MAI_REE 'ET' (ELE_VOI1 'COUL' 'ROUG');
    'SINON';
      MAI_REE = MAI_REE 'ET' (ELE_VOI1 'COUL' 'VERT');
    'FINSI';
  'FINSI';
  'SI' (I_IE1 'EGA' 2);
    MOD1    = 'MODE' ELE_VOI1 'MECANIQUE' 'ELASTIQUE' 'ISOTROPE';
    MODTOT  = MODTOT 'ET' MOD1;
*    CH_LAMI = CH_LAMI 'ET' ('MANU' 'CHML' MOD1 'LAMI' LAM_FIN);
    CH_LAMI = CH_LAMI 'ET' ('MANU' 'CHML' ELE_VOI1 'LAMI' LAM_FIN);
    'SI' (LAM_FIN '<' 1.0);
      MAI_REI = MAI_REI 'ET' (ELE_VOI1 'COUL' 'ROUG');
    'SINON';
      MAI_REI = MAI_REI 'ET' (ELE_VOI1 'COUL' 'VERT');
    'FINSI';
  'FINSI';
*
  'OUBL' LAM_FIN;
*
'SINON';
*
* Start of the iteration
P1 = 0. 0. 0.;
P2 = 1. 0. 0.;
P3 = 2. 0. 0.;
*
MAI1 = P1;
*  Matrix X
MATX1 = VIDE 'RIGIDITE'/'RIGIDITE';
MATX1 = MATX1 'ET' ('MANU' 'RIGIDITE' MAI1 (MOTS 'UX' 'UY' 'UZ')
  ('PROG' (N11*N11) N11N22    N11N12
           N11N22  (N22*N22)  N22N12
           N11N12   N22N12  (N12*N12)));
*
* Static state stress
EF_ST0 = 'MANU' 'CHPO' MAI1 3 'FX' N110 'FY' N220 'FZ' N120;
EF_ST0 = 'CHAN' 'ATTRIBUT' EF_ST0 'NATURE' 'DISCRET';
*
* Initial Vecteur
ALP_0 =  'MANU' 'CHPO' MAI1 3 'UX' 2.0 'UY' 2.0 'UZ' 2.0;
XALP_0 = (MATX1*ALP_0)/(('XTMX' MATX1 ALP_0)**(0.5));
XALP_0 = ('CHAN' ATTRIBUT XALP_0 NATURE DISCRET) + EF_ST0;
SB0 =    ('XTX' (XALP_0 - EF_ST0))**(0.5);
RB0 =     SB0;
LAMB0 =   RB0/SB0;
*
* incremental step
H_VAL1 = (SB0)/(100000.0);
H_VAL2 = (SB0)/(100000.0);
*
* direction used for the ellispoide methode
TB_DIR = 'TABLE';
TB_DIR. 1 = 'MANU' 'CHPO' MAI1 3 'UX'  1.0 'UY'  0.0 'UZ'  0.0;
TB_DIR. 2 = 'MANU' 'CHPO' MAI1 3 'UX'  0.0 'UY'  1.0 'UZ'  0.0;
TB_DIR. 3 = 'MANU' 'CHPO' MAI1 3 'UX'  0.0 'UY'  0.0 'UZ'  1.0;
TB_DIR. 4 = 'MANU' 'CHPO' MAI1 3 'UX' -1.0 'UY'  0.0 'UZ'  0.0;
TB_DIR. 5 = 'MANU' 'CHPO' MAI1 3 'UX'  0.0 'UY' -1.0 'UZ'  0.0;
TB_DIR. 6 = 'MANU' 'CHPO' MAI1 3 'UX'  0.0 'UY'  0.0 'UZ' -1.0;
*
* loop for each direction
I_K1 = 1;
'REPE' IND3 (6);
*
  TAB_ITE = 'TABLE';
  TAB_ITE. 0 = 'TABLE';
  TAB_ITE. 0 . 'ALPA' = ALP_0;
  TAB_ITE. 0 . 'LAMBDA' = LAMB0;
  TAB_ITE. 0 . 'RB' = RB0;
*
  ALP_K = (TB_DIR. I_K1);
  I_M1 = 1;
*  first loop in order to have n_elllips=n_limite
  'REPE' IND2 (200);
*   sauving Lambda for j iteraction
    TAB_ITE. I_M1 = 'TABLE';
    TAB_ITE. I_M1 . 'ALPA' = ALP_K;
*   determination of the stress state for the chosen direction
    XALP_J = (MATX1*ALP_K)/(('XTMX' MATX1 ALP_K)**(0.5));
    XALP_J = ('CHAN' ATTRIBUT XALP_J NATURE DISCRET) + EF_ST0;
*   nomalisez vector of hte rayon of the ellipsoide for the
*   chosen direction
    SBJ = ('XTX' (XALP_J - EF_ST0))**(0.5);
    BJ = (XALP_J - EF_ST0)/(SBJ);
*   rayon of the ellipsoide for the chosen direction
    RBVAL1 = (TAB_ITE.(I_M1 - 1). 'RB');
*   second loop in order to have f=0
    I_I1 = 1;
    REPE IND1 (200);
*     strees state x0, x0+h, x0-h
      VV1 = (RBVAL1 + H_VAL1)*(BJ);
      VV2 = (RBVAL1 - H_VAL1)*(BJ);
      VV3 = (RBVAL1)*(BJ);
      VV1 = ('CHAN' 'ATTRIBUT' VV1 'NATURE' 'DISCRET') + EF_ST0;
      VV2 = ('CHAN' 'ATTRIBUT' VV2 'NATURE' 'DISCRET') + EF_ST0;
      VV3 = ('CHAN' 'ATTRIBUT' VV3 'NATURE' 'DISCRET') + EF_ST0;
*
      N11V1 = 'EXTR' VV1 'FX' MAI1;
      N22V1 = 'EXTR' VV1 'FY' MAI1;
      N12V1 = 'EXTR' VV1 'FZ' MAI1;
      N11V2 = 'EXTR' VV2 'FX' MAI1;
      N22V2 = 'EXTR' VV2 'FY' MAI1;
      N12V2 = 'EXTR' VV2 'FZ' MAI1;
      N11V3 = 'EXTR' VV3 'FX' MAI1;
      N22V3 = 'EXTR' VV3 'FY' MAI1;
      N12V3 = 'EXTR' VV3 'FZ' MAI1;
      'OUBL' VV1;
      'OUBL' VV2;
      'OUBL' VV3;
*     calculation of f and D terms
      TTL1               = TABLE;
      TTL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL1.'S11'         = N11V3;
      TTL1.'S22'         = N22V3;
      TTL1.'S12'         = N12V3;
      TTL1.'FCK'         = FCBET1;
      TTL1.'FSK_1'       = FSACI1;
      TTL1.'FSK_2'       = FSACI1;
      TTL1.'RHO_1'       = RHOXS;
      TTL1.'RHO_2'       = RHOYS;
      TTL1.'GAMMA_C'     = GAMC;
      TTL1.'ALPA_C'      = ALPC1;
      TTL1.'NU_C'        = NUC1;
      TTL1.'GAMMA_S'     = GAMS1;
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = N11V1;
      TTL2.'S22'         = N22V1;
      TTL2.'S12'         = N12V1;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
*
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = N11V2;
      TTL3.'S22'         = N22V2;
      TTL3.'S12'         = N12V2;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
*
      F_VAL1 = G_ULTI2D TTL1;
      D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/
                                                 ((2.0)*(H_VAL1));
*     controle
      'SI' (('ABS'(F_VAL1)) '<' TOL_1);
*       convergence!!!
        RBJ = RBVAL1;
        'QUIT' IND1;
      'SINON';
        'SI' (I_I1 'EGA' 200);
*         fin of loop, we take the last value!!!
          RBJ = RBVAL1;
          'QUIT' IND1;
        'FINSI';
*        Check beetwen 2 values of R (radius)!!!
        'SI' (I_I1 > 2);
          'SI' ((ABS((RBVAL1 - RBVAL2)/(RBVAL1))) < ((TOL_1)*(1.e-10)));
            RBJ = RBVAL1;
            'QUIT' IND1;
          'FINSI';
        'FINSI';
*       Modification in case of the x0+h stress case is out of the
*       external boudary of the limit surface
*       [(-fc-rx*fs),(-fc-ry*fs)]x[(rx*fs),(ry*fs)]
        'SI' (N11V3 > ((FSACI1*RHOXS)/(GAMS1)));
          RBVAL2 = RBVAL1;
          RBVAL1 = (((FSACI1*RHOXS)/(GAMS1)) -
                             (EXTR EF_ST0 'FX' MAI1) -
                                      TOL_1)/
                          (EXTR BJ 'FX' MAI1);
        'SINON';
          'SI' (N22V3 '>' ((FSACI1*RHOYS)/(GAMS1)));
            RBVAL2 = RBVAL1;
            RBVAL1 = (((FSACI1*RHOYS)/(GAMS1))
                     - ('EXTR' EF_ST0 'FY' MAI1)
                                      - TOL_1)/
                       ('EXTR'       BJ 'FY' MAI1);
          'SINON';
            'SI' (N11V3 '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))));
              RBVAL2 = RBVAL1;
              RBVAL1 = ((((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                              + ((-1.0)*((FSACI1*RHOXS)/(GAMS1))))
                                         - ('EXTR' EF_ST0 'FX' MAI1)
                                                          + TOL_1)/
                                           ('EXTR'     BJ 'FX' MAI1);
            'SINON';
              'SI' (N22V3 < (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOYS)/(GAMS1)))));
                RBVAL2 = RBVAL1;
                RBVAL1 = ((((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                                + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))
                                           - ('EXTR' EF_ST0 'FY' MAI1)
                                                            + TOL_1)/
                                             ('EXTR'     BJ 'FY' MAI1);
              'SINON';
*               case when D is equal to sero
                'SI' (('ABS'(D_VAL1)) < 1.E-16);
                  RBVAL2 = RBVAL1;
                  RBVAL1 = ((1.1)*(RBVAL1));
                'SINON';
*               otherwise
                  RBVAL2 = RBVAL1;
                  RBVAL1 = RBVAL1 - ((F_VAL1)/(D_VAL1));
                'FINSI';
              'FINSI';
            'FINSI';
          'FINSI';
        'FINSI';
      'FINSI';
*
      I_I1 = I_I1 + 1;
    'FIN' IND1;
*   computation of lambda
    LAMBJ = RBJ/SBJ;
    TAB_ITE. I_M1 . 'LAMBDA' = LAMBJ;
    TAB_ITE. I_M1 . 'RB' = RBJ;
    XCOUB1 = (((TAB_ITE. I_M1 .'LAMBDA')*(TAB_ITE. I_M1 .'LAMBDA'))*
           (MATX1));
*   amplified stress state using the lambda coef
    XALP_L = (XCOUB1*ALP_K)/(('XTMX' XCOUB1 ALP_K)**(0.5));
    XALP_L = ('CHAN' ATTRIBUT XALP_L  NATURE DISCRET) + EF_ST0;
*   Dh*ex  ; Dh*ey ; Dh*ez
    DE_HX = 'MANU' 'CHPO' MAI1 3 'FX' H_VAL2 'FY' 0.0 'FZ' 0.0;
    DE_HY = 'MANU' 'CHPO' MAI1 3 'FX' 0.0 'FY' H_VAL2 'FZ' 0.0;
    DE_HZ = 'MANU' 'CHPO' MAI1 3 'FX' 0.0 'FY' 0.0 'FZ' H_VAL2;
*   x0*lam + Dh*ex  ; x0*lam + Dh*ey ; x0*lam + Dh*ez
    VV_HXP = XALP_L + DE_HX;
    VV_HYP = XALP_L + DE_HY;
    VV_HZP = XALP_L + DE_HZ;
*   x0*lam + Dh*ex  ; x0*lam + Dh*ey ; x0*lam + Dh*ez
    VV_HXN = XALP_L - DE_HX;
    VV_HYN = XALP_L - DE_HY;
    VV_HZN = XALP_L - DE_HZ;
*   x0*lam
    VV_0 = XALP_L;
*
    VV_HXP1 = 'EXTR' VV_HXP 'FX' MAI1;
    VV_HXP2 = 'EXTR' VV_HXP 'FY' MAI1;
    VV_HXP3 = 'EXTR' VV_HXP 'FZ' MAI1;
    VV_HYP1 = 'EXTR' VV_HYP 'FX' MAI1;
    VV_HYP2 = 'EXTR' VV_HYP 'FY' MAI1;
    VV_HYP3 = 'EXTR' VV_HYP 'FZ' MAI1;
    VV_HZP1 = 'EXTR' VV_HZP 'FX' MAI1;
    VV_HZP2 = 'EXTR' VV_HZP 'FY' MAI1;
    VV_HZP3 = 'EXTR' VV_HZP 'FZ' MAI1;
    VV_HXN1 = 'EXTR' VV_HXN 'FX' MAI1;
    VV_HXN2 = 'EXTR' VV_HXN 'FY' MAI1;
    VV_HXN3 = 'EXTR' VV_HXN 'FZ' MAI1;
    VV_HYN1 = 'EXTR' VV_HYN 'FX' MAI1;
    VV_HYN2 = 'EXTR' VV_HYN 'FY' MAI1;
    VV_HYN3 = 'EXTR' VV_HYN 'FZ' MAI1;
    VV_HZN1 = 'EXTR' VV_HZN 'FX' MAI1;
    VV_HZN2 = 'EXTR' VV_HZN 'FY' MAI1;
    VV_HZN3 = 'EXTR' VV_HZN 'FZ' MAI1;
*
    VV_01 = 'EXTR' VV_HXP 'FX' MAI1;
    VV_02 = 'EXTR' VV_HXP 'FY' MAI1;
    VV_03 = 'EXTR' VV_HXP 'FZ' MAI1;
*   Calculation of n_limite if x0*lam + Dh*ex is out of the external
*   boudary of limite surface
    'SI' (VV_HXP1 '>' ((FSACI1*RHOXS)/(GAMS1)));
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = VV_01;
      TTL2.'S22'         = VV_02;
      TTL2.'S12'         = VV_03;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = VV_HXN1;
      TTL3.'S22'         = VV_HXN2;
      TTL3.'S12'         = VV_HXN3;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      VAL_X1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL2));
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = VV_HYP1;
      TTL2.'S22'         = VV_HYP2;
      TTL2.'S12'         = VV_HYP3;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = VV_HYN1;
      TTL3.'S22'         = VV_HYN2;
      TTL3.'S12'         = VV_HYN3;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      VAL_Y1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL2));
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = VV_HZP1;
      TTL2.'S22'         = VV_HZP2;
      TTL2.'S12'         = VV_HZP3;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = VV_HZN1;
      TTL3.'S22'         = VV_HZN2;
      TTL3.'S12'         = VV_HZN3;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      VAL_Z1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL2));
    'SINON';
*   Calculation of n_limit if x0*lam - Dh*ex is out of the external
*   boudary of the limite surface
      'SI' (VV_HXN1 '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                            + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))));
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = VV_HXP1;
        TTL2.'S22'         = VV_HXP2;
        TTL2.'S12'         = VV_HXP3;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = VV_01;
        TTL3.'S22'         = VV_02;
        TTL3.'S12'         = VV_03;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        VAL_X1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL2));
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = VV_HYP1;
        TTL2.'S22'         = VV_HYP2;
        TTL2.'S12'         = VV_HYP3;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = VV_HYN1;
        TTL3.'S22'         = VV_HYN2;
        TTL3.'S12'         = VV_HYN3;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        VAL_Y1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL2));
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = VV_HZP1;
        TTL2.'S22'         = VV_HZP2;
        TTL2.'S12'         = VV_HZP3;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = VV_HZN1;
        TTL3.'S22'         = VV_HZN2;
        TTL3.'S12'         = VV_HZN3;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        VAL_Z1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL2));
      'SINON';
*   Calculation of n_limit if x0*lam + Dh*ey is out of the external
*   boudary of the limite surface
        'SI' (VV_HYP1 '>' ((FSACI1*RHOYS)/(GAMS1)));
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = VV_HXP1;
          TTL2.'S22'         = VV_HXP2;
          TTL2.'S12'         = VV_HXP3;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = VV_HXN1;
          TTL3.'S22'         = VV_HXN2;
          TTL3.'S12'         = VV_HXN3;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          VAL_X1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL2));
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = VV_01;
          TTL2.'S22'         = VV_02;
          TTL2.'S12'         = VV_03;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = VV_HYN1;
          TTL3.'S22'         = VV_HYN2;
          TTL3.'S12'         = VV_HYN3;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          VAL_Y1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL2));
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = VV_HZP1;
          TTL2.'S22'         = VV_HZP2;
          TTL2.'S12'         = VV_HZP3;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = VV_HZN1;
          TTL3.'S22'         = VV_HZN2;
          TTL3.'S12'         = VV_HZN3;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          VAL_Z1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL2));
        'SINON';
*   Calculation of n_limit if x0*lam + Dh*ey is out of the external
*   boudary of the limite surface
          'SI' (VV_HYN1 '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                              + ((-1.0)*((FSACI1*RHOYS)/(GAMS1)))));
*
            TTL2               = TABLE;
            TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL2.'S11'         = VV_HXP1;
            TTL2.'S22'         = VV_HXP2;
            TTL2.'S12'         = VV_HXP3;
            TTL2.'FCK'         = FCBET1;
            TTL2.'FSK_1'       = FSACI1;
            TTL2.'FSK_2'       = FSACI1;
            TTL2.'RHO_1'       = RHOXS;
            TTL2.'RHO_2'       = RHOYS;
            TTL2.'GAMMA_C'     = GAMC;
            TTL2.'ALPA_C'      = ALPC1;
            TTL2.'NU_C'        = NUC1;
            TTL2.'GAMMA_S'     = GAMS1;
            TTL3               = TABLE;
            TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL3.'S11'         = VV_HXN1;
            TTL3.'S22'         = VV_HXN2;
            TTL3.'S12'         = VV_HXN3;
            TTL3.'FCK'         = FCBET1;
            TTL3.'FSK_1'       = FSACI1;
            TTL3.'FSK_2'       = FSACI1;
            TTL3.'RHO_1'       = RHOXS;
            TTL3.'RHO_2'       = RHOYS;
            TTL3.'GAMMA_C'     = GAMC;
            TTL3.'ALPA_C'      = ALPC1;
            TTL3.'NU_C'        = NUC1;
            TTL3.'GAMMA_S'     = GAMS1;
            VAL_X1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/
                                                    ((2.0)*(H_VAL2));
*
            TTL2               = TABLE;
            TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL2.'S11'         = VV_HYP1;
            TTL2.'S22'         = VV_HYP2;
            TTL2.'S12'         = VV_HYP3;
            TTL2.'FCK'         = FCBET1;
            TTL2.'FSK_1'       = FSACI1;
            TTL2.'FSK_2'       = FSACI1;
            TTL2.'RHO_1'       = RHOXS;
            TTL2.'RHO_2'       = RHOYS;
            TTL2.'GAMMA_C'     = GAMC;
            TTL2.'ALPA_C'      = ALPC1;
            TTL2.'NU_C'        = NUC1;
            TTL2.'GAMMA_S'     = GAMS1;
            TTL3               = TABLE;
            TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL3.'S11'         = VV_01;
            TTL3.'S22'         = VV_02;
            TTL3.'S12'         = VV_03;
            TTL3.'FCK'         = FCBET1;
            TTL3.'FSK_1'       = FSACI1;
            TTL3.'FSK_2'       = FSACI1;
            TTL3.'RHO_1'       = RHOXS;
            TTL3.'RHO_2'       = RHOYS;
            TTL3.'GAMMA_C'     = GAMC;
            TTL3.'ALPA_C'      = ALPC1;
            TTL3.'NU_C'        = NUC1;
            TTL3.'GAMMA_S'     = GAMS1;
            VAL_Y1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/
                                                    ((1.0)*(H_VAL2));
*
            TTL2               = TABLE;
            TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL2.'S11'         = VV_HZP1;
            TTL2.'S22'         = VV_HZP2;
            TTL2.'S12'         = VV_HZP3;
            TTL2.'FCK'         = FCBET1;
            TTL2.'FSK_1'       = FSACI1;
            TTL2.'FSK_2'       = FSACI1;
            TTL2.'RHO_1'       = RHOXS;
            TTL2.'RHO_2'       = RHOYS;
            TTL2.'GAMMA_C'     = GAMC;
            TTL2.'ALPA_C'      = ALPC1;
            TTL2.'NU_C'        = NUC1;
            TTL2.'GAMMA_S'     = GAMS1;
            TTL3               = TABLE;
            TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL3.'S11'         = VV_HZN1;
            TTL3.'S22'         = VV_HZN2;
            TTL3.'S12'         = VV_HZN3;
            TTL3.'FCK'         = FCBET1;
            TTL3.'FSK_1'       = FSACI1;
            TTL3.'FSK_2'       = FSACI1;
            TTL3.'RHO_1'       = RHOXS;
            TTL3.'RHO_2'       = RHOYS;
            TTL3.'GAMMA_C'     = GAMC;
            TTL3.'ALPA_C'      = ALPC1;
            TTL3.'NU_C'        = NUC1;
            TTL3.'GAMMA_S'     = GAMS1;
            VAL_Z1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/
                                                    ((2.0)*(H_VAL2));
          'SINON';
*         Ordinary method
            TTL2               = TABLE;
            TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL2.'S11'         = VV_HXP1;
            TTL2.'S22'         = VV_HXP2;
            TTL2.'S12'         = VV_HXP3;
            TTL2.'FCK'         = FCBET1;
            TTL2.'FSK_1'       = FSACI1;
            TTL2.'FSK_2'       = FSACI1;
            TTL2.'RHO_1'       = RHOXS;
            TTL2.'RHO_2'       = RHOYS;
            TTL2.'GAMMA_C'     = GAMC;
            TTL2.'ALPA_C'      = ALPC1;
            TTL2.'NU_C'        = NUC1;
            TTL2.'GAMMA_S'     = GAMS1;
            TTL3               = TABLE;
            TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL3.'S11'         = VV_HXN1;
            TTL3.'S22'         = VV_HXN2;
            TTL3.'S12'         = VV_HXN3;
            TTL3.'FCK'         = FCBET1;
            TTL3.'FSK_1'       = FSACI1;
            TTL3.'FSK_2'       = FSACI1;
            TTL3.'RHO_1'       = RHOXS;
            TTL3.'RHO_2'       = RHOYS;
            TTL3.'GAMMA_C'     = GAMC;
            TTL3.'ALPA_C'      = ALPC1;
            TTL3.'NU_C'        = NUC1;
            TTL3.'GAMMA_S'     = GAMS1;
            VAL_X1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/
                                                    ((2.0)*(H_VAL2));
*
            TTL2               = TABLE;
            TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL2.'S11'         = VV_HYP1;
            TTL2.'S22'         = VV_HYP2;
            TTL2.'S12'         = VV_HYP3;
            TTL2.'FCK'         = FCBET1;
            TTL2.'FSK_1'       = FSACI1;
            TTL2.'FSK_2'       = FSACI1;
            TTL2.'RHO_1'       = RHOXS;
            TTL2.'RHO_2'       = RHOYS;
            TTL2.'GAMMA_C'     = GAMC;
            TTL2.'ALPA_C'      = ALPC1;
            TTL2.'NU_C'        = NUC1;
            TTL2.'GAMMA_S'     = GAMS1;
            TTL3               = TABLE;
            TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL3.'S11'         = VV_HYN1;
            TTL3.'S22'         = VV_HYN2;
            TTL3.'S12'         = VV_HYN3;
            TTL3.'FCK'         = FCBET1;
            TTL3.'FSK_1'       = FSACI1;
            TTL3.'FSK_2'       = FSACI1;
            TTL3.'RHO_1'       = RHOXS;
            TTL3.'RHO_2'       = RHOYS;
            TTL3.'GAMMA_C'     = GAMC;
            TTL3.'ALPA_C'      = ALPC1;
            TTL3.'NU_C'        = NUC1;
            TTL3.'GAMMA_S'     = GAMS1;
            VAL_Y1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/
                                                    ((2.0)*(H_VAL2));
*
            TTL2               = TABLE;
            TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL2.'S11'         = VV_HZP1;
            TTL2.'S22'         = VV_HZP2;
            TTL2.'S12'         = VV_HZP3;
            TTL2.'FCK'         = FCBET1;
            TTL2.'FSK_1'       = FSACI1;
            TTL2.'FSK_2'       = FSACI1;
            TTL2.'RHO_1'       = RHOXS;
            TTL2.'RHO_2'       = RHOYS;
            TTL2.'GAMMA_C'     = GAMC;
            TTL2.'ALPA_C'      = ALPC1;
            TTL2.'NU_C'        = NUC1;
            TTL2.'GAMMA_S'     = GAMS1;
            TTL3               = TABLE;
            TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
            TTL3.'S11'         = VV_HZN1;
            TTL3.'S22'         = VV_HZN2;
            TTL3.'S12'         = VV_HZN3;
            TTL3.'FCK'         = FCBET1;
            TTL3.'FSK_1'       = FSACI1;
            TTL3.'FSK_2'       = FSACI1;
            TTL3.'RHO_1'       = RHOXS;
            TTL3.'RHO_2'       = RHOYS;
            TTL3.'GAMMA_C'     = GAMC;
            TTL3.'ALPA_C'      = ALPC1;
            TTL3.'NU_C'        = NUC1;
            TTL3.'GAMMA_S'     = GAMS1;
            VAL_Z1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/
                                                    ((2.0)*(H_VAL2));
          'FINSI';
        'FINSI';
      'FINSI';
    'FINSI';
*
*   costruction n_limit
    DELTG1 = 'MANU' 'CHPO' MAI1 'UX' ((-1.0)*(VAL_X1))
                            'UY' ((-1.0)*(VAL_Y1))
                            'UZ' ((-1.0)*(VAL_Z1));
*
*   variable for the convergence test
    ID1_CON = 0;
*   check on the n_limit
    'SI' ((('XTX' DELTG1)**(0.5)) < 1.E-7);
*     if |n_limit|=0 rotate the chosen direction by 10 degrees
      MATR1 = 'VIDE' 'RIGIDITE'/'RIGIDITE';
      MATR1 = MATR1 'ET'
         ('MANU' 'RIGIDITE' MAI1 ('MOTS' 'UX' 'UY' 'UZ')
            ('PROG'  (COS(10.0)) ((-1.0)*(SIN(10.0))) 0.0
                     (SIN(10.0))      (COS(10.0))     0.0
                         0.0             0.0          1.0));
      AAA1 = MATR1*ALP_K;
      DELTG1 = MANU CHPO MAI1 'UX' (EXTR AAA1 MAI1 'FX')
                              'UY' (EXTR AAA1 MAI1 'FY')
                              'UZ' (EXTR AAA1 MAI1 'FZ');
    'FINSI';
*   convergence test
    VET_TEST = (TAB_ITE. I_M1 . 'ALPA')
             - (TAB_ITE. (I_M1 - 1) . 'ALPA');
*
    'SI' ((('XTX' VET_TEST)**(0.5)) '<' 0.001);
*     deduction of the final value of Lambda
      'SI' ((TAB_ITE. I_M1 . 'LAMBDA') '>' 0.0);
        'SI' ('NEG' ('TYPE' LAM_FIN) 'FLOTTANT');
          LAM_FIN = (TAB_ITE. I_M1 . 'LAMBDA');
        'SINON';
          'SI' (LAM_FIN '>' (TAB_ITE. I_M1 . 'LAMBDA'));
            LAM_FIN = (TAB_ITE. I_M1 . 'LAMBDA');
          'FINSI';
        'FINSI';
      'FINSI';
      'QUIT' IND2;
    'SINON';
      'SI' (I_M1 'EGA' 200);
        ID1_CON = 1;
        'SI' ((TAB_ITE. I_M1 . 'LAMBDA') '>' 0.0);
          'SI' ('NEG' ('TYPE' LAM_FIN) 'FLOTTANT');
            LAM_FIN = (TAB_ITE. I_M1 . 'LAMBDA');
          'SINON';
            'SI' (LAM_FIN '>' (TAB_ITE. I_M1 . 'LAMBDA'));
              LAM_FIN = (TAB_ITE. I_M1 . 'LAMBDA');
            'FINSI';
          'FINSI';
        'FINSI';
      'SINON';
*       otherwise updating the n_limit
        ALP_K = DELTG1/((XTX DELTG1)**(0.5));
      'FINSI';
    'FINSI';
    I_M1 = I_M1 + 1;
  'FIN' IND2;
  I_K1 = I_K1 + 1;
'FIN' IND3;
*
*  screen message
'SI' (ID1_CON 'EGA' 0);
  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                    LAM_FIN;
  'MESS' TIT1;
'FINSI';
'SI' (ID1_CON 'EGA' 1);

  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                     LAM_FIN '.....Attention non convergence';

* New computation of Lambda....rectangle method
*  H_VAL3 = FCBET1/100000;
  LAMB0 =  1.0;
  H_VAL3 = LAMB0/10000;
  TOL_2 = FCBET1/1000;
*
* reference list for the 8 point for rectangle solid
  LL_I = PROG 1. 2. 3. 4. 5. 6. 7. 8.;
*
* creation of the resuming table
  TAB_ITE = 'TABLE';
  TAB_ITE. 0 = 'TABLE';
  TAB_ITE. 0 .'LAMBDA' = LAMB0 ;
*
  I_MM1 = 0;
  ID1_CON = 0;
*
*   loop for in order to find f=0
  'REPE' IND4 (200);
*
*   stress state for the 8 points
    X1_0 = ((N11)*(((-1.0)*(LAMB0)))) + N110;
    Y1_0 = ((N22)*(((-1.0)*(LAMB0)))) + N220;
    Z1_0 = ((N12)*(((-1.0)*(LAMB0)))) + N120;
    X2_0 = ((N11)*(((1.0)*(LAMB0)))) + N110;
    Y2_0 = ((N22)*(((-1.0)*(LAMB0)))) + N220;
    Z2_0 = ((N12)*(((-1.0)*(LAMB0)))) + N120;
    X3_0 = ((N11)*(((1.0)*(LAMB0)))) + N110;
    Y3_0 = ((N22)*(((1.0)*(LAMB0)))) + N220;
    Z3_0 = ((N12)*(((-1.0)*(LAMB0)))) + N120;
    X4_0 = ((N11)*(((-1.0)*(LAMB0)))) + N110;
    Y4_0 = ((N22)*(((1.0)*(LAMB0)))) + N220;
    Z4_0 = ((N12)*(((-1.0)*(LAMB0)))) + N120;
    X5_0 = ((N11)*(((-1.0)*(LAMB0)))) + N110;
    Y5_0 = ((N22)*(((-1.0)*(LAMB0)))) + N220;
    Z5_0 = ((N12)*(((1.0)*(LAMB0)))) + N120;
    X6_0 = ((N11)*(((1.0)*(LAMB0)))) + N110;
    Y6_0 = ((N22)*(((-1.0)*(LAMB0)))) + N220;
    Z6_0 = ((N12)*(((1.0)*(LAMB0)))) + N120;
    X7_0 = ((N11)*(((1.0)*(LAMB0)))) + N110;
    Y7_0 = ((N22)*(((1.0)*(LAMB0)))) + N220;
    Z7_0 = ((N12)*(((1.0)*(LAMB0)))) + N120;
    X8_0 = ((N11)*(((-1.0)*(LAMB0)))) + N110;
    Y8_0 = ((N22)*(((1.0)*(LAMB0)))) + N220;
    Z8_0 = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
*   put the N11, N22 et N12 stress state in the lists
    LL_X0 = 'PROG' (X1_0) (X2_0) (X3_0) (X4_0)
                   (X5_0) (X6_0) (X7_0) (X8_0);
    LL_Y0 = 'PROG' (Y1_0) (Y2_0) (Y3_0) (Y4_0)
                   (Y5_0) (Y6_0) (Y7_0) (Y8_0);
    LL_Z0 = 'PROG' (Z1_0) (Z2_0) (Z3_0) (Z4_0)
                   (Z5_0) (Z6_0) (Z7_0) (Z8_0);
    LL_F0 = 'PROG';
*
*   deduction of f for each point
    III1 = 1;
    'REPE' IND2 (8);
      TTL1               = TABLE;
      TTL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL1.'S11'         = ('EXTR' LL_X0 III1);
      TTL1.'S22'         = ('EXTR' LL_Y0 III1);
      TTL1.'S12'         = ('EXTR' LL_Z0 III1);
      TTL1.'FCK'         = FCBET1;
      TTL1.'FSK_1'       = FSACI1;
      TTL1.'FSK_2'       = FSACI1;
      TTL1.'RHO_1'       = RHOXS;
      TTL1.'RHO_2'       = RHOYS;
      TTL1.'GAMMA_C'     = GAMC;
      TTL1.'ALPA_C'      = ALPC1;
      TTL1.'NU_C'        = NUC1;
      TTL1.'GAMMA_S'     = GAMS1;
      LL_F0 = LL_F0 ET
        ('PROG' (G_ULTI2D TTL1));
      III1 = III1 + 1;
    'FIN' IND2;
*   saving
    TAB_ITE. I_MM1 .'L_X' = LL_X0;
    TAB_ITE. I_MM1 .'L_Y' = LL_Y0;
    TAB_ITE. I_MM1 .'L_Z' = LL_Z0;
    TAB_ITE. I_MM1 .'L_F' = LL_F0;
*   finding the minimum value of f and the corresponding point
    EV1 = 'EVOL' 'MANU' LL_I LL_F0;
    II1 II2 VAL_F = 'MINI' EV1;
* computation of D (gradiant) in case of Point_1=Argmin(fmin)
    'SI' (II1 'EGA' 1);
      X1_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL3)))) + N110;
      Y1_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL3)))) + N220;
      Z1_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL3)))) + N120;
      X1_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL3)))) + N110;
      Y1_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL3)))) + N220;
      Z1_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL3)))) + N120;
      'SI' (((X1_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
       'OU' ((Y1_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
        X1_DP = ((N11)*(((-1.0)*(LAMB0)))) + N110;
        Y1_DP = ((N22)*(((-1.0)*(LAMB0)))) + N220;
        Z1_DP = ((N12)*(((-1.0)*(LAMB0)))) + N120;
        X1_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL3)))) + N110;
        Y1_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL3)))) + N220;
        Z1_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL3)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X1_DP;
        TTL2.'S22'         = Y1_DP;
        TTL2.'S12'         = Z1_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X1_DN;
        TTL3.'S22'         = Y1_DN;
        TTL3.'S12'         = Z1_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
      'SINON';
        'SI' (((X1_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
         'OU' ((Y1_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
          X1_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL3)))) + N110;
          Y1_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL3)))) + N220;
          Z1_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL3)))) + N120;
          X1_DN = ((N11)*(((-1.0)*(LAMB0)))) + N110;
          Y1_DN = ((N22)*(((-1.0)*(LAMB0)))) + N220;
          Z1_DN = ((N12)*(((-1.0)*(LAMB0)))) + N120;
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X1_DP;
          TTL2.'S22'         = Y1_DP;
          TTL2.'S12'         = Z1_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X1_DN;
          TTL3.'S22'         = Y1_DN;
          TTL3.'S12'         = Z1_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
        'SINON';
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X1_DP;
          TTL2.'S22'         = Y1_DP;
          TTL2.'S12'         = Z1_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X1_DN;
          TTL3.'S22'         = Y1_DN;
          TTL3.'S12'         = Z1_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL3));
        'FINSI';
      'FINSI';
    'FINSI';
*   computation of D (gradiant) in case of Point_2=Argmin(fmin)
    'SI' (II1 'EGA' 2);
      X2_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL3)))) + N110;
      Y2_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL3)))) + N220;
      Z2_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL3)))) + N120;
      X2_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL3)))) + N110;
      Y2_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL3)))) + N220;
      Z2_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL3)))) + N120;
      'SI' (((X2_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
       'OU' ((Y2_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
        X2_DP = ((N11)*(((1.0)*(LAMB0)))) + N110;
        Y2_DP = ((N22)*(((-1.0)*(LAMB0)))) + N220;
        Z2_DP = ((N12)*(((-1.0)*(LAMB0)))) + N120;
        X2_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL3)))) + N110;
        Y2_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL3)))) + N220;
        Z2_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL3)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X2_DP;
        TTL2.'S22'         = Y2_DP;
        TTL2.'S12'         = Z2_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X2_DN;
        TTL3.'S22'         = Y2_DN;
        TTL3.'S12'         = Z2_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
      'SINON';
        'SI' (((X2_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
         'OU' ((Y2_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
          X2_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL3)))) + N110;
          Y2_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL3)))) + N220;
          Z2_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL3)))) + N120;
          X2_DN = ((N11)*(((1.0)*(LAMB0)))) + N110;
          Y2_DN = ((N22)*(((-1.0)*(LAMB0)))) + N220;
          Z2_DN = ((N12)*(((-1.0)*(LAMB0)))) + N120;
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X2_DP;
          TTL2.'S22'         = Y2_DP;
          TTL2.'S12'         = Z2_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X2_DN;
          TTL3.'S22'         = Y2_DN;
          TTL3.'S12'         = Z2_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
        'SINON';
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X2_DP;
          TTL2.'S22'         = Y2_DP;
          TTL2.'S12'         = Z2_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X2_DN;
          TTL3.'S22'         = Y2_DN;
          TTL3.'S12'         = Z2_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL3));
        'FINSI';
      'FINSI';
    'FINSI';
*   computation of D (gradiant) in case of Point_3=Argmin(fmin)
    'SI' (II1 'EGA' 3);
      X3_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL3)))) + N110;
      Y3_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL3)))) + N220;
      Z3_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL3)))) + N120;
      X3_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL3)))) + N110;
      Y3_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL3)))) + N220;
      Z3_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL3)))) + N120;
      'SI' (((X3_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
       'OU' ((Y3_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
        X3_DP = ((N11)*(((1.0)*(LAMB0)))) + N110;
        Y3_DP = ((N22)*(((1.0)*(LAMB0)))) + N220;
        Z3_DP = ((N12)*(((-1.0)*(LAMB0)))) + N120;
        X3_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL3)))) + N110;
        Y3_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL3)))) + N220;
        Z3_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL3)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X3_DP;
        TTL2.'S22'         = Y3_DP;
        TTL2.'S12'         = Z3_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X3_DN;
        TTL3.'S22'         = Y3_DN;
        TTL3.'S12'         = Z3_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
      'SINON';
        'SI' (((X3_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
         'OU' ((Y3_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
          X3_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL3)))) + N110;
          Y3_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL3)))) + N220;
          Z3_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL3)))) + N120;
          X3_DN = ((N11)*(((1.0)*(LAMB0)))) + N110;
          Y3_DN = ((N22)*(((1.0)*(LAMB0)))) + N220;
          Z3_DN = ((N12)*(((-1.0)*(LAMB0)))) + N120;
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X3_DP;
          TTL2.'S22'         = Y3_DP;
          TTL2.'S12'         = Z3_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X3_DN;
          TTL3.'S22'         = Y3_DN;
          TTL3.'S12'         = Z3_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
        'SINON';
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X3_DP;
          TTL2.'S22'         = Y3_DP;
          TTL2.'S12'         = Z3_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X3_DN;
          TTL3.'S22'         = Y3_DN;
          TTL3.'S12'         = Z3_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL3));
        'FINSI';
      'FINSI';
    'FINSI';
*   computation of D (gradiant) in case of Point_4=Argmin(fmin)
    'SI' (II1 'EGA' 4);
      X4_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL3)))) + N110;
      Y4_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL3)))) + N220;
      Z4_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL3)))) + N120;
      X4_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL3)))) + N110;
      Y4_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL3)))) + N220;
      Z4_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL3)))) + N120;
      'SI' (((X4_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
       'OU' ((Y4_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
        X4_DP = ((N11)*(((-1.0)*(LAMB0)))) + N110;
        Y4_DP = ((N22)*(((1.0)*(LAMB0)))) + N220;
        Z4_DP = ((N12)*(((-1.0)*(LAMB0)))) + N120;
        X4_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL3)))) + N110;
        Y4_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL3)))) + N220;
        Z4_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL3)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X4_DP;
        TTL2.'S22'         = Y4_DP;
        TTL2.'S12'         = Z4_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X4_DN;
        TTL3.'S22'         = Y4_DN;
        TTL3.'S12'         = Z4_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
      'SINON';
        'SI' (((X4_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
         'OU' ((Y4_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
          X4_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL3)))) + N110;
          Y4_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL3)))) + N220;
          Z4_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL3)))) + N120;
          X4_DN = ((N11)*(((-1.0)*(LAMB0)))) + N110;
          Y4_DN = ((N22)*(((1.0)*(LAMB0)))) + N220;
          Z4_DN = ((N12)*(((-1.0)*(LAMB0)))) + N120;
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X4_DP;
          TTL2.'S22'         = Y4_DP;
          TTL2.'S12'         = Z4_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X4_DN;
          TTL3.'S22'         = Y4_DN;
          TTL3.'S12'         = Z4_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
        'SINON';
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X4_DP;
          TTL2.'S22'         = Y4_DP;
          TTL2.'S12'         = Z4_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X4_DN;
          TTL3.'S22'         = Y4_DN;
          TTL3.'S12'         = Z4_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL3));
        'FINSI';
      'FINSI';
    'FINSI';
*   computation of D (gradiant) in case of Point_5=Argmin(fmin)
    'SI' (II1 'EGA' 5);
      X5_DP = ((N11)*(((-1.0)*(LAMB0) + H_VAL3))) + N110;
      Y5_DP = ((N22)*(((-1.0)*(LAMB0) + H_VAL3))) + N220;
      Z5_DP = ((N12)*(((1.0)*(LAMB0) + H_VAL3))) + N120;
      X5_DN = ((N11)*(((-1.0)*(LAMB0) - H_VAL3))) + N110;
      Y5_DN = ((N22)*(((-1.0)*(LAMB0) - H_VAL3))) + N220;
      Z5_DN = ((N12)*(((1.0)*(LAMB0) - H_VAL3))) + N120;
      'SI' (((X5_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
       'OU' ((Y5_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
        X5_DP = ((N11)*(((-1.0)*(LAMB0)))) + N110;
        Y5_DP = ((N22)*(((-1.0)*(LAMB0)))) + N220;
        Z5_DP = ((N12)*(((1.0)*(LAMB0)))) + N120;
        X5_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL3)))) + N110;
        Y5_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL3)))) + N220;
        Z5_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL3)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X5_DP;
        TTL2.'S22'         = Y5_DP;
        TTL2.'S12'         = Z5_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X5_DN;
        TTL3.'S22'         = Y5_DN;
        TTL3.'S12'         = Z5_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
      'SINON';
        'SI' (((X5_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
         'OU' ((Y5_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
          X5_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL3)))) + N110;
          Y5_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL3)))) + N220;
          Z5_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL3)))) + N120;
          X5_DN = ((N11)*(((-1.0)*(LAMB0)))) + N110;
          Y5_DN = ((N22)*(((-1.0)*(LAMB0)))) + N220;
          Z5_DN = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X5_DP;
          TTL2.'S22'         = Y5_DP;
          TTL2.'S12'         = Z5_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X5_DN;
          TTL3.'S22'         = Y5_DN;
          TTL3.'S12'         = Z5_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
        'SINON';
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X5_DP;
          TTL2.'S22'         = Y5_DP;
          TTL2.'S12'         = Z5_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X5_DN;
          TTL3.'S22'         = Y5_DN;
          TTL3.'S12'         = Z5_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL3));
        'FINSI';
      'FINSI';
    'FINSI';
*   computation of D (gradiant) in case of Point_6=Argmin(fmin)
    'SI' (II1 'EGA' 6);
      X6_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL3)))) + N110;
      Y6_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL3)))) + N220;
      Z6_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL3)))) + N120;
      X6_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL3)))) + N110;
      Y6_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL3)))) + N220;
      Z6_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL3)))) + N120;
      'SI' (((X6_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
       'OU' ((Y6_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
        X6_DP = ((N11)*(((1.0)*(LAMB0)))) + N110;
        Y6_DP = ((N22)*(((-1.0)*(LAMB0)))) + N220;
        Z6_DP = ((N12)*(((1.0)*(LAMB0)))) + N120;
        X6_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL3)))) + N110;
        Y6_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL3)))) + N220;
        Z6_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL3)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X6_DP;
        TTL2.'S22'         = Y6_DP;
        TTL2.'S12'         = Z6_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X6_DN;
        TTL3.'S22'         = Y6_DN;
        TTL3.'S12'         = Z6_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
      'SINON';
        'SI' (((X6_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
         'OU' ((Y6_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
          X6_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL3)))) + N110;
          Y6_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL3)))) + N220;
          Z6_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL3)))) + N120;
          X6_DN = ((N11)*(((1.0)*(LAMB0)))) + N110;
          Y6_DN = ((N22)*(((-1.0)*(LAMB0)))) + N220;
          Z6_DN = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X6_DP;
          TTL2.'S22'         = Y6_DP;
          TTL2.'S12'         = Z6_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X6_DN;
          TTL3.'S22'         = Y6_DN;
          TTL3.'S12'         = Z6_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
        'SINON';
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X6_DP;
          TTL2.'S22'         = Y6_DP;
          TTL2.'S12'         = Z6_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X6_DN;
          TTL3.'S22'         = Y6_DN;
          TTL3.'S12'         = Z6_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL3));
        'FINSI';
      'FINSI';
   'FINSI';
*   computation of D (gradiant) in case of Point_7=Argmin(fmin)
    'SI' (II2 'EGA' 7);
      X7_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL3)))) + N110;
      Y7_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL3)))) + N220;
      Z7_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL3)))) + N120;
      X7_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL3)))) + N110;
      Y7_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL3)))) + N220;
      Z7_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL3)))) + N120;
      'SI' (((X7_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
       'OU' ((Y7_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
        X7_DP = ((N11)*(((1.0)*(LAMB0)))) + N110;
        Y7_DP = ((N22)*(((1.0)*(LAMB0)))) + N220;
        Z7_DP = ((N12)*(((1.0)*(LAMB0)))) + N120;
        X7_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL3)))) + N110;
        Y7_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL3)))) + N220;
        Z7_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL3)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X7_DP;
        TTL2.'S22'         = Y7_DP;
        TTL2.'S12'         = Z7_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X7_DN;
        TTL3.'S22'         = Y7_DN;
        TTL3.'S12'         = Z7_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;

        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
      'SINON';
        'SI' (((X7_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
         'OU' ((Y7_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
          X7_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL3)))) + N110;
          Y7_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL3)))) + N220;
          Z7_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL3)))) + N120;
          X7_DN = ((N11)*(((1.0)*(LAMB0)))) + N110;
          Y7_DN = ((N22)*(((1.0)*(LAMB0)))) + N220;
          Z7_DN = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X7_DP;
          TTL2.'S22'         = Y7_DP;
          TTL2.'S12'         = Z7_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X7_DN;
          TTL3.'S22'         = Y7_DN;
          TTL3.'S12'         = Z7_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
        'SINON';
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X7_DP;
          TTL2.'S22'         = Y7_DP;
          TTL2.'S12'         = Z7_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X7_DN;
          TTL3.'S22'         = Y7_DN;
          TTL3.'S12'         = Z7_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL3));
        'FINSI';
      'FINSI';
    'FINSI';
*   computation of D (gradiant) in case of Point_8=Argmin(fmin)
    'SI' (II1 'EGA' 8);
      X8_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL3)))) + N110;
      Y8_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL3)))) + N220;
      Z8_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL3)))) + N120;
      X8_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL3)))) + N110;
      Y8_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL3)))) + N220;
      Z8_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL3)))) + N120;
      'SI' (((X8_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
       'OU' ((Y8_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
        X8_DP = ((N11)*(((-1.0)*(LAMB0)))) + N110;
        Y8_DP = ((N22)*(((1.0)*(LAMB0)))) + N220;
        Z8_DP = ((N12)*(((1.0)*(LAMB0)))) + N120;
        X8_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL3)))) + N110;
        Y8_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL3)))) + N220;
        Z8_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL3)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X8_DP;
        TTL2.'S22'         = Y8_DP;
        TTL2.'S12'         = Z8_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X8_DN;
        TTL3.'S22'         = Y8_DN;
        TTL3.'S12'         = Z8_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
      'SINON';
        'SI' (((X8_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
         'OU' ((Y8_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                             + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
          X8_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL3)))) + N110;
          Y8_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL3)))) + N220;
          Z8_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL3)))) + N120;
          X8_DN = ((N11)*(((-1.0)*(LAMB0)))) + N110;
          Y8_DN = ((N22)*(((1.0)*(LAMB0)))) + N220;
          Z8_DN = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X8_DP;
          TTL2.'S22'         = Y8_DP;
          TTL2.'S12'         = Z8_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X8_DN;
          TTL3.'S22'         = Y8_DN;
          TTL3.'S12'         = Z8_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL3));
        'SINON';
          TTL2               = TABLE;
          TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL2.'S11'         = X8_DP;
          TTL2.'S22'         = Y8_DP;
          TTL2.'S12'         = Z8_DP;
          TTL2.'FCK'         = FCBET1;
          TTL2.'FSK_1'       = FSACI1;
          TTL2.'FSK_2'       = FSACI1;
          TTL2.'RHO_1'       = RHOXS;
          TTL2.'RHO_2'       = RHOYS;
          TTL2.'GAMMA_C'     = GAMC;
          TTL2.'ALPA_C'      = ALPC1;
          TTL2.'NU_C'        = NUC1;
          TTL2.'GAMMA_S'     = GAMS1;
          TTL3               = TABLE;
          TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
          TTL3.'S11'         = X8_DN;
          TTL3.'S22'         = Y8_DN;
          TTL3.'S12'         = Z8_DN;
          TTL3.'FCK'         = FCBET1;
          TTL3.'FSK_1'       = FSACI1;
          TTL3.'FSK_2'       = FSACI1;
          TTL3.'RHO_1'       = RHOXS;
          TTL3.'RHO_2'       = RHOYS;
          TTL3.'GAMMA_C'     = GAMC;
          TTL3.'ALPA_C'      = ALPC1;
          TTL3.'NU_C'        = NUC1;
          TTL3.'GAMMA_S'     = GAMS1;
          D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL3));
        'FINSI';
      'FINSI';
    'FINSI';
    'OUBL' X1_DP;
    'OUBL' Y1_DP;
    'OUBL' Z1_DP;
    'OUBL' X1_DN;
    'OUBL' Y1_DN;
    'OUBL' Z1_DN;
    'OUBL' X2_DP;
    'OUBL' Y2_DP;
    'OUBL' Z2_DP;
    'OUBL' X2_DN;
    'OUBL' Y2_DN;
    'OUBL' Z2_DN;
    'OUBL' X3_DP;
    'OUBL' Y3_DP;
    'OUBL' Z3_DP;
    'OUBL' X3_DN;
    'OUBL' Y3_DN;
    'OUBL' Z3_DN;
    'OUBL' X4_DP;
    'OUBL' Y4_DP;
    'OUBL' Z4_DP;
    'OUBL' X4_DN;
    'OUBL' Y4_DN;
    'OUBL' Z4_DN;
    'OUBL' X5_DP;
    'OUBL' Y5_DP;
    'OUBL' Z5_DP;
    'OUBL' X5_DN;
    'OUBL' Y5_DN;
    'OUBL' Z5_DN;
    'OUBL' X6_DP;
    'OUBL' Y6_DP;
    'OUBL' Z6_DP;
    'OUBL' X6_DN;
    'OUBL' Y6_DN;
    'OUBL' Z6_DN;
    'OUBL' X7_DP;
    'OUBL' Y7_DP;
    'OUBL' Z7_DP;
    'OUBL' X7_DN;
    'OUBL' Y7_DN;
    'OUBL' Z7_DN;
    'OUBL' X8_DP;
    'OUBL' Y8_DP;
    'OUBL' Z8_DP;
    'OUBL' X8_DN;
    'OUBL' Y8_DN;
    'OUBL' Z8_DN;
*
*   test convergence
    'SI' (('ABS'(VAL_F)) '<' TOL_1);
*     convergence!!!
      LAMBJ = LAMB0;
      'QUIT' IND4;
    'SINON';
      'SI' (I_MM1 'EGA' 200);
*      reach the limits of loop
        ID1_CON = 1;
        LAMBJ = LAMB0;
        'QUIT' IND4;
      'FINSI';
      'SI' (I_MM1 > 2);
*      controle on the variation of Lambda
        'SI' ((ABS((LAMB0 - LAMB1)/(LAMB0))) < ((TOL_1)*(1.e-10)));
          LAMBJ = LAMB0;
          'QUIT' IND4;
        'FINSI';
      'FINSI';
*      if N11 stress of Point_j is out of the external boundary of the
*      limite surface
      XX_T_MIN = 'MINI' LL_X0;
      XX_T_MAX = 'MAXI' LL_X0;
      YY_T_MIN = 'MINI' LL_Y0;
      YY_T_MAX = 'MAXI' LL_Y0;
      'SI' (((XX_T_MAX)  '>' ((FSACI1*RHOXS)/(GAMS1)))            'OU'
        ((YY_T_MAX)   '>' ((FSACI1*RHOYS)/(GAMS1)))               'OU'
        ((XX_T_MIN)
                      '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                          + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))   'OU'
        ((YY_T_MIN)
                      '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                        + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
        LAMB1 = LAMB0;
        LAMB2 = 1000000000.;
        'SI' ((XX_T_MAX) '>' ((FSACI1*RHOXS)/(GAMS1)));
          LAMB3 = (((FSACI1*RHOXS)/(GAMS1)) - (N110) - TOL_2)/(N11);
          'SI' (LAMB3 '<' LAMB2);
            LAMB2 = LAMB3;
          'FINSI';
        'FINSI';
        'SI' ((YY_T_MAX) '>' ((FSACI1*RHOYS)/(GAMS1)));
          LAMB3 = (((FSACI1*RHOYS)/(GAMS1)) - (N220) - TOL_2)/(N22);
          'SI' (LAMB3 '<' LAMB2);
            LAMB2 = LAMB3;
          'FINSI';
        'FINSI';
        'SI' ((XX_T_MIN) '<'
                           (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                          + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))));
          LAMB3 = ((((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                         + ((-1.0)*((FSACI1*RHOXS)/(GAMS1))))
                                     - (N110) + TOL_2)/(N11);
          'SI' (LAMB3 '<' LAMB2);
            LAMB2 = LAMB3;
          'FINSI';
        'FINSI';
        'SI' ((YY_T_MIN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOYS)/(GAMS1)))));
          LAMB3 = ((((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                            + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))
                                       - (N220) + TOL_2)/(N22);
          'SI' (LAMB3 '<' LAMB2);
            LAMB2 = LAMB3;
          'FINSI';
        'FINSI';
        LAMB0 = LAMB2;
        'OUBL' LAMB2;
        'OUBL' LAMB3;
      'SINON';
        'SI' (('ABS'(D_VAL1)) < 1.E-16);
*         in case of D is equal to zero
          LAMB1 = LAMB0;
          LAMB0 = ((1.1)*(LAMB0));
        'SINON';
*         otherwise
          LAMB1 = LAMB0;
          LAMB0 = LAMB0 - ((VAL_F)/(D_VAL1));
        'FINSI';
      'FINSI';
    'FINSI';
    'OUBL' VAL_F;
    'OUBL' D_VAL1;
*
    TAB_ITE. (I_MM1 + 1) = 'TABLE';
    TAB_ITE. (I_MM1 + 1) .'LAMBDA' = ABS(LAMB0) ;
*
    I_MM1 = I_MM1 + 1;
  'FIN' IND4;

   LAM_FIN2 = TAB_ITE. (('DIME' TAB_ITE) - 1) .'LAMBDA';
   'OUBL' TAB_ITE;
   'OUBL' LAMB0;
   'OUBL' LAMB1;
   'OUBL' LL_X0;
   'OUBL' LL_Y0;
   'OUBL' LL_Z0;
   'OUBL' LL_Y0;
   'OUBL' D_VAL1;
   'OUBL' VAL_F;
*
  TIT1 = CHAINE TIT1 '....new value ' LAM_FIN2;
*
  LAM_FIN = LAM_FIN2;
*
  'SI' ('EGA' ('TYPE' LL_ERRE1) 'LISTENTI');
     LL_ERRE1 = LL_ERRE1 ET ('LECT' I_ELE1);
  'SINON';
     LL_ERRE1 = ('LECT' I_ELE1);
  'FINSI';
  'MESS' TIT1;
*
'FINSI';
*
*  results stored in the MCHAML field
'SI' (I_IE1 'EGA' 1);
  MOD1    = 'MODE' ELE_VOI1 'MECANIQUE' 'ELASTIQUE' 'ISOTROPE';
  MODTOT  = MODTOT 'ET' MOD1;
*  CH_LAME = CH_LAME 'ET' ('MANU' 'CHML' MOD1 'LAME' LAM_FIN);
  CH_LAME = CH_LAME 'ET' ('MANU' 'CHML' ELE_VOI1 'LAME' LAM_FIN);
  'SI' (LAM_FIN '<' 1.0);
    MAI_REE = MAI_REE 'ET' (ELE_VOI1 'COUL' 'ROUG');
  'SINON';
    MAI_REE = MAI_REE 'ET' (ELE_VOI1 'COUL' 'VERT');
  'FINSI';
'FINSI';
'SI' (I_IE1 'EGA' 2);
  MOD1    = 'MODE' ELE_VOI1 'MECANIQUE' 'ELASTIQUE' 'ISOTROPE';
  MODTOT  = MODTOT 'ET' MOD1;
*  CH_LAMI = CH_LAMI 'ET' ('MANU' 'CHML' MOD1 'LAMI' LAM_FIN);
  CH_LAMI = CH_LAMI 'ET' ('MANU' 'CHML' ELE_VOI1 'LAMI' LAM_FIN);
  'SI' (LAM_FIN '<' 1.0);
    MAI_REI = MAI_REI 'ET' (ELE_VOI1 'COUL' 'ROUG');
  'SINON';
    MAI_REI = MAI_REI 'ET' (ELE_VOI1 'COUL' 'VERT');
  'FINSI';
'FINSI';
*
'OUBL' LAM_FIN;
'OUBL' LAM_FIN2;
*
'FINSI';
'FINSI';
*
I_ELE1 = I_ELE1 + 1;
'FIN' IND_ELE1;
I_IE1 = I_IE1 + 1;
'FIN' IND_IE1 ;
*
'OUBL' MOD1;
*
'SINON';
*------------------ Calcul par le rectangle ---------------------------*
*
*  Rectangle methode
'MESS' ' ------------------------------------------------------------';
'MESS' '                     Methode Rectangle';
'MESS' ' ------------------------------------------------------------';
'MESS';
*
* loop for the layer (external or intenal)
I_IE1 = 1;
'REPE' IND_IE1 (3);
*
'SI' (I_IE1 'EGA' 1);
*
* I_IE1 = 1 External layer
  'MESS';
  'MESS' ' Membrane Exterieure';
'FINSI';
*
* I_IE1 = 2 Internal layer
'SI' (I_IE1 'EGA' 2);
  'MESS';
  'MESS' ' Membrane Interieure';
'FINSI';
*
'SI' (I_IE1 'EGA' 3);
  'MESS';
  'MESS' ' Core';
'FINSI';
*
* loop for the elements
I_ELE1 = 1;
'REPE' IND_ELE1 (N_ELE1);
* element I
ELE_VOI1 = MAI_V ELEM I_ELE1;
* extracting the force and caracteristics for the external layer
'SI' (I_IE1 'EGA' 1);
  RHOXS = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'RHO1' 1 1 1;
  RHOYS = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'RHO2' 1 1 1;
  ENR1 =  'EXTR' ('REDU' CH_CARE ELE_VOI1) 'ENRO' 1 1 1;
*
  N11 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C11E' 1 1 1)**(0.5);
  N11N22 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C12E' 1 1 1);
  N11N12 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C13E' 1 1 1);
  N22 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C22E' 1 1 1)**(0.5);
  N22N12 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C23E' 1 1 1);
  N12 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C33E' 1 1 1)**(0.5);
  N110 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N11E' 1 1 1);
  N220 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N22E' 1 1 1);
  N120 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N12E' 1 1 1);
*
* seismic stress
  N11 = ((N11)/((2.0)*(ENR1)));
  N22 = ((N22)/((2.0)*(ENR1)));
  N12 = ((N12)/((2.0)*(ENR1)));
  N11N22 = ((N11N22)/(((2.0)*(ENR1))**(2.0)));
  N11N12 = ((N11N12)/(((2.0)*(ENR1))**(2.0)));
  N22N12 = ((N22N12)/(((2.0)*(ENR1))**(2.0)));
*
* static stress
  N110 = ((N110)/((2.0)*(ENR1)));
  N220 = ((N220)/((2.0)*(ENR1)));
  N120 = ((N120)/((2.0)*(ENR1)));
*

'FINSI';
* extracting the force and caracteristics for the internal layer
'SI' (I_IE1 'EGA' 2);
  RHOXS = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'RHO1' 1 1 1;
  RHOYS = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'RHO2' 1 1 1;
  ENR1 =  'EXTR' ('REDU' CH_CARI ELE_VOI1) 'ENRO' 1 1 1;
*
  N11 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C11I' 1 1 1)**(0.5);
  N11N22 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C12I' 1 1 1);
  N11N12 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C13I' 1 1 1);
  N22 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C22I' 1 1 1)**(0.5);
  N22N12 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C23I' 1 1 1);
  N12 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'C33I' 1 1 1)**(0.5);
  N110 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N11I' 1 1 1);
  N220 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N22I' 1 1 1);
  N120 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'N12I' 1 1 1);
*
* seismic stress
  N11 =    ((N11)/((2.0)*(ENR1)));
  N22 =    ((N22)/((2.0)*(ENR1)));
  N12 =    ((N12)/((2.0)*(ENR1)));
  N11N22 = ((N11N22)/(((2.0)*(ENR1))**(2.0)));
  N11N12 = ((N11N12)/(((2.0)*(ENR1))**(2.0)));
  N22N12 = ((N22N12)/(((2.0)*(ENR1))**(2.0)));
*
* static stress
  N110 =   ((N110)/((2.0)*(ENR1)));
  N220 =   ((N220)/((2.0)*(ENR1)));
  N120 =   ((N120)/((2.0)*(ENR1)));
*
'FINSI';
*
* extracting the force and caracteristics for the internal layer
'SI' (I_IE1 'EGA' 3);
  RHOT = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'RHOT' 1 1 1;
  ENR1 =  'EXTR' ('REDU' CH_CARE ELE_VOI1) 'ENRO' 1 1 1;
  ENR2 =  'EXTR' ('REDU' CH_CARI ELE_VOI1) 'ENRO' 1 1 1;
  H_11 = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'H' 1 1 1;
  D_11 = H_11 - ((2.0)*(ENR1)) - ((2.0)*(ENR2));
  CO_TH1 = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'COTH' 1 1 1;
*
  V1 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'CV11' 1 1 1)**(0.5);
  V1V2 = ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'CV12' 1 1 1);
  V2 =    ('EXTR' ('REDU' CH_SEI1 ELE_VOI1) 'CV22' 1 1 1)**(0.5);
*
  V10 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'V1T' 1 1 1);
  V20 =   ('EXTR' ('REDU' CH_STA1 ELE_VOI1) 'V2T' 1 1 1);
*
* seismic stress
  T1 =    ((V1)/((D_11)));
  T2 =    ((V2)/((D_11)));
  T1T2 = ((V1V2)/(((D_11))**(2.0)));
*
* static stress
  T10 =   ((V10)/((D_11)));
  T20 =   ((V20)/((D_11)));
*
'FINSI';
*
* Verificatiuon Core--------------------------------------------
'SI' (I_IE1 'EGA' 3);
* --------------------------------------------------------------
TTL1 = TABLE;
TTL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
TTL1.'T1'         =  T10;
TTL1.'T2'         =  T20;
TTL1.'FCK'         = FCBET1;
TTL1.'FSK_T'       = FSACI1;
TTL1.'RHO_T'       = RHOT;
TTL1.'GAMMA_C'     = GAMC;
TTL1.'ALPA_C'      = ALPC1;
TTL1.'GAMMA_S'     = GAMS1;
TTL1.'NU_C'        = NUC1;
TTL1.'COT_THETA'     = CO_TH1;
T_ST1 = G_ULTI2D TTL1;
'SI' (T_ST1 '<EG' 0.0);
  LAM_FIN = 0.0;
  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                  LAM_FIN '.....Sig0 externe';
  'MESS' TIT1;
'SINON';
  H_VAL1 = FCBET1/100000;
  LAMB0 =  1.0;
*
  T1 = ABS(T1);
  T2 = ABS(T2);
  T10 = ABS(T10);
  T20 = ABS(T20);
*
  I_M1 = 0;
  TAB_ITE = TABLE;
*
  'REPE' IND1 (200);
  X1_0 = ((T1)*(((1.0)*(LAMB0)))) + T10;
  Y1_0 = ((T2)*(((1.0)*(LAMB0)))) + T20;
*
  X1_DP = ((T1)*(((1.0)*(LAMB0 + H_VAL1)))) + T10;
  Y1_DP = ((T2)*(((1.0)*(LAMB0 + H_VAL1)))) + T20;
  X1_DN = ((T1)*(((1.0)*(LAMB0 - H_VAL1)))) + T10;
  Y1_DN = ((T2)*(((1.0)*(LAMB0 - H_VAL1)))) + T20;
*
  TTL1 = TABLE;
  TTL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
  TTL1.'T1'         =  X1_0;
  TTL1.'T2'         =  Y1_0;
  TTL1.'FCK'         = FCBET1;
  TTL1.'FSK_T'       = FSACI1;
  TTL1.'RHO_T'       = RHOT;
  TTL1.'GAMMA_C'     = GAMC;
  TTL1.'ALPA_C'      = ALPC1;
  TTL1.'GAMMA_S'     = GAMS1;
  TTL1.'NU_C'        = NUC1;
  TTL1.'COT_THETA'     = CO_TH1;
  TTL2 = TABLE;
  TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
  TTL2.'T1'         =  X1_DP;
  TTL2.'T2'         =  Y1_DP;
  TTL2.'FCK'         = FCBET1;
  TTL2.'FSK_T'       = FSACI1;
  TTL2.'RHO_T'       = RHOT;
  TTL2.'GAMMA_C'     = GAMC;
  TTL2.'ALPA_C'      = ALPC1;
  TTL2.'GAMMA_S'     = GAMS1;
  TTL2.'NU_C'        = NUC1;
  TTL2.'COT_THETA'     = CO_TH1;
  TTL3 = TABLE;
  TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_COR';
  TTL3.'T1'         =  X1_DN;
  TTL3.'T2'         =  Y1_DN;
  TTL3.'FCK'         = FCBET1;
  TTL3.'FSK_T'       = FSACI1;
  TTL3.'RHO_T'       = RHOT;
  TTL3.'GAMMA_C'     = GAMC;
  TTL3.'ALPA_C'      = ALPC1;
  TTL3.'GAMMA_S'     = GAMS1;
  TTL3.'NU_C'        = NUC1;
  TTL3.'COT_THETA'     = CO_TH1;
  VAL_F = (G_ULTI2D TTL1);
  D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL1));
*
    'SI' (('ABS'(VAL_F)) '<' TOL_1);
*    'SI' (('ABS'(VAL_F)) '<' 0.00001);
*     convergence!!!
      LAMBJ = LAMB0;
      'QUIT' IND1;
    'SINON';
      'SI' (I_M1 'EGA' 200);
*      reach the limits of loop
        ID1_CON = 1;
        LAMBJ = LAMB0;
        'QUIT' IND1;
      'FINSI';
*       otherwise
        LAMB1 = LAMB0;
        LAMB0 = LAMB0 - ((VAL_F)/(D_VAL1));
    'FINSI';
*
  TAB_ITE. (I_M1) = 'TABLE';
  TAB_ITE. (I_M1) .'LAMBDA' = ABS(LAMB0) ;
*
  I_M1 = I_M1 + 1;
  'FIN' IND1;
* final Lambda
LAM_FIN = TAB_ITE. ((DIME TAB_ITE) - 1) .'LAMBDA';
'SI' (ID1_CON 'EGA' 0);
  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                    LAM_FIN;
  'MESS' TIT1;
'FINSI';
*
'FINSI';
*
* Verification couches interne et externe-----------------------
'SINON';
* --------------------------------------------------------------
*
* Test about the static state stress
TTL1               = TABLE;
TTL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
TTL1.'S11'         = N110;
TTL1.'S22'         = N220;
TTL1.'S12'         = N120;
TTL1.'FCK'         = FCBET1;
TTL1.'FSK_1'       = FSACI1;
TTL1.'FSK_2'       = FSACI1;
TTL1.'RHO_1'       = RHOXS;
TTL1.'RHO_2'       = RHOYS;
TTL1.'GAMMA_C'     = GAMC;
TTL1.'ALPA_C'      = ALPC1;
TTL1.'NU_C'        = NUC1;
TTL1.'GAMMA_S'     = GAMS1;
*
ID1_CON = 0;
*
T_ST1 = G_ULTI2D TTL1;
'SI' (T_ST1 '<EG' 0.0);
  LAM_FIN = 0.0;
  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                  LAM_FIN '.....Sig0 externe';
  'MESS' TIT1;
'SINON';
*
* Start of the iteration
*
* incremental step et starting point
*H_VAL1 = FCBET1/100000;
LAMB0 =  1.0;
H_VAL1 = LAMB0/10000;
TOL_2 = FCBET1/1000;
*
* reference list for the 8 point for rectangle solid
LL_I = PROG 1. 2. 3. 4. 5. 6. 7. 8.;
*
* creation of resuming table
TAB_ITE = 'TABLE';
TAB_ITE. 0 = 'TABLE';
TAB_ITE. 0 .'LAMBDA' = LAMB0 ;
*
I_M1 = 0;
*
* loop for in order to find f=0
'REPE' IND1 (200);
*
* stress state for the 8 points
  X1_0 = ((N11)*(((-1.0)*(LAMB0)))) + N110;
  Y1_0 = ((N22)*(((-1.0)*(LAMB0)))) + N220;
  Z1_0 = ((N12)*(((-1.0)*(LAMB0)))) + N120;
  X2_0 = ((N11)*(((1.0)*(LAMB0)))) + N110;
  Y2_0 = ((N22)*(((-1.0)*(LAMB0)))) + N220;
  Z2_0 = ((N12)*(((-1.0)*(LAMB0)))) + N120;
  X3_0 = ((N11)*(((1.0)*(LAMB0)))) + N110;
  Y3_0 = ((N22)*(((1.0)*(LAMB0)))) + N220;
  Z3_0 = ((N12)*(((-1.0)*(LAMB0)))) + N120;
  X4_0 = ((N11)*(((-1.0)*(LAMB0)))) + N110;
  Y4_0 = ((N22)*(((1.0)*(LAMB0)))) + N220;
  Z4_0 = ((N12)*(((-1.0)*(LAMB0)))) + N120;
  X5_0 = ((N11)*(((-1.0)*(LAMB0)))) + N110;
  Y5_0 = ((N22)*(((-1.0)*(LAMB0)))) + N220;
  Z5_0 = ((N12)*(((1.0)*(LAMB0)))) + N120;
  X6_0 = ((N11)*(((1.0)*(LAMB0)))) + N110;
  Y6_0 = ((N22)*(((-1.0)*(LAMB0)))) + N220;
  Z6_0 = ((N12)*(((1.0)*(LAMB0)))) + N120;
  X7_0 = ((N11)*(((1.0)*(LAMB0)))) + N110;
  Y7_0 = ((N22)*(((1.0)*(LAMB0)))) + N220;
  Z7_0 = ((N12)*(((1.0)*(LAMB0)))) + N120;
  X8_0 = ((N11)*(((-1.0)*(LAMB0)))) + N110;
  Y8_0 = ((N22)*(((1.0)*(LAMB0)))) + N220;
  Z8_0 = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
* put the N11, N22 et N12 stress state in the lists
  LL_X0 = PROG (X1_0) (X2_0) (X3_0) (X4_0)
               (X5_0) (X6_0) (X7_0) (X8_0);
  LL_Y0 = PROG (Y1_0) (Y2_0) (Y3_0) (Y4_0)
               (Y5_0) (Y6_0) (Y7_0) (Y8_0);
  LL_Z0 = PROG (Z1_0) (Z2_0) (Z3_0) (Z4_0)
               (Z5_0) (Z6_0) (Z7_0) (Z8_0);
  LL_F0 = PROG;
*
* deduction of f for each point
  I = 1;
  'REPE' IND2 (8);
    TTL1               = TABLE;
    TTL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
    TTL1.'S11'         = (EXTR LL_X0 I);
    TTL1.'S22'         = (EXTR LL_Y0 I);
    TTL1.'S12'         = (EXTR LL_Z0 I);
    TTL1.'FCK'         = FCBET1;
    TTL1.'FSK_1'       = FSACI1;
    TTL1.'FSK_2'       = FSACI1;
    TTL1.'RHO_1'       = RHOXS;
    TTL1.'RHO_2'       = RHOYS;
    TTL1.'GAMMA_C'     = GAMC;
    TTL1.'ALPA_C'      = ALPC1;
    TTL1.'NU_C'        = NUC1;
    TTL1.'GAMMA_S'     = GAMS1;
    LL_F0 = LL_F0 ET
      (PROG (G_ULTI2D TTL1));
    I = I + 1;
  'FIN' IND2;
* saving
  TAB_ITE. I_M1 .'L_X' = LL_X0;
  TAB_ITE. I_M1 .'L_Y' = LL_Y0;
  TAB_ITE. I_M1 .'L_Z' = LL_Z0;
  TAB_ITE. I_M1 .'L_F' = LL_F0;
* finding the minimum value of f and the corresponding point
  EV1 = EVOL MANU LL_I LL_F0;
  II1 II2 VAL_F = MINI EV1;
* computation of D (gradiant) in case of Point_1=Argmin(fmin)
  'SI' (II1 'EGA' 1);
    X1_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL1)))) + N110;
    Y1_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL1)))) + N220;
    Z1_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL1)))) + N120;
    X1_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL1)))) + N110;
    Y1_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL1)))) + N220;
    Z1_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL1)))) + N120;
    'SI' (((X1_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
     'OU' ((Y1_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
      X1_DP = ((N11)*(((-1.0)*(LAMB0)))) + N110;
      Y1_DP = ((N22)*(((-1.0)*(LAMB0)))) + N220;
      Z1_DP = ((N12)*(((-1.0)*(LAMB0)))) + N120;
      X1_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL1)))) + N110;
      Y1_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL1)))) + N220;
      Z1_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL1)))) + N120;
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = X1_DP;
      TTL2.'S22'         = Y1_DP;
      TTL2.'S12'         = Z1_DP;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = X1_DN;
      TTL3.'S22'         = Y1_DN;
      TTL3.'S12'         = Z1_DN;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
    'SINON';
      'SI' (((X1_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
       'OU' ((Y1_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
        X1_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL1)))) + N110;
        Y1_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL1)))) + N220;
        Z1_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL1)))) + N120;
        X1_DN = ((N11)*(((-1.0)*(LAMB0)))) + N110;
        Y1_DN = ((N22)*(((-1.0)*(LAMB0)))) + N220;
        Z1_DN = ((N12)*(((-1.0)*(LAMB0)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X1_DP;
        TTL2.'S22'         = Y1_DP;
        TTL2.'S12'         = Z1_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X1_DN;
        TTL3.'S22'         = Y1_DN;
        TTL3.'S12'         = Z1_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
      'SINON';
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X1_DP;
        TTL2.'S22'         = Y1_DP;
        TTL2.'S12'         = Z1_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X1_DN;
        TTL3.'S22'         = Y1_DN;
        TTL3.'S12'         = Z1_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL1));
      'FINSI';
    'FINSI';
  'FINSI';
* computation of D (gradiant) in case of Point_2=Argmin(fmin)
  'SI' (II1 'EGA' 2);
    X2_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL1)))) + N110;
    Y2_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL1)))) + N220;
    Z2_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL1)))) + N120;
    X2_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL1)))) + N110;
    Y2_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL1)))) + N220;
    Z2_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL1)))) + N120;
    'SI' (((X2_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
     'OU' ((Y2_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
      X2_DP = ((N11)*(((1.0)*(LAMB0)))) + N110;
      Y2_DP = ((N22)*(((-1.0)*(LAMB0)))) + N220;
      Z2_DP = ((N12)*(((-1.0)*(LAMB0)))) + N120;
      X2_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL1)))) + N110;
      Y2_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL1)))) + N220;
      Z2_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL1)))) + N120;
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = X2_DP;
      TTL2.'S22'         = Y2_DP;
      TTL2.'S12'         = Z2_DP;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = X2_DN;
      TTL3.'S22'         = Y2_DN;
      TTL3.'S12'         = Z2_DN;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
    'SINON';
      'SI' (((X2_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
       'OU' ((Y2_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
        X2_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL1)))) + N110;
        Y2_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL1)))) + N220;
        Z2_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL1)))) + N120;
        X2_DN = ((N11)*(((1.0)*(LAMB0)))) + N110;
        Y2_DN = ((N22)*(((-1.0)*(LAMB0)))) + N220;
        Z2_DN = ((N12)*(((-1.0)*(LAMB0)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X2_DP;
        TTL2.'S22'         = Y2_DP;
        TTL2.'S12'         = Z2_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X2_DN;
        TTL3.'S22'         = Y2_DN;
        TTL3.'S12'         = Z2_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
      'SINON';
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X2_DP;
        TTL2.'S22'         = Y2_DP;
        TTL2.'S12'         = Z2_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X2_DN;
        TTL3.'S22'         = Y2_DN;
        TTL3.'S12'         = Z2_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL1));
      'FINSI';
    'FINSI';
  'FINSI';
* computation of D (gradiant) in case of Point_3=Argmin(fmin)
  'SI' (II1 'EGA' 3);
    X3_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL1)))) + N110;
    Y3_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL1)))) + N220;
    Z3_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL1)))) + N120;
    X3_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL1)))) + N110;
    Y3_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL1)))) + N220;
    Z3_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL1)))) + N120;
    'SI' (((X3_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
     'OU' ((Y3_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
      X3_DP = ((N11)*(((1.0)*(LAMB0)))) + N110;
      Y3_DP = ((N22)*(((1.0)*(LAMB0)))) + N220;
      Z3_DP = ((N12)*(((-1.0)*(LAMB0)))) + N120;
      X3_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL1)))) + N110;
      Y3_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL1)))) + N220;
      Z3_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL1)))) + N120;
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = X3_DP;
      TTL2.'S22'         = Y3_DP;
      TTL2.'S12'         = Z3_DP;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = X3_DN;
      TTL3.'S22'         = Y3_DN;
      TTL3.'S12'         = Z3_DN;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
    'SINON';
      'SI' (((X3_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
       'OU' ((Y3_DN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
        X3_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL1)))) + N110;
        Y3_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL1)))) + N220;
        Z3_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL1)))) + N120;
        X3_DN = ((N11)*(((1.0)*(LAMB0)))) + N110;
        Y3_DN = ((N22)*(((1.0)*(LAMB0)))) + N220;
        Z3_DN = ((N12)*(((-1.0)*(LAMB0)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X3_DP;
        TTL2.'S22'         = Y3_DP;
        TTL2.'S12'         = Z3_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X3_DN;
        TTL3.'S22'         = Y3_DN;
        TTL3.'S12'         = Z3_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
      'SINON';
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X3_DP;
        TTL2.'S22'         = Y3_DP;
        TTL2.'S12'         = Z3_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X3_DN;
        TTL3.'S22'         = Y3_DN;
        TTL3.'S12'         = Z3_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL1));
      'FINSI';
    'FINSI';
  'FINSI';
* computation of D (gradiant) in case of Point_4=Argmin(fmin)
  'SI' (II1 'EGA' 4);
    X4_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL1)))) + N110;
    Y4_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL1)))) + N220;
    Z4_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL1)))) + N120;
    X4_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL1)))) + N110;
    Y4_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL1)))) + N220;
    Z4_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL1)))) + N120;
    'SI' (((X4_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
     'OU' ((Y4_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
      X4_DP = ((N11)*(((-1.0)*(LAMB0)))) + N110;
      Y4_DP = ((N22)*(((1.0)*(LAMB0)))) + N220;
      Z4_DP = ((N12)*(((-1.0)*(LAMB0)))) + N120;
      X4_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL1)))) + N110;
      Y4_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL1)))) + N220;
      Z4_DN = ((N12)*(((-1.0)*(LAMB0 - H_VAL1)))) + N120;
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = X4_DP;
      TTL2.'S22'         = Y4_DP;
      TTL2.'S12'         = Z4_DP;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = X4_DN;
      TTL3.'S22'         = Y4_DN;
      TTL3.'S12'         = Z4_DN;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
    'SINON';
      'SI' (((X4_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
       'OU' ((Y4_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
        X4_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL1)))) + N110;
        Y4_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL1)))) + N220;
        Z4_DP = ((N12)*(((-1.0)*(LAMB0 + H_VAL1)))) + N120;
        X4_DN = ((N11)*(((-1.0)*(LAMB0)))) + N110;
        Y4_DN = ((N22)*(((1.0)*(LAMB0)))) + N220;
        Z4_DN = ((N12)*(((-1.0)*(LAMB0)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X4_DP;
        TTL2.'S22'         = Y4_DP;
        TTL2.'S12'         = Z4_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X4_DN;
        TTL3.'S22'         = Y4_DN;
        TTL3.'S12'         = Z4_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
      'SINON';
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X4_DP;
        TTL2.'S22'         = Y4_DP;
        TTL2.'S12'         = Z4_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X4_DN;
        TTL3.'S22'         = Y4_DN;
        TTL3.'S12'         = Z4_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL1));
      'FINSI';
    'FINSI';
  'FINSI';
* computation of D (gradiant) in case of Point_5=Argmin(fmin)
  'SI' (II1 'EGA' 5);
    X5_DP = ((N11)*(((-1.0)*(LAMB0) + H_VAL1))) + N110;
    Y5_DP = ((N22)*(((-1.0)*(LAMB0) + H_VAL1))) + N220;
    Z5_DP = ((N12)*(((1.0)*(LAMB0) + H_VAL1))) + N120;
    X5_DN = ((N11)*(((-1.0)*(LAMB0) - H_VAL1))) + N110;
    Y5_DN = ((N22)*(((-1.0)*(LAMB0) - H_VAL1))) + N220;
    Z5_DN = ((N12)*(((1.0)*(LAMB0) - H_VAL1))) + N120;
    'SI' (((X5_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
     'OU' ((Y5_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
      X5_DP = ((N11)*(((-1.0)*(LAMB0)))) + N110;
      Y5_DP = ((N22)*(((-1.0)*(LAMB0)))) + N220;
      Z5_DP = ((N12)*(((1.0)*(LAMB0)))) + N120;
      X5_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL1)))) + N110;
      Y5_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL1)))) + N220;
      Z5_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL1)))) + N120;
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = X5_DP;
      TTL2.'S22'         = Y5_DP;
      TTL2.'S12'         = Z5_DP;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = X5_DN;
      TTL3.'S22'         = Y5_DN;
      TTL3.'S12'         = Z5_DN;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
    'SINON';
      'SI' (((X5_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
       'OU' ((Y5_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
        X5_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL1)))) + N110;
        Y5_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL1)))) + N220;
        Z5_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL1)))) + N120;
        X5_DN = ((N11)*(((-1.0)*(LAMB0)))) + N110;
        Y5_DN = ((N22)*(((-1.0)*(LAMB0)))) + N220;
        Z5_DN = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X5_DP;
        TTL2.'S22'         = Y5_DP;
        TTL2.'S12'         = Z5_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X5_DN;
        TTL3.'S22'         = Y5_DN;
        TTL3.'S12'         = Z5_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
      'SINON';
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X5_DP;
        TTL2.'S22'         = Y5_DP;
        TTL2.'S12'         = Z5_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X5_DN;
        TTL3.'S22'         = Y5_DN;
        TTL3.'S12'         = Z5_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL1));
      'FINSI';
    'FINSI';
  'FINSI';
* computation of D (gradiant) in case of Point_6=Argmin(fmin)
  'SI' (II1 'EGA' 6);
    X6_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL1)))) + N110;
    Y6_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL1)))) + N220;
    Z6_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL1)))) + N120;
    X6_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL1)))) + N110;
    Y6_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL1)))) + N220;
    Z6_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL1)))) + N120;
    'SI' (((X6_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
     'OU' ((Y6_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
      X6_DP = ((N11)*(((1.0)*(LAMB0)))) + N110;
      Y6_DP = ((N22)*(((-1.0)*(LAMB0)))) + N220;
      Z6_DP = ((N12)*(((1.0)*(LAMB0)))) + N120;
      X6_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL1)))) + N110;
      Y6_DN = ((N22)*(((-1.0)*(LAMB0 - H_VAL1)))) + N220;
      Z6_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL1)))) + N120;
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = X6_DP;
      TTL2.'S22'         = Y6_DP;
      TTL2.'S12'         = Z6_DP;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = X6_DN;
      TTL3.'S22'         = Y6_DN;
      TTL3.'S12'         = Z6_DN;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
    'SINON';
      'SI' (((X6_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
       'OU' ((Y6_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
        X6_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL1)))) + N110;
        Y6_DP = ((N22)*(((-1.0)*(LAMB0 + H_VAL1)))) + N220;
        Z6_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL1)))) + N120;
        X6_DN = ((N11)*(((1.0)*(LAMB0)))) + N110;
        Y6_DN = ((N22)*(((-1.0)*(LAMB0)))) + N220;
        Z6_DN = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X6_DP;
        TTL2.'S22'         = Y6_DP;
        TTL2.'S12'         = Z6_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X6_DN;
        TTL3.'S22'         = Y6_DN;
        TTL3.'S12'         = Z6_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
      'SINON';
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X6_DP;
        TTL2.'S22'         = Y6_DP;
        TTL2.'S12'         = Z6_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X6_DN;
        TTL3.'S22'         = Y6_DN;
        TTL3.'S12'         = Z6_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL1));

      'FINSI';
    'FINSI';
 'FINSI';
* computation of D (gradiant) in case of Point_7=Argmin(fmin)
  'SI' (II2 'EGA' 7);
    X7_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL1)))) + N110;
    Y7_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL1)))) + N220;
    Z7_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL1)))) + N120;
    X7_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL1)))) + N110;
    Y7_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL1)))) + N220;
    Z7_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL1)))) + N120;
    'SI' (((X7_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
     'OU' ((Y7_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
      X7_DP = ((N11)*(((1.0)*(LAMB0)))) + N110;
      Y7_DP = ((N22)*(((1.0)*(LAMB0)))) + N220;
      Z7_DP = ((N12)*(((1.0)*(LAMB0)))) + N120;
      X7_DN = ((N11)*(((1.0)*(LAMB0 - H_VAL1)))) + N110;
      Y7_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL1)))) + N220;
      Z7_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL1)))) + N120;
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = X7_DP;
      TTL2.'S22'         = Y7_DP;
      TTL2.'S12'         = Z7_DP;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = X7_DN;
      TTL3.'S22'         = Y7_DN;
      TTL3.'S12'         = Z7_DN;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
    'SINON';
      'SI' (((X7_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
       'OU' ((Y7_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
        X7_DP = ((N11)*(((1.0)*(LAMB0 + H_VAL1)))) + N110;
        Y7_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL1)))) + N220;
        Z7_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL1)))) + N120;
        X7_DN = ((N11)*(((1.0)*(LAMB0)))) + N110;
        Y7_DN = ((N22)*(((1.0)*(LAMB0)))) + N220;
        Z7_DN = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X7_DP;
        TTL2.'S22'         = Y7_DP;
        TTL2.'S12'         = Z7_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X7_DN;
        TTL3.'S22'         = Y7_DN;
        TTL3.'S12'         = Z7_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
      'SINON';
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X7_DP;
        TTL2.'S22'         = Y7_DP;
        TTL2.'S12'         = Z7_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X7_DN;
        TTL3.'S22'         = Y7_DN;
        TTL3.'S12'         = Z7_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL1));
      'FINSI';
    'FINSI';
  'FINSI';
* computation of D (gradiant) in case of Point_8=Argmin(fmin)
  'SI' (II1 'EGA' 8);
    X8_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL1)))) + N110;
    Y8_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL1)))) + N220;
    Z8_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL1)))) + N120;
    X8_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL1)))) + N110;
    Y8_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL1)))) + N220;
    Z8_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL1)))) + N120;
    'SI' (((X8_DP) '>' ((FSACI1*RHOXS)/(GAMS1)))
     'OU' ((Y8_DP) '>' ((FSACI1*RHOYS)/(GAMS1))));
      X8_DP = ((N11)*(((-1.0)*(LAMB0)))) + N110;
      Y8_DP = ((N22)*(((1.0)*(LAMB0)))) + N220;
      Z8_DP = ((N12)*(((1.0)*(LAMB0)))) + N120;
      X8_DN = ((N11)*(((-1.0)*(LAMB0 - H_VAL1)))) + N110;
      Y8_DN = ((N22)*(((1.0)*(LAMB0 - H_VAL1)))) + N220;
      Z8_DN = ((N12)*(((1.0)*(LAMB0 - H_VAL1)))) + N120;
*
      TTL2               = TABLE;
      TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL2.'S11'         = X8_DP;
      TTL2.'S22'         = Y8_DP;
      TTL2.'S12'         = Z8_DP;
      TTL2.'FCK'         = FCBET1;
      TTL2.'FSK_1'       = FSACI1;
      TTL2.'FSK_2'       = FSACI1;
      TTL2.'RHO_1'       = RHOXS;
      TTL2.'RHO_2'       = RHOYS;
      TTL2.'GAMMA_C'     = GAMC;
      TTL2.'ALPA_C'      = ALPC1;
      TTL2.'NU_C'        = NUC1;
      TTL2.'GAMMA_S'     = GAMS1;
      TTL3               = TABLE;
      TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
      TTL3.'S11'         = X8_DN;
      TTL3.'S22'         = Y8_DN;
      TTL3.'S12'         = Z8_DN;
      TTL3.'FCK'         = FCBET1;
      TTL3.'FSK_1'       = FSACI1;
      TTL3.'FSK_2'       = FSACI1;
      TTL3.'RHO_1'       = RHOXS;
      TTL3.'RHO_2'       = RHOYS;
      TTL3.'GAMMA_C'     = GAMC;
      TTL3.'ALPA_C'      = ALPC1;
      TTL3.'NU_C'        = NUC1;
      TTL3.'GAMMA_S'     = GAMS1;
      D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
    'SINON';
      'SI' (((X8_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))
       'OU' ((Y8_DN) '>' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
        X8_DP = ((N11)*(((-1.0)*(LAMB0 + H_VAL1)))) + N110;
        Y8_DP = ((N22)*(((1.0)*(LAMB0 + H_VAL1)))) + N220;
        Z8_DP = ((N12)*(((1.0)*(LAMB0 + H_VAL1)))) + N120;
        X8_DN = ((N11)*(((-1.0)*(LAMB0)))) + N110;
        Y8_DN = ((N22)*(((1.0)*(LAMB0)))) + N220;
        Z8_DN = ((N12)*(((1.0)*(LAMB0)))) + N120;
*
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X8_DP;
        TTL2.'S22'         = Y8_DP;
        TTL2.'S12'         = Z8_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X8_DN;
        TTL3.'S22'         = Y8_DN;
        TTL3.'S12'         = Z8_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((1.0)*(H_VAL1));
      'SINON';
        TTL2               = TABLE;
        TTL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL2.'S11'         = X8_DP;
        TTL2.'S22'         = Y8_DP;
        TTL2.'S12'         = Z8_DP;
        TTL2.'FCK'         = FCBET1;
        TTL2.'FSK_1'       = FSACI1;
        TTL2.'FSK_2'       = FSACI1;
        TTL2.'RHO_1'       = RHOXS;
        TTL2.'RHO_2'       = RHOYS;
        TTL2.'GAMMA_C'     = GAMC;
        TTL2.'ALPA_C'      = ALPC1;
        TTL2.'NU_C'        = NUC1;
        TTL2.'GAMMA_S'     = GAMS1;
        TTL3               = TABLE;
        TTL3.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
        TTL3.'S11'         = X8_DN;
        TTL3.'S22'         = Y8_DN;
        TTL3.'S12'         = Z8_DN;
        TTL3.'FCK'         = FCBET1;
        TTL3.'FSK_1'       = FSACI1;
        TTL3.'FSK_2'       = FSACI1;
        TTL3.'RHO_1'       = RHOXS;
        TTL3.'RHO_2'       = RHOYS;
        TTL3.'GAMMA_C'     = GAMC;
        TTL3.'ALPA_C'      = ALPC1;
        TTL3.'NU_C'        = NUC1;
        TTL3.'GAMMA_S'     = GAMS1;
        D_VAL1 = ((G_ULTI2D TTL2) - (G_ULTI2D TTL3))/((2.0)*(H_VAL1));
      'FINSI';
    'FINSI';
  'FINSI';
  'OUBL' X1_DP;
  'OUBL' Y1_DP;
  'OUBL' Z1_DP;
  'OUBL' X1_DN;
  'OUBL' Y1_DN;
  'OUBL' Z1_DN;
  'OUBL' X2_DP;
  'OUBL' Y2_DP;
  'OUBL' Z2_DP;
  'OUBL' X2_DN;
  'OUBL' Y2_DN;
  'OUBL' Z2_DN;
  'OUBL' X3_DP;
  'OUBL' Y3_DP;
  'OUBL' Z3_DP;
  'OUBL' X3_DN;
  'OUBL' Y3_DN;
  'OUBL' Z3_DN;
  'OUBL' X4_DP;
  'OUBL' Y4_DP;
  'OUBL' Z4_DP;
  'OUBL' X4_DN;
  'OUBL' Y4_DN;
  'OUBL' Z4_DN;
  'OUBL' X5_DP;
  'OUBL' Y5_DP;
  'OUBL' Z5_DP;
  'OUBL' X5_DN;
  'OUBL' Y5_DN;
  'OUBL' Z5_DN;
  'OUBL' X6_DP;
  'OUBL' Y6_DP;
  'OUBL' Z6_DP;
  'OUBL' X6_DN;
  'OUBL' Y6_DN;
  'OUBL' Z6_DN;
  'OUBL' X7_DP;
  'OUBL' Y7_DP;
  'OUBL' Z7_DP;
  'OUBL' X7_DN;
  'OUBL' Y7_DN;
  'OUBL' Z7_DN;
  'OUBL' X8_DP;
  'OUBL' Y8_DP;
  'OUBL' Z8_DP;
  'OUBL' X8_DN;
  'OUBL' Y8_DN;
  'OUBL' Z8_DN;
*
* test convergence
  'SI' (('ABS'(VAL_F)) '<' TOL_1);
*   convergence!!!
    LAMBJ = LAMB0;
  'SINON';
    'SI' (I_M1 'EGA' 200);
*    reach the limits of loop
      ID1_CON = 1;
      LAMBJ = LAMB0;
      'QUIT' IND1;
    'FINSI';
    'SI' (I_M1 > 2);
*    controle on the variation of Lambda
      'SI' ((ABS((LAMB0 - LAMB1)/(LAMB0))) < ((TOL_1)*(1.e-10)));
        LAMBJ = LAMB0;
        'QUIT' IND1;
      'FINSI';
    'FINSI';
*    if N11 stress of Point_j is out of the external boundary of
*    limite surface
    XX_T_MIN = 'MINI' LL_X0;
    XX_T_MAX = 'MAXI' LL_X0;
    YY_T_MIN = 'MINI' LL_Y0;
    YY_T_MAX = 'MAXI' LL_Y0;
    'SI' (((XX_T_MAX)  '>' ((FSACI1*RHOXS)/(GAMS1)))               'OU'
         ((YY_T_MAX)   '>' ((FSACI1*RHOYS)/(GAMS1)))               'OU'
         ((XX_T_MIN)
                       '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))))   'OU'
         ((YY_T_MIN)
                       '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                         + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))));
      LAMB1 = LAMB0;
      LAMB2 = 1000000000.;
      'SI' ((XX_T_MAX) '>' ((FSACI1*RHOXS)/(GAMS1)));
        LAMB3 = (((FSACI1*RHOXS)/(GAMS1)) - (N110) - TOL_2)/(N11);
        'SI' (LAMB3 '<' LAMB2);
          LAMB2 = LAMB3;
        'FINSI';
      'FINSI';
      'SI' ((YY_T_MAX) '>' ((FSACI1*RHOYS)/(GAMS1)));
        LAMB3 = (((FSACI1*RHOYS)/(GAMS1)) - (N220) - TOL_2)/(N22);
        'SI' (LAMB3 '<' LAMB2);
          LAMB2 = LAMB3;
        'FINSI';
      'FINSI';
      'SI' ((XX_T_MIN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                           + ((-1.0)*((FSACI1*RHOXS)/(GAMS1)))));
        LAMB3 = ((((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                          + ((-1.0)*((FSACI1*RHOXS)/(GAMS1))))
                                     - (N110) + TOL_2)/(N11);
        'SI' (LAMB3 '<' LAMB2);
          LAMB2 = LAMB3;
        'FINSI';
      'FINSI';
      'SI' ((YY_T_MIN) '<' (((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                         + ((-1.0)*((FSACI1*RHOYS)/(GAMS1)))));
         LAMB3 = ((((-1.0)*(((FCBET1*ALPC1)*(NUC1))/(ALPC1)))
                            + ((-1.0)*((FSACI1*RHOYS)/(GAMS1))))
                                       - (N220) + TOL_2)/(N22);
        'SI' (LAMB3 '<' LAMB2);
          LAMB2 = LAMB3;

        'FINSI';
      'FINSI';
      LAMB0 = LAMB2;
      'OUBL' LAMB2;
      'OUBL' LAMB3;
    'SINON';
      'SI' (('ABS'(D_VAL1)) < 1.E-16);
*       in case of D is equal to sero
        LAMB1 = LAMB0;
        LAMB0 = ((1.1)*(LAMB0));
      'SINON';
*       otherwise
        LAMB1 = LAMB0;
        LAMB0 = LAMB0 - ((VAL_F)/(D_VAL1));
      'FINSI';
    'FINSI';
  'FINSI';
  'OUBL' VAL_F;
  'OUBL' D_VAL1;
*
  TAB_ITE. (I_M1 + 1) = 'TABLE';
  TAB_ITE. (I_M1 + 1) .'LAMBDA' = ABS(LAMB0) ;

**
  I_M1 = I_M1 + 1;
'FIN' IND1;
* final Lambda
LAM_FIN = TAB_ITE. ((DIME TAB_ITE) - 1) .'LAMBDA';
*
'SI' (ID1_CON 'EGA' 0);
  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                    LAM_FIN;
  'MESS' TIT1;
'FINSI';
*
'FINSI';
'FINSI';
*
* screen message
*'SI' (ID1_CON 'EGA' 0);
*  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
*                    LAM_FIN;
*  'MESS' TIT1;
*'FINSI';
'SI' (ID1_CON 'EGA' 1);
  TIT1 = 'CHAINE' '  Element ' I_ELE1 ' Lambda='
                     LAM_FIN '.....Attention non convergence';
  'SI' ('EGA' ('TYPE' LL_ERRE1) 'LISTENTI');
     LL_ERRE1 = LL_ERRE1 ET ('LECT' I_ELE1);
  'SINON';
     LL_ERRE1 = ('LECT' I_ELE1);
  'FINSI';
  'MESS' TIT1;
'FINSI';
*
*  results stored in the MCHAML field
'SI' (I_IE1 'EGA' 1);
  MOD1    = 'MODE' ELE_VOI1 'MECANIQUE' 'ELASTIQUE' 'ISOTROPE';
  MODTOT  = MODTOT 'ET' MOD1;
  CH_LAME = CH_LAME 'ET' ('MANU' 'CHML' ELE_VOI1 'LAME' LAM_FIN);
  'SI' (LAM_FIN '<' 1.0);
    MAI_REE = MAI_REE 'ET' (ELE_VOI1 'COUL' 'ROUG');
  'SINON';
    MAI_REE = MAI_REE 'ET' (ELE_VOI1 'COUL' 'VERT');
  'FINSI';
'FINSI';
'SI' (I_IE1 'EGA' 2);
  MOD1    = 'MODE' ELE_VOI1 'MECANIQUE' 'ELASTIQUE' 'ISOTROPE';
  MODTOT  = MODTOT 'ET' MOD1;
  CH_LAMI = CH_LAMI 'ET' ('MANU' 'CHML' ELE_VOI1 'LAMI' LAM_FIN);
  'SI' (LAM_FIN '<' 1.0);
    MAI_REI = MAI_REI 'ET' (ELE_VOI1 'COUL' 'ROUG');
  'SINON';
    MAI_REI = MAI_REI 'ET' (ELE_VOI1 'COUL' 'VERT');
  'FINSI';
'FINSI';
'SI' (I_IE1 'EGA' 3);
  MOD1    = 'MODE' ELE_VOI1 'MECANIQUE' 'ELASTIQUE' 'ISOTROPE';
  MODTOT  = MODTOT 'ET' MOD1;
  CH_LAMC = CH_LAMC 'ET' ('MANU' 'CHML' ELE_VOI1 'LAMC' LAM_FIN);
  'SI' (LAM_FIN '<' 1.0);
    MAI_REC = MAI_REC 'ET' (ELE_VOI1 'COUL' 'ROUG');
  'SINON';
    MAI_REC = MAI_REC 'ET' (ELE_VOI1 'COUL' 'VERT');
  'FINSI';
'FINSI';
*
'OUBL' LAM_FIN;
*
I_ELE1 = I_ELE1 + 1;
'FIN' IND_ELE1;
I_IE1 = I_IE1 + 1;
'FIN' IND_IE1 ;
*
'OUBL' MOD1;
*
'FINSI';
*
* saving
TT2.'CH_LAMBDA_E' = CH_LAME;
TT2.'CH_LAMBDA_I' = CH_LAMI;
TT2.'CH_LAMBDA_C' = CH_LAMC;
TT2.'CARTE_E' = MAI_REE;
TT2.'CARTE_I' = MAI_REI;
TT2.'CARTE_C' = MAI_REC;
* graphique part (plot of the limit surface, rectangle and ellispe
* combination for the k element)
*
'SI' ('EGA' ('TYPE' L_ELE1) 'LISTENTI');
  'SI' ('EGA' ('TYPE' LL_ERRE1) 'LISTENTI');
    L_ELE1 = L_ELE1 ET LL_ERRE1;
  'FINSI';
'SINON';
  'SI' ('EGA' ('TYPE' LL_ERRE1) 'LISTENTI');
    L_ELE1 = LL_ERRE1;
  'FINSI';
'FINSI';
*
'SI' ('EGA' ('TYPE' L_ELE1) 'LISTENTI');
  L_ELE1 = 'ORDO' L_ELE1 'CROI';
'FINSI';
*
L_ELE2 = 'LECT';
'SI' ('EGA' ('TYPE' L_ELE1) 'LISTENTI');
  TT2.'GRAPHIQUES' = 'TABLE';
  I_VAL1 = 1;
* loop for each k-element
  NN1 = 'DIME' L_ELE1;
  'REPE' IND1 (NN1);
    'SI' (I_VAL1 EGA 1);
*     id k-element
      I_ELE1 = 'EXTR' L_ELE1 I_VAL1;
      L_ELE2 = L_ELE2 'ET' ('LECT' I_ELE1);
*     element
      ELE_VOI1 = MAI_V 'ELEM' I_ELE1;
*     seismic effort stare for k-element
            CHL1 = 'REDU' CH_SEI1 ELE_VOI1;
*     static effort stare for k-element
      CHL2 = 'REDU' CH_STA1 ELE_VOI1;
*     internal and external caracteristics for k-element
      RHOXSE = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'RHO1' 1 1 1;
      RHOYSE = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'RHO2' 1 1 1;
      ENR1E = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'ENRO' 1 1 1;
      RHOXSI = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'RHO1' 1 1 1;
      RHOYSI = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'RHO2' 1 1 1;
      ENR1I = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'ENRO' 1 1 1;
*     core caracteristics for k-element
      HTOT1 = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'H' 1 1 1;
      RHOT = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'RHOT' 1 1 1;
      COTH1 = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'COTH' 1 1 1;
*     internal and external lambda coef for k-element
      LAME1 = 'EXTR' ('REDU' CH_LAME ELE_VOI1) 'LAME' 1 1 1;
      LAMI1 = 'EXTR' ('REDU' CH_LAMI ELE_VOI1) 'LAMI' 1 1 1;
      LAMC1 = 'EXTR' ('REDU' CH_LAMC ELE_VOI1) 'LAMC' 1 1 1;
*     limite surface external and internal, rectangle and ellipsoide
*      (internal and external)
      TTL1 = TABLE;
      TTL1.'TYPE_COUCHE' = CHAINE 'COUCHE_INT';
      TTL1.'NX' = 20;
      TTL1.'NY' = 20;
      TTL1.'FCK'             = FCBET1;
      TTL1.'FSK_1'           = FSACI1;
      TTL1.'FSK_2'           = FSACI1;
      TTL1.'RHO_1_EXT'       = RHOXSE;
      TTL1.'RHO_2_EXT'       = RHOYSE;
      TTL1.'RHO_1_INT'       = RHOXSI;
      TTL1.'RHO_2_INT'       = RHOYSI;
      TTL1.'GAMMA_C'         = GAMC;
      TTL1.'ALPA_C'          = ALPC1;
      TTL1.'NU_C'            = NUC1;
      TTL1.'GAMMA_S'         = GAMS1;
      TTL1.'EFFORT_STATIQUE' = CHL2;
      TTL1.'EFFORT_SEISME'   = CHL1;
      TTL1.'ENROBAGE_EXT'    = ENR1E;
      TTL1.'ENROBAGE_INT'    = ENR1I;
      TTB1 = MRCTRACE TTL1 1.E-4;
*     rectangle and ellipsoide augmented by Lambda external
      TTL1.'EFFORT_SEISME'   = (((LAME1)**(2.0))*(CHL1));
      TTB2 = MRCTRACE TTL1 1.E-4;
*     rectangle and ellipsoide augmented by Lambda internal
      TTL1.'EFFORT_SEISME'   = (((LAMI1)**(2.0))*(CHL1));
      TTB3 = MRCTRACE TTL1 1.E-4;
*     limite surface core, rectangle and ellipsoide
*      (internal and external)
      TTL1 = TABLE;
      TTL1.'TYPE_COUCHE'     = CHAINE 'COUCHE_COR';
      TTL1.'FCK'             = FCBET1;
      TTL1.'FSK_T'           = FSACI1;
      TTL1.'RHO_T'           = RHOT;
      TTL1.'GAMMA_C'         = GAMC;
      TTL1.'ALPA_C'          = ALPC1;
      TTL1.'NU_C'            = NUC1;
      TTL1.'GAMMA_S'         = GAMS1;
      TTL1.'COT_THETA'       = COTH1;
      TTL1.'EFFORT_STATIQUE' = CHL2;
      TTL1.'EFFORT_SEISME'   = CHL1;
      TTL1.'ENROBAGE_EXT'    = ENR1E;
      TTL1.'ENROBAGE_INT'    = ENR1I;
      TTL1.'EPAISSEUR'       = HTOT1;
      TTB4 = MRCTRACE TTL1 1.E-4;
*     rectangle and ellipsoide augmented by Lambda core
      TTL1.'EFFORT_SEISME'   = (((LAMC1)**(2.0))*(CHL1));
      TTB5 = MRCTRACE TTL1 1.E-4;
*
      TT2.'GRAPHIQUES'. I_ELE1 = 'TABLE';
      TT2.'GRAPHIQUES'. I_ELE1 .'LIMITE_E' =
          TTB1.'LIMITE_E';
      TT2.'GRAPHIQUES'. I_ELE1 .'LIMITE_I' =
          TTB1.'LIMITE_I';
      TT2.'GRAPHIQUES'. I_ELE1 .'LIMITE_C' =
          TTB4.'LIMITE_SHEAR';
      TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_E' =
          TTB1.'ELLIPSOIDE_E';
      TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_I' =
          TTB1.'ELLIPSOIDE_I';
      TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_C' =
          TTB4.'ELLIPSOIDE_SHEAR';
      TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_E' =
          TTB1.'RECTANGLE_E';
      TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_I' =
          TTB1.'RECTANGLE_I';
      TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_C' =
          TTB4.'RECTANGLE_SHEAR';
      TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_E_AUG' =
          TTB2.'ELLIPSOIDE_E';
      TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_I_AUG' =
          TTB3.'ELLIPSOIDE_I';
      TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_C_AUG' =
          TTB5.'ELLIPSOIDE_SHEAR';
      TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_E_AUG' =
          TTB2.'RECTANGLE_E';
      TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_I_AUG' =
          TTB3.'RECTANGLE_I';
      TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_C_AUG' =
          TTB5.'RECTANGLE_SHEAR';
*
    'SINON';
*     id k-element
      I_ELE1 = 'EXTR' L_ELE1 I_VAL1;
      I_ELE2 = 'EXTR' L_ELE1 (I_VAL1 - 1);
      'SI' (I_ELE1 'NEG' I_ELE2);
        L_ELE2 = L_ELE2 'ET' ('LECT' I_ELE1);
*       element
        ELE_VOI1 = MAI_V 'ELEM' I_ELE1;
*       seismic effort stare for k-element
              CHL1 = 'REDU' CH_SEI1 ELE_VOI1;
*       static effort stare for k-element
        CHL2 = 'REDU' CH_STA1 ELE_VOI1;
*       internal and external caracteristics for k-element
        RHOXSE = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'RHO1' 1 1 1;
        RHOYSE = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'RHO2' 1 1 1;
        ENR1E = 'EXTR' ('REDU' CH_CARE ELE_VOI1) 'ENRO' 1 1 1;
        RHOXSI = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'RHO1' 1 1 1;
        RHOYSI = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'RHO2' 1 1 1;
        ENR1I = 'EXTR' ('REDU' CH_CARI ELE_VOI1) 'ENRO' 1 1 1;
*       core caracteristics for k-element
        HTOT1 = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'H' 1 1 1;
        RHOT = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'RHOT' 1 1 1;
        COTH1 = 'EXTR' ('REDU' CH_CARC ELE_VOI1) 'COTH' 1 1 1;
*       internal and external lambda coef for k-element
        LAME1 = 'EXTR' ('REDU' CH_LAME ELE_VOI1) 'LAME' 1 1 1;
        LAMI1 = 'EXTR' ('REDU' CH_LAMI ELE_VOI1) 'LAMI' 1 1 1;
        LAMC1 = 'EXTR' ('REDU' CH_LAMC ELE_VOI1) 'LAMC' 1 1 1;
*       limite surface external and internal, rectangle and ellipsoide
*         (internal and external)
        TTL1 = TABLE;
        TTL1.'TYPE_COUCHE' = CHAINE 'COUCHE_INT';
        TTL1.'NX' = 20;
        TTL1.'NY' = 20;
        TTL1.'FCK'             = FCBET1;
        TTL1.'FSK_1'           = FSACI1;
        TTL1.'FSK_2'           = FSACI1;
        TTL1.'RHO_1_EXT'       = RHOXSE;
        TTL1.'RHO_2_EXT'       = RHOYSE;
        TTL1.'RHO_1_INT'       = RHOXSI;
        TTL1.'RHO_2_INT'       = RHOYSI;
        TTL1.'GAMMA_C'         = GAMC;
        TTL1.'ALPA_C'          = ALPC1;
        TTL1.'NU_C'            = NUC1;
        TTL1.'GAMMA_S'         = GAMS1;
        TTL1.'EFFORT_STATIQUE' = CHL2;
        TTL1.'EFFORT_SEISME'   = CHL1;
        TTL1.'ENROBAGE_EXT'    = ENR1E;
        TTL1.'ENROBAGE_INT'    = ENR1I;
        TTB1 = MRCTRACE TTL1 1.E-4;
*       rectangle and ellipsoide augmented by Lambda external
        TTL1.'EFFORT_SEISME'   = (((LAME1)**(2.0))*(CHL1));
        TTB2 = MRCTRACE TTL1 1.E-4;
*       rectangle and ellipsoide augmented by Lambda internal
        TTL1.'EFFORT_SEISME'   = (((LAMI1)**(2.0))*(CHL1));
        TTB3 = MRCTRACE TTL1 1.E-4;
*     limite surface core, rectangle and ellipsoide
*      (internal and external)
        TTL1 = TABLE;
        TTL1.'TYPE_COUCHE'     = CHAINE 'COUCHE_COR';
        TTL1.'FCK'             = FCBET1;
        TTL1.'FSK_T'           = FSACI1;
        TTL1.'RHO_T'           = RHOT;
        TTL1.'GAMMA_C'         = GAMC;
        TTL1.'ALPA_C'          = ALPC1;
        TTL1.'NU_C'            = NUC1;
        TTL1.'GAMMA_S'         = GAMS1;
        TTL1.'COT_THETA'       = COTH1;
        TTL1.'EFFORT_STATIQUE' = CHL2;
        TTL1.'EFFORT_SEISME'   = CHL1;
        TTL1.'ENROBAGE_EXT'    = ENR1E;
        TTL1.'ENROBAGE_INT'    = ENR1I;
        TTL1.'EPAISSEUR'       = HTOT1;
        TTB4 = MRCTRACE TTL1 1.E-4;
*     rectangle and ellipsoide augmented by Lambda core
        TTL1.'EFFORT_SEISME'   = (((LAMC1)**(2.0))*(CHL1));
        TTB5 = MRCTRACE TTL1 1.E-4;
*
        TT2.'GRAPHIQUES'. I_ELE1 = 'TABLE';
        TT2.'GRAPHIQUES'. I_ELE1 .'LIMITE_E' =
            TTB1.'LIMITE_E';
        TT2.'GRAPHIQUES'. I_ELE1 .'LIMITE_I' =
            TTB1.'LIMITE_I';
        TT2.'GRAPHIQUES'. I_ELE1 .'LIMITE_C' =
            TTB4.'LIMITE_SHEAR';
        TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_E' =
            TTB1.'ELLIPSOIDE_E';
        TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_I' =
            TTB1.'ELLIPSOIDE_I';
        TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_C' =
            TTB4.'ELLIPSOIDE_SHEAR';
        TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_E' =
            TTB1.'RECTANGLE_E';
        TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_I' =
            TTB1.'RECTANGLE_I';
        TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_C' =
            TTB4.'RECTANGLE_SHEAR';
        TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_E_AUG' =
            TTB2.'ELLIPSOIDE_E';
        TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_I_AUG' =
            TTB3.'ELLIPSOIDE_I';
        TT2.'GRAPHIQUES'. I_ELE1 .'ELLIPSOIDE_C_AUG' =
            TTB5.'ELLIPSOIDE_SHEAR';
        TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_E_AUG' =
            TTB2.'RECTANGLE_E';
        TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_I_AUG' =
            TTB3.'RECTANGLE_I';
        TT2.'GRAPHIQUES'. I_ELE1 .'RECTANGLE_C_AUG' =
            TTB5.'RECTANGLE_SHEAR';
*
      'FINSI';
    'FINSI';
   I_VAL1 = I_VAL1 + 1;
  'FIN' IND1;
  TT2.'GRAPHIQUES'.'LISTE_ELEMENT' = L_ELE2;
'FINSI';
* fin
FINPROC TT2;
$$$$




