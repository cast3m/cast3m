$$$$ HBM
* HBM       PROCEDUR  BP208322  16/09/01    21:15:03     9010
*
************************************************************************
* CREATION : 22/05/2014 Lihan XIE
* MODIF    : 06/01/2016 BP
*
* OBJET    :
*
*  - Construire les matrices caracteristiques (Matrice de MASSE,
*    RIGIDITE, AMORTISSEMENT, ...) pour toutes les harmoniques
*    sans modele
*  - Traduit la table de resultats demandés à CONTINU
*    (inconnues temporelles -> inconnues frequentielles)
*
*
* ENTREE :
*
*     TABHBM  =  TABLE
*
*        . 'RIGIDITE_CONSTANTE'         = K
*        . 'AMORTISSEMENT_CONSTANT'     = C
*        . 'MASSE_CONSTANTE'            = M
*        . 'BLOCAGES_MECANIQUES'        = Kblocages
*        . 'RIGIDITE_CENTRIFUGE'
*        . 'CORIOLIS_CONSTANT'
*        . 'N_HARMONIQUE'               = nombre d'harmoniques H
*        . 'RESULTATS'                  = table des resultats attendus
*             . i . 'POINT_MESURE'        exprimés sur ddl temporel
*                 . 'COMPOSANTES'
*                 . 'COULEUR'
*                 . 'TITRE'
*
*
*     Sortie :
*     _______
*
*     TABHBM
*        . 'RIGIDITE_HBM'         = K developpe en H harmoniques
*        . 'AMORTISSEMENT_HBM'    = C developpe en H harmoniques
*        . 'MASSE_HBM'            = M developpe en H harmoniques
*        . 'BLOCAGES_HBM'         = Kblocages en H harmoniques
*        . 'CENTRIFUGE_HBM'
*        . 'CORIOLIS_HBM'
*
*        . 'RESULTATS_HBM'        = table des resultats attendus
*             . j . 'POINT_MESURE'  exprimés sur ddl frequentiels
*                 . 'COMPOSANTES'
*                 . 'COULEUR'
*                 . 'TITRE'
*        . 'RESULTATS'
*             . i . 'INDICES_HBM' = liste des indices j associe
*                                   au i^eme resultat
*
*        . 'COMPOSANTES'
*           . 'DEPLACEMENT'          = composantes dep temporelles (max.6)
*           . 'FORCE'                = composantes for temporelles (max.6)
*           . 'DEPLACEMENT_HBM'      = comp dep frequentielles
*           . 'FORCE_HBM'            = comp for frequentielles
*           . 'HARM_DEPLACEMENT'     = comp dep par ordre d'harmonique
*           . 'HARM_FORCE'           = comp for par ordre d'harmonique
*
*     Correspondance entre inconnues temporelles et frequentielles :
*       +-----------+--------------------------------------+
*       | domaine   |    domaine fréquentiel               |
*       | temporel  |   k=0     k=1(cos) k=1(sin)    ...   |
*       +-----------+--------------------------------------+
*       |    UX     |   U1        U4       V4        ...   |
*       |    UY     |   U2        U5       V5        ...   |
*       |    UZ     |   U3        U6       V6        ...   |
*       +-----------+--------------------------------------+
*
*
***********************************************************************
DEBPROC HBM TABHBM*'TABLE';
* fldebug = vrai;
fldebug = faux;

************************************************************************
*                                                                      *
*        VERIFICATION DES DONNEES D'ENTREE + VALEURS PAR DEFAUT        *
*                                                                      *
************************************************************************


* lecture des matrices definies dans le domaine temporel ***************

SI (EXIS TABHBM 'RIGIDITE_CONSTANTE');
  RI1 = TABHBM . 'RIGIDITE_CONSTANTE';
SINON;
  MESS 'IL MANQUE LA RIGIDITE'; ERRE 21;
FINSI;

SI (EXIS TABHBM 'AMORTISSEMENT_CONSTANT');
  AMOR1 = TABHBM . 'AMORTISSEMENT_CONSTANT';
SINON;
  AMOR1 = VIDE 'RIGIDITE';
  MESS 'IL MANQUE L AMORTISSEMENT : on poursuit malgré tout...';
FINSI;

SI (EXIS TABHBM 'MASSE_CONSTANTE');
  MASS1 = TABHBM . 'MASSE_CONSTANTE';
SINON;
  MASS1 = VIDE 'RIGIDITE';
  MESS 'IL MANQUE LA MASSE: on poursuit malgré tout...';
FINSI;

SI (EXIS TABHBM 'BLOCAGES_MECANIQUES');
  KBLO1 = TABHBM . 'BLOCAGES_MECANIQUES';
SINON;
  MESS 'IL MANQUE LES BLOCAGES_MECANIQUES : on poursuit malgré tout...';
  KBLO1 = VIDE 'RIGIDITE';
  TABHBM . 'BLOCAGES_MECANIQUES' = VIDE 'RIGIDITE';
FINSI;

SI (EXIS TABHBM 'GYRO_CONSTANT');
  CG1 = TABHBM . 'GYRO_CONSTANT';
SINON;
  CG1 = VIDE 'RIGIDITE';
FINSI;

SI (EXIS TABHBM 'RIGIDITE_CENTRIFUGE');
  Kcen1 = TABHBM . 'RIGIDITE_CENTRIFUGE';
SINON;
  Kcen1 = VIDE 'RIGIDITE';
FINSI;

SI (EXIS TABHBM 'PRECONTRAINTE_CENTRIFUGE');
  Ksig1 = TABHBM . 'PRECONTRAINTE_CENTRIFUGE';
SINON;
  Ksig1 = VIDE 'RIGIDITE';
FINSI;

SI (EXIS TABHBM 'CORIOLIS_CONSTANT');
  Ccor1 = TABHBM . 'CORIOLIS_CONSTANT';
SINON;
  Ccor1 = VIDE 'RIGIDITE';
FINSI;

* lecture du nombre d'harmoniques **************************************

SI (EXIS TABHBM 'N_HARMONIQUE');
  nhbm = TABHBM . 'N_HARMONIQUE';
SINON;
  MESS 'IL MANQUE LE NOMBRE D HARMONIQUE'; ERRE 21;
FINSI;


************************************************************************
*                                                                      *
*                        INITIALISATIONS                               *
*                                                                      *
************************************************************************

*composantes primales et duales temporelles ****************************
NOMCOM = EXTR (RI1 ET KBLO1) 'COMP';
NOMFOR = EXTR (RI1 ET KBLO1) 'COMP' 'DUAL';
TABHBM . 'COMPOSANTES' = TABLE;
TABHBM . 'COMPOSANTES'. 'DEPLACEMENT' = NOMCOM;
TABHBM . 'COMPOSANTES'. 'FORCE' = NOMFOR;
*ncom = nombre de composantes par noeud
ncom   = DIME NOMCOM;
si fldebug;
  mess 'composantes primales temporelles :'; list NOMCOM;
  mess 'composantes duales temporelles :';   list NOMFOR;
finsi;

* des matrices etendues aux inconnues frequentielles *******************
* type raideur
Ktot  = VIDE 'RIGIDITE'/'RIGIDITE';
KBtot = VIDE 'RIGIDITE'/'RIGIDITE';
KCtot = VIDE 'RIGIDITE'/'RIGIDITE';
KStot = VIDE 'RIGIDITE'/'RIGIDITE';
* type masse
Mtot  = VIDE 'RIGIDITE'/'MASSE';
* type amortissement
Atot  = VIDE 'RIGIDITE'/'AMORTISSEMENT';
Gtot  = VIDE 'RIGIDITE'/'AMORTISSEMENT';
Ctot  = VIDE 'RIGIDITE'/'AMORTISSEMENT';

* + celles necessaires a l'analyse de stabilite par method de Hill
* (procedure FLOQUET)
* type masse
Mtot1  = VIDE 'RIGIDITE';
Mtot2  = VIDE 'RIGIDITE';
* type amortissement
Atot1  = VIDE 'RIGIDITE';
Gtot1  = VIDE 'RIGIDITE';
Ctot1  = VIDE 'RIGIDITE';



************************************************************************
*                                                                      *
*                  CONSTRUCTION DES MATRICES                           *
*                                                                      *
************************************************************************

MOTDEP0 = MOTS;
MOTFOR0 = MOTS;
NOMU = TABLE;
NOMF = TABLE;


* BOUCLE SUR LES HARMONIQUES -------------------------------------------

ik = -1;
REPE bk (NHBM + 1);    ik = ik + 1 ;

  si fldebug; mess '----------  k=' ik '---------'; finsi;

************  CAS  HARMONIQUE 0  ************

  SI (ik EGA 0);

*   GENERATION DES NOMS DE COMPOSANTES EN FREQUENTIEL
    MOTDEP  = MOTS; MOTFOR  = MOTS;
    il = 0; ij = 0; ilx = 0;
    REPE bl ncom; il = il + 1 ;
      MOTCOM = EXTR NOMCOM il;
      SI (EGA MOTCOM (CHAI 'LX'));
        MOTDEP = MOTDEP ET (MOTS 'LX');
        MOTFOR = MOTFOR ET (MOTS 'FLX');
        ilx = 1;
      SINON;
        ij = ij + 1;
        motu = chai 'U' ij;
        motf = chai 'F' ij;
        MOTDEP = MOTDEP ET (MOTS motu);
        MOTFOR = MOTFOR ET (MOTS motf);
      FINSI;
    FIN bl ;
    NOMU . ik = MOTDEP; NOMF . ik = MOTFOR;
    MOTDEP0 = MOTDEP0 ET MOTDEP;
    MOTFOR0 = MOTFOR0 ET MOTFOR;
    si fldebug;
      mess 'composantes primales k=0 :'; list MOTDEP;
      mess 'composantes duales k=0  :';  list MOTFOR;
    finsi;

*   GENERATION DES MATRICES FREQUENTIELLES pour ik=0
*   type raideur
    K_ik   = CHAN 'INCO' RI1   NOMCOM MOTDEP NOMFOR MOTFOR;
    KB_ik  = CHAN 'INCO' KBLO1 NOMCOM MOTDEP NOMFOR MOTFOR;
    KC_ik  = CHAN 'INCO' Kcen1 NOMCOM MOTDEP NOMFOR MOTFOR;
    KS_ik  = CHAN 'INCO' Ksig1 NOMCOM MOTDEP NOMFOR MOTFOR;
    A_ik   = vide 'RIGIDITE';
    G_ik   = A_ik;
    C_ik   = A_ik;
    M_ik   = A_ik;
*   type amortissement (seulement pour FLOQUET)
    A1_ik  = CHAN 'INCO' AMOR1 NOMCOM MOTDEP NOMFOR MOTFOR;
    G1_ik  = CHAN 'INCO' CG1   NOMCOM MOTDEP NOMFOR MOTFOR;
    C1_ik  = CHAN 'INCO' Ccor1 NOMCOM MOTDEP NOMFOR MOTFOR;
*   type masse (seulement pour FLOQUET)
    M1_ik  = A_ik;
    M2_ik   = CHAN 'INCO' MASS1 NOMCOM MOTDEP NOMFOR MOTFOR;


************  CAS  HARMONIQUE ik  ************
  SINON;

*   GENERATION DES NOMS DE COMPOSANTES EN FREQUENTIEL
    MOTDEPC = MOTS; MOTFORC = MOTS;
    MOTDEPS = MOTS; MOTFORS = MOTS;
    NOMIU = MOTS; NOMIF = MOTS;
    il = 0;     ij = 0;
    REPE bl ncom; il = &bl ;
      MOTCOM = EXTR NOMCOM il;
      SI (EGA MOTCOM (CHAI 'LX'));
*       cas particulier du multiplicateur de Lagrange : le nom reste
        MOTDEPC = MOTDEPC ET (MOTS 'LX');
        MOTFORC = MOTFORC ET (MOTS 'FLX');
        MOTDEPS = MOTDEPS ET (MOTS 'LX');
        MOTFORS = MOTFORS ET (MOTS 'FLX');
        MOTIU   = MOTIU   ET (MOTS 'LX');
        NOMIF   = NOMIF   ET (MOTS 'FLX');
      SINON;
        ij = ij + 1;
*       nouveau nom U### pour  cos (ik w t)
        motu = chai 'U' (ik * (ncom - ilx) + ij);
        motf = chai 'F' (ik * (ncom - ilx) + ij);
        MOTDEPC = MOTDEPC ET (MOTS motu) ;
        MOTFORC = MOTFORC ET (MOTS motf) ;
*       nouveau nom V### pour  sin (ik w t)
        motv = chai 'V' (ik * (ncom - ilx) + ij);
        motg = chai 'G' (ik * (ncom - ilx) + ij);
        MOTDEPS = MOTDEPS ET (MOTS motv);
        MOTFORS = MOTFORS ET (MOTS motg);
*       on a besoin des composantes imaginaires issues de IMPE
        SI (ik EGA 1);
          MOTIU = chai 'I' (EXTR NOMCOM il) ;
          MOTIF = chai 'I' (EXTR NOMFOR il);
          NOMIU = NOMIU ET (MOTS MOTIU);
          NOMIF = NOMIF ET (MOTS MOTIF);
        FINSI;
      FINSI;
    FIN bl ;
*   table des nom d'inconnues frequentielles
    NOMU . ik = TABLE;            NOMF . ik = TABLE;
    NOMU . ik . 'COS' = MOTDEPC;  NOMF . ik . 'COS' = MOTFORC;
    NOMU . ik . 'SIN' = MOTDEPS;  NOMF . ik . 'SIN' = MOTFORS;
    MOTDEP  = MOTDEPC ET MOTDEPS;  MOTFOR  = MOTFORC ET MOTFORS;
    MOTDEP0 = MOTDEP0 ET MOTDEP;   MOTFOR0 = MOTFOR0 ET MOTFOR;
    SI (ik EGA 1);
      NOMCOM  = NOMCOM  ET NOMIU;    NOMFOR  = NOMFOR  ET NOMIF;
    FINSI;
    si fldebug;
      mess 'composantes primales k :'; list MOTDEP;
      mess 'composantes duales k  :';  list MOTFOR;
    finsi;

*   GENERATION DES MATRICES IMPEDANCES (1 seule fois)
    SI (ik EGA 1);
*     type raideur [ K 0 ; 0 K ]
      RI1_H   = IMPE RI1   'RAIDEUR';
      KBLO1_H = IMPE KBLO1 'RAIDEUR';
      Kcen1_H = IMPE Kcen1 'RAIDEUR';
      Ksig1_H = IMPE Ksig1 'RAIDEUR';
*     type masse   [ -M 0 ; 0 -M ]
      MASS1_H = IMPE MASS1 'MASSE';
*     type masse pour FLOQUET  [ 0 -M ; M 0 ]
      MASS1_C = IMPE MASS1 'AMORTISSEMENT';
*     type amortissement [ 0 -C ; C 0 ]
      AMOR1_H = IMPE AMOR1 'AMORTISSEMENT';
      CG1_H   = IMPE CG1   'AMORTISSEMENT';
      Ccor1_H = IMPE Ccor1 'AMORTISSEMENT';
*     type amortissement pour FLOQUET [ C 0 ; 0 C ]
      AMOR1_C = IMPE AMOR1 'RAIDEUR';
      CG1_C   = IMPE CG1   'RAIDEUR';
      Ccor1_C = IMPE Ccor1 'RAIDEUR';
    FINSI;

*   GENERATION DES MATRICES FREQUENTIELLES pour ik
*   DDL :  U*  IU*   -->  U###  V###
    mik  = -1.* ik ;
    m2ik = -2.* ik ;
    ik2  = ik**2;
*   type raideur
    K_ik   = CHAN 'INCO' RI1_H   NOMCOM MOTDEP NOMFOR MOTFOR;
    KB_ik  = CHAN 'INCO' KBLO1_H NOMCOM MOTDEP NOMFOR MOTFOR 'DUPL';
    KC_ik  = CHAN 'INCO' Kcen1_H NOMCOM MOTDEP NOMFOR MOTFOR;
    KS_ik  = CHAN 'INCO' Ksig1_H NOMCOM MOTDEP NOMFOR MOTFOR;
*   type masse
    M_ik   = CHAN 'INCO' (ik2 * MASS1_H) NOMCOM MOTDEP NOMFOR MOTFOR;
*   type amortissement
    A_ik   = CHAN 'INCO' (mik * AMOR1_H) NOMCOM MOTDEP NOMFOR MOTFOR;
    G_ik   = CHAN 'INCO' (mik * CG1_H)   NOMCOM MOTDEP NOMFOR MOTFOR;
    C_ik   = CHAN 'INCO' (mik * Ccor1_H) NOMCOM MOTDEP NOMFOR MOTFOR;
*   type masse (pour \Delta_1 de FLOQUET)
    M1_ik  = CHAN 'INCO' (m2ik * MASS1_C) NOMCOM MOTDEP NOMFOR MOTFOR;
*   type amortissement (pour \Delta_1 de FLOQUET)
    A1_ik  = CHAN 'INCO' AMOR1_C NOMCOM MOTDEP NOMFOR MOTFOR;
    G1_ik  = CHAN 'INCO' CG1_C   NOMCOM MOTDEP NOMFOR MOTFOR;
    C1_ik  = CHAN 'INCO' Ccor1_C NOMCOM MOTDEP NOMFOR MOTFOR;
*   type masse (seulement pour \Delta_2 de FLOQUET)
    M2_ik  = CHAN 'INCO' (-1.* MASS1_H) NOMCOM MOTDEP NOMFOR MOTFOR;

  FINSI;
************  FIN DISTINCTION HARMONIQUE 0  et ik>0  ************
* on somme sur ik
  Ktot  = Ktot  ET K_ik ;
  KBtot = KBtot ET KB_ik;
  KCtot = KCtot ET KC_ik;
  KStot = KStot ET KS_ik;
  Mtot  = Mtot  ET M_ik ;
  Atot  = Atot  ET (A_ik) ;
  Gtot  = Gtot  ET G_ik ;
  Ctot  = Ctot  ET C_ik ;
* + celles necessaires a FLOQUET
  Mtot1 = Mtot1 ET (M1_ik);
  Mtot2 = Mtot2 ET M2_ik;
  Atot1 = Atot1 ET A1_ik;
  Gtot1 = Gtot1 ET G1_ik;
  Ctot1 = Ctot1 ET C1_ik;


FIN bk;
* FIN DE BOUCLE SUR LES HARMONIQUES ------------------------------------



************************************************************************
*                                                                      *
*                  STOCKAGE DES RESULTATS                              *
*                                                                      *
************************************************************************


************   MATRICES  ************

* pour l'analyse harmonique :

TABHBM . 'RIGIDITE_HBM'         = Ktot;
TABHBM . 'BLOCAGES_HBM'         = KBtot;
TABHBM . 'AMORTISSEMENT_HBM'    = Atot;
TABHBM . 'CORIOLIS_HBM'         = Gtot et Ctot;
TABHBM . 'MASSE_HBM'            = Mtot;
TABHBM . 'CENTRIFUGE_HBM'       = KCtot et KStot;

* pour l'analyse de stabilite (methode de Hill de FLOQUET):
TABHBM . 'MASSE_HBM_1'          = Mtot1;
TABHBM . 'MASSE_HBM_2'          = Mtot2;
TABHBM . 'AMORTISSEMENT_HBM_1'  = Atot1;
TABHBM . 'CORIOLIS_HBM_1'       = Gtot1 et Ctot1;


************  TABLEAU DES NOMS DE COMPOSANTES  ************

TABHBM . 'COMPOSANTES'. 'DEPLACEMENT_HBM'  = MOTDEP0;
TABHBM . 'COMPOSANTES'. 'FORCE_HBM'        = MOTFOR0;
TABHBM . 'COMPOSANTES'. 'HARM_DEPLACEMENT' = NOMU;
TABHBM . 'COMPOSANTES'. 'HARM_FORCE'       = NOMF;
COMPU = TABLE;
COMPF = TABLE;
REPE Bcomp ncom; in = &Bcomp;
  ICOMU = EXTR NOMCOM in;
  ICOMF = EXTR NOMFOR in;
  COMPU . ICOMU = MOTS (EXTR NOMU . 0 in);
  COMPF . ICOMF = MOTS (EXTR NOMF . 0 in);
  REPE Bhbm nhbm ; ih = &Bhbm;
    COMPU . ICOMU = COMPU . ICOMU
                    ET (MOTS (EXTR NOMU . ih . 'COS' in))
                    ET (MOTS (EXTR NOMU . ih . 'SIN' in)) ;
    COMPF . ICOMF = COMPF . ICOMF
                    ET (MOTS (EXTR NOMF . ih . 'COS' in))
                    ET (MOTS (EXTR NOMF . ih . 'SIN' in)) ;
  FIN Bhbm;
FIN Bcomp;
TABHBM . 'COMPOSANTES'. 'HARM_COMP_DEP' = COMPU;
TABHBM . 'COMPOSANTES'. 'HARM_COMP_FOR' = COMPF;


*********** DEFINITION DES NOMS DES INCONNUES PAR OPTI INCO ************

MOPRIM = MOTS ;  MODUAL = MOTS;
REPE BNOM (DIME MOTDEP0); in = &BNOM;

  SI (NEG (EXTR MOTDEP0 in) 'LX  ');
    MOPRIM = MOPRIM ET (MOTS (EXTR MOTDEP0 in));
    MODUAL = MODUAL ET (MOTS (EXTR MOTFOR0 in));
  FINSI;
FIN BNOM;

OPTI INCO MOPRIM MODUAL;


***********  CONSTRUCTION DU TABLEAU RESULTATS_HBM  ***********

SI (EXIS TABHBM 'RESULTATS');

* tables des resultats temporels
  TRES1 = TABHBM . 'RESULTATS';
  nres1 = DIME TRES1;
* tables des resultats frequentiels
  TABHBM . 'RESULTATS_HBM' = TABL;
  TRES2 = TABHBM . 'RESULTATS_HBM';
* tables des titres pour l operateur DESSIN
  TRES1 . 'TITRE' = TABL;

  ires2 = 0;
  ires1 = 0;
  REPE BRES1 nres1; ires1 = ires1 + 1;
    SI (NON (EXIS TRES1 ires1)); ITER BRES1; FINSI;

* - l indice existe : il faut travailler dessus :

*  -titre :
    si (exis TRES1 . ires1 'TITRE');
      motit1 = TRES1 . ires1  . 'TITRE';
    sinon;
      motit1 = chai 'Resultat' ires1*4;;
    finsi;
    TRES1 . 'TITRE' . ires1 = motit1 ;

*  -composante :
    si (non (exis TRES1 . ires1   'COMPOSANTE'));
       mess 'RESULTATS . 'ires1' . COMPOSANTE  absente !!!'; erre 21;
    finsi;
    comp1 = TRES1 . ires1 . 'COMPOSANTE';

*  -cas particulier FREQuence w inconnue :
    si (ega comp1 'FREQ');
      ires2 = ires2 + 1;
      TRES2 . ires2 = tabl;
      TRES2 . ires2 . 'COMPOSANTE'   = comp1;
      si (exis TRES1 . ires1   'COULEUR');
        TRES2 . ires2 . 'COULEUR'    = TRES1 . ires1 . 'COULEUR';
      finsi;
      iter BRES1;
    finsi;

*  -cas "standard" :
    si (non (exis TRES1 . ires1   'POINT_MESURE'));
      mess 'RESULTATS . 'ires1' . POINT_MESURE  absent !!!'; erre 21;
    finsi;
    pmes1 = TRES1 . ires1 . 'POINT_MESURE';

*   il faut les harmoniques correspondantes
    si (non (exis COMPU comp1));
       mess 'RESULTATS . 'ires1' . COMPOSANTE  inconnue !!!'; erre 21;
    finsi;
    U_HBM = COMPU . comp1;
    nU_HBM = dime U_HBM;
    si (neg nU_HBM (2*nhbm + 1));
      mess 'pb avec nombre de composantes';  erre 21;
    finsi;

*   on va traiter toutes les composantes frequentielles relatives a
*   cette inconnue temporelle
    TRES1 . ires1 . 'INDICES_HBM' = lect;
    repe BU_HBM nU_HBM;
      ui = EXTR U_HBM &BU_HBM;
      ires2 = ires2 + 1;
      TRES2 . ires2 = tabl;
      TRES2 . ires2 . 'POINT_MESURE' = pmes1 ;
      TRES2 . ires2 . 'COMPOSANTE'   = ui;
      si (exis TRES1 . ires1   'COULEUR_HBM');
        TRES2 . ires2 . 'COULEUR'
        = extr TRES1 . ires1 . 'COULEUR_HBM' &BU_HBM;
      sinon;
        si (exis TRES1 . ires1   'COULEUR');
          TRES2 . ires2 . 'COULEUR'    = TRES1 . ires1 . 'COULEUR';
        finsi;
      finsi;
      si (EGA &BU_HBM 1);
        motit2   = chai comp1'_{k=0}';
      sinon;
        k = &BU_HBM / 2 ;
        si (MULT &BU_HBM 2);
          motit2 = chai comp1'^{cos}_{k='k'}';
        sinon;
          motit2 = chai comp1'^{sin}_{k='k'}';
        finsi;
      finsi;
      TRES2 . ires2 . 'TITRE'  = motit2 ;
      MESS ires1 ': ' motit2 ' <--> ' ui;
*     pour + de facilite dans le post-traitement, on enregistre les
*     indices ires2 des harmoniques dans la table TRES1
      TRES1 . ires1 . 'INDICES_HBM'
      = TRES1 . ires1 . 'INDICES_HBM' et ires2;
    fin  BU_HBM;

  FIN  BRES1;

FINSI;


***********  PETIT FLAG POUR MARQUER LE PASSAGE DANS HBM  ***********

TABHBM . 'HBM' = VRAI;


FINPROC ;









