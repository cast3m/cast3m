$$$$ MRCTRACE
* MRCTRACE  PROCEDUR  BP208322  17/10/03    21:16:22     9580
DEBPROC MRCTRACE TAB1*'TABLE' TOL1*'FLOTTANT';
*
* --------------------------------------------------------
*  Procedure MRCTRACE
*    Procedure pour imprimer les surface limites et/ou les enveloppe
*    des efforts statiques + sismiques selon le modele Ã  trois couche
*    de MARTI (voir EFFMARTI)
*
*  Develeppers:
*    Alberto FRAU
*    DEN/DANS/DM2S/SEMT/EMSI
*    Nicolas ILE
*    DEN/DANS/DM2S/SEMT/EMSI
*
*  INPUT:
*
*    En entree on utilise une table TAB1. Un indice de la table TAB1
*    indique si la definition de la surface limite doit etre faite pour
*    la couche extrene, interne ou intermediaire:
*    TAB1.'TYPE_COUCHE'         MOT pour indiquer le type de couche
*                                 'COUCHE_EXT'  couche externe
*                                 'COUCHE_INT'  couche interne
*                                 'COUCHE_COR'  couche intermediaire
*
*    1er option:  TAB1.'TYPE_COUCHE' = 'COUCHE_EXT'  (couche externe)
*             ou  TAB1.'TYPE_COUCHE' = 'COUCHE_INT'  (couche interne)
*

*                 TAB1.'NX'   nombre de decoupage
*                             pour la surface limite en direction 1
*                 TAB1.'NY'   nombre de decoupage
*                             pour la surface limite en direction 2
*                 TAB1.'FCK'  resistance caracteristique beton
*                 TAB1.'FSK_1'  resistance caracteristique acier
*                               direction 1
*                 TAB1.'FSK_2'  resistance caracteristique acier
*                               direction 2
*                 TAB1.'RHO_1_EXT'  taux acier direction 1 couche exter
*                 TAB1.'RHO_2_EXT'  taux acier direction 2 couche exter
*                 TAB1.'RHO_1_INT'  taux acier direction 1 couche inter
*                 TAB1.'RHO_2_INT'  taux acier direction 2 couche inter
*                 TAB1.'GAMMA_C'    coeficient gamma_c
*                 TAB1.'ALPA_C'     coeficient alpha
*                 TAB1.'NU_C'       coeficient nu
*                 TAB1.'GAMMA_S'    coeficient gamma_s
*                 TAB1.'EFFORT_STATIQUE'  effort statique (optionelle)
*                 TAB1.'EFFORT_SEISME'    matrice caracteristique
*                                                  seisme (optionelle)
*                 TAB1.'ENROBAGE_EXT'     enrobage externe (optionelle)
*                 TAB1.'ENROBAGE_INT'     enrobage interne (optionelle)
*
*  OUTPUT:
*
*    1er option:  TAB1.'TYPE_COUCHE' = 'COUCHE_EXT'  (couche externe)
*             ou  TAB1.'TYPE_COUCHE' = 'COUCHE_INT'  (couche interne)
*
*                  TT1:           table d'output
*                  TT1.'LIMITE_E'  Surface limite externe
*                  TT1.'LIMITE_I'  Surface limite interne
*                  TT1.'ELLIPSOIDE_E'  Enveloppe ellipsoide couche
*                                      externe (si present dans la
*                                      TAB1 les MCHML des efforts)
*                  TT1.'ELLIPSOIDE_I'  Enveloppe ellipsoide couche
*                                      interne (si present dans la
*                                      TAB1 les MCHML des efforts)
*                  TT1.'RECTANGLE_E'   Enveloppe rectangulaire couche
*                                      externe (si present dans la
*                                      TAB1 les MCHML des efforts)
*                  TT1.'RECTANGLE_I'   Enveloppe ellipsoide couche
*                                      interne (si present dans la
*                                      TAB1 les MCHML des efforts)
*
*
*    2eme option:  TAB1.'TYPE_COUCHE' = 'COUCHE_EXT'  (couche externe)
*              ou  TAB1.'TYPE_COUCHE' = 'COUCHE_INT'  (couche interne)
*
*                  TT1:           table d'output
*                  TT1.'LIMITE_SHEAR'  Surface limite couche
*                                      intermediaire
*                  TT1.'ELLIPSOIDE_SHEAR'  Enveloppe rectangulaire
*                                      couche intermediaire (si present
*                                      dans la TAB1 les MCHML
*                                      des efforts)
*                  TT1.'RECTANGLE_SHEAR'   Enveloppe rectangulaire
*                                      couche intermediaire (si present
*                                      dans la TAB1 les MCHML
*                                      des efforts)
*
* --------------------------------------------------------
*
* Type of surface
'SI' ('EXIST' TAB1 'TYPE_COUCHE');
  TPY1 = TAB1.'TYPE_COUCHE';
  'SI' ('NEG' ('TYPE' TPY1) 'MOT');
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
'SINON';
  'MESS' 'Input Error ...';
  'QUIT' MRCTRACE;
'FINSI';
*
*
'SI' (('EGA' TPY1 'COUCHE_INT') 'OU' ('EGA' TPY1 'COUCHE_EXT'));
*
* -------------- Couche externe et interne ---------------------
*
* controle
  'SI' ('EXIST' TAB1 'NX');
    NX1 = TAB1.'NX';
    'SI' ('NEG' ('TYPE' NX1) 'ENTIER');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'NY');
    NY1 = TAB1.'NY';
    'SI' ('NEG' ('TYPE' NY1) 'ENTIER');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'FCK');
    FC1 = TAB1.'FCK';
    'SI' ('NEG' ('TYPE' FC1) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'FSK_1');
    FSX = TAB1.'FSK_1';
    'SI' ('NEG' ('TYPE' FSX) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'FSK_2');
    FSY = TAB1.'FSK_2';
    'SI' ('NEG' ('TYPE' FSY) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'RHO_1_EXT');
    RSXE = TAB1.'RHO_1_EXT';
    'SI' ('NEG' ('TYPE' RSXE) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'RHO_2_EXT');
    RSYE = TAB1.'RHO_2_EXT';
    'SI' ('NEG' ('TYPE' RSYE) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'RHO_1_INT');
    RSXI = TAB1.'RHO_1_INT';
    'SI' ('NEG' ('TYPE' RSXI) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'RHO_2_INT');
    RSYI = TAB1.'RHO_2_INT';
    'SI' ('NEG' ('TYPE' RSYI) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'GAMMA_C');
    GAMC = TAB1.'GAMMA_C';
    'SI' ('NEG' ('TYPE' GAMC) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'ALPA_C');
    ALP1 = TAB1.'ALPA_C';
    'SI' ('NEG' ('TYPE' ALP1) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'NU_C');
    NU1 = TAB1.'NU_C';
    'SI' ('NEG' ('TYPE' NU1) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'GAMMA_S');
    GAMS = TAB1.'GAMMA_S';
    'SI' ('NEG' ('TYPE' GAMS) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
*
*
* Normalisation
  CC1 = ENTI(FC1/100000);
  SI (CC1 > 1);
    FC1 = FC1/100000;
    FSX = FSX/100000;
    FSY = FSY/100000;
  FINSI;
*
* initialisation des tables pour la procedure g_ulti2D
  TBL1               = TABLE;
  TBL1.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_EXT';
  TBL1.'S11'         = 0.0;
  TBL1.'S22'         = 0.0;
  TBL1.'S12'         = 0.0;
  TBL1.'FCK'         = FC1;
  TBL1.'FSK_1'       = FSX;
  TBL1.'FSK_2'       = FSY;
  TBL1.'RHO_1'       = RSXE;
  TBL1.'RHO_2'       = RSYE;
  TBL1.'GAMMA_C'     = GAMC;
  TBL1.'ALPA_C'      = ALP1;
  TBL1.'NU_C'        = NU1;
  TBL1.'GAMMA_S'     = GAMS;
*
  TBL2               = TABLE;
  TBL2.'TYPE_COUCHE' = 'CHAINE' 'COUCHE_INT';
  TBL2.'S11'         = 0.0;
  TBL2.'S22'         = 0.0;
  TBL2.'S12'         = 0.0;
  TBL2.'FCK'         = FC1;
  TBL2.'FSK_1'       = FSX;
  TBL2.'FSK_2'       = FSY;
  TBL2.'RHO_1'       = RSXI;
  TBL2.'RHO_2'       = RSYI;
  TBL2.'GAMMA_C'     = GAMC;
  TBL2.'ALPA_C'      = ALP1;
  TBL2.'NU_C'        = NU1;
  TBL2.'GAMMA_S'     = GAMS;
* Determination of resistances (Steel and concrete)
*
  FXSE = ((FSX)*(RSXE))/(GAMS);
  FYSE = ((FSY)*(RSYE))/(GAMS);
  FXSI = ((FSX)*(RSXI))/(GAMS);
  FYSI = ((FSY)*(RSYI))/(GAMS);
  FC = ((ALP1)*((FC1)/(GAMC)));
  FC = FC*NU1;
*
*  Determination du domain Sig11 et Sig22
  XMIN1E = ((-1.0)*(FC + FXSE));
  XMAX1E = ((1.0)*(FXSE));
  DX1E = ((XMAX1E - XMIN1E)/(NX1));
  L_XE = 'PROG' XMIN1E 'PAS' DX1E XMAX1E;
*
  YMIN1E = ((-1.0)*(FC + FYSE));
  YMAX1E = ((1.0)*(FYSE));
  DY1E = ((YMAX1E - YMIN1E)/(NY1));
  L_YE = 'PROG' YMIN1E 'PAS' DY1E YMAX1E;
*
  XMIN1I = ((-1.0)*(FC + FXSI));
  XMAX1I = ((1.0)*(FXSI));
  DX1I = ((XMAX1I - XMIN1I)/(NX1));
  L_XI = 'PROG' XMIN1I 'PAS' DX1I XMAX1I;
*
  YMIN1I = ((-1.0)*(FC + FYSI));
  YMAX1I = ((1.0)*(FYSI));
  DY1I = ((YMAX1I - YMIN1I)/(NY1));
  L_YI = 'PROG' YMIN1I 'PAS' DY1I YMAX1I;
*
*
* Initialing void mesh element
  MAI1E = VIDE 'MAILLAGE';
  MAI1I = VIDE 'MAILLAGE';
*
* indicators ii and jj for the mesh creation
  II1 = 1;
  JJ1 = 2;
  I = 1;
*
* loop on all elements that composed the upper (or lower)
* limit surface
  'REPE' IND1 (NX1*NY1);
*
* Point 1
    X1E = 'EXTR' L_XE (II1);
    Y1E = 'EXTR' L_YE (JJ1 - 1);
    Z1E = 0.0;
    TBL1.'S11' = X1E;
    TBL1.'S22' = Y1E;
    TBL1.'S12' = Z1E;
    VAL1 = G_ULTI2D TBL1;
    'SI' (('ABS'(VAL1)) '>' TOL1);
      Z1E = ((VAL1)**(0.5));
    'FINSI';
    X1I = 'EXTR' L_XI (II1);
    Y1I = 'EXTR' L_YI (JJ1 - 1);
    Z1I = 0.0;
    TBL2.'S11' = X1I;
    TBL2.'S22' = Y1I;
    TBL2.'S12' = Z1I;
    VAL1 = G_ULTI2D TBL2;
    'SI' (('ABS'(VAL1)) '>' TOL1);
      Z1I = ((VAL1)**(0.5));
    'FINSI';
*
* Point 2
    X2E = 'EXTR' L_XE (II1 + 1);
    Y2E = 'EXTR' L_YE (JJ1 - 1);
    Z2E = 0.0;
    TBL1.'S11' = X2E;
    TBL1.'S22' = Y2E;
    TBL1.'S12' = Z2E;
    VAL2 = G_ULTI2D TBL1;
    'SI' (('ABS'(VAL2)) '>' TOL1);
      Z2E = ((VAL2)**(0.5));
    'FINSI';
*
    X2I = 'EXTR' L_XI (II1 + 1);
    Y2I = 'EXTR' L_YI (JJ1 - 1);
    Z2I = 0.0;
    TBL2.'S11' = X2I;
    TBL2.'S22' = Y2I;
    TBL2.'S12' = Z2I;
    VAL2 = G_ULTI2D TBL2;
    'SI' (('ABS'(VAL2)) '>' TOL1);
      Z2I = ((VAL2)**(0.5));
    'FINSI';
*
* Point 3
    X3E = 'EXTR' L_XE (II1 + 1);
    Y3E = 'EXTR' L_YE (JJ1);
    Z3E = 0.0;
    TBL1.'S11' = X3E;
    TBL1.'S22' = Y3E;
    TBL1.'S12' = Z3E;
    VAL3 = G_ULTI2D TBL1;
    'SI' (('ABS'(VAL3)) '>' TOL1);
      Z3E = ((VAL3)**(0.5));
    'FINSI';
    X3I = 'EXTR' L_XI (II1 + 1);
    Y3I = 'EXTR' L_YI (JJ1);
    Z3I = 0.0;
    TBL2.'S11' = X3I;
    TBL2.'S22' = Y3I;
    TBL2.'S12' = Z3I;
    VAL3 = G_ULTI2D TBL2;
    'SI' (('ABS'(VAL3)) '>' TOL1);
      Z3I = ((VAL3)**(0.5));
    'FINSI';
*
* Point 4
    X4E = 'EXTR' L_XE (II1);
    Y4E = 'EXTR' L_YE (JJ1);
    Z4E = 0.0;
    TBL1.'S11' = X4E;
    TBL1.'S22' = Y4E;
    TBL1.'S12' = Z4E;
    VAL4 = G_ULTI2D TBL1;
    'SI' (('ABS'(VAL4)) '>' TOL1);
      Z4E = ((VAL4)**(0.5));
    'FINSI';
    X4I = 'EXTR' L_XI (II1);
    Y4I = 'EXTR' L_YI (JJ1);
    Z4I = 0.0;
    TBL2.'S11' = X4I;
    TBL2.'S22' = Y4I;
    TBL2.'S12' = Z4I;
    VAL4 = G_ULTI2D TBL2;
    'SI' (('ABS'(VAL4)) '>' TOL1);
      Z4I = ((VAL4)**(0.5));
    'FINSI';
*
* Creation of points for the upper surface element
    P1ES = X1E Y1E ((1.0)*(Z1E));
    P2ES = X2E Y2E ((1.0)*(Z2E));
    P3ES = X3E Y3E ((1.0)*(Z3E));
    P4ES = X4E Y4E ((1.0)*(Z4E));
    P1IS = X1I Y1I ((1.0)*(Z1I));
    P2IS = X2I Y2I ((1.0)*(Z2I));
    P3IS = X3I Y3I ((1.0)*(Z3I));
    P4IS = X4I Y4I ((1.0)*(Z4I));
*
* Creation of points for the lower surface element
    P1EI = X1E Y1E ((-1.0)*(Z1E));
    P2EI = X2E Y2E ((-1.0)*(Z2E));
    P3EI = X3E Y3E ((-1.0)*(Z3E));
    P4EI = X4E Y4E ((-1.0)*(Z4E));
    P1II = X1I Y1I ((-1.0)*(Z1I));
    P2II = X2I Y2I ((-1.0)*(Z2I));
    P3II = X3I Y3I ((-1.0)*(Z3I));
    P4II = X4I Y4I ((-1.0)*(Z4I));
*
* Creation of lines for the upper surface element
    OPTI ELEM SEG2;
    L1ES = 'DROIT' 1 P1ES P2ES;
    L2ES = 'DROIT' 1 P2ES P3ES;
    L3ES = 'DROIT' 1 P3ES P4ES;
    L4ES = 'DROIT' 1 P4ES P1ES;
    L1IS = 'DROIT' 1 P1IS P2IS;
    L2IS = 'DROIT' 1 P2IS P3IS;
    L3IS = 'DROIT' 1 P3IS P4IS;
    L4IS = 'DROIT' 1 P4IS P1IS;
*
* Creation of lines for the lower surface element
    L1EI = 'DROIT' 1 P1EI P2EI;
    L2EI = 'DROIT' 1 P2EI P3EI;
    L3EI = 'DROIT' 1 P3EI P4EI;
    L4EI = 'DROIT' 1 P4EI P1EI;
    L1II = 'DROIT' 1 P1II P2II;
    L2II = 'DROIT' 1 P2II P3II;
    L3II = 'DROIT' 1 P3II P4II;
    L4II = 'DROIT' 1 P4II P1II;
*
* Creation of the upper and lower surface element
    'OPTI' 'ELEM' QUA4;
    ELEES = DALL L1ES L2ES L3ES L4ES;
    ELEEI = DALL L1EI L2EI L3EI L4EI;
    ELEIS = DALL L1IS L2IS L3IS L4IS;
    ELEII = DALL L1II L2II L3II L4II;
*
* Assembling the limit surfaces
    MAI1E = MAI1E ET ELEES ET ELEEI;
    MAI1I = MAI1I ET ELEIS ET ELEII;
    'OUBL' ELES;
    'OUBL' ELEI;
    'OUBL' L1S;
    'OUBL' L2S;
    'OUBL' L3S;
    'OUBL' L4S;
    'OUBL' L1I;
    'OUBL' L2I;
    'OUBL' L3I;
    'OUBL' L4I;
    'OUBL' P1S;
    'OUBL' P2S;
    'OUBL' P3S;
    'OUBL' P4S;
    'OUBL' P1I;
    'OUBL' P2I;
    'OUBL' P3I;
    'OUBL' P4I;
*
*  Updating the index ii and jj
    'SI' (II1 'EGA' NX1);
      II1 = 1;
      JJ1 = JJ1 + 1;
    'SINON';
      II1 = II1 + 1;
    'FINSI';
    I = I + 1;
  'FIN' IND1;
*
* erasing the double points
  ELIM 0.001 MAI1E;
  ELIM 0.001 MAI1I;
*
  TT1 = 'TABLE';
  TT1.'LIMITE_E' = MAI1E;
  TT1.'LIMITE_I' = MAI1I;
*
*
* tracer l'enveloppe (optionelle)
*
* Control
  'SI' ('EXIST' TAB1 'EFFORT_SEISME');
    CHL1 = TAB1.'EFFORT_SEISME';
    'SI' ('NEG' ('TYPE' CHL1) 'MCHAML');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'FINSI';
  'SI' ('EXIST' TAB1 'EFFORT_STATIQUE');
    CHL2 = TAB1.'EFFORT_STATIQUE';
    'SI' ('NEG' ('TYPE' CHL2) 'MCHAML');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'FINSI';
  'SI' ('EXIST' TAB1 'ENROBAGE_EXT');
    ENR1E = TAB1.'ENROBAGE_EXT';
    'SI' ('NEG' ('TYPE' ENR1E) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'FINSI';
  'SI' ('EXIST' TAB1 'ENROBAGE_INT');
    ENR1I = TAB1.'ENROBAGE_INT';
    'SI' ('NEG' ('TYPE' ENR1I) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'FINSI';
*
  'SI' ('EGA' ('TYPE' (CHL1)) 'MCHAML');
*
*   extraire les contraintes selon le modele de MARTI (statiques)
    N110E = 'EXTR' CHL2 'N11E' 1 1 1;
    N220E = 'EXTR' CHL2 'N22E' 1 1 1;
    N120E = 'EXTR' CHL2 'N12E' 1 1 1;
    N110I = 'EXTR' CHL2 'N11I' 1 1 1;
    N220I = 'EXTR' CHL2 'N22I' 1 1 1;
    N120I = 'EXTR' CHL2 'N12I' 1 1 1;
*
*   extraire les contraintes selon le modele de MARTI (sismiques)
*   plus covariances
    N11N11E = 'EXTR' CHL1 'C11E' 1 1 1;
    N22N22E = 'EXTR' CHL1 'C22E' 1 1 1;
    N12N12E = 'EXTR' CHL1 'C33E' 1 1 1;
    N11N22E = 'EXTR' CHL1 'C12E' 1 1 1;
    N11N12E = 'EXTR' CHL1 'C13E' 1 1 1;
    N22N12E = 'EXTR' CHL1 'C23E' 1 1 1;
    N11N11I = 'EXTR' CHL1 'C11I' 1 1 1;
    N22N22I = 'EXTR' CHL1 'C22I' 1 1 1;
    N12N12I = 'EXTR' CHL1 'C33I' 1 1 1;
    N11N22I = 'EXTR' CHL1 'C12I' 1 1 1;
    N11N12I = 'EXTR' CHL1 'C13I' 1 1 1;
    N22N12I = 'EXTR' CHL1 'C23I' 1 1 1;
*
*   calcul des contraintes (statiques)
    N110E = ((N110E)/((2.0)*(ENR1E)));
    N220E = ((N220E)/((2.0)*(ENR1E)));
    N120E = ((N120E)/((2.0)*(ENR1E)));
    N110I = ((N110I)/((2.0)*(ENR1I)));
    N220I = ((N220I)/((2.0)*(ENR1I)));
    N120I = ((N120I)/((2.0)*(ENR1I)));
*
*   calcul des contraintes (sismique)
    N11N11E = ((N11N11E)/(((2.0)*(ENR1E))**(2)));
    N22N22E = ((N22N22E)/(((2.0)*(ENR1E))**(2)));
    N12N12E = ((N12N12E)/(((2.0)*(ENR1E))**(2)));
    N11N22E = ((N11N22E)/(((2.0)*(ENR1E))**(2)));
    N11N12E = ((N11N12E)/(((2.0)*(ENR1E))**(2)));
    N22N12E = ((N22N12E)/(((2.0)*(ENR1E))**(2)));
    N11N11I = ((N11N11I)/(((2.0)*(ENR1I))**(2)));
    N22N22I = ((N22N22I)/(((2.0)*(ENR1I))**(2)));
    N12N12I = ((N12N12I)/(((2.0)*(ENR1I))**(2)));
    N11N22I = ((N11N22I)/(((2.0)*(ENR1I))**(2)));
    N11N12I = ((N11N12I)/(((2.0)*(ENR1I))**(2)));
    N22N12I = ((N22N12I)/(((2.0)*(ENR1I))**(2)));
*
*   scaling
*    CC1 = ENTI(FC1/100000);
    SI (CC1 > 1);
      N110E = N110E/100000;
      N220E = N220E/100000;
      N120E = N120E/100000;
      N110I = N110I/100000;
      N220I = N220I/100000;
      N120I = N120I/100000;
*
      N11N11E = ((N11N11E)/((100000)**(2.0)));
      N22N22E = ((N22N22E)/((100000)**(2.0)));
      N12N12E = ((N12N12E)/((100000)**(2.0)));
      N11N22E = ((N11N22E)/((100000)**(2.0)));
      N11N12E = ((N11N12E)/((100000)**(2.0)));
      N22N12E = ((N22N12E)/((100000)**(2.0)));
      N11N11I = ((N11N11I)/((100000)**(2.0)));
      N22N22I = ((N22N22I)/((100000)**(2.0)));
      N12N12I = ((N12N12I)/((100000)**(2.0)));
      N11N22I = ((N11N22I)/((100000)**(2.0)));
      N11N12I = ((N11N12I)/((100000)**(2.0)));
      N22N12I = ((N22N12I)/((100000)**(2.0)));
    FINSI;
*   calcul des valeurs et vecteurs propres
    MAI1 = 0. 0. 0.;
*
    MATXE = 'VIDE' 'RIGIDITE'/'RIGIDITE';
    MATXE = MATXE 'ET' ('MANU' 'RIGIDITE' MAI1 ('MOTS' 'UX' 'UY' 'UZ')
      ('PROG'  N11N11E N11N22E N11N12E
               N11N22E N22N22E N22N12E
               N11N12E N22N12E N12N12E));
    MATXI = 'VIDE' 'RIGIDITE'/'RIGIDITE';
    MATXI = MATXI 'ET' ('MANU' 'RIGIDITE' MAI1 ('MOTS' 'UX' 'UY' 'UZ')
      ('PROG'  N11N11I N11N22I N11N12I
               N11N22I N22N22I N22N12I
               N11N12I N22N12I N12N12I));

    NORMATXE =
      (((N11N11E)**(2.0)) + ((N11N22E)**(2.0)) + ((N11N12E)**(2.0)) +
       ((N11N22E)**(2.0)) + ((N22N22E)**(2.0)) + ((N22N12E)**(2.0)) +
       ((N11N12E)**(2.0)) + ((N22N12E)**(2.0)) + ((N12N12E)**(2.0)))
                                                           **(0.5);
    NORMATXI =
    (((N11N11I)**(2.0)) + ((N11N22I)**(2.0)) + ((N11N12I)**(2.0)) +
     ((N11N22I)**(2.0)) + ((N22N22I)**(2.0)) + ((N22N12I)**(2.0)) +
     ((N11N12I)**(2.0)) + ((N22N12I)**(2.0)) + ((N12N12I)**(2.0)))
                                                             **(0.5);
   'SI' (NORMATXE 'EGA' 0.0);
     NORMATXE = 1.0;
   'FINSI';
   'SI' (NORMATXI 'EGA' 0.0);
     NORMATXI = 1.0;
   'FINSI';
*
    XIDE1 = ('MASS' 'UX' MAI1 1.0) 'ET' (MASS 'UY' MAI1 1.0)
      'ET' ('MASS' 'UZ' MAI1 1.0);
*
    EIGE = 'VIBR' 'INTERVALLE' 0. 20000. 'BASSE' 3 (MATXE/NORMATXE)
                                           XIDE1 'IMPR'  'MULT';
    EIGI = 'VIBR' 'INTERVALLE' 0. 20000. 'BASSE' 3 (MATXI/NORMATXI)
                                           XIDE1 'IMPR'  'MULT';
*
  'SI' ('EXIST' (EIGE.MODES) 1);
    LAM1E = ((EIGE.MODES. 1 .FREQUENCE)*((2.0)*(PI)))**(2.0);
    NORVEC1E =
         ((('EXTR' (EIGE.MODES. 1 .DEFORMEE_MODALE) MAI1 'UX')**(2))
        + (('EXTR' (EIGE.MODES. 1 .DEFORMEE_MODALE) MAI1 'UY')**(2))
        + (('EXTR' (EIGE.MODES. 1 .DEFORMEE_MODALE) MAI1 'UZ')**(2)))
                                                         **(0.5);
    VECT1E = (EIGE.MODES. 1 .DEFORMEE_MODALE)/(NORVEC1E);
  'SINON';
    LAM1E = 0.0;
    NORVEC1E = 0.0;
    VECT1E = MANU CHPO MAI1 3 'UX' 0.0 'UY' 0.0 'UZ' 0.0;
  'FINSI';
  'SI' ('EXIST' (EIGE.MODES) 2);
    LAM2E = ((EIGE.MODES. 2 .FREQUENCE)*((2.0)*(PI)))**(2.0);
    NORVEC2E =
         ((('EXTR' (EIGE.MODES. 2 .DEFORMEE_MODALE) MAI1 'UX')**(2))
        + (('EXTR' (EIGE.MODES. 2 .DEFORMEE_MODALE) MAI1 'UY')**(2))
        + (('EXTR' (EIGE.MODES. 2 .DEFORMEE_MODALE) MAI1 'UZ')**(2)))
                                                           **(0.5);
    VECT2E = (EIGE.MODES. 2 .DEFORMEE_MODALE)/(NORVEC2E);
  'SINON';
    LAM2E = 0.0;
    NORVEC2E = 0.0;
    VECT2E = MANU CHPO MAI1 3 'UX' 0.0 'UY' 0.0 'UZ' 0.0;
  'FINSI';
  'SI' ('EXIST' (EIGE.MODES) 3);
    LAM3E = ((EIGE.MODES. 3 .FREQUENCE)*((2.0)*(PI)))**(2.0);
    NORVEC3E =
         ((('EXTR' (EIGE.MODES. 3 .DEFORMEE_MODALE) MAI1 'UX')**(2))
        + (('EXTR' (EIGE.MODES. 3 .DEFORMEE_MODALE) MAI1 'UY')**(2))
        + (('EXTR' (EIGE.MODES. 3 .DEFORMEE_MODALE) MAI1 'UZ')**(2)))
                                                           **(0.5);
    VECT3E = (EIGE.MODES. 3 .DEFORMEE_MODALE)/(NORVEC3E);
  'SINON';
    LAM3E = 0.0;
    NORVEC3E = 0.0;
    VECT3E = MANU CHPO MAI1 3 'UX' 0.0 'UY' 0.0 'UZ' 0.0;
  'FINSI';
  'SI' ('EXIST' (EIGI.MODES) 1);
    LAM1I = ((EIGI.MODES. 1 .FREQUENCE)*((2.0)*(PI)))**(2.0);
    NORVEC1I =
         ((('EXTR' (EIGI.MODES. 1 .DEFORMEE_MODALE) MAI1 'UX')**(2))
        + (('EXTR' (EIGI.MODES. 1 .DEFORMEE_MODALE) MAI1 'UY')**(2))
        + (('EXTR' (EIGI.MODES. 1 .DEFORMEE_MODALE) MAI1 'UZ')**(2)))
                                                           **(0.5);
    VECT1I = (EIGI.MODES. 1 .DEFORMEE_MODALE)/(NORVEC1I);
  'SINON';
    LAM1I = 0.0;
    NORVEC1I = 0.0;
    VECT1I = MANU CHPO MAI1 3 'UX' 0.0 'UY' 0.0 'UZ' 0.0;
  'FINSI';
  'SI' ('EXIST' (EIGI.MODES) 2);
    LAM2I = ((EIGI.MODES. 2 .FREQUENCE)*((2.0)*(PI)))**(2.0);
    NORVEC2I =
         ((('EXTR' (EIGI.MODES. 2 .DEFORMEE_MODALE) MAI1 'UX')**(2))
        + (('EXTR' (EIGI.MODES. 2 .DEFORMEE_MODALE) MAI1 'UY')**(2))
        + (('EXTR' (EIGI.MODES. 2 .DEFORMEE_MODALE) MAI1 'UZ')**(2)))
                                                           **(0.5);
    VECT2I = (EIGI.MODES. 2 .DEFORMEE_MODALE)/(NORVEC2I);
  'SINON';
    LAM2I = 0.0;
    NORVEC2I = 0.0;
    VECT2I = MANU CHPO MAI1 3 'UX' 0.0 'UY' 0.0 'UZ' 0.0;
  'FINSI';
  'SI' ('EXIST' (EIGI.MODES) 3);
    LAM3I = ((EIGI.MODES. 3 .FREQUENCE)*((2.0)*(PI)))**(2.0);
    NORVEC3I =
         ((('EXTR' (EIGI.MODES. 3 .DEFORMEE_MODALE) MAI1 'UX')**(2))
        + (('EXTR' (EIGI.MODES. 3 .DEFORMEE_MODALE) MAI1 'UY')**(2))
        + (('EXTR' (EIGI.MODES. 3 .DEFORMEE_MODALE) MAI1 'UZ')**(2)))
                                                           **(0.5);
    VECT3I = (EIGI.MODES. 3 .DEFORMEE_MODALE)/(NORVEC3I);
  'SINON';
    LAM3I = 0.0;
    NORVEC3I = 0.0;
    VECT3I = MANU CHPO MAI1 3 'UX' 0.0 'UY' 0.0 'UZ' 0.0;
  'FINSI';
*
    LAM1E = ((NORMATXE)*(LAM1E));
    LAM2E = ((NORMATXE)*(LAM2E));
    LAM3E = ((NORMATXE)*(LAM3E));
    LAM1I = ((NORMATXI)*(LAM1I));
    LAM2I = ((NORMATXI)*(LAM2I));
    LAM3I = ((NORMATXI)*(LAM3I));
*
*   Autovaleurs (couche externe et interne)
    LL1E = (LAM1E)**(0.5);
    LL2E = (LAM2E)**(0.5);
    LL3E = (LAM3E)**(0.5);
    LL1I = (LAM1I)**(0.5);
    LL2I = (LAM2I)**(0.5);
    LL3I = (LAM3I)**(0.5);
*
*   Autovecteur (couche externe et interne)
    VECT1EX = 'EXTR' VECT1E 'UX' MAI1;
    VECT1EY = 'EXTR' VECT1E 'UY' MAI1;
    VECT1EZ = 'EXTR' VECT1E 'UZ' MAI1;
    VECT2EX = 'EXTR' VECT2E 'UX' MAI1;
    VECT2EY = 'EXTR' VECT2E 'UY' MAI1;
    VECT2EZ = 'EXTR' VECT2E 'UZ' MAI1;
    VECT3EX = 'EXTR' VECT3E 'UX' MAI1;
    VECT3EY = 'EXTR' VECT3E 'UY' MAI1;
    VECT3EZ = 'EXTR' VECT3E 'UZ' MAI1;
*
    VECT1IX = 'EXTR' VECT1I 'UX' MAI1;
    VECT1IY = 'EXTR' VECT1I 'UY' MAI1;
    VECT1IZ = 'EXTR' VECT1I 'UZ' MAI1;
    VECT2IX = 'EXTR' VECT2I 'UX' MAI1;
    VECT2IY = 'EXTR' VECT2I 'UY' MAI1;
    VECT2IZ = 'EXTR' VECT2I 'UZ' MAI1;
    VECT3IX = 'EXTR' VECT3I 'UX' MAI1;
    VECT3IY = 'EXTR' VECT3I 'UY' MAI1;
    VECT3IZ = 'EXTR' VECT3I 'UZ' MAI1;
*
*   definition du maillage pour l'enveloppe
    MAI2E = 'VIDE' MAILLAGE;
    MAI2I = 'VIDE' MAILLAGE;
    ND1 = 8;
    ND2 = 8;
    LL_FHI1 = 'PROG' 0. 'PAS' (90./ND1) 90.;
    LL_FHI2 = 'PROG' 0. 'PAS' (89./ND2) 89.;
    II1 = 1;
    JJ1 = 2;
*
*   boucle sur les points (on va definir la surface sur 8 quadrantes)
*   cordonÃ©e polaire fhi1 (plan xy) entre 0 pi/2
*   cordonÃ©e polaire fhi2 (azimuth) entre 0 pi/2
    'REPE' IND1 (ND1*ND2);
*
*   quadrant 1 fhi1 = [0 pi/2] fhi2 = [0 pi/2]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X1_1EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_1EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_1EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X2_1EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_1EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_1EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X3_1EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_1EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_1EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X4_1EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_1EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_1EL =  ((LL3E)*(SIN(VAL_FHI2)));
    X1_1E =
   ((X1_1EL)*(VECT1EX)) + ((Y1_1EL)*(VECT2EX)) + ((Z1_1EL)*(VECT3EX));
    Y1_1E =
   ((X1_1EL)*(VECT1EY)) + ((Y1_1EL)*(VECT2EY)) + ((Z1_1EL)*(VECT3EY));
    Z1_1E =
   ((X1_1EL)*(VECT1EZ)) + ((Y1_1EL)*(VECT2EZ)) + ((Z1_1EL)*(VECT3EZ));
    X2_1E =
   ((X2_1EL)*(VECT1EX)) + ((Y2_1EL)*(VECT2EX)) + ((Z2_1EL)*(VECT3EX));
    Y2_1E =
   ((X2_1EL)*(VECT1EY)) + ((Y2_1EL)*(VECT2EY)) + ((Z2_1EL)*(VECT3EY));
    Z2_1E =
   ((X2_1EL)*(VECT1EZ)) + ((Y2_1EL)*(VECT2EZ)) + ((Z2_1EL)*(VECT3EZ));
    X3_1E =
   ((X3_1EL)*(VECT1EX)) + ((Y3_1EL)*(VECT2EX)) + ((Z3_1EL)*(VECT3EX));
    Y3_1E =
   ((X3_1EL)*(VECT1EY)) + ((Y3_1EL)*(VECT2EY)) + ((Z3_1EL)*(VECT3EY));
    Z3_1E =
   ((X3_1EL)*(VECT1EZ)) + ((Y3_1EL)*(VECT2EZ)) + ((Z3_1EL)*(VECT3EZ));
    X4_1E =
   ((X4_1EL)*(VECT1EX)) + ((Y4_1EL)*(VECT2EX)) + ((Z4_1EL)*(VECT3EX));
    Y4_1E =
   ((X4_1EL)*(VECT1EY)) + ((Y4_1EL)*(VECT2EY)) + ((Z4_1EL)*(VECT3EY));
    Z4_1E =
   ((X4_1EL)*(VECT1EZ)) + ((Y4_1EL)*(VECT2EZ)) + ((Z4_1EL)*(VECT3EZ));
*
*   quadrant 2 fhi1 = [pi/2 pi] fhi2 = [0 pi/2]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X1_2EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_2EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_2EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = (EXTR LL_FHI1 (II1 + 1)) + ((180.0)/(2.0));
    VAL_FHI2 = (EXTR LL_FHI2 (JJ1 - 1));
    X2_2EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_2EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_2EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = (EXTR LL_FHI1 (II1 + 1)) + ((180.0)/(2.0));
    VAL_FHI2 = (EXTR LL_FHI2 (JJ1));
    X3_2EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_2EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_2EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = (EXTR LL_FHI1 (II1)) + ((180.0)/(2.0));
    VAL_FHI2 = (EXTR LL_FHI2 (JJ1));
    X4_2EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_2EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_2EL =  ((LL3E)*(SIN(VAL_FHI2)));
    X1_2E =
   ((X1_2EL)*(VECT1EX)) + ((Y1_2EL)*(VECT2EX)) + ((Z1_2EL)*(VECT3EX));
    Y1_2E =
   ((X1_2EL)*(VECT1EY)) + ((Y1_2EL)*(VECT2EY)) + ((Z1_2EL)*(VECT3EY));
    Z1_2E =
   ((X1_2EL)*(VECT1EZ)) + ((Y1_2EL)*(VECT2EZ)) + ((Z1_2EL)*(VECT3EZ));
    X2_2E =
   ((X2_2EL)*(VECT1EX)) + ((Y2_2EL)*(VECT2EX)) + ((Z2_2EL)*(VECT3EX));
    Y2_2E =
   ((X2_2EL)*(VECT1EY)) + ((Y2_2EL)*(VECT2EY)) + ((Z2_2EL)*(VECT3EY));
    Z2_2E =
   ((X2_2EL)*(VECT1EZ)) + ((Y2_2EL)*(VECT2EZ)) + ((Z2_2EL)*(VECT3EZ));
    X3_2E =
   ((X3_2EL)*(VECT1EX)) + ((Y3_2EL)*(VECT2EX)) + ((Z3_2EL)*(VECT3EX));
    Y3_2E =
   ((X3_2EL)*(VECT1EY)) + ((Y3_2EL)*(VECT2EY)) + ((Z3_2EL)*(VECT3EY));
    Z3_2E =
   ((X3_2EL)*(VECT1EZ)) + ((Y3_2EL)*(VECT2EZ)) + ((Z3_2EL)*(VECT3EZ));
    X4_2E =
   ((X4_2EL)*(VECT1EX)) + ((Y4_2EL)*(VECT2EX)) + ((Z4_2EL)*(VECT3EX));
    Y4_2E =
   ((X4_2EL)*(VECT1EY)) + ((Y4_2EL)*(VECT2EY)) + ((Z4_2EL)*(VECT3EY));
    Z4_2E =
   ((X4_2EL)*(VECT1EZ)) + ((Y4_2EL)*(VECT2EZ)) + ((Z4_2EL)*(VECT3EZ));
*
*   quadrant 3 fhi1 = [pi 3pi/2] fhi2 = [0 pi/2]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(1.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X1_3EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_3EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_3EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + ((180.0)/(1.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X2_3EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_3EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_3EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + ((180.0)/(1.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X3_3EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_3EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_3EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(1.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X4_3EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_3EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_3EL =  ((LL3E)*(SIN(VAL_FHI2)));
    X1_3E =
   ((X1_3EL)*(VECT1EX)) + ((Y1_3EL)*(VECT2EX)) + ((Z1_3EL)*(VECT3EX));
    Y1_3E =
   ((X1_3EL)*(VECT1EY)) + ((Y1_3EL)*(VECT2EY)) + ((Z1_3EL)*(VECT3EY));
    Z1_3E =
   ((X1_3EL)*(VECT1EZ)) + ((Y1_3EL)*(VECT2EZ)) + ((Z1_3EL)*(VECT3EZ));
    X2_3E =
   ((X2_3EL)*(VECT1EX)) + ((Y2_3EL)*(VECT2EX)) + ((Z2_3EL)*(VECT3EX));
    Y2_3E =
   ((X2_3EL)*(VECT1EY)) + ((Y2_3EL)*(VECT2EY)) + ((Z2_3EL)*(VECT3EY));
    Z2_3E =
   ((X2_3EL)*(VECT1EZ)) + ((Y2_3EL)*(VECT2EZ)) + ((Z2_3EL)*(VECT3EZ));
    X3_3E =
   ((X3_3EL)*(VECT1EX)) + ((Y3_3EL)*(VECT2EX)) + ((Z3_3EL)*(VECT3EX));
    Y3_3E =
   ((X3_3EL)*(VECT1EY)) + ((Y3_3EL)*(VECT2EY)) + ((Z3_3EL)*(VECT3EY));
    Z3_3E =
   ((X3_3EL)*(VECT1EZ)) + ((Y3_3EL)*(VECT2EZ)) + ((Z3_3EL)*(VECT3EZ));
    X4_3E =
   ((X4_3EL)*(VECT1EX)) + ((Y4_3EL)*(VECT2EX)) + ((Z4_3EL)*(VECT3EX));
    Y4_3E =
   ((X4_3EL)*(VECT1EY)) + ((Y4_3EL)*(VECT2EY)) + ((Z4_3EL)*(VECT3EY));
    Z4_3E =
   ((X4_3EL)*(VECT1EZ)) + ((Y4_3EL)*(VECT2EZ)) + ((Z4_3EL)*(VECT3EZ));
*
*   quadrant 4 fhi1 = [3pi/2 2pi] fhi2 = [0 pi/2]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X1_4EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_4EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_4EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X2_4EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_4EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_4EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X3_4EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_4EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_4EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X4_4EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_4EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_4EL =  ((LL3E)*(SIN(VAL_FHI2)));
    X1_4E =
   ((X1_4EL)*(VECT1EX)) + ((Y1_4EL)*(VECT2EX)) + ((Z1_4EL)*(VECT3EX));
    Y1_4E =
   ((X1_4EL)*(VECT1EY)) + ((Y1_4EL)*(VECT2EY)) + ((Z1_4EL)*(VECT3EY));
    Z1_4E =
   ((X1_4EL)*(VECT1EZ)) + ((Y1_4EL)*(VECT2EZ)) + ((Z1_4EL)*(VECT3EZ));
    X2_4E =
   ((X2_4EL)*(VECT1EX)) + ((Y2_4EL)*(VECT2EX)) + ((Z2_4EL)*(VECT3EX));
    Y2_4E =
   ((X2_4EL)*(VECT1EY)) + ((Y2_4EL)*(VECT2EY)) + ((Z2_4EL)*(VECT3EY));
    Z2_4E =
   ((X2_4EL)*(VECT1EZ)) + ((Y2_4EL)*(VECT2EZ)) + ((Z2_4EL)*(VECT3EZ));
    X3_4E =
   ((X3_4EL)*(VECT1EX)) + ((Y3_4EL)*(VECT2EX)) + ((Z3_4EL)*(VECT3EX));
    Y3_4E =
   ((X3_4EL)*(VECT1EY)) + ((Y3_4EL)*(VECT2EY)) + ((Z3_4EL)*(VECT3EY));
    Z3_4E =
   ((X3_4EL)*(VECT1EZ)) + ((Y3_4EL)*(VECT2EZ)) + ((Z3_4EL)*(VECT3EZ));
    X4_4E =
   ((X4_4EL)*(VECT1EX)) + ((Y4_4EL)*(VECT2EX)) + ((Z4_4EL)*(VECT3EX));
    Y4_4E =
   ((X4_4EL)*(VECT1EY)) + ((Y4_4EL)*(VECT2EY)) + ((Z4_4EL)*(VECT3EY));
    Z4_4E =
   ((X4_4EL)*(VECT1EZ)) + ((Y4_4EL)*(VECT2EZ)) + ((Z4_4EL)*(VECT3EZ));
*
*   quadrant 5 fhi1 = [0 pi/2] fhi2 = [-pi/2 0]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X1_5EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_5EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_5EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X2_5EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_5EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_5EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X3_5EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_5EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_5EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X4_5EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_5EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_5EL =  ((LL3E)*(SIN(VAL_FHI2)));
    X1_5E =
   ((X1_5EL)*(VECT1EX)) + ((Y1_5EL)*(VECT2EX)) + ((Z1_5EL)*(VECT3EX));
    Y1_5E =
   ((X1_5EL)*(VECT1EY)) + ((Y1_5EL)*(VECT2EY)) + ((Z1_5EL)*(VECT3EY));
    Z1_5E =
   ((X1_5EL)*(VECT1EZ)) + ((Y1_5EL)*(VECT2EZ)) + ((Z1_5EL)*(VECT3EZ));
    X2_5E =
   ((X2_5EL)*(VECT1EX)) + ((Y2_5EL)*(VECT2EX)) + ((Z2_5EL)*(VECT3EX));
    Y2_5E =
   ((X2_5EL)*(VECT1EY)) + ((Y2_5EL)*(VECT2EY)) + ((Z2_5EL)*(VECT3EY));
    Z2_5E =
   ((X2_5EL)*(VECT1EZ)) + ((Y2_5EL)*(VECT2EZ)) + ((Z2_5EL)*(VECT3EZ));
    X3_5E =
   ((X3_5EL)*(VECT1EX)) + ((Y3_5EL)*(VECT2EX)) + ((Z3_5EL)*(VECT3EX));
    Y3_5E =
   ((X3_5EL)*(VECT1EY)) + ((Y3_5EL)*(VECT2EY)) + ((Z3_5EL)*(VECT3EY));
    Z3_5E =
   ((X3_5EL)*(VECT1EZ)) + ((Y3_5EL)*(VECT2EZ)) + ((Z3_5EL)*(VECT3EZ));
    X4_5E =
   ((X4_5EL)*(VECT1EX)) + ((Y4_5EL)*(VECT2EX)) + ((Z4_5EL)*(VECT3EX));
    Y4_5E =
   ((X4_5EL)*(VECT1EY)) + ((Y4_5EL)*(VECT2EY)) + ((Z4_5EL)*(VECT3EY));
    Z4_5E =
   ((X4_5EL)*(VECT1EZ)) + ((Y4_5EL)*(VECT2EZ)) + ((Z4_5EL)*(VECT3EZ));
*
*   quadrant 6 fhi1 = [pi/2 pi] fhi2 = [-pi/2 0]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(2.0));
    VAL_FHI2 = (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X1_6EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_6EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_6EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1))  + ((180.0)/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X2_6EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_6EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_6EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1))  + ((180.0)/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X3_6EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_6EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_6EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X4_6EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_6EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_6EL =  ((LL3E)*(SIN(VAL_FHI2)));
    X1_6E =
   ((X1_6EL)*(VECT1EX)) + ((Y1_6EL)*(VECT2EX)) + ((Z1_6EL)*(VECT3EX));
    Y1_6E =
   ((X1_6EL)*(VECT1EY)) + ((Y1_6EL)*(VECT2EY)) + ((Z1_6EL)*(VECT3EY));
    Z1_6E =
   ((X1_6EL)*(VECT1EZ)) + ((Y1_6EL)*(VECT2EZ)) + ((Z1_6EL)*(VECT3EZ));
    X2_6E =
   ((X2_6EL)*(VECT1EX)) + ((Y2_6EL)*(VECT2EX)) + ((Z2_6EL)*(VECT3EX));
    Y2_6E =
   ((X2_6EL)*(VECT1EY)) + ((Y2_6EL)*(VECT2EY)) + ((Z2_6EL)*(VECT3EY));
    Z2_6E =
   ((X2_6EL)*(VECT1EZ)) + ((Y2_6EL)*(VECT2EZ)) + ((Z2_6EL)*(VECT3EZ));
    X3_6E =
   ((X3_6EL)*(VECT1EX)) + ((Y3_6EL)*(VECT2EX)) + ((Z3_6EL)*(VECT3EX));
    Y3_6E =
   ((X3_6EL)*(VECT1EY)) + ((Y3_6EL)*(VECT2EY)) + ((Z3_6EL)*(VECT3EY));
    Z3_6E =
   ((X3_6EL)*(VECT1EZ)) + ((Y3_6EL)*(VECT2EZ)) + ((Z3_6EL)*(VECT3EZ));
    X4_6E =
   ((X4_6EL)*(VECT1EX)) + ((Y4_6EL)*(VECT2EX)) + ((Z4_6EL)*(VECT3EX));
    Y4_6E =
   ((X4_6EL)*(VECT1EY)) + ((Y4_6EL)*(VECT2EY)) + ((Z4_6EL)*(VECT3EY));
    Z4_6E =
   ((X4_6EL)*(VECT1EZ)) + ((Y4_6EL)*(VECT2EZ)) + ((Z4_6EL)*(VECT3EZ));
*
*   quadrant 7 fhi1 = [pi 3pi/2] fhi2 = [-pi/2 0]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(1.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X1_7EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_7EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_7EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + ((180.0)/(1.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X2_7EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_7EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_7EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + ((180.0)/(1.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X3_7EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_7EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_7EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(1.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X4_7EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_7EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_7EL =  ((LL3E)*(SIN(VAL_FHI2)));
    X1_7E =
   ((X1_7EL)*(VECT1EX)) + ((Y1_7EL)*(VECT2EX)) + ((Z1_7EL)*(VECT3EX));
    Y1_7E =
   ((X1_7EL)*(VECT1EY)) + ((Y1_7EL)*(VECT2EY)) + ((Z1_7EL)*(VECT3EY));
    Z1_7E =
   ((X1_7EL)*(VECT1EZ)) + ((Y1_7EL)*(VECT2EZ)) + ((Z1_7EL)*(VECT3EZ));
    X2_7E =
   ((X2_7EL)*(VECT1EX)) + ((Y2_7EL)*(VECT2EX)) + ((Z2_7EL)*(VECT3EX));
    Y2_7E =
   ((X2_7EL)*(VECT1EY)) + ((Y2_7EL)*(VECT2EY)) + ((Z2_7EL)*(VECT3EY));
    Z2_7E =
   ((X2_7EL)*(VECT1EZ)) + ((Y2_7EL)*(VECT2EZ)) + ((Z2_7EL)*(VECT3EZ));
    X3_7E =
   ((X3_7EL)*(VECT1EX)) + ((Y3_7EL)*(VECT2EX)) + ((Z3_7EL)*(VECT3EX));
    Y3_7E =
   ((X3_7EL)*(VECT1EY)) + ((Y3_7EL)*(VECT2EY)) + ((Z3_7EL)*(VECT3EY));
    Z3_7E =
   ((X3_7EL)*(VECT1EZ)) + ((Y3_7EL)*(VECT2EZ)) + ((Z3_7EL)*(VECT3EZ));
    X4_7E =
   ((X4_7EL)*(VECT1EX)) + ((Y4_7EL)*(VECT2EX)) + ((Z4_7EL)*(VECT3EX));
    Y4_7E =
   ((X4_7EL)*(VECT1EY)) + ((Y4_7EL)*(VECT2EY)) + ((Z4_7EL)*(VECT3EY));
    Z4_7E =
   ((X4_7EL)*(VECT1EZ)) + ((Y4_7EL)*(VECT2EZ)) + ((Z4_7EL)*(VECT3EZ));
*
*   quadrant 8 fhi1 = [3pi/2 2pi] fhi2 = [-pi/2 0]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X1_8EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_8EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_8EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X2_8EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_8EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_8EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X3_8EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_8EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_8EL =  ((LL3E)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X4_8EL = (((LL1E)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_8EL = (((LL2E)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_8EL =  ((LL3E)*(SIN(VAL_FHI2)));
    X1_8E =
   ((X1_8EL)*(VECT1EX)) + ((Y1_8EL)*(VECT2EX)) + ((Z1_8EL)*(VECT3EX));
    Y1_8E =
   ((X1_8EL)*(VECT1EY)) + ((Y1_8EL)*(VECT2EY)) + ((Z1_8EL)*(VECT3EY));
    Z1_8E =
   ((X1_8EL)*(VECT1EZ)) + ((Y1_8EL)*(VECT2EZ)) + ((Z1_8EL)*(VECT3EZ));
    X2_8E =
   ((X2_8EL)*(VECT1EX)) + ((Y2_8EL)*(VECT2EX)) + ((Z2_8EL)*(VECT3EX));
    Y2_8E =
   ((X2_8EL)*(VECT1EY)) + ((Y2_8EL)*(VECT2EY)) + ((Z2_8EL)*(VECT3EY));
    Z2_8E =
   ((X2_8EL)*(VECT1EZ)) + ((Y2_8EL)*(VECT2EZ)) + ((Z2_8EL)*(VECT3EZ));
    X3_8E =
   ((X3_8EL)*(VECT1EX)) + ((Y3_8EL)*(VECT2EX)) + ((Z3_8EL)*(VECT3EX));
    Y3_8E =
   ((X3_8EL)*(VECT1EY)) + ((Y3_8EL)*(VECT2EY)) + ((Z3_8EL)*(VECT3EY));
    Z3_8E =
   ((X3_8EL)*(VECT1EZ)) + ((Y3_8EL)*(VECT2EZ)) + ((Z3_8EL)*(VECT3EZ));
    X4_8E =
   ((X4_8EL)*(VECT1EX)) + ((Y4_8EL)*(VECT2EX)) + ((Z4_8EL)*(VECT3EX));
    Y4_8E =
   ((X4_8EL)*(VECT1EY)) + ((Y4_8EL)*(VECT2EY)) + ((Z4_8EL)*(VECT3EY));
    Z4_8E =
   ((X4_8EL)*(VECT1EZ)) + ((Y4_8EL)*(VECT2EZ)) + ((Z4_8EL)*(VECT3EZ));
*
*
*   quadrant 1 fhi1 = [0 pi/2] fhi2 = [0 pi/2]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X1_1IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_1IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_1IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X2_1IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_1IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_1IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X3_1IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_1IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_1IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X4_1IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_1IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_1IL =  ((LL3I)*(SIN(VAL_FHI2)));
    X1_1I =
   ((X1_1IL)*(VECT1IX)) + ((Y1_1IL)*(VECT2IX)) + ((Z1_1IL)*(VECT3IX));
    Y1_1I =
   ((X1_1IL)*(VECT1IY)) + ((Y1_1IL)*(VECT2IY)) + ((Z1_1IL)*(VECT3IY));
    Z1_1I =
   ((X1_1IL)*(VECT1IZ)) + ((Y1_1IL)*(VECT2IZ)) + ((Z1_1IL)*(VECT3IZ));
    X2_1I =
   ((X2_1IL)*(VECT1IX)) + ((Y2_1IL)*(VECT2IX)) + ((Z2_1IL)*(VECT3IX));
    Y2_1I =
   ((X2_1IL)*(VECT1IY)) + ((Y2_1IL)*(VECT2IY)) + ((Z2_1IL)*(VECT3IY));
    Z2_1I =
   ((X2_1IL)*(VECT1IZ)) + ((Y2_1IL)*(VECT2IZ)) + ((Z2_1IL)*(VECT3IZ));
    X3_1I =
   ((X3_1IL)*(VECT1IX)) + ((Y3_1IL)*(VECT2IX)) + ((Z3_1IL)*(VECT3IX));
    Y3_1I =
   ((X3_1IL)*(VECT1IY)) + ((Y3_1IL)*(VECT2IY)) + ((Z3_1IL)*(VECT3IY));
    Z3_1I =
   ((X3_1IL)*(VECT1IZ)) + ((Y3_1IL)*(VECT2IZ)) + ((Z3_1IL)*(VECT3IZ));
    X4_1I =
   ((X4_1IL)*(VECT1IX)) + ((Y4_1IL)*(VECT2IX)) + ((Z4_1IL)*(VECT3IX));
    Y4_1I =
   ((X4_1IL)*(VECT1IY)) + ((Y4_1IL)*(VECT2IY)) + ((Z4_1IL)*(VECT3IY));
    Z4_1I =
   ((X4_1IL)*(VECT1IZ)) + ((Y4_1IL)*(VECT2IZ)) + ((Z4_1IL)*(VECT3IZ));
*
*   quadrant 2 fhi1 = [pi/2 pi] fhi2 = [0 pi/2]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X1_2IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_2IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_2IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = (EXTR LL_FHI1 (II1 + 1)) + ((180.0)/(2.0));
    VAL_FHI2 = (EXTR LL_FHI2 (JJ1 - 1));
    X2_2IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_2IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_2IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = (EXTR LL_FHI1 (II1 + 1)) + ((180.0)/(2.0));
    VAL_FHI2 = (EXTR LL_FHI2 (JJ1));
    X3_2IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_2IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_2IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = (EXTR LL_FHI1 (II1)) + ((180.0)/(2.0));
    VAL_FHI2 = (EXTR LL_FHI2 (JJ1));
    X4_2IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_2IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_2IL =  ((LL3I)*(SIN(VAL_FHI2)));
    X1_2I =
   ((X1_2IL)*(VECT1IX)) + ((Y1_2IL)*(VECT2IX)) + ((Z1_2IL)*(VECT3IX));
    Y1_2I =
   ((X1_2IL)*(VECT1IY)) + ((Y1_2IL)*(VECT2IY)) + ((Z1_2IL)*(VECT3IY));
    Z1_2I =
   ((X1_2IL)*(VECT1IZ)) + ((Y1_2IL)*(VECT2IZ)) + ((Z1_2IL)*(VECT3IZ));
    X2_2I =
   ((X2_2IL)*(VECT1IX)) + ((Y2_2IL)*(VECT2IX)) + ((Z2_2IL)*(VECT3IX));
    Y2_2I =
   ((X2_2IL)*(VECT1IY)) + ((Y2_2IL)*(VECT2IY)) + ((Z2_2IL)*(VECT3IY));
    Z2_2I =
   ((X2_2IL)*(VECT1IZ)) + ((Y2_2IL)*(VECT2IZ)) + ((Z2_2IL)*(VECT3IZ));
    X3_2I =
   ((X3_2IL)*(VECT1IX)) + ((Y3_2IL)*(VECT2IX)) + ((Z3_2IL)*(VECT3IX));
    Y3_2I =
   ((X3_2IL)*(VECT1IY)) + ((Y3_2IL)*(VECT2IY)) + ((Z3_2IL)*(VECT3IY));
    Z3_2I =
   ((X3_2IL)*(VECT1IZ)) + ((Y3_2IL)*(VECT2IZ)) + ((Z3_2IL)*(VECT3IZ));
    X4_2I =
   ((X4_2IL)*(VECT1IX)) + ((Y4_2IL)*(VECT2IX)) + ((Z4_2IL)*(VECT3IX));
    Y4_2I =
   ((X4_2IL)*(VECT1IY)) + ((Y4_2IL)*(VECT2IY)) + ((Z4_2IL)*(VECT3IY));
    Z4_2I =
   ((X4_2IL)*(VECT1IZ)) + ((Y4_2IL)*(VECT2IZ)) + ((Z4_2IL)*(VECT3IZ));
*
*   quadrant 3 fhi1 = [pi 3pi/2] fhi2 = [0 pi/2]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(1.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X1_3IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_3IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_3IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + ((180.0)/(1.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X2_3IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_3IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_3IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + ((180.0)/(1.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X3_3IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_3IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_3IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(1.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X4_3IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_3IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_3IL =  ((LL3I)*(SIN(VAL_FHI2)));
    X1_3I =
   ((X1_3IL)*(VECT1IX)) + ((Y1_3IL)*(VECT2IX)) + ((Z1_3IL)*(VECT3IX));
    Y1_3I =
   ((X1_3IL)*(VECT1IY)) + ((Y1_3IL)*(VECT2IY)) + ((Z1_3IL)*(VECT3IY));
    Z1_3I =
   ((X1_3IL)*(VECT1IZ)) + ((Y1_3IL)*(VECT2IZ)) + ((Z1_3IL)*(VECT3IZ));
    X2_3I =
   ((X2_3IL)*(VECT1IX)) + ((Y2_3IL)*(VECT2IX)) + ((Z2_3IL)*(VECT3IX));
    Y2_3I =
   ((X2_3IL)*(VECT1IY)) + ((Y2_3IL)*(VECT2IY)) + ((Z2_3IL)*(VECT3IY));
    Z2_3I =
   ((X2_3IL)*(VECT1IZ)) + ((Y2_3IL)*(VECT2IZ)) + ((Z2_3IL)*(VECT3IZ));
    X3_3I =
   ((X3_3IL)*(VECT1IX)) + ((Y3_3IL)*(VECT2IX)) + ((Z3_3IL)*(VECT3IX));
    Y3_3I =
   ((X3_3IL)*(VECT1IY)) + ((Y3_3IL)*(VECT2IY)) + ((Z3_3IL)*(VECT3IY));
    Z3_3I =
   ((X3_3IL)*(VECT1IZ)) + ((Y3_3IL)*(VECT2IZ)) + ((Z3_3IL)*(VECT3IZ));
    X4_3I =
   ((X4_3IL)*(VECT1IX)) + ((Y4_3IL)*(VECT2IX)) + ((Z4_3IL)*(VECT3IX));
    Y4_3I =
   ((X4_3IL)*(VECT1IY)) + ((Y4_3IL)*(VECT2IY)) + ((Z4_3IL)*(VECT3IY));
    Z4_3I =
   ((X4_3IL)*(VECT1IZ)) + ((Y4_3IL)*(VECT2IZ)) + ((Z4_3IL)*(VECT3IZ));
*
*   quadrant 4 fhi1 = [3pi/2 2pi] fhi2 = [0 pi/2]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X1_4IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_4IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_4IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1 - 1));
    X2_4IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_4IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_4IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X3_4IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_4IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_4IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = ('EXTR' LL_FHI2 (JJ1));
    X4_4IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_4IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_4IL =  ((LL3I)*(SIN(VAL_FHI2)));
    X1_4I =
   ((X1_4IL)*(VECT1IX)) + ((Y1_4IL)*(VECT2IX)) + ((Z1_4IL)*(VECT3IX));
    Y1_4I =
   ((X1_4IL)*(VECT1IY)) + ((Y1_4IL)*(VECT2IY)) + ((Z1_4IL)*(VECT3IY));
    Z1_4I =
   ((X1_4IL)*(VECT1IZ)) + ((Y1_4IL)*(VECT2IZ)) + ((Z1_4IL)*(VECT3IZ));
    X2_4I =
   ((X2_4IL)*(VECT1IX)) + ((Y2_4IL)*(VECT2IX)) + ((Z2_4IL)*(VECT3IX));
    Y2_4I =
   ((X2_4IL)*(VECT1IY)) + ((Y2_4IL)*(VECT2IY)) + ((Z2_4IL)*(VECT3IY));
    Z2_4I =
   ((X2_4IL)*(VECT1IZ)) + ((Y2_4IL)*(VECT2IZ)) + ((Z2_4IL)*(VECT3IZ));
    X3_4I =
   ((X3_4IL)*(VECT1IX)) + ((Y3_4IL)*(VECT2IX)) + ((Z3_4IL)*(VECT3IX));
    Y3_4I =
   ((X3_4IL)*(VECT1IY)) + ((Y3_4IL)*(VECT2IY)) + ((Z3_4IL)*(VECT3IY));
    Z3_4I =
   ((X3_4IL)*(VECT1IZ)) + ((Y3_4IL)*(VECT2IZ)) + ((Z3_4IL)*(VECT3IZ));
    X4_4I =
   ((X4_4IL)*(VECT1IX)) + ((Y4_4IL)*(VECT2IX)) + ((Z4_4IL)*(VECT3IX));
    Y4_4I =
   ((X4_4IL)*(VECT1IY)) + ((Y4_4IL)*(VECT2IY)) + ((Z4_4IL)*(VECT3IY));
    Z4_4I =
   ((X4_4IL)*(VECT1IZ)) + ((Y4_4IL)*(VECT2IZ)) + ((Z4_4IL)*(VECT3IZ));
*
*   quadrant 5 fhi1 = [0 pi/2] fhi2 = [-pi/2 0]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X1_5IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_5IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_5IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X2_5IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_5IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_5IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X3_5IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_5IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_5IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X4_5IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_5IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_5IL =  ((LL3I)*(SIN(VAL_FHI2)));
    X1_5I =
   ((X1_5IL)*(VECT1IX)) + ((Y1_5IL)*(VECT2IX)) + ((Z1_5IL)*(VECT3IX));
    Y1_5I =
   ((X1_5IL)*(VECT1IY)) + ((Y1_5IL)*(VECT2IY)) + ((Z1_5IL)*(VECT3IY));
    Z1_5I =
   ((X1_5IL)*(VECT1IZ)) + ((Y1_5IL)*(VECT2IZ)) + ((Z1_5IL)*(VECT3IZ));
    X2_5I =
   ((X2_5IL)*(VECT1IX)) + ((Y2_5IL)*(VECT2IX)) + ((Z2_5IL)*(VECT3IX));
    Y2_5I =
   ((X2_5IL)*(VECT1IY)) + ((Y2_5IL)*(VECT2IY)) + ((Z2_5IL)*(VECT3IY));
    Z2_5I =
   ((X2_5IL)*(VECT1IZ)) + ((Y2_5IL)*(VECT2IZ)) + ((Z2_5IL)*(VECT3IZ));
    X3_5I =
   ((X3_5IL)*(VECT1IX)) + ((Y3_5IL)*(VECT2IX)) + ((Z3_5IL)*(VECT3IX));
    Y3_5I =
   ((X3_5IL)*(VECT1IY)) + ((Y3_5IL)*(VECT2IY)) + ((Z3_5IL)*(VECT3IY));
    Z3_5I =
   ((X3_5IL)*(VECT1IZ)) + ((Y3_5IL)*(VECT2IZ)) + ((Z3_5IL)*(VECT3IZ));
    X4_5I =
   ((X4_5IL)*(VECT1IX)) + ((Y4_5IL)*(VECT2IX)) + ((Z4_5IL)*(VECT3IX));
    Y4_5I =
   ((X4_5IL)*(VECT1IY)) + ((Y4_5IL)*(VECT2IY)) + ((Z4_5IL)*(VECT3IY));
    Z4_5I =
   ((X4_5IL)*(VECT1IZ)) + ((Y4_5IL)*(VECT2IZ)) + ((Z4_5IL)*(VECT3IZ));
*
*   quadrant 6 fhi1 = [pi/2 pi] fhi2 = [-pi/2 0]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X1_6IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_6IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_6IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1))  + ((180.0)/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X2_6IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_6IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_6IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1))  + ((180.0)/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X3_6IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_6IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_6IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X4_6IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_6IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_6IL =  ((LL3I)*(SIN(VAL_FHI2)));
    X1_6I =
   ((X1_6IL)*(VECT1IX)) + ((Y1_6IL)*(VECT2IX)) + ((Z1_6IL)*(VECT3IX));
    Y1_6I =
   ((X1_6IL)*(VECT1IY)) + ((Y1_6IL)*(VECT2IY)) + ((Z1_6IL)*(VECT3IY));
    Z1_6I =
   ((X1_6IL)*(VECT1IZ)) + ((Y1_6IL)*(VECT2IZ)) + ((Z1_6IL)*(VECT3IZ));
    X2_6I =
   ((X2_6IL)*(VECT1IX)) + ((Y2_6IL)*(VECT2IX)) + ((Z2_6IL)*(VECT3IX));
    Y2_6I =
   ((X2_6IL)*(VECT1IY)) + ((Y2_6IL)*(VECT2IY)) + ((Z2_6IL)*(VECT3IY));
    Z2_6I =
   ((X2_6IL)*(VECT1IZ)) + ((Y2_6IL)*(VECT2IZ)) + ((Z2_6IL)*(VECT3IZ));
    X3_6I =
   ((X3_6IL)*(VECT1IX)) + ((Y3_6IL)*(VECT2IX)) + ((Z3_6IL)*(VECT3IX));
    Y3_6I =
   ((X3_6IL)*(VECT1IY)) + ((Y3_6IL)*(VECT2IY)) + ((Z3_6IL)*(VECT3IY));
    Z3_6I =
   ((X3_6IL)*(VECT1IZ)) + ((Y3_6IL)*(VECT2IZ)) + ((Z3_6IL)*(VECT3IZ));
    X4_6I =
   ((X4_6IL)*(VECT1IX)) + ((Y4_6IL)*(VECT2IX)) + ((Z4_6IL)*(VECT3IX));
    Y4_6I =
   ((X4_6IL)*(VECT1IY)) + ((Y4_6IL)*(VECT2IY)) + ((Z4_6IL)*(VECT3IY));
    Z4_6I =
   ((X4_6IL)*(VECT1IZ)) + ((Y4_6IL)*(VECT2IZ)) + ((Z4_6IL)*(VECT3IZ));
*
*   quadrant 7 fhi1 = [pi 3pi/2] fhi2 = [-pi/2 0]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(1.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X1_7IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_7IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_7IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + ((180.0)/(1.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X2_7IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_7IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_7IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + ((180.0)/(1.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X3_7IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_7IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_7IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + ((180.0)/(1.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X4_7IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_7IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_7IL =  ((LL3I)*(SIN(VAL_FHI2)));
    X1_7I =
   ((X1_7IL)*(VECT1IX)) + ((Y1_7IL)*(VECT2IX)) + ((Z1_7IL)*(VECT3IX));
    Y1_7I =
   ((X1_7IL)*(VECT1IY)) + ((Y1_7IL)*(VECT2IY)) + ((Z1_7IL)*(VECT3IY));
    Z1_7I =
   ((X1_7IL)*(VECT1IZ)) + ((Y1_7IL)*(VECT2IZ)) + ((Z1_7IL)*(VECT3IZ));
    X2_7I =
   ((X2_7IL)*(VECT1IX)) + ((Y2_7IL)*(VECT2IX)) + ((Z2_7EL)*(VECT3IX));
    Y2_7I =
   ((X2_7IL)*(VECT1IY)) + ((Y2_7IL)*(VECT2IY)) + ((Z2_7IL)*(VECT3IY));
    Z2_7I =
   ((X2_7IL)*(VECT1IZ)) + ((Y2_7IL)*(VECT2IZ)) + ((Z2_7IL)*(VECT3IZ));
    X3_7I =
    ((X3_7IL)*(VECT1IX)) + ((Y3_7IL)*(VECT2IX)) + ((Z3_7IL)*(VECT3IX));
    Y3_7I =
   ((X3_7IL)*(VECT1IY)) + ((Y3_7IL)*(VECT2IY)) + ((Z3_7IL)*(VECT3IY));
    Z3_7I =
   ((X3_7IL)*(VECT1IZ)) + ((Y3_7IL)*(VECT2IZ)) + ((Z3_7IL)*(VECT3IZ));
    X4_7I =
   ((X4_7IL)*(VECT1IX)) + ((Y4_7IL)*(VECT2IX)) + ((Z4_7IL)*(VECT3IX));
    Y4_7I =
   ((X4_7IL)*(VECT1IY)) + ((Y4_7IL)*(VECT2IY)) + ((Z4_7IL)*(VECT3IY));
    Z4_7I =
   ((X4_7IL)*(VECT1IZ)) + ((Y4_7IL)*(VECT2IZ)) + ((Z4_7IL)*(VECT3IZ));
*
*   quadrant 8 fhi1 = [3pi/2 2pi] fhi2 = [-pi/2 0]
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 =  (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X1_8IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y1_8IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z1_8IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = (-1.0)*('EXTR' LL_FHI2 (JJ1 - 1));
    X2_8IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y2_8IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z2_8IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X3_8IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y3_8IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z3_8IL =  ((LL3I)*(SIN(VAL_FHI2)));
    VAL_FHI1 = ('EXTR' LL_FHI1 (II1)) + (((3.0)*(180.0))/(2.0));
    VAL_FHI2 = (-1.0)*('EXTR' LL_FHI2 (JJ1));
    X4_8IL = (((LL1I)*(COS(VAL_FHI1)))*(COS(VAL_FHI2)));
    Y4_8IL = (((LL2I)*(SIN(VAL_FHI1)))*(COS(VAL_FHI2)));
    Z4_8IL =  ((LL3I)*(SIN(VAL_FHI2)));
    X1_8I =
   ((X1_8IL)*(VECT1IX)) + ((Y1_8IL)*(VECT2IX)) + ((Z1_8IL)*(VECT3IX));
    Y1_8I =
   ((X1_8IL)*(VECT1IY)) + ((Y1_8IL)*(VECT2IY)) + ((Z1_8IL)*(VECT3IY));
    Z1_8I =
   ((X1_8IL)*(VECT1IZ)) + ((Y1_8IL)*(VECT2IZ)) + ((Z1_8IL)*(VECT3IZ));
    X2_8I =
   ((X2_8IL)*(VECT1IX)) + ((Y2_8IL)*(VECT2IX)) + ((Z2_8IL)*(VECT3IX));
    Y2_8I =
   ((X2_8IL)*(VECT1IY)) + ((Y2_8IL)*(VECT2IY)) + ((Z2_8IL)*(VECT3IY));
    Z2_8I =
   ((X2_8IL)*(VECT1IZ)) + ((Y2_8IL)*(VECT2IZ)) + ((Z2_8IL)*(VECT3IZ));
    X3_8I =
   ((X3_8IL)*(VECT1IX)) + ((Y3_8IL)*(VECT2IX)) + ((Z3_8IL)*(VECT3IX));
    Y3_8I =
   ((X3_8IL)*(VECT1IY)) + ((Y3_8IL)*(VECT2IY)) + ((Z3_8IL)*(VECT3IY));
    Z3_8I =
   ((X3_8IL)*(VECT1IZ)) + ((Y3_8IL)*(VECT2IZ)) + ((Z3_8IL)*(VECT3IZ));
    X4_8I =
   ((X4_8IL)*(VECT1IX)) + ((Y4_8IL)*(VECT2IX)) + ((Z4_8IL)*(VECT3IX));
    Y4_8I =
   ((X4_8IL)*(VECT1IY)) + ((Y4_8IL)*(VECT2IY)) + ((Z4_8IL)*(VECT3IY));
    Z4_8I =
   ((X4_8IL)*(VECT1IZ)) + ((Y4_8IL)*(VECT2IZ)) + ((Z4_8IL)*(VECT3IZ));
*
*     definition points
      P1_1E = (X1_1E + N110E) (Y1_1E + N220E) (Z1_1E + N120E);
      P2_1E = (X2_1E + N110E) (Y2_1E + N220E) (Z2_1E + N120E);
      P3_1E = (X3_1E + N110E) (Y3_1E + N220E) (Z3_1E + N120E);
      P4_1E = (X4_1E + N110E) (Y4_1E + N220E) (Z4_1E + N120E);
*
      P1_2E = (X1_2E + N110E) (Y1_2E + N220E) (Z1_2E + N120E);
      P2_2E = (X2_2E + N110E) (Y2_2E + N220E) (Z2_2E + N120E);
      P3_2E = (X3_2E + N110E) (Y3_2E + N220E) (Z3_2E + N120E);
      P4_2E = (X4_2E + N110E) (Y4_2E + N220E) (Z4_2E + N120E);
*
      P1_3E = (X1_3E + N110E) (Y1_3E + N220E) (Z1_3E + N120E);
      P2_3E = (X2_3E + N110E) (Y2_3E + N220E) (Z2_3E + N120E);
      P3_3E = (X3_3E + N110E) (Y3_3E + N220E) (Z3_3E + N120E);
      P4_3E = (X4_3E + N110E) (Y4_3E + N220E) (Z4_3E + N120E);
*
      P1_4E = (X1_4E + N110E) (Y1_4E + N220E) (Z1_4E + N120E);
      P2_4E = (X2_4E + N110E) (Y2_4E + N220E) (Z2_4E + N120E);
      P3_4E = (X3_4E + N110E) (Y3_4E + N220E) (Z3_4E + N120E);
      P4_4E = (X4_4E + N110E) (Y4_4E + N220E) (Z4_4E + N120E);
*
      P1_5E = (X1_5E + N110E) (Y1_5E + N220E) (Z1_5E + N120E);
      P2_5E = (X2_5E + N110E) (Y2_5E + N220E) (Z2_5E + N120E);
      P3_5E = (X3_5E + N110E) (Y3_5E + N220E) (Z3_5E + N120E);
      P4_5E = (X4_5E + N110E) (Y4_5E + N220E) (Z4_5E + N120E);
*
      P1_6E = (X1_6E + N110E) (Y1_6E + N220E) (Z1_6E + N120E);
      P2_6E = (X2_6E + N110E) (Y2_6E + N220E) (Z2_6E + N120E);
      P3_6E = (X3_6E + N110E) (Y3_6E + N220E) (Z3_6E + N120E);
      P4_6E = (X4_6E + N110E) (Y4_6E + N220E) (Z4_6E + N120E);
*
      P1_7E = (X1_7E + N110E) (Y1_7E + N220E) (Z1_7E + N120E);
      P2_7E = (X2_7E + N110E) (Y2_7E + N220E) (Z2_7E + N120E);
      P3_7E = (X3_7E + N110E) (Y3_7E + N220E) (Z3_7E + N120E);
      P4_7E = (X4_7E + N110E) (Y4_7E + N220E) (Z4_7E + N120E);
*
      P1_8E = (X1_8E + N110E) (Y1_8E + N220E) (Z1_8E + N120E);
      P2_8E = (X2_8E + N110E) (Y2_8E + N220E) (Z2_8E + N120E);
      P3_8E = (X3_8E + N110E) (Y3_8E + N220E) (Z3_8E + N120E);
      P4_8E = (X4_8E + N110E) (Y4_8E + N220E) (Z4_8E + N120E);
*
      P1_1I = (X1_1I + N110I) (Y1_1I + N220I) (Z1_1I + N120I);
      P2_1I = (X2_1I + N110I) (Y2_1I + N220I) (Z2_1I + N120I);
      P3_1I = (X3_1I + N110I) (Y3_1I + N220I) (Z3_1I + N120I);
      P4_1I = (X4_1I + N110I) (Y4_1I + N220I) (Z4_1I + N120I);
*
      P1_2I = (X1_2I + N110I) (Y1_2I + N220I) (Z1_2I + N120I);
      P2_2I = (X2_2I + N110I) (Y2_2I + N220I) (Z2_2I + N120I);
      P3_2I = (X3_2I + N110I) (Y3_2I + N220I) (Z3_2I + N120I);
      P4_2I = (X4_2I + N110I) (Y4_2I + N220I) (Z4_2I + N120I);
*
      P1_3I = (X1_3I + N110I) (Y1_3I + N220I) (Z1_3I + N120I);
      P2_3I = (X2_3I + N110I) (Y2_3I + N220I) (Z2_3I + N120I);
      P3_3I = (X3_3I + N110I) (Y3_3I + N220I) (Z3_3I + N120I);
      P4_3I = (X4_3I + N110I) (Y4_3I + N220I) (Z4_3I + N120I);
*
      P1_4I = (X1_4I + N110I) (Y1_4I + N220I) (Z1_4I + N120I);
      P2_4I = (X2_4I + N110I) (Y2_4I + N220I) (Z2_4I + N120I);
      P3_4I = (X3_4I + N110I) (Y3_4I + N220I) (Z3_4I + N120I);
      P4_4I = (X4_4I + N110I) (Y4_4I + N220I) (Z4_4I + N120I);
*
      P1_5I = (X1_5I + N110I) (Y1_5I + N220I) (Z1_5I + N120I);
      P2_5I = (X2_5I + N110I) (Y2_5I + N220I) (Z2_5I + N120I);
      P3_5I = (X3_5I + N110I) (Y3_5I + N220I) (Z3_5I + N120I);
      P4_5I = (X4_5I + N110I) (Y4_5I + N220I) (Z4_5I + N120I);
*
      P1_6I = (X1_6I + N110I) (Y1_6I + N220I) (Z1_6I + N120I);
      P2_6I = (X2_6I + N110I) (Y2_6I + N220I) (Z2_6I + N120I);
      P3_6I = (X3_6I + N110I) (Y3_6I + N220I) (Z3_6I + N120I);
      P4_6I = (X4_6I + N110I) (Y4_6I + N220I) (Z4_6I + N120I);
*
      P1_7I = (X1_7I + N110I) (Y1_7I + N220I) (Z1_7I + N120I);
      P2_7I = (X2_7I + N110I) (Y2_7I + N220I) (Z2_7I + N120I);
      P3_7I = (X3_7I + N110I) (Y3_7I + N220I) (Z3_7I + N120I);
      P4_7I = (X4_7I + N110I) (Y4_7I + N220I) (Z4_7I + N120I);
*
      P1_8I = (X1_8I + N110I) (Y1_8I + N220I) (Z1_8I + N120I);
      P2_8I = (X2_8I + N110I) (Y2_8I + N220I) (Z2_8I + N120I);
      P3_8I = (X3_8I + N110I) (Y3_8I + N220I) (Z3_8I + N120I);
      P4_8I = (X4_8I + N110I) (Y4_8I + N220I) (Z4_8I + N120I);
*
*     definitions des lignes
      OPTI ELEM SEG2;
      L1_1E = 'DROIT' 1 P1_1E P2_1E;
      L2_1E = 'DROIT' 1 P2_1E P3_1E;
      L3_1E = 'DROIT' 1 P3_1E P4_1E;
      L4_1E = 'DROIT' 1 P4_1E P1_1E;
*
      L1_2E = 'DROIT' 1 P1_2E P2_2E;
      L2_2E = 'DROIT' 1 P2_2E P3_2E;
      L3_2E = 'DROIT' 1 P3_2E P4_2E;
      L4_2E = 'DROIT' 1 P4_2E P1_2E;
*
      L1_3E = 'DROIT' 1 P1_3E P2_3E;
      L2_3E = 'DROIT' 1 P2_3E P3_3E;
      L3_3E = 'DROIT' 1 P3_3E P4_3E;
      L4_3E = 'DROIT' 1 P4_3E P1_3E;
*
      L1_4E = 'DROIT' 1 P1_4E P2_4E;
      L2_4E = 'DROIT' 1 P2_4E P3_4E;
      L3_4E = 'DROIT' 1 P3_4E P4_4E;
      L4_4E = 'DROIT' 1 P4_4E P1_4E;
*
      L1_5E = 'DROIT' 1 P1_5E P2_5E;
      L2_5E = 'DROIT' 1 P2_5E P3_5E;
      L3_5E = 'DROIT' 1 P3_5E P4_5E;
      L4_5E = 'DROIT' 1 P4_5E P1_5E;
*
      L1_6E = 'DROIT' 1 P1_6E P2_6E;
      L2_6E = 'DROIT' 1 P2_6E P3_6E;
      L3_6E = 'DROIT' 1 P3_6E P4_6E;
      L4_6E = 'DROIT' 1 P4_6E P1_6E;
*
      L1_7E = 'DROIT' 1 P1_7E P2_7E;
      L2_7E = 'DROIT' 1 P2_7E P3_7E;
      L3_7E = 'DROIT' 1 P3_7E P4_7E;
      L4_7E = 'DROIT' 1 P4_7E P1_7E;
*
      L1_8E = 'DROIT' 1 P1_8E P2_8E;
      L2_8E = 'DROIT' 1 P2_8E P3_8E;
      L3_8E = 'DROIT' 1 P3_8E P4_8E;
      L4_8E = 'DROIT' 1 P4_8E P1_8E;
*
      L1_1I = 'DROIT' 1 P1_1I P2_1I;
      L2_1I = 'DROIT' 1 P2_1I P3_1I;
      L3_1I = 'DROIT' 1 P3_1I P4_1I;
      L4_1I = 'DROIT' 1 P4_1I P1_1I;
*
      L1_2I = 'DROIT' 1 P1_2I P2_2I;
      L2_2I = 'DROIT' 1 P2_2I P3_2I;
      L3_2I = 'DROIT' 1 P3_2I P4_2I;
      L4_2I = 'DROIT' 1 P4_2I P1_2I;
*
      L1_3I = 'DROIT' 1 P1_3I P2_3I;
      L2_3I = 'DROIT' 1 P2_3I P3_3I;
      L3_3I = 'DROIT' 1 P3_3I P4_3I;
      L4_3I = 'DROIT' 1 P4_3I P1_3I;
*
      L1_4I = 'DROIT' 1 P1_4I P2_4I;
      L2_4I = 'DROIT' 1 P2_4I P3_4I;
      L3_4I = 'DROIT' 1 P3_4I P4_4I;
      L4_4I = 'DROIT' 1 P4_4I P1_4I;
*
      L1_5I = 'DROIT' 1 P1_5I P2_5I;
      L2_5I = 'DROIT' 1 P2_5I P3_5I;
      L3_5I = 'DROIT' 1 P3_5I P4_5I;
      L4_5I = 'DROIT' 1 P4_5I P1_5I;
*
      L1_6I = 'DROIT' 1 P1_6I P2_6I;
      L2_6I = 'DROIT' 1 P2_6I P3_6I;
      L3_6I = 'DROIT' 1 P3_6I P4_6I;
      L4_6I = 'DROIT' 1 P4_6I P1_6I;
*
      L1_7I = 'DROIT' 1 P1_7I P2_7I;
      L2_7I = 'DROIT' 1 P2_7I P3_7I;
      L3_7I = 'DROIT' 1 P3_7I P4_7I;
      L4_7I = 'DROIT' 1 P4_7I P1_7I;
*
      L1_8I = 'DROIT' 1 P1_8I P2_8I;
      L2_8I = 'DROIT' 1 P2_8I P3_8I;
      L3_8I = 'DROIT' 1 P3_8I P4_8I;
      L4_8I = 'DROIT' 1 P4_8I P1_8I;
*
*     definition des elements
      OPTI ELEM QUA4;
      ELE1_1E = 'DALL' L1_1E L2_1E L3_1E L4_1E;
      ELE1_2E = 'DALL' L1_2E L2_2E L3_2E L4_2E;
      ELE1_3E = 'DALL' L1_3E L2_3E L3_3E L4_3E;
      ELE1_4E = 'DALL' L1_4E L2_4E L3_4E L4_4E;
      ELE1_5E = 'DALL' L1_5E L2_5E L3_5E L4_5E;
      ELE1_6E = 'DALL' L1_6E L2_6E L3_6E L4_6E;
      ELE1_7E = 'DALL' L1_7E L2_7E L3_7E L4_7E;
      ELE1_8E = 'DALL' L1_8E L2_8E L3_8E L4_8E;
*
      ELE1_1I = 'DALL' L1_1I L2_1I L3_1I L4_1I;
      ELE1_2I = 'DALL' L1_2I L2_2I L3_2I L4_2I;
      ELE1_3I = 'DALL' L1_3I L2_3I L3_3I L4_3I;
      ELE1_4I = 'DALL' L1_4I L2_4I L3_4I L4_4I;
      ELE1_5I = 'DALL' L1_5I L2_5I L3_5I L4_5I;
      ELE1_6I = 'DALL' L1_6I L2_6I L3_6I L4_6I;
      ELE1_7I = 'DALL' L1_7I L2_7I L3_7I L4_7I;
      ELE1_8I = 'DALL' L1_8I L2_8I L3_8I L4_8I;
*
*     update maillage
      MAI2E = MAI2E 'ET' ELE1_1E 'ET' ELE1_2E 'ET' ELE1_3E 'ET' ELE1_4E
                    'ET' ELE1_5E 'ET' ELE1_6E 'ET' ELE1_7E 'ET' ELE1_8E;
*
      MAI2I = MAI2I 'ET' ELE1_1I 'ET' ELE1_2I 'ET' ELE1_3I 'ET' ELE1_4I
                    'ET' ELE1_5I 'ET' ELE1_6I 'ET' ELE1_7I 'ET' ELE1_8I;
      'SI' (II1 'EGA' ND1);
        II1 = 1;
        JJ1 = JJ1 + 1;
      'SINON';
        II1 = II1 + 1;
      'FINSI';
    'FIN' IND1;
    'ELIM' 0.001 MAI2E;
    'ELIM' 0.001 MAI2I;
*
    TT1.'ELLIPSOIDE_E' = MAI2E;
    TT1.'ELLIPSOIDE_I' = MAI2I;
*
*   definition maillage pour l'enveloppe rectangulaire
    MAI3E = 'VIDE' 'MAILLAGE';
    MAI3I = 'VIDE' 'MAILLAGE';
*
*   definition des points
    PPS1E = (((-1.0)*((N11N11E )**(0.5))) + N110E)
            (((-1.0)*((N22N22E )**(0.5))) + N220E)
            (((-1.0)*((N12N12E )**(0.5))) + N120E);
    PPS2E = (((1.0)*((N11N11E )**(0.5))) + N110E)
            (((-1.0)*((N22N22E )**(0.5))) + N220E)
            (((-1.0)*((N12N12E )**(0.5))) + N120E);
    PPS3E = (((1.0)*((N11N11E )**(0.5))) + N110E)
            (((1.0)*((N22N22E )**(0.5))) + N220E)
            (((-1.0)*((N12N12E )**(0.5))) + N120E);
    PPS4E = (((-1.0)*((N11N11E )**(0.5))) + N110E)
            (((1.0)*((N22N22E )**(0.5))) + N220E)
            (((-1.0)*((N12N12E )**(0.5))) + N120E);
    PPS5E = (((-1.0)*((N11N11E )**(0.5))) + N110E)
            (((-1.0)*((N22N22E )**(0.5))) + N220E)
            (((1.0)*((N12N12E )**(0.5))) + N120E);
    PPS6E = (((1.0)*((N11N11E )**(0.5))) + N110E)
            (((-1.0)*((N22N22E )**(0.5))) + N220E)
            (((1.0)*((N12N12E )**(0.5))) + N120E);
    PPS7E = (((1.0)*((N11N11E )**(0.5))) + N110E)
            (((1.0)*((N22N22E )**(0.5))) + N220E)
            (((1.0)*((N12N12E )**(0.5))) + N120E);
    PPS8E = (((-1.0)*((N11N11E )**(0.5))) + N110E)
            (((1.0)*((N22N22E )**(0.5))) + N220E)
            (((1.0)*((N12N12E )**(0.5))) + N120E);
*
    PPS1I = (((-1.0)*((N11N11I )**(0.5))) + N110I)
            (((-1.0)*((N22N22I )**(0.5))) + N220I)
            (((-1.0)*((N12N12I )**(0.5))) + N120I);
    PPS2I = (((1.0)*((N11N11I )**(0.5))) + N110I)
            (((-1.0)*((N22N22I )**(0.5))) + N220I)
            (((-1.0)*((N12N12I )**(0.5))) + N120I);
    PPS3I = (((1.0)*((N11N11I )**(0.5))) + N110I)
            (((1.0)*((N22N22I )**(0.5))) + N220I)
            (((-1.0)*((N12N12I )**(0.5))) + N120I);
    PPS4I = (((-1.0)*((N11N11I )**(0.5))) + N110I)
            (((1.0)*((N22N22I )**(0.5))) + N220I)
            (((-1.0)*((N12N12I )**(0.5))) + N120I);
    PPS5I = (((-1.0)*((N11N11I )**(0.5))) + N110I)
            (((-1.0)*((N22N22I )**(0.5))) + N220I)
            (((1.0)*((N12N12I )**(0.5))) + N120I);
    PPS6I = (((1.0)*((N11N11I )**(0.5))) + N110I)
            (((-1.0)*((N22N22I )**(0.5))) + N220I)
            (((1.0)*((N12N12I )**(0.5))) + N120I);
    PPS7I = (((1.0)*((N11N11I )**(0.5))) + N110I)
            (((1.0)*((N22N22I )**(0.5))) + N220I)
            (((1.0)*((N12N12I )**(0.5))) + N120I);
    PPS8I = (((-1.0)*((N11N11I )**(0.5))) + N110I)
            (((1.0)*((N22N22I )**(0.5))) + N220I)
            (((1.0)*((N12N12I )**(0.5))) + N120I);
*
*   definition des lignes
    LLS1E = 'DROIT' 8 PPS1E PPS2E;
    LLS2E = 'DROIT' 8 PPS2E PPS3E;
    LLS3E = 'DROIT' 8 PPS3E PPS4E;
    LLS4E = 'DROIT' 8 PPS4E PPS1E;
    LLS5E = 'DROIT' 8 PPS5E PPS6E;
    LLS6E = 'DROIT' 8 PPS6E PPS7E;
    LLS7E = 'DROIT' 8 PPS7E PPS8E;
    LLS8E = 'DROIT' 8 PPS8E PPS5E;
    LLS9E = 'DROIT' 8 PPS1E PPS5E;
    LLS10E = 'DROIT' 8 PPS2E PPS6E;
    LLS11E = 'DROIT' 8 PPS3E PPS7E;
    LLS12E = 'DROIT' 8 PPS4E PPS8E;
*
    LLS1I = 'DROIT' 8 PPS1I PPS2I;
    LLS2I = 'DROIT' 8 PPS2I PPS3I;
    LLS3I = 'DROIT' 8 PPS3I PPS4I;
    LLS4I = 'DROIT' 8 PPS4I PPS1I;
    LLS5I = 'DROIT' 8 PPS5I PPS6I;
    LLS6I = 'DROIT' 8 PPS6I PPS7I;
    LLS7I = 'DROIT' 8 PPS7I PPS8I;
    LLS8I = 'DROIT' 8 PPS8I PPS5I;
    LLS9I = 'DROIT' 8 PPS1I PPS5I;
    LLS10I = 'DROIT' 8 PPS2I PPS6I;
    LLS11I = 'DROIT' 8 PPS3I PPS7I;
    LLS12I = 'DROIT' 8 PPS4I PPS8I;
*
*   definition des elements
    SSU1E = 'DALL' LLS1E LLS2E LLS3E LLS4E;
    SSU2E = 'DALL' LLS5E LLS6E LLS7E LLS8E;
    SSU3E = 'DALL' LLS1E LLS10E ('INVE' LLS5E) ('INVE' LLS9E);
    SSU4E = 'DALL' LLS2E LLS11E ('INVE' LLS6E) ('INVE' LLS10E);
    SSU5E = 'DALL' LLS3E LLS12E ('INVE' LLS7E) ('INVE' LLS11E);
    SSU6E = 'DALL' LLS4E LLS9E ('INVE' LLS8E) ('INVE' LLS12E);
    SSU1I = 'DALL' LLS1I LLS2I LLS3I LLS4I;
    SSU2I = 'DALL' LLS5I LLS6I LLS7I LLS8I;
    SSU3I = 'DALL' LLS1I LLS10I ('INVE' LLS5I) ('INVE' LLS9I);
    SSU4I = 'DALL' LLS2I LLS11I ('INVE' LLS6I) ('INVE' LLS10I);
    SSU5I = 'DALL' LLS3I LLS12I ('INVE' LLS7I) ('INVE' LLS11I);
    SSU6I = 'DALL' LLS4I LLS9I ('INVE' LLS8I) ('INVE' LLS12I);
*
*   definition des elements
    MAI3E = MAI3E ET (SSU1E 'ET' SSU2E 'ET' SSU3E 'ET' SSU4E 'ET'
                      SSU5E 'ET' SSU6E);
    MAI3I = MAI3I ET (SSU1I 'ET' SSU2I 'ET' SSU3I 'ET' SSU4I 'ET'
                      SSU5I 'ET' SSU6I);
*
    TT1.'RECTANGLE_E' = MAI3E;
    TT1.'RECTANGLE_I' = MAI3I;
*
  'FINSI';
*
'SINON';
'SI' ('EGA' TPY1 'COUCHE_COR');
*
* -------------- Couche intermediaire ---------------------
  'SI' ('EXIST' TAB1 'FCK');
    FC1 = TAB1.'FCK';
    'SI' ('NEG' ('TYPE' FC1) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'FSK_T');
    FST = TAB1.'FSK_T';
    'SI' ('NEG' ('TYPE' FST) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'RHO_T');
    RST = TAB1.'RHO_T';
    'SI' ('NEG' ('TYPE' RST) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'GAMMA_C');
    GAMC = TAB1.'GAMMA_C';
    'SI' ('NEG' ('TYPE' GAMC) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'ALPA_C');
    ALP1 = TAB1.'ALPA_C';
    'SI' ('NEG' ('TYPE' ALP1) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'NU_C');
    NU1 = TAB1.'NU_C';
    'SI' ('NEG' ('TYPE' NU1) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'GAMMA_S');
    GAMS = TAB1.'GAMMA_S';
    'SI' ('NEG' ('TYPE' GAMS) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
  'SI' ('EXIST' TAB1 'COT_THETA');
    COTH1 = TAB1.'COT_THETA';
    'SI' ('NEG' ('TYPE' COTH1) 'FLOTTANT');
      'MESS' 'Input Error ...';
      'QUIT' MRCTRACE;
    'FINSI';
  'SINON';
    'MESS' 'Input Error ...';
    'QUIT' MRCTRACE;
  'FINSI';
*
*
* Normalissation
  CC1 = 'ENTI' (FC1/100000);
  'SI' (CC1 > 1);
    FC1 = FC1/100000;
    FST = FST/100000;
  'FINSI';
*   Determination of resistances (Steel and concrete)
*
  'SI' (RST > 0.0);
    FC = ((ALP1)*((FC1)/(GAMC)));
    FGA = ((((FST)*(RST))/(GAMS)))*(COTH1);
    FGB = (((1.0)*(NU1))*(FC))/(COTH1 + ((1.0)/(COTH1)));
    FG1 = 'MINI' ('PROG' FGA FGB);
  'SINON';
    FG1 = ((0.35)/(GAMC))*((FC1)**(0.5));
  'FINSI';
*
*  Determination du domain tau1 et tau2
*
  NN1 = 120;
  DTH1 = (360.)/(NN1);
  I = 1;
  'REPE' IND1 (NN1);
    TH1 = DTH1*(I - 1);
    TH2 = DTH1*(I);
*   Definition points
    PP1 = ((COS(TH1))*(FG1)) ((SIN(TH1))*(FG1)) 0.;
    PP2 = ((COS(TH2))*(FG1)) ((SIN(TH2))*(FG1)) 0.;
*   contruction maillaige
    'SI' (I 'EGA' 1);
      MAI1 = 'DROIT' 1 PP1 PP2;
    'SINON';
      MAI1 = MAI1 ET ('DROIT' 1 PP1 PP2);
    'FINSI';
    I = I + 1;
  'FIN' IND1;
  'ELIM' 0.0001 MAI1;
  SUR_RES = MAI1;
*
*  menage
  'OUBL' MAI1;
  'OUBL' TH1;
  'OUBL' TH2;
  'OUBL' PP1;
  'OUBL' PP2;
*
* Sauvegarde
  TT1 = 'TABLE';
  TT1.'LIMITE_SHEAR' = SUR_RES;
*
*  Control
    'SI' ('EXIST' TAB1 'EFFORT_SEISME');
      CHL1 = TAB1.'EFFORT_SEISME';
      'SI' ('NEG' ('TYPE' CHL1) 'MCHAML');
        'MESS' 'Input Error ...';
        'QUIT' MRCTRACE;
      'FINSI';
    'FINSI';
    'SI' ('EXIST ' TAB1 'EFFORT_STATIQUE');
      CHL2 = TAB1.'EFFORT_STATIQUE';
      'SI' ('NEG' ('TYPE' CHL2) 'MCHAML');
        'MESS' 'Input Error ...';
        'QUIT' MRCTRACE;
      'FINSI';
    'FINSI';
    'SI' ('EXIST' TAB1 'ENROBAGE_EXT');
      ENR1E = TAB1.'ENROBAGE_EXT';
      'SI' ('NEG' ('TYPE' ENR1E) 'FLOTTANT');
        'MESS' 'Input Error ...';
        'QUIT' MRCTRACE;
      'FINSI';
    'FINSI';
    'SI' ('EXIST' TAB1 'ENROBAGE_INT');
      ENR1I = TAB1.'ENROBAGE_INT';
      'SI' ('NEG' ('TYPE' ENR1I) 'FLOTTANT');
        'MESS' 'Input Error ...';
        'QUIT' MRCTRACE;
      'FINSI';
    'FINSI';
    'SI' ('EXIST' TAB1 'EPAISSEUR');
      HTOT = TAB1.'EPAISSEUR';
      'SI' ('NEG' ('TYPE' HTOT) 'FLOTTANT');
        'MESS' 'Input Error ...';
        'QUIT' MRCTRACE;
      'FINSI';
    'FINSI';
*
* Si on trace l'enveloppe des efforts
  'SI' ('EGA' ('TYPE' (CHL1)) 'MCHAML');
    'SI' (('NEG' ('TYPE' (ENR1E)) 'FLOTTANT')
         ET ('NEG' ('TYPE' (ENR1E)) 'FLOTTANT'));
      'MESS' ;
      'MESS' 'Error...Enrobage manquant';
      'ERRE' 5;
    'FINSI';
*
*     Efforts statiques V10 et V20
      V1T0 = 'EXTR' CHL2 'V1T' 1 1 1;
      V2T0 = 'EXTR' CHL2 'V2T' 1 1 1;
*     Composantes de la matrice caracteristiques
      V1V1 = 'EXTR' CHL1 'CV11' 1 1 1;
      V2V2 = 'EXTR' CHL1 'CV22' 1 1 1;
      V1V2 = 'EXTR' CHL1 'CV12' 1 1 1;
*     bras de levier
      D_1 = HTOT - ((2.0)*(ENR1E)) - ((2.0)*(ENR1E));
*     Cacluls contraintes statiques t10 et t20
      T1T0 = ((V1T0)/((D_1)));
      T2T0 = ((V2T0)/((D_1)));
*     CAlculs des contraintes dynamiques
      T1T1 = ((V1V1)/(((D_1))**(2)));
      T2T2 = ((V2V2)/(((D_1))**(2)));
      T1T2 = ((V1V2)/(((D_1))**(2)));
*
*     Scaling
*      CC1 = 'ENTI' (FC1/100000);
      'SI' (CC1 > 1);
        T1T0 = T1T0/100000;
        T2T0 = T2T0/100000;
*
        T1T1 = ((T1T1)/((100000)**(2.0)));
        T2T2 = ((T2T2)/((100000)**(2.0)));
        T1T2 = ((T1T2)/((100000)**(2.0)));
      'FINSI';
      MAI1 = 0. 0. 0.;
*     Resultion des problemes au valeurs propres
      MATXE = 'VIDE' 'RIGIDITE'/'RIGIDITE';
      MATXE = MATXE 'ET' ('MANU' 'RIGIDITE' MAI1 ('MOTS' 'UX' 'UY')
        ('PROG'  T1T1 T1T2
               T1T2 T2T2));
      NORMATXE =
        (((T1T1)**(2.0)) + ((T1T2)**(2.0)) +
         ((T1T2)**(2.0)) + ((T2T2)**(2.0)))**(0.5);
*
     'SI' (NORMATXE 'EGA' 0.0);
       NORMATXE = 1.0;
     'FINSI';
      XIDE1 = ('MASS' 'UX' MAI1 1.0) 'ET' (MASS 'UY' MAI1 1.0);
*
      EIGE = 'VIBR' 'INTERVALLE' 0. 20000. 'BASSE' 2 (MATXE/NORMATXE)
                                             XIDE1 'IMPR'  'MULT';
*
    'SI' ('EXIST' (EIGE.MODES) 1);
      LAM1E = ((EIGE.MODES. 1 .FREQUENCE)*((2.0)*(PI)))**(2.0);
      NORVEC1E =
           ((('EXTR' (EIGE.MODES. 1 .DEFORMEE_MODALE) MAI1 'UX')**(2))
          + (('EXTR' (EIGE.MODES. 1 .DEFORMEE_MODALE) MAI1 'UY')**(2)))
                                                           **(0.5);
      VECT1E = (EIGE.MODES. 1 .DEFORMEE_MODALE)/(NORVEC1E);
    'SINON';
      LAM1E = 0.0;
      NORVEC1E = 0.0;
      VECT1E = MANU CHPO MAI1 3 'UX' 0.0 'UY' 0.0;
    'FINSI';
    'SI' ('EXIST' (EIGE.MODES) 2);
      LAM2E = ((EIGE.MODES. 2 .FREQUENCE)*((2.0)*(PI)))**(2.0);
      NORVEC2E =
           ((('EXTR' (EIGE.MODES. 2 .DEFORMEE_MODALE) MAI1 'UX')**(2))
          + (('EXTR' (EIGE.MODES. 2 .DEFORMEE_MODALE) MAI1 'UY')**(2)))
                                                         **(0.5);
      VECT2E = (EIGE.MODES. 2 .DEFORMEE_MODALE)/(NORVEC1E);
    'SINON';
      LAM2E = 0.0;
      NORVEC2E = 0.0;
      VECT2E = MANU CHPO MAI1 3 'UX' 0.0 'UY' 0.0;
    'FINSI';
*  determination des autovaleur
      LAM1E = ((NORMATXE)*(LAM1E));
      LAM2E = ((NORMATXE)*(LAM2E));
*
      LL1E = (LAM1E)**(0.5);
      LL2E = (LAM2E)**(0.5);
* determination des autovecteur
      VECT1EX = 'EXTR' VECT1E 'UX' MAI1;
      VECT1EY = 'EXTR' VECT1E 'UY' MAI1;
      VECT2EX = 'EXTR' VECT2E 'UX' MAI1;
      VECT2EY = 'EXTR' VECT2E 'UY' MAI1;
*
*
      MAI2E = 'VIDE' MAILLAGE;
      ND1 = 120;
      LL_FHI1 = 'PROG' 0. 'PAS' (360./ND1) 360.;
      II1 = 1;
*     definition de la surface ultime
      'REPE' IND1 (ND1);
        VAL_FHI1 = ('EXTR' LL_FHI1 (II1));
        X1_1EL = (((LL1E)*(COS(VAL_FHI1))));
        Y1_1EL = (((LL2E)*(SIN(VAL_FHI1))));
*
        VAL_FHI1 = ('EXTR' LL_FHI1 (II1 + 1));
        X2_1EL = (((LL1E)*(COS(VAL_FHI1))));
        Y2_1EL = (((LL2E)*(SIN(VAL_FHI1))));
        X1_1E = ((X1_1EL)*(VECT1EX)) + ((Y1_1EL)*(VECT2EX));
        Y1_1E = ((X1_1EL)*(VECT1EY)) + ((Y1_1EL)*(VECT2EY));
        X2_1E = ((X2_1EL)*(VECT1EX)) + ((Y2_1EL)*(VECT2EX));
        Y2_1E = ((X2_1EL)*(VECT1EY)) + ((Y2_1EL)*(VECT2EY));
*
        P1_1E = (X1_1E + T1T0) (Y1_1E + T2T0) (0.0);
        P2_1E = (X2_1E + T1T0) (Y2_1E + T2T0) (0.0);
*
        'OPTI' 'ELEM' SEG2;
        L1_1E = 'DROIT' 1 P1_1E P2_1E;
*
        MAI2E = MAI2E ET L1_1E;
*
        II1 = II1 + 1;
      'FIN' IND1;
      'ELIM' 0.001 MAI2E;
*
*   sauvegarde ellipsoide
      TT1.'ELLIPSOIDE_SHEAR' = MAI2E;
*
      MAI3E = 'VIDE' 'MAILLAGE';
*
*   definition points
      PPS1E = (((-1.0)*((T1T1 )**(0.5))) + T1T0)
              (((-1.0)*((T2T2 )**(0.5))) + T2T0) 0.0;
      PPS2E = (((1.0)*((T1T1 )**(0.5))) + T1T0)
              (((-1.0)*((T2T2 )**(0.5))) + T2T0) 0.0;
      PPS3E = (((1.0)*((T1T1 )**(0.5))) + T1T0)
              (((1.0)*((T2T2 )**(0.5))) + T2T0) 0.0;
      PPS4E = (((-1.0)*((T1T1 )**(0.5))) + T1T0)
              (((1.0)*((T2T2 )**(0.5))) + T2T0) 0.0;
*
*   definition lignes
      LLS1E = 'DROIT' 8 PPS1E PPS2E;
      LLS2E = 'DROIT' 8 PPS2E PPS3E;
      LLS3E = 'DROIT' 8 PPS3E PPS4E;
      LLS4E = 'DROIT' 8 PPS4E PPS1E;
*
*   siurface rectangle
      MAI3E = MAI3E ET (LLS1E ET LLS2E ET LLS3E ET LLS4E);
*
*   sauvegarde
      TT1.'RECTANGLE_SHEAR' = MAI3E;
*
  'FINSI';
*
'FINSI';
'FINSI';
FINPROC TT1;
$$$$


