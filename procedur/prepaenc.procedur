$$$$ PREPAENC
* PREPAENC  PROCEDUR  MAGN      18/06/08    21:15:10     9840
'DEBPROC' PREPAENC  rxt*'TABLE   '  TBT*'TABLE   '
                    geo*'TABLE   '  TIC*'TABLE   ' ;
*----------------------------------------------------------
*---- Suivi des modifications
*--- 10/01/00 : Creation
*
*--- 14/03/05 option THERCO pour thermique implicite (Alex Bleyer et JPM)
*
* 1/changer discrH en discr
*
*
*
*----------------------------------------------------------

*----------------------------------------------------------
* Test des entrees et debut de preparation de l'algorithme
*----------------------------------------------------------

'MESS' '==> PREPARATION DES EQUATIONS A RESOUDRE'            ;

*--------------------------------------------------------
********************* PREPARATION ***********************
*--------------------------------------------------------

  Si(NON (EXIST TBT 'VERSION'))  ;
  TBT.'VERSION'=0                ;
  Finsi                          ;

  Si ('EXIST' TBT 'TTsortie')    ;
  TTsortie=TBT.'TTsortie'        ;
  Sinon                          ;
  TTsortie=FAUX                  ;
  Finsi                          ;

  Si ('EXIST' TBT 'TTbreche')    ;
  TTbreche=TBT.'TTbreche'        ;
  Sinon                          ;
  TTbreche=FAUX                  ;
  Finsi                          ;

  Si ('EXIST' TBT 'TFIMP')       ;
  TFIMP=TBT.'TFIMP'              ;
  Sinon                          ;
  TFIMP=FAUX                     ;
  Finsi                          ;

  Si ('EXIST' TBT 'TTIMP')       ;
  TTIMP=TBT.'TTIMP'              ;
  Sinon                          ;
  TTIMP=FAUX                     ;
  Finsi                          ;

  Si ('EXIST' TBT 'TPAROIS')     ;
  TPAROIS=TBT.'TPAROIS'          ;
  Sinon                          ;
  TPAROIS=FAUX                   ;
  Finsi                          ;

  idim = vale 'DIME';
  DIM3D=FAUX ;
  Si(EGA idim 3);
  DIM3D=VRAI ;
  Finsi ;

*-----------------------------------------------------------
* Definition du modele FLUIDE : NAVIER_STOKES
* appel a MODELE avec la discretisation choisie DISCR
*-----------------------------------------------------------

* On Crée la géométrie discrérisée pour le fluide
 vtf         = rxt.'vtf'                                ;
 ltpvf= vtf ELEM 'TYPE'                                 ;
 tyell2=mots 'TRI3' 'QUA4'                              ;
 tyell3=mots 'CUB8' 'PRI6' 'TET4'                       ;
 tyelq2=mots 'TRI6' 'QUA8'                              ;
 tyelq3=mots 'CU20' 'PR15' 'TE10'                       ;
 nbe=dime ltpvf                                         ;
 tyelvf='XXXX'                                          ;

 Si('EXIST' tyell2 ('EXTR' 1 ltpvf))                    ;
 tyelvf='LI2D'                                          ;
 Si (NON ('EGA' (VALE DIME) 2))                         ;
 Mess '*********************************************************' ;
 Mess ' ERREUR   ERREUR   ERREUR   ERREUR   ERREUR   ERREUR     ' ;
 Mess '                                                         ' ;
 Mess 'Maillage Foireux                                         ' ;
 Mess '                                                         ' ;
 Mess '*********************************************************' ;
 ERREUR 21                                              ;
 Finsi                                                  ;
 Finsi                                                  ;

 Si('EXIST' tyell3 ('EXTR' 1 ltpvf))                    ;
 tyelvf='LI3D'                                          ;
 Si (NON ('EGA' (VALE DIME) 3))                         ;
 Mess '*********************************************************' ;
 Mess ' ERREUR   ERREUR   ERREUR   ERREUR   ERREUR   ERREUR     ' ;
 Mess '                                                         ' ;
 Mess 'Maillage Foireux                                         ' ;
 Mess '                                                         ' ;
 Mess '*********************************************************' ;
 ERREUR 21                                              ;
 Finsi                                                  ;
 Finsi                                                  ;

 Si('EXIST' tyelq2 ('EXTR' 1 ltpvf))                    ;
 tyelvf='QD2D'                                          ;
 Si (NON ('EGA' (VALE DIME) 2))                         ;
 Mess '*********************************************************' ;
 Mess ' ERREUR   ERREUR   ERREUR   ERREUR   ERREUR   ERREUR     ' ;
 Mess '                                                         ' ;
 Mess 'Maillage Foireux                                         ' ;
 Mess '                                                         ' ;
 Mess '*********************************************************' ;
 ERREUR 21                                              ;
 Finsi                                                  ;
 Finsi                                                  ;

 Si('EXIST' tyelq3 ('EXTR' 1 ltpvf))                    ;
 tyelvf='QD3D'                                          ;
 Si (NON ('EGA' (VALE DIME) 3))                         ;
 Mess '*********************************************************' ;
 Mess ' ERREUR   ERREUR   ERREUR   ERREUR   ERREUR   ERREUR     ' ;
 Mess '                                                         ' ;
 Mess 'Maillage Foireux                                         ' ;
 Mess '                                                         ' ;
 Mess '*********************************************************' ;
 ERREUR 21                                              ;
 Finsi                                                  ;
 Finsi                                                  ;

 Si(EGA 'LI2D' tyelvf)                                  ;
 repeter bcle nbe                                       ;
 Si(NON('EXIST' tyell2 ('EXTR' &bcle ltpvf)))           ;
 ERREUR 21                                              ;
 Finsi                                                  ;
 Fin bcle                                               ;
 Finsi                                                  ;

 Si(EGA 'LI3D' tyelvf)                                  ;
 repeter bcle nbe                                       ;
 Si(NON('EXIST' tyell3 ('EXTR' &bcle ltpvf)))           ;
 ERREUR 21                                              ;
 Finsi                                                  ;
 Fin bcle                                               ;
 Finsi                                                  ;

 Si(EGA tyelvf 'QD2D')                                  ;
 repeter bcle nbe                                       ;
 Si(NON('EXIST' tyelq2 ('EXTR' &bcle ltpvf)))           ;
 ERREUR 21                                              ;
 Finsi                                                  ;
 Fin bcle                                               ;
 Finsi                                                  ;

 Si(EGA tyelvf 'QD3D')                                  ;
 repeter bcle nbe                                       ;
 Si(NON('EXIST' tyelq3 ('EXTR' &bcle ltpvf)))           ;
 ERREUR 21                                              ;
 Finsi                                                  ;
 Fin bcle                                               ;
 Finsi                                                  ;

 epsi        = GEO.'epsi'                               ;
 mdns        = 'NAVIER_STOKES'                          ;
 Mvtf        = 'CHAN' vtf 'QUAF'                        ;
 elim Mvtf rxt.'epsi'                                   ;
 $vtf        = 'MODE' Mvtf  mdns TBT.'discr'            ;
 VTotal      = 'SOMT' ('DOMA' $vtf    'VOLUME')       ;
 GEO.'Mvtf'  =  Mvtf                                     ;
 GEO.'$vtf'  =  $vtf                                     ;
 GEO.'VTotal'=  VTotal                                   ;
 GEO.'vtf' =doma $vtf MAILLAGE                           ;
 GEO.'Diag'   = doma $vtf 'XXDIAGSI'                     ;
 GEO.'cx'  =coor 1 vtf                                   ;
 GEO.'cy'  =coor 2 vtf                                   ;
 Si(Ega IDIM 3)                                          ;
 GEO.'cz'  =coor 3 vtf                                   ;
 Finsi                                                   ;

*-----------------------------------------------------------
*    sortie       menvfU
*  ............__________________
*  |                             |
*  .                             |
*  |                             |
*  .                             |
*  |                             |
*  .                             |
*  |                     menvfU  |
*  .                             |
*  |                             |
*  .                             |
*  |axe                          |
*  .                             |
*  |                             |
*  .                             |
*  |                             |_
*  .                             |/|
*  |                             |/|
*  .                             |/|
*  |                             |/|
*  .                             |/|
*  |                      menvfU |/|
*  .                             |/|
*  |                             |/|
*  .                             |/|
*  |                             |/|
*  .                             |/|
*  |               menvfU        |/|
*  ............__________________|/|
*    breche
*
*
*-----------------------------------------------------------
* Creation de l'enveloppe du maillage FLUIDE

  GEO.'Mmenvf' = 'DOMA' $vtf 'ENVELOPP'                  ;
  GEO.'$menvf' = 'MODE' GEO.'Mmenvf' 'NAVIER_STOKES' TBT.'discr' ;
  GEO.'menvf'  = 'DOMA' GEO.'$menvf' maillage            ;
  GEO.'MmenvfU' = GEO.'Mmenvf'                           ;
  GEO.'$menvfU' = 'MODE' GEO.'MmenvfU' 'NAVIER_STOKES' TBT.'discr';
  GEO.'menvfU'  = 'DOMA' GEO.'$menvfU' maillage          ;
*----------------------------------------------------------
* Traitement de l'axe en 2D et des plans de symétrie en 3D
*
  'SI' (TBT.'Taxe')                                      ;
  axe = rxt.'axe'                                        ;
  Maxe= 'CHAN' axe 'QUAF'                                ;
  elim Maxe rxt.'epsi'                                   ;
 'ELIM' (Maxe 'ET' Mvtf) epsi                            ;

  GEO.'MmenvfU' = 'DIFF'  GEO.'MmenvfU' Maxe               ;
  GEO.'$menvfU' = 'MODE' GEO.'MmenvfU' 'NAVIER_STOKES' TBT.'discr' ;
  GEO.'menvfU'  = 'DOMA' GEO.'$menvfU' maillage            ;

  $axe = 'MODE' Maxe mdns TBT.'discr'                    ;
  axe = 'DOMA' $axe 'MAILLAGE'                           ;
  GEO.'$axe'=$axe                                        ;
  GEO.'axe'=axe                                          ;
  'FINSI'                                                ;
*
*
*-----------------------------------------------------------
*-----------------------------------------------------------
*  Traitement d'un nombre de brèches et sorties quelconques
*  - vérification de son inclusion dans l'enveloppe
*  - définition de BRECHEI : maillage BRECHE interieur
*  - définition de BRECHEC : maillage du contour de la brèche

  Si TTsortie                                            ;
*µµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµ

   NBR=dime rxt.'Sorties'                                ;
   mess ' Il y a ' NBR ' Sorties)'                       ;

   ibr=index (rxt.'Sorties')                             ;

   Repeter BBRS NBR                                      ;
   Sriches=rxt.'Sorties'.(ibr.&BBRS)                     ;
 'MESS' ' ==> Verification inclusion Sortie/ENVELOPPE '
  'pour la sortie ' (ibr.&BBRS)                          ;

   sreche      = Sriches.'Maillage'                        ;
   Si DIM3D                                                ;
*  diru=(Sriches.'diru')/(norm Sriches.'diru')             ;
   Byint  = BARY (vtf elem 'APPUYE' 'LARGEMENT' sreche)    ;
   Bybre  = BARY sreche                                    ;
   diru     = Bybre moins Byint                            ;
   sreche      = ORIE sreche 'DIRECTION' diru              ;
   Finsi                                                   ;
   Msreche     = 'CHAN' sreche 'QUAF'                      ;
   elim Msreche rxt.'epsi'                                 ;
   $sreche     = 'MODE' Msreche mdns TBT.'discr'           ;
   sreche      = 'DOMA' $sreche 'MAILLAGE'                 ;
   Ssreche       = 'SOMT' ('DOMA' $sreche 'VOLUME')        ;
   Dsreche       = Ssreche**(1./(VALE DIME))               ;

 'ELIM' epsi (Mvtf 'ET' Msreche )                          ;

   Sriches.'Msreche' = Msreche                                 ;
   Sriches.'$sreche' = $sreche                                 ;
   Sriches.'sreche'  = sreche                                  ;
   Sriches.'Ssreche' = Ssreche                                 ;
   Sriches.'Dsreche' = Dsreche                                 ;


   ai= 'INTER' Msreche (GEO.'Mmenvf')                         ;
   nbai= nbel ai                                              ;
   Si (ega nbai 0)                                            ;
   Mess ' Sortie non incluse dans l enveloppe '               ;
   'ERRE' 21                                                  ;
   Finsi                                                      ;

 GEO.'MmenvfU' = 'DIFF'  GEO.'MmenvfU' Msreche                    ;
 GEO.'$menvfU' = 'MODE' GEO.'MmenvfU' 'NAVIER_STOKES' TBT.'discr' ;
 GEO.'menvfU'  = 'DOMA' GEO.'$menvfU' maillage                    ;


*  Travail en 2D avec présence possible de l'axe de symétrie

   'SI' ('NON' DIM3D)                                         ;
      sreche1 = 'CHAN' sreche 'POI1'                          ;
      nbbc='NBEL' sreche1                                     ;

      'SI' (TBT.'Taxe')                                          ;
         srechec = 'ELEM' sreche1 ('LECT'   nbbc)                ;
         srechei = 'ELEM' sreche1 ('LECT' 1 'PAS' 1 (nbbc - 1))  ;
      'SINON'                                                    ;
         srechec = 'ELEM' sreche1 ('LECT' 1 nbbc)                ;
         srechei = 'ELEM' sreche1 ('LECT' 2 'PAS' 1 (nbbc - 1))  ;
      'FINSI'                                                 ;
      a = 'NBEL' brechei                                      ;
     'SI' ('EGA' a 0)                                         ;
        'MESS' '==> Le cas ne comporte pas de Sortie CORRECTE'   ;
     'ERRE' 21        ;
     'FINSI'                                                  ;
   'SINON'                                                       ;

*  Travail en 3D pour définir la brèche

      srechec = 'CONT' sreche                                  ;
      sreche1 = 'CHAN' sreche 'POI1'                           ;
      srechei = 'DIFF' sreche1 ( 'CHAN' srechec 'POI1')        ;
      a = 'NBEL' srechei                                       ;
      'SI' ('EGA' a 0)                                         ;
         'MESS' '==> Le cas ne comporte pas de Sortie CORRECTE'   ;
      'ERRE' 21        ;
      'FINSI'                                                  ;
   'FINSI'                                                       ;


   srechei= srechei 'COUL' 'ROUG'                               ;
   srechec= srechec 'COUL' 'VERT'                               ;
   Sriches.'srechec'=srechec                                    ;
   Sriches.'srechei'=srechei                                    ;

    FIN BBRS                                                    ;
  FINSI                                                         ;
*µµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµ

  Si TTbreche                                            ;
*µµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµ

   NBR=dime rxt.'Breches'                                ;
   mess ' Il y a ' NBR ' Brèche(s)'                      ;

   ibr=index (rxt.'Breches')                             ;

   Repeter BBRS NBR                                      ;
   Briches=rxt.'Breches'.(ibr.&BBRS)                     ;
 'MESS' ' ==> Verification inclusion BRECHE/ENVELOPPE '
  'pour la brèche ' (ibr.&BBRS)                          ;

   creche      = Briches.'Maillage'                        ;
   Si DIM3D                                                ;
*  diru=(Briches.'diru')/(norm Briches.'diru')             ;
   Byint  = BARY (vtf elem 'APPUYE' 'LARGEMENT' creche)    ;
   Bybre  = BARY creche                                    ;
   diru     = Bybre moins Byint                            ;
   creche      = ORIE creche 'DIRECTION' diru              ;
   Finsi                                                   ;
   Mcreche     = 'CHAN' creche 'QUAF'                      ;
   elim Mcreche rxt.'epsi'                                 ;
   $creche     = 'MODE' Mcreche mdns TBT.'discr'           ;
   creche      = 'DOMA' $creche 'MAILLAGE'                 ;
   Screche       = 'SOMT' ('DOMA' $creche 'VOLUME')        ;
   Dcreche       = Screche**(1./(VALE DIME))               ;

 'ELIM' epsi (Mvtf 'ET' Mcreche )                          ;

   Briches.'Mbreche' = Mcreche                                 ;
   Briches.'$breche' = $creche                                 ;
   Briches.'breche'  = creche                                  ;
   Briches.'Sbreche' = Screche                                 ;
   Briches.'Dbreche' = Dcreche                                 ;


   ai= 'INTER' Mcreche (GEO.'Mmenvf')                         ;
   nbai= nbel ai                                              ;
   Si (ega nbai 0)                                            ;
   Mess ' Breche non incluse dans l enveloppe '               ;
   'ERRE' 21                                                  ;
   Finsi                                                      ;

 GEO.'MmenvfU' = 'DIFF'  GEO.'MmenvfU' Mcreche                    ;
 GEO.'$menvfU' = 'MODE' GEO.'MmenvfU' 'NAVIER_STOKES' TBT.'discr' ;
 GEO.'menvfU'  = 'DOMA' GEO.'$menvfU' maillage                    ;


*  Travail en 2D avec présence possible de l'axe de symétrie

   'SI' ('NON' DIM3D)                                         ;
      creche1 = 'CHAN' creche 'POI1'                          ;
      nbbc='NBEL' creche1                                     ;

      'SI' (TBT.'Taxe')                                          ;
         crechec = 'ELEM' creche1 ('LECT'   nbbc)                ;
         crechei = 'ELEM' creche1 ('LECT' 1 'PAS' 1 (nbbc - 1))  ;
      'SINON'                                                    ;
         crechec = 'ELEM' creche1 ('LECT' 1 nbbc)                ;
         crechei = 'ELEM' creche1 ('LECT' 2 'PAS' 1 (nbbc - 1))  ;
      'FINSI'                                                 ;
      a = 'NBEL' crechei                                      ;
     'SI' ('EGA' a 0)                                         ;
        'MESS' '==> Le cas ne comporte pas de BRECHE CORRECTE';
     'ERRE' 21                                                ;
     'FINSI'                                                  ;
   'SINON'                                                    ;

*  Travail en 3D pour définir la brèche

      crechec = 'CONT' creche                                  ;
      creche1 = 'CHAN' creche 'POI1'                           ;
      crechei = 'DIFF' creche1 ( 'CHAN' crechec 'POI1')        ;
      a = 'NBEL' crechei                                       ;
      'SI' ('EGA' a 0)                                         ;
         'MESS' '==> Le cas ne comporte pas de BRECHE CORRECTE';
      'ERRE' 21                                                ;
      'FINSI'                                                  ;
   'FINSI'                                                     ;


   crechei= crechei 'COUL' 'ROUG'                               ;
   crechec= crechec 'COUL' 'VERT'                               ;
   Briches.'brechec'=crechec                                    ;
   Briches.'brechei'=crechei                                    ;


    FIN BBRS                                                    ;
  FINSI                                                         ;
*µµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµµ

*-----------------------------------------------------------
*-----------------------------------------------------------
*-----------------------------------------------------------
*  Traitement des BRECHES :
*  - vérification de son inclusion dans l'enveloppe
*  - définition de BRECHEI : maillage BRECHE interieur
*  - définition de BRECHEC : maillage du contour de la brèche

  Si (TBT.'Tbreche') ;
   breche      = rxt.'breche'                              ;
   Si DIM3D                                                ;
   diru1=(TBT.'diru1')/(norm TBT.'diru1')                  ;
   breche      = ORIE breche 'DIRECTION' diru1             ;
   Finsi                                                   ;
   Mbreche     = 'CHAN' breche 'QUAF'                      ;
   elim Mbreche rxt.'epsi'                                 ;
   $breche     = 'MODE' Mbreche mdns TBT.'discr'           ;
   breche      = 'DOMA' $breche 'MAILLAGE'                 ;
   Sbreche       = 'SOMT' ('DOMA' $breche 'VOLUME')        ;
   Dbreche       = Sbreche**(1./(VALE DIME))               ;

 'ELIM' epsi (Mvtf 'ET' Mbreche )                          ;

   GEO.'Mbreche' = Mbreche                                 ;
   GEO.'$breche' = $breche                                 ;
   GEO.'breche'  = breche                                  ;
   GEO.'Sbreche' = Sbreche                                 ;
   GEO.'Dbreche' = Dbreche                                 ;

 'MESS' ' ==> Verification inclusion BRECHE ENVELOPPE'   ;

   ai= 'INTER' Mbreche (GEO.'Mmenvf')                         ;
   nbai= nbel ai                                              ;
   Si (ega nbai 0)                                            ;
   Mess ' Breche non incluse dans l enveloppe '               ;
   'ERRE' 21                                                  ;
   Finsi                                                      ;

 GEO.'MmenvfU' = 'DIFF'  GEO.'MmenvfU' Mbreche                    ;
 GEO.'$menvfU' = 'MODE' GEO.'MmenvfU' 'NAVIER_STOKES' TBT.'discr' ;
 GEO.'menvfU'  = 'DOMA' GEO.'$menvfU' maillage                    ;


*  Travail en 2D avec présence possible de l'axe de symétrie

   'SI' ('NON' DIM3D)                                         ;
      breche1 = 'CHAN' breche 'POI1'                          ;
      nbbc='NBEL' breche1                                     ;

      'SI' (TBT.'Taxe')                                          ;
         brechec = 'ELEM' breche1 ('LECT'   nbbc)                ;
         brechei = 'ELEM' breche1 ('LECT' 1 'PAS' 1 (nbbc - 1))  ;
      'SINON'                                                    ;
         brechec = 'ELEM' breche1 ('LECT' 1 nbbc)                ;
         brechei = 'ELEM' breche1 ('LECT' 2 'PAS' 1 (nbbc - 1))  ;
      'FINSI'                                                 ;
      a = 'NBEL' brechei                                      ;
     'SI' ('EGA' a 0)                                         ;
        'MESS' '==> Le cas ne comporte pas de BRECHE CORRECTE'   ;
     'ERRE' 21        ;
     'FINSI'                                                  ;
   'SINON'                                                       ;

*  Travail en 3D pour définir la brèche

      brechec = 'CONT' breche                                  ;
      breche1 = 'CHAN' breche 'POI1'                           ;
      brechei = 'DIFF' breche1 ( 'CHAN' brechec 'POI1')        ;
      a = 'NBEL' brechei                                       ;
      'SI' ('EGA' a 0)                                         ;
         'MESS' '==> Le cas ne comporte pas de BRECHE CORRECTE'   ;
      'ERRE' 21        ;
      'FINSI'                                                  ;
   'FINSI'                                                       ;


   brechei= brechei 'COUL' 'ROUG'                               ;
   brechec= brechec 'COUL' 'VERT'                               ;
   GEO.'brechec'=brechec                                        ;
   GEO.'brechei'=brechei                                        ;

  Finsi                                                         ;

*  Traitement de la brèche 2

  Si (TBT.'Tbreche2') ;
   breche2      = rxt.'breche2'                              ;
   Si DIM3D                                                  ;
   diru2=(TBT.'diru2')/(norm TBT.'diru2')                    ;
   breche2      = ORIE breche2 'DIRECTION' diru2             ;
   Finsi                                                     ;
   Mbreche2     = 'CHAN' breche2 'QUAF'                      ;
   elim Mbreche2 rxt.'epsi'                                  ;
   $breche2     = 'MODE' Mbreche2 mdns TBT.'discr'           ;
   breche2      = 'DOMA' $breche2 'MAILLAGE'                 ;
   Sbreche2       = 'SOMT' ('DOMA' $breche2 'VOLUME')        ;
   Dbreche2      = Sbreche2**(1./(VALE DIME))                ;

 'ELIM' epsi (Mvtf 'ET' Mbreche2);

   GEO.'Mbreche2' = Mbreche2                                 ;
   GEO.'$breche2' = $breche2                                 ;
   GEO.'breche2'  = breche2                                  ;
   GEO.'Sbreche2' = Sbreche2                                 ;
   GEO.'Dbreche2' = Dbreche2                                 ;

   'MESS' ' ==> Verification inclusion BRECHE2 ENVELOPPE'   ;

   ai= 'INTER' Mbreche2 (GEO.'Mmenvf')                        ;
   nbai= nbel ai ;
   Si (ega nbai 0) ;
   Mess ' Breche2 non incluse dans l enveloppe ';
   'ERRE' 21        ;
   Finsi ;

 GEO.'MmenvfU' = 'DIFF'  GEO.'MmenvfU' Mbreche2                   ;
 GEO.'$menvfU' = 'MODE' GEO.'MmenvfU' 'NAVIER_STOKES' TBT.'discr' ;
 GEO.'menvfU'  = 'DOMA' GEO.'$menvfU' maillage                    ;

*     Travail en 2D avec présence possible de l'axe de symétrie

      'SI' ('NON' DIM3D)                                          ;
         breche1 = 'CHAN' breche2 'POI1'                          ;
         nbbc='NBEL' breche1                                      ;
         'SI' (TBT.'Taxe')                                        ;
            brech2c = 'ELEM' breche1 ('LECT'   nbbc)              ;
            brech2i = 'ELEM' breche1 ('LECT' 1 'PAS' 1 (nbbc - 1));
         'SINON'                                                  ;
            brech2c = 'ELEM' breche1 ('LECT' 1 nbbc)              ;
            brech2i = 'ELEM' breche1 ('LECT' 2 'PAS' 1 (nbbc - 1));
         'FINSI'                                                  ;
         a = 'NBEL' brech2i                                       ;
         'SI' ('EGA' a 0)                                         ;
            'MESS' '==> Le cas ne comporte pas de BRECHE'         ;
            'ERREUR' 5                                            ;
         'FINSI'                                                  ;
      'SINON'                                                     ;

*        Travail en 3D pour définir la brèche

         brech2c = 'CONT' breche2                          ;
         breche1 = 'CHAN' breche2 'POI1'                    ;
         brech2i = 'DIFF' breche1 ( 'CHAN' brech2c 'POI1') ;
         a = 'NBEL' brech2i                                 ;
         'SI' ('EGA' a 0)                                    ;
            'MESS' '==> Le cas ne comporte pas de BRECHE'       ;
            'ERREUR' 5                                          ;
         'FINSI'                                             ;
      'FINSI'                                                  ;
      brech2i= brech2i 'COUL' 'ROUG'                        ;
      brech2c= brech2c 'COUL' 'VERT'                        ;
      GEO.'brech2c'=brech2c                                 ;
      GEO.'brech2i'=brech2i                                 ;

  Finsi ;

*  Traitement de la brèche 3

  Si (TBT.'Tbreche3') ;
   breche3      = rxt.'breche3'                              ;
   Si DIM3D                                                  ;
   diru3=(TBT.'diru3')/(norm TBT.'diru3')                    ;
   breche3      = ORIE breche3 'DIRECTION' diru3             ;
   Finsi                                                     ;
   Mbreche3     = 'CHAN' breche3 'QUAF'                      ;
   elim Mbreche3 rxt.'epsi'                                  ;
   $breche3     = 'MODE' Mbreche3 mdns TBT.'discr'           ;
   breche3      = 'DOMA' $breche3 'MAILLAGE'                 ;
   Sbreche3       = 'SOMT' ('DOMA' $breche3 'VOLUME')        ;
   Dbreche3      = Sbreche3**(1./(VALE DIME))               ;

 'ELIM' epsi (Mvtf 'ET' Mbreche3);

   GEO.'Mbreche3' = Mbreche3                                 ;
   GEO.'$breche3' = $breche3                                 ;
   GEO.'breche3'  = breche3                                  ;
   GEO.'Sbreche3' = Sbreche3                                 ;
   GEO.'Dbreche3' = Dbreche3                                 ;

   'MESS' ' ==> Vérification inclusion BRECHE3 ENVELOPPE'   ;

   ai= 'INTER' Mbreche3 (GEO.'Mmenvf')                        ;
   nbai= nbel ai                                            ;
   Si (ega nbai 0)                                          ;
   Mess ' Breche3 non incluse dans l enveloppe '            ;
   'ERRE' 21                                                ;
   Finsi                                                    ;

 GEO.'MmenvfU' = 'DIFF'  GEO.'MmenvfU' Mbreche3                   ;
 GEO.'$menvfU' = 'MODE' GEO.'MmenvfU' 'NAVIER_STOKES' TBT.'discr' ;
 GEO.'menvfU'  = 'DOMA' GEO.'$menvfU' maillage                    ;

*     Travail en 2D avec présence possible de l'axe de symétrie

      'SI' ('NON' DIM3D)                                          ;
         breche1 = 'CHAN' breche3 'POI1'                          ;
         nbbc='NBEL' breche1                                      ;
         'SI' (TBT.'Taxe')                                        ;
            brech3c = 'ELEM' breche1 ('LECT'   nbbc)              ;
            brech3i = 'ELEM' breche1 ('LECT' 1 'PAS' 1 (nbbc - 1));
         'SINON'                                                  ;
            brech3c = 'ELEM' breche1 ('LECT' 1 nbbc)              ;
            brech3i = 'ELEM' breche1 ('LECT' 2 'PAS' 1 (nbbc - 1));
         'FINSI'                                                  ;
         a = 'NBEL' brech3i                                       ;
         'SI' ('EGA' a 0)                                         ;
            'MESS' '==> Le cas ne comporte pas de BRECHE 3'       ;
            'ERREUR' 5                                            ;
         'FINSI'                                                  ;
      'SINON'                                                     ;

*        Travail en 3D pour définir la brèche

         brech3c = 'CONT' breche3                          ;
         breche1 = 'CHAN' breche3 'POI1'                    ;
         brech3i = 'DIFF' breche1 ( 'CHAN' brech3c 'POI1') ;
         a = 'NBEL' brech3i                                 ;
         'SI' ('EGA' a 0)                                    ;
            'MESS' '==> Le cas ne comporte pas de BRECHE 3'       ;
            'ERREUR' 5                                          ;
         'FINSI'                                             ;
      'FINSI'                                                  ;
      brech3i= brech3i 'COUL' 'ROUG'                        ;
      brech3c= brech3c 'COUL' 'VERT'                        ;
      GEO.'brech3c'=brech3c                                 ;
      GEO.'brech3i'=brech3i                                 ;

  Finsi ;

mess ' FIN VERIFICATION DES BRECHES'                     ;

*----- TRAITEMENT DES RECOMBINEURS -------------------------
'SI' (TBT.'TRECOMB') ;
   NBREC = 'DIME' rxt.'RECOMB' ;
   'REPETER' BCLREC NBREC ;
   PAREXT = rxt.'RECOMB'. &BCLREC . 'PAREXT' ;
   ENTREE = rxt.'RECOMB'. &BCLREC . 'ENTREE' ;
   SORTIE = rxt.'RECOMB'. &BCLREC . 'SORTIE' ;
   direntr = rxt.'RECOMB'. &BCLREC . 'direntr' ;
   direntr = direntr / ('NORM' direntr) ;
   dirsort = rxt.'RECOMB'. &BCLREC . 'dirsort' ;
   dirsort = dirsort / ('NORM' dirsort) ;
   DIRNAME = 'CHAIN' 'DREC' 'ent' &BCLREC ;
   GEO. DIRNAME = direntr ;
   DIRNAME = 'CHAIN' 'DREC' 'sor' &BCLREC ;
   GEO. DIRNAME = dirsort ;
   M_PAREXT = 'CHAN' PAREXT 'QUAF' ;
   M_ENTREE = 'CHAN' ENTREE 'QUAF' ;
   M_SORTIE = 'CHAN' SORTIE 'QUAF' ;
   'ELIM' (Mvtf 'ET' M_PAREXT 'ET' M_ENTREE 'ET' M_SORTIE) rxt.'epsi';
   $PAREXT = 'MODE' M_PAREXT mdns TBT.'discr' ;
   $ENTREE = 'MODE' M_ENTREE mdns TBT.'discr' ;
   $SORTIE = 'MODE' M_SORTIE mdns TBT.'discr' ;
   QNAME = 'CHAIN' 'MREC' 'par' &BCLREC ;
   GEO. QNAME = M_PAREXT ;
   QNAME = 'CHAIN' 'MREC' 'ent' &BCLREC ;
   GEO. QNAME = M_ENTREE ;
   QNAME = 'CHAIN' 'MREC' 'sor' &BCLREC ;
   GEO. QNAME = M_SORTIE ;
   $NAME = 'CHAIN' '$REC' 'par' &BCLREC ;
   GEO. $NAME = $PAREXT ;
   $NAME = 'CHAIN' '$REC' 'ent' &BCLREC ;
   GEO. $NAME = $ENTREE ;
   $NAME = 'CHAIN' '$REC' 'sor' &BCLREC ;
   GEO. $NAME = $SORTIE ;
   NAME = 'CHAIN' 'REC' 'par' &BCLREC ;
   GEO. NAME = 'DOMA' $PAREXT 'MAILLAGE' ;
   ENTREE = 'DOMA' $ENTREE 'MAILLAGE' ;
   NAME = 'CHAIN' 'REC' 'ent' &BCLREC ;
   GEO. NAME = ENTREE ;
   SORTIE = 'DOMA' $SORTIE 'MAILLAGE' ;
   NAME = 'CHAIN' 'REC' 'sor' &BCLREC ;
   GEO. NAME = SORTIE ;
   NAME = 'CHAIN' 'SREC' 'ent' &BCLREC ;
   GEO. NAME = 'SOMT' ('DOMA' $ENTREE 'XXDIAGSI') ;
   NAME = 'CHAIN' 'SREC' 'sor' &BCLREC ;
   GEO. NAME = 'SOMT' ('DOMA' $SORTIE 'XXDIAGSI') ;
   'MESS' ' ==> Vérification inclusion recomb' &BCLREC 'ENVELOPPE' ;

   ai   = 'INTER' (M_PAREXT 'ET' M_ENTREE 'ET' M_SORTIE)
                 (GEO.'Mmenvf') ;
   nbai = 'NBEL' ai ;
   'SI' ('EGA' nbai 0) ;
   'MESS' ' Recomb' &BCLREC ' non inclus dans l enveloppe ' ;
   'ERRE' 21 ;
   'FINSI' ;

   GEO.'MmenvfU' = 'DIFF'  GEO.'MmenvfU' (M_ENTREE 'ET' M_SORTIE) ;
   GEO.'$menvfU' = 'MODE' GEO.'MmenvfU' 'NAVIER_STOKES' TBT.'discr' ;
   GEO.'menvfU'  = 'DOMA' GEO.'$menvfU' 'MAILLAGE' ;

* Travail en 2D pour définir l'entree et la sortie du recombineur
      'SI' ('NON' DIM3D) ;
         ENTREE1 = 'CHAN' ENTREE 'POI1' ;
         nbbc ='NBEL' ENTREE1 ;
         ENTREEc = 'ELEM' ENTREE1 ('LECT' 1 nbbc) ;
         ENTREEi = 'ELEM' ENTREE1 ('LECT' 2 'PAS' 1 (nbbc - 1)) ;
         a = 'NBEL' ENTREEi ;
         'SI' ('EGA' a 0) ;
            'MESS' '==> Le cas ne comporte pas de recombineur' &BCLREC ;
            'ERREUR' 5 ;
         'FINSI' ;
         SORTIE1 = 'CHAN' SORTIE 'POI1' ;
         nbbc ='NBEL' SORTIE1 ;
         SORTIEc = 'ELEM' SORTIE1 ('LECT' 1 nbbc) ;
         SORTIEi = 'ELEM' SORTIE1 ('LECT' 2 'PAS' 1 (nbbc - 1)) ;
         a = 'NBEL' SORTIEi ;
         'SI' ('EGA' a 0) ;
            'MESS' '==> Le cas ne comporte pas de recombineur' &BCLREC ;
            'ERREUR' 5 ;
         'FINSI' ;
      'SINON' ;
* Travail en 3D pour définir l'entree et la sortie du recombineur
         ENTREEc = 'CONT' ENTREE ;
         ENTREE1 = 'CHAN' ENTREE 'POI1' ;
         ENTREEi = 'DIFF' ENTREE1 ( 'CHAN' ENTREEc 'POI1') ;
         a = 'NBEL' ENTREEi ;
         'SI' ('EGA' a 0) ;
            'MESS' '==> Le cas ne comporte pas de recombineur' &BCLREC ;
            'ERREUR' 5 ;
         'FINSI' ;
         SORTIEc = 'CONT' SORTIE ;
         SORTIE1 = 'CHAN' SORTIE 'POI1' ;
         SORTIEi = 'DIFF' SORTIE1 ( 'CHAN' SORTIEc 'POI1') ;
         a = 'NBEL' SORTIEi ;
         'SI' ('EGA' a 0) ;
            'MESS' '==> Le cas ne comporte pas de recombineur' &BCLREC ;
            'ERREUR' 5 ;
         'FINSI' ;
      'FINSI' ;
      ENTREEi = ENTREEi 'COUL' 'ROUG' ;
      ENTREEc = ENTREEc 'COUL' 'VERT' ;
      NAME = 'CHAIN' 'REC' 'entI' &BCLREC ;
      GEO.NAME = ENTREEi ;
      NAME = 'CHAIN' 'REC' 'entC' &BCLREC ;
      GEO.NAME = ENTREEc ;
      SORTIEi = SORTIEi 'COUL' 'ROUG' ;
      SORTIEc = SORTIEc 'COUL' 'VERT' ;
      NAME = 'CHAIN' 'REC' 'sorI' &BCLREC ;
      GEO.NAME = SORTIEi ;
      NAME = 'CHAIN' 'REC' 'sorC' &BCLREC ;
      GEO.NAME = SORTIEc ;
   'FIN' BCLREC ;

'FINSI' ;

*  -----------------------------------------------------------
*  Traitement de la sortie

  Si (TBT.'Tsortie') ;
   sortie       = rxt.'sortie'                               ;
   Msortie      = 'CHAN' sortie  'QUAF'                      ;
   elim Msortie  rxt.'epsi'                                  ;
   $sortie      = 'MODE' Msortie  mdns TBT.'discr'           ;
   sortie       = 'DOMA' $sortie  'MAILLAGE'                 ;
   Ssortie        = 'SOMT' ('DOMA' $sortie  'VOLUME')        ;

 'ELIM' epsi (Mvtf 'ET' Msortie );

   GEO.'Msortie' = Msortie                                  ;
   GEO.'$sortie' = $sortie                                  ;
   GEO.'sortie'  = sortie                                   ;
   GEO.'Ssortie' = Ssortie                                  ;

   'MESS' ' ==> Vérification inclusion SORTIE ENVELOPPE'   ;

   ai= 'INTER' Msortie  GEO.'Mmenvf'                          ;
   nbai= nbel ai                                            ;
   Si (ega nbai 0)                                          ;
   Mess ' Sortie  non incluse dans l enveloppe '            ;
   'ERRE' 21                                                ;
   Finsi                                                    ;

 GEO.'MmenvfU' = 'DIFF'  GEO.'MmenvfU' Msortie                    ;
 GEO.'$menvfU' = 'MODE' GEO.'MmenvfU' 'NAVIER_STOKES' TBT.'discr' ;
 GEO.'menvfU'  = 'DOMA' GEO.'$menvfU' maillage                    ;

  Finsi ;

 'SI' TBT.'GRAPH'                                          ;
      'SI' (TBT.'Taxe')                                    ;
         axe=axe 'COUL' 'JAUN'                             ;
         tmenvf = axe 'ET' GEO.'menvfU'                    ;
      'SINON'                                              ;
         tmenvf =  GEO.'menvfU'                            ;
      'FINSI'                                              ;

     Si TTsortie                                           ;
       NBR=dime rxt.'Sorties'                              ;
       ibr=index (rxt.'Sorties')                           ;
       Repeter BBRS NBR                                    ;
       Briches=rxt.'Sorties'.(ibr.&BBRS)                   ;
       srechei=Briches.'srechei'                           ;
       srechec=Briches.'srechec'                           ;
       tmenvf = tmenvf et srechei et srechec               ;
       FIN BBRS                                            ;
     FINSI                                                 ;

     Si TTbreche                                           ;
       NBR=dime rxt.'Breches'                              ;
       ibr=index (rxt.'Breches')                           ;
       Repeter BBRS NBR                                    ;
       Briches=rxt.'Breches'.(ibr.&BBRS)                   ;
       brechei=Briches.'brechei'                           ;
       brechec=Briches.'brechec'                           ;
       tmenvf = tmenvf et brechei et brechec               ;
       FIN BBRS                                            ;
     FINSI                                                 ;

     Si (TBT.'Tbreche') ;
     tmenvf = tmenvf et brechei et brechec ;
     Finsi ;
     Si (TBT.'Tbreche2') ;
     tmenvf = tmenvf et brech2i et brech2c ;
     Finsi ;
     Si (TBT.'Tbreche3') ;
     tmenvf = tmenvf et brech3i et brech3c ;
     Finsi ;
     'SI' (TBT.'TRECOMB') ;
         NBREC = 'DIME' rxt.'RECOMB' ;
         'REPETER' BCLREC NBREC ;
           NAME = 'CHAIN' 'REC' 'entI' &BCLREC ;
           ENTREEi = GEO.NAME ;
           NAME = 'CHAIN' 'REC' 'entC' &BCLREC ;
           ENTREEc = GEO.NAME ;
           NAME = 'CHAIN' 'REC' 'sorI' &BCLREC ;
           SORTIEi = GEO.NAME ;
           NAME = 'CHAIN' 'REC' 'sorC' &BCLREC ;
           SORTIEc = GEO.NAME ;

           tmenvf = tmenvf et ENTREEi et ENTREEc ;
           tmenvf = tmenvf et SORTIEi et SORTIEc ;
         'FIN' BCLREC ;
     'FINSI' ;

     Si (TBT.'Tsortie')                    ;
     sortie = sortie coul TURQ             ;
     tmenvf = tmenvf et sortie             ;
     Finsi ;
           'TRAC' tmenvf
           'TITR' 'Maillage - Axe, Fluide, Breches, Sortie';
   'FINSI'                                                 ;
*-----------------------------------------------------------
* Traitement de la thermique paroi
* => Il doit y avoir deux types de paroi dans le modele
* Type 1 = THERMP la paroi est couplee au fluide et on calcule
*          son evolution thermique en fonction du temps
* Type 2 = TP_IMPOSEE : la paroi produit une condition
*          limite de type temperature imposee pour la resolution
*          de la temperature fluide en fonction du temps
* Dans un meme cas test, l'utilisateur veut pouvoir coupler
* les deux approches et pouvoir definir des conditions initiales
* differentes et piloter la variation en fonction du temps
* Les parois sont decrites dans la table RXT.'TABMUR'
* Il faut regrouper les parois servant de CL en temperature et
* par type (beton/acier...) les parois dont on veut traiter la
* thermique
*
* On Crée la géométrie discrérisée pour la thermique paroi



'SI' TPAROIS                                             ;
mess ' THERMIQUE PAROIS MULTIPLES '                      ;
   NPAR=dime rxt.'PAROIS'                                ;
   ipr=index (rxt.'PAROIS')                              ;
 mdns        = 'NAVIER_STOKES'                           ;
   Repeter BPRS NPAR                                     ;
   Parois=rxt.'PAROIS'.(ipr.&BPRS)                       ;
   GEO.(ipr.&BPRS)='TABLE'                               ;
   vtp=Parois.'vtp'                                      ;
 Mvtp        = 'CHAN'  vtp 'QUAF'                        ;
 $vtpi       = 'MODE' Mvtp  mdns TBT.'discr'             ;
 VTotalp     = 'SOMT' ('DOMA' $vtpi   'VOLUME')          ;
 Diagpi      =  doma $vtpi 'XXDIAGSI'                    ;
 GEO.(ipr.&BPRS).'vtp'    =  vtp                         ;
 GEO.(ipr.&BPRS).'Mvtp'   =  Mvtp                        ;
 GEO.(ipr.&BPRS).'$vtp'   =  $vtpi                       ;
 GEO.(ipr.&BPRS).'eMvtp'  =  doma $vtpi 'ENVELOPP'       ;
 GEO.(ipr.&BPRS).'vtp'    =  doma $vtpi MAILLAGE         ;
 GEO.(ipr.&BPRS).'VTotalp'=  VTotalp                     ;
 GEO.(ipr.&BPRS).'Diagp'  =  Diagpi                      ;
  'SI' TBT.'GRAPH'                                       ;
   'TRACE' GEO.(ipr.&BPRS).'vtp' CACHE 'TITR'
   (Chai 'Maillage pour la THERMIQUE : ' (ipr.&BPRS))    ;
  'FINSI'                                                ;
    'SI'('EGA' &BPRS 1)                                  ;
      ROCP = Parois.'ROCP'*Diagpi                        ;
      LAMB = Parois.'LAMBDA'*Diagpi                      ;
      TPPI = Parois.'Tp0'*Diagpi                         ;
      vtpt = vtp                                         ;
      Mvtpt= Mvtp                                        ;
    'SINON'                                              ;
      a=inter vtpt vtp 'NOVERIF'                         ;
       Si (NON ('EGA' (NBEL a) 0))                       ;
      trace a CACHE TITR ' maillage intersection'        ;
 Mess                                                    ;
 Mess '---------------- ERREUR Dans PAROIS ----------- ' ;
 Mess ' Les éléments de maillage composant la paroi se chevauchent';
 Mess '---------------- ERREUR Dans PAROIS ----------- ' ;
 Mess                                                    ;
       ERREUR ' '                                        ;
       Quitter PREPAENC                                  ;
       Finsi                                             ;
      ROCP = ROCP + (Parois.'ROCP'*Diagpi)               ;
      LAMB = LAMB + (Parois.'LAMBDA'*Diagpi)             ;
      TPPI = TPPI + (Parois.'Tp0'*Diagpi)                ;
      vtpt  = vtpt et vtp                                ;
      Mvtpt = Mvtpt et Mvtp                              ;
      Elim Mvtpt GEO.'epsi'                              ;
    'FINSI'                                              ;
   FIN BPRS                                              ;
  rxt.'vtp' = vtpt                                       ;
  Mvtp      = Mvtpt                                      ;
  mdns        = 'NAVIER_STOKES'                          ;
  $vtpp        = 'MODE' Mvtp  mdns TBT.'discr'           ;
  VTotalp      = 'SOMT' ('DOMA' $vtpp    'VOLUME')       ;
  GEO.'Mvtp'   = Mvtp                                    ;
  GEO.'$vtp'   = $vtpp                                   ;
  GEO.'eMvtp'  = doma $vtpp 'ENVELOPP'                   ;
  GEO.'vtp'    = doma $vtpp MAILLAGE                     ;
  GEO.'VTotalp'= VTotalp                                 ;
  GEO.'Diagp'  = doma $vtpp 'XXDIAGSI'                   ;
  ROCP         = ROCP * (inve GEO.'Diagp')               ;
  LAMB         = LAMB * (inve GEO.'Diagp')               ;
  TPPI         = TPPI * (inve GEO.'Diagp')               ;
  tic.'ROCP'   = KCHT GEO.'$vtp' SCAL SOMMET ROCP        ;
  tic.'LAMBDA' = KCHT GEO.'$vtp' SCAL SOMMET LAMB        ;
Si(NON ( EXIST tic 'TPNM'))                              ;
  tic.'TPNM'   = KCHT GEO.'$vtp' SCAL SOMMET TPPI        ;
Finsi                                                    ;

 'SI' TBT.'GRAPH'                                        ;
  Trace tic.'ROCP' (GEO.'vtp') TITR ' ROCP paroi'        ;
  Trace tic.'LAMBDA' (GEO.'vtp') TITR ' LAMBDA paroi'    ;
  Trace tic.'TPNM' (GEO.'vtp')
   TITR ' Température d initialisation de la paroi'      ;
 'FINSI'                                                 ;

 'FINSI'                                                 ;

 TBT.'TPAROIF' = FAUX                                    ;

'SI' (TBT.'THERMP' ou TPAROIS)                           ;
mess ' THERMIQUE PAROIS '                                ;

 'SI' (NON TPAROIS)                                      ;
 mdns        = 'NAVIER_STOKES'                           ;
 Mvtp        = 'CHAN'  rxt.'vtp' 'QUAF'                  ;
 $vtpt        = 'MODE' Mvtp  mdns TBT.'discr'            ;
 VTotalp     = 'SOMT' ('DOMA' $vtpt    'VOLUME')         ;
 GEO.'Mvtp'  =  Mvtp                                     ;
 GEO.'$vtp'  =  $vtpt                                    ;
 GEO.'eMvtp' =  doma $vtpt 'ENVELOPP'                    ;
 GEO.'vtp'   =  doma $vtpt MAILLAGE                      ;
 GEO.'VTotalp'=  VTotalp                                 ;
 GEO.'Diagp' =  doma $vtpt 'XXDIAGSI'                    ;
 'FINSI'                                                 ;

 'SI' TBT.'GRAPH'                                        ;
  'TRACE' GEO.'vtp' 'TITR' 'Maillage pour la THERMIQUE ' ;
 'FINSI'                                                 ;

* On recherche l'intersection entre vtf et vtp
* => paroif

    Elim (GEO.'Mvtp' et GEO.'Mvtf') GEO.'epsi'          ;
     Mparoif     = inte (GEO.'Mmenvf') (GEO.'eMvtp') ;
 'SI' (NON(EGA (nbel Mparoif) 0))                       ;
  TBT.'TPAROIF' = VRAI                                  ;
     $paroif    = 'MODE' Mparoif mdns TBT.'discrH'      ;
     Sparoif    = 'SOMT' ('DOMA' $paroif 'VOLUME')      ;
     GEO.'Mparoif' = Mparoif                            ;
     GEO.'$paroif' = $paroif                            ;
     GEO.'paroif'  = doma $paroif MAILLAGE              ;
     GEO.'Sparoif' = Sparoif                            ;
     GEO.'Diagpf'  = 'DOMA' GEO.'$paroif' 'XXDIAGSI'    ;
   'SI' TBT.'GRAPH'                                     ;
    'TRACE' GEO.'paroif' 'TITR' 'Surface de contacte FLUIDE/THERM' ;
   'FINSI'                                              ;
 'FINSI'                                                ;

 'SI' TBT.'ECHEXT'                                      ;
   Mparext=Chan rxt.'parext' QUAF                       ;
   Elim (Mvtp et Mparext) rxt.'epsi'                    ;
   $parext     = 'MODE' Mparext mdns TBT.'discrH'       ;
   GEO.'Mparext'  =  Mparext                            ;
   GEO.'$parext'  =  $parext                            ;
 'FINSI'                                                ;

'FINSI'                                                 ;

*-----------------------------------------------------------
* Traitement des Flux imposés
* XFIMP 3 : Flux de masse imposés

 'SI' TFIMP                                             ;
   NBFIMP=dime (rxt.'XFIMP')                            ;
   ifimp=INDEX (rxt.'XFIMP')                            ;
  REPETER BBFIMP NBFIMP                                 ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                    ;
     Mmfpi =(Bfimp.'MAILLAGE') CHAN 'QUAF'              ;
     Elim (GEO.'Mmenvf' et Mmfpi) rxt.'epsi'            ;
     $mfpi = 'MODE' Mmfpi   mdns TBT.'discrH'           ;
     Bfimp.'Mmfpi'  =  Mmfpi                            ;
     Bfimp.'$mfpi'  =  $mfpi                            ;
     Bfimp.'mfpi'   =  doma $mfpi maillage              ;
     Bfimp.'Smfpi'  = 'SOMT' ( 'DOMA' $mfpi 'VOLUME')   ;
     Bfimp.'Diagfi'  = 'DOMA' Bfimp.'$mfpi' 'XXDIAGSI'  ;
*-- Verification de l'inclusion de MFPI dans l'enveloppe
       a = 'INTERSECTION' (Bfimp.'mfpi')  (GEO.'menvf') ;
  'MESS' '==> On verifie que la surface 1 '             ;
  'MESS' '==> pour le flux imposé'                      ;
  'MESS' '==> est bien incluse dans l enveloppe '       ;
  FIN BBFIMP                                            ;
 'FINSI'                                                ;

* XFIMP 3 : Flux de masse imposés
mess 'FIN Flux imposés';
*-----------------------------------------------------------
* Traitement des températures imposées (condenseurs)

 'SI' TTIMP                                             ;
   NBTIMP=dime (rxt.'TIMP')                             ;
   itimp=INDEX (rxt.'TIMP')                             ;
  REPETER BBTIMP NBTIMP                                 ;
   Btimp=rxt.'TIMP'.(itimp.&BBTIMP)                     ;
     Mmtpi =(Btimp.'MAILLAGE') CHAN 'QUAF'              ;
     Elim (GEO.'Mmenvf' et Mmtpi) rxt.'epsi'            ;
     $mtpi = 'MODE' Mmtpi   mdns TBT.'discrH'           ;
     Btimp.'Mmtpi'  =  Mmtpi                            ;
     Btimp.'$mtpi'  =  $mtpi                            ;
     Btimp.'mtpi'   =  doma $mtpi maillage              ;
     Btimp.'Smtpi'  = 'SOMT' ( 'DOMA' $mtpi 'VOLUME')   ;
     Btimp.'Diagif'  = 'DOMA' Btimp.'$mtpi' 'XXDIAGSI'  ;
*-- Verification de l'inclusion de MTPI dans l'enveloppe
       a = 'INTERSECTION' (Btimp.'mtpi')  (GEO.'menvf') ;
  'MESS' '==> On verifie que la surface 1 '             ;
  'MESS' '==> pour la temperature imposee'              ;
  'MESS' '==> est bien incluse dans l enveloppe '       ;
  FIN BBTIMP                                            ;
 'FINSI'                                                ;

 'SI' TBT.'TTIMP1'                                      ;
     Mmtp1 =(rxt.'TIMP1'.'MAILLAGE') CHAN 'QUAF'        ;
     Elim (GEO.'Mmenvf' et Mmtp1) rxt.'epsi'            ;
     $mtp1 = 'MODE' Mmtp1   mdns TBT.'discrH'           ;
     GEO.'Mmtp1'  =  Mmtp1                              ;
     GEO.'$mtp1'  =  $mtp1                              ;
     GEO.'mtp1'   =  doma $mtp1 maillage                ;
     GEO.'Smtp1'  = 'SOMT' ( 'DOMA' $mtp1 'VOLUME')     ;
     GEO.'Diag1f'  = 'DOMA' GEO.'$mtp1' 'XXDIAGSI'      ;
*-- Verification de l'inclusion de MTPI dans l'enveloppe
       a = 'INTERSECTION' (GEO.'mtp1')  (GEO.'menvf')   ;
  'MESS' '==> On verifie que la surface 1 '             ;
  'MESS' '==> pour la temperature imposee'              ;
  'MESS' '==> est bien incluse dans l enveloppe '       ;
 'FINSI'                                                ;

 'SI' TBT.'TTIMP2'                                      ;
     Mmtp2 =(rxt.'TIMP2'.'MAILLAGE') CHAN 'QUAF'        ;
     Elim (GEO.'Mmenvf' et Mmtp2) rxt.'epsi'            ;
     $mtp2 = 'MODE' Mmtp2   mdns TBT.'discrH'           ;
     GEO.'Mmtp2'  =  Mmtp2                              ;
     GEO.'$mtp2'  =  $mtp2                              ;
     GEO.'mtp2'   =  doma $mtp2 maillage                ;
     GEO.'Smtp2'  = 'SOMT' ( 'DOMA' $mtp2 'VOLUME')     ;
     GEO.'Diag2f'  = 'DOMA' GEO.'$mtp2' 'XXDIAGSI'      ;
*-- Verification de l'inclusion de MTPI dans l'enveloppe
       a = 'INTERSECTION' (GEO.'mtp2')  (GEO.'menvf')   ;
  'MESS' '==> On verifie que la surface 2'              ;
  'MESS' '==> pour la temperature imposee'              ;
  'MESS' '==> est bien incluse dans l enveloppe '       ;
 'FINSI'                                                ;

 'SI' TBT.'TTIMP3'                                      ;
     Mmtp3 =(rxt.'TIMP3'.'MAILLAGE') CHAN 'QUAF'        ;
     Elim (GEO.'Mmenvf' et Mmtp3) rxt.'epsi'            ;
     $mtp3 = 'MODE' Mmtp3   mdns TBT.'discrH'           ;
     GEO.'Mmtp3'  =  Mmtp3                              ;
     GEO.'$mtp3'  =  $mtp3                              ;
     GEO.'mtp3'   =  doma $mtp3 maillage                ;
     GEO.'Smtp3'  = 'SOMT' ( 'DOMA' $mtp3 'VOLUME')     ;
     GEO.'Diag3f'  = 'DOMA' GEO.'$mtp3' 'XXDIAGSI'      ;
*-- Verification de l'inclusion de MTPI dans l'enveloppe
       a = 'INTERSECTION' (GEO.'mtp3')  (GEO.'menvf')   ;
  'MESS' '==> On verifie que la surface 3'              ;
  'MESS' '==> pour la temperature imposee'              ;
  'MESS' '==> est bien incluse dans l enveloppe '       ;
 'FINSI'                                                ;

*** vérification de l'inclusion du maillage de la paroi du mur
*** et de l'enveloppe du maillage fluide
 'SI' TBT.'TECHANP'                                     ;
     Mmtp0 =(rxt.'ECHANP'.'MAILLAGE') CHAN 'QUAF'       ;
     Elim (GEO.'Mmenvf' et Mmtp0) rxt.'epsi'            ;
     $mtp0 = 'MODE' Mmtp0   mdns TBT.'discr'            ;
     GEO.'Mmtp0'  =  Mmtp0                              ;
     GEO.'$mtp0'  =  $mtp0                              ;
     GEO.'mtp0'   =  doma $mtp0 maillage                ;
     GEO.'Smtp0'  = 'SOMT' ( 'DOMA' $mtp0 'VOLUME')     ;
     GEO.'Diag0f'  = 'DOMA' GEO.'$mtp0' 'XXDIAGSI'      ;
*-- Verification de l'inclusion de MTPI dans l'enveloppe
       a = 'INTERSECTION' (GEO.'mtp0')  (GEO.'menvf')   ;
  'MESS' '==> On verifie que la surface de ECHANP'      ;
  'MESS' '==> pour une temperature définie par l utilisateur';
  'MESS' '==> est bien incluse dans l enveloppe '       ;
 'FINSI'                                                ;

mess 'FIN THERMIQUE PAROI';
*-----------------------------------------------------------
'SI' (TBT.'ASPER')                                       ;
  aspinj      = rxt.'aspinj'                             ;
  toitf       = rxt.'toitf'                              ;
'FINSI'                                                  ;

*  -----------------------------------------------------------

 'SI' TBT.'ASPER'                                        ;
 Maspinj     = 'CHAN' aspinj 'QUAF'                      ;
 elim Maspinj  rxt.'epsi'                                ;
 Mtoitf      = 'CHAN' toitf  'QUAF'                      ;
 elim Mtoitf  rxt.'epsi'                                 ;
 $aspinj     = 'MODE' Maspinj mdns TBT.'discr'           ;
 $toitf      = 'MODE' Mtoitf  mdns TBT.'discr'           ;
 aspinj      = 'DOMA' $aspinj 'MAILLAGE'                 ;
 toitf       = 'DOMA' $toitf  'MAILLAGE'                 ;
 'ELIM' epsi (Mvtf 'ET' Maspinj 'ET' Mtoitf )            ;
 'FINSI'                                                 ;

*----------------------------------------------------------
* Definition d'un point interieur sur lequel on impose
* la pression

 Si(exist rxt 'pi');
 lvtf       = 'CHAN' 'LINEAIRE' vtf                      ;
 pi0        = lvtf 'POIN' 'PROC' (rxt.'pi')              ;
 Melti       = Mvtf 'ELEM' 'CONTENANT' pi0               ;
 $elti       = 'MODE' Melti mdns TBT.'discr'             ;
 Pimp        =  'DOMA' $elti  TBT.'KPRE'                 ;
 Pimp        = Elem (lect 1) Pimp                        ;
 'ELIM' (Pimp 'ET' ('DOMA' $vtf   TBT.'KPRE' )) epsi     ;
 Finsi                                                   ;
 GEO.'Pimp'  = Pimp                                      ;

*-----------------------------------------------------------
* Preparation des conditions initiales pour les differentes grandeurs
*

'SI' TBT.'ASPER'                                         ;
   t         = rxt.'scenasp'.'t'                         ;
   vzinj     = 'IPOL' 0.0 t (rxt.'scenasp'.'vzinj')      ;
   xdinj     = 'IPOL' 0.0 t (rxt.'scenasp'.'xdinj')      ;
   tdinj     = 'IPOL' 0.0 t (rxt.'scenasp'.'tdinj')      ;
   ddinj     = 'IPOL' 0.0 t (rxt.'scenasp'.'ddinj')      ;
   tic.'Tdma'  = prog tdinj                              ;
   tic.'Tdmi'  = prog tdinj                              ;

'FINSI'                                                  ;

 tf0         = rxt.'TF0'                                 ;
 Pt0         = rxt.'PT0'                                 ;

'SI'(TBT.'THERMP' et (NON TPAROIS))                      ;
 tp0         = rxt.'Tp0'                                 ;
* Calcul d'une temperature moyenne de paroi Tpm0
 Tpm0 = ('SOMT' ( GEO.'Diagp' '*' tp0 )) '/' ( 'SOMT' GEO.'Diagp' )  ;
'SINON'                                                  ;
 Tpm0 = 0.                                               ;
'FINSI'                                                  ;

'SI' TPAROIS                                             ;
   NPAR=dime rxt.'PAROIS'                                ;
   ipr=index (rxt.'PAROIS')                              ;
   Tpm0=0.                                               ;
   Rocpm0=0.                                             ;
   Repeter BPRS NPAR                                     ;
    Ctp0 = chai 'Tp0' &BPRS                              ;
    tp0  = tic.CTp0                                      ;
    Crocp = chai 'ROCP' &BPRS                            ;
    rocp  = tic.Crocp                                    ;
* Calcul d'une temperature moyenne de paroi Tpm0
 Tpm0=Tpm0 + ('SOMT' (GEO.(ipr.&BPRS).'Diagp' '*' tp0 )) ;
 Rocpm0=Rocpm0 +
  ('SOMT' (GEO.(ipr.&BPRS).'Diagp' '*' tp0 ))            ;
   FIN BPRS                                              ;
 Tpm0 = Tpm0 '/' ( 'SOMT' GEO.'Diagp' )                  ;
 Rocpm0 = Rocpm0 '/' ( 'SOMT' GEO.'Diagp' )              ;
 rxt.'Tp0'=Tpm0                                          ;
 rxt.'ROCP'=Rocpm0                                       ;
'SINON'                                                  ;
 Tpm0 = 0.                                               ;
'FINSI'                                                  ;

'SI' TBT.'VAPEUR'                                        ;
 Yvap0       = rxt.'Yvap0'                               ;
  'SI' (EXIST rxt 'Mliq0')                               ;
   vertytab rxt 'Mliq0' 'FLOTTANT'                       ;
   Mliq0     = rxt.'Mliq0'                               ;
  'SINON'                                                ;
   Mliq0     = 0.                                        ;
  'FINSI'                                                ;
'SINON'                                                  ;
 Yvap0       = 0.                                        ;
'FINSI'                                                  ;

'SI' TBT.'THE'                                           ;
 Yhe0        = rxt.'Yhe0'                                ;
'SINON'                                                  ;
 Yhe0        = 0.                                        ;
'FINSI'                                                  ;

'SI' TBT.'TH2'                                           ;
 Yh20        = rxt.'Yh20'                                ;
'SINON'                                                  ;
 Yh20        = 0.                                        ;
'FINSI'                                                  ;

'SI' TBT.'TO2'                                           ;
 Yo20        = rxt.'Yo20'                                ;
'SINON'                                                  ;
 Yo20        = 0.                                        ;
'FINSI'                                                  ;

'SI' TBT.'TN2'                                           ;
 Yn20        = rxt.'Yn20'                                ;
'SINON'                                                  ;
 Yn20        = 0.                                        ;
'FINSI'                                                  ;

'SI' TBT.'TCO2'                                          ;
 Yco20        = rxt.'Yco20'                              ;
'SINON'                                                  ;
 Yco20        = 0.                                       ;
'FINSI'                                                  ;

'SI' TBT.'TCO'                                           ;
 Yco0        = rxt.'Yco0'                                ;
'SINON'                                                  ;
 Yco0        = 0.                                        ;
'FINSI'                                                  ;
*---------------------------------------------------------------
* AIR : on traite l'air comme un composant a part entiere
* il faudra se mefier de ce point lors des calculs de combustion
*
 Yair0 = 1.0 - Yvap0 - Yhe0 - Yh20 - Yo20 - Yn20 - Yco20 - Yco0 ;
    tic.'YAIR'  = 'KCHT' $vtf   'SCAL' 'SOMMET' Yair0           ;

*---------------------------------------------------------------
* RGPM = constante des gaz parfaits pour le mélange
Rgh2  = TBT.'Rgh2'                                       ;
Rghe  = TBT.'Rghe'                                       ;
Rgo2  = TBT.'Rgo2'                                       ;
Rgn2  = TBT.'Rgn2'                                       ;
Rgco2 = TBT.'Rgco2'                                      ;
Rgco  = TBT.'Rgco'                                       ;
Rgvap = TBT.'Rgvap'                                      ;
Rgair = TBT.'Rgair'                                      ;

 Rgpm =   (Rgvap '*' Yvap0) '+' (Rgair '*' Yair0) '+'
          (Rghe '*' Yhe0) '+' (Rgh2  '*' Yh20) '+'
          (Rgo2 '*' Yo20) '+' (Rgn2 '*' Yn20) '+'
          (Rgco  '*' Yco0) '+' (Rgco2 '*' Yco20)         ;
 Rgp  =  'KCHT' $vtf 'SCAL' 'SOMMET' Rgpm                ;

*---------------------------------------------------------------
* Calcul Cp (Tf0) et Cpm pour le mélange de gaz
* CALCP  appelé à l'initialisation
*
Tfm=Tf0                                                  ;
Cph2 Cphe Cpo2 Cpn2 Cpco2 Cpco Cpair =  CALCP  Tfm       ;
Cpvap = TBT.'Cpvap'                                      ;
Cpm = (Cpvap '*' Yvap0) '+' (Cpair '*' Yair0) '+' (Cphe '*' Yhe0) '+'
      (Cph2  '*' Yh20) '+' (Cpo2 '*' Yo20) '+' (Cpn2 '*' Yn20) '+'
      (Cpco  '*' Yco0) '+' (Cpco2 '*' Yco20)             ;

*---------------------------------------------------------------
* Calcul Mu (Tkm) pour le mélange de gaz
*
Tkm=Tfm + 273.15                                         ;
Muh2 Muhe Muo2 Mun2 Muco2 Muco Muvap Muair =  CALMU  Tkm ;
Mu = (Muvap '*' Yvap0) '+' (Muair '*' Yair0) '+' (Muhe '*' Yhe0) '+'
     (Muh2  '*' Yh20) '+' (Muo2 '*' Yo20) '+' (Mun2 '*' Yn20) '+'
     (Muco  '*' Yco0) '+' (Muco2 '*' Yco20)              ;
 Mu='KCHT' $vtf 'SCAL' 'SOMMET' Mu                       ;
*---------------------------------------------------------------
* Calcul des autres grandeurs initiales
* Cvm = Capacite calorifique a volume constante (J/kg/K)
* Gamm = Gamma du mélange
* Rho0 = Densité initiale (kg/m3)
* Ri0 = Densité de chaque gaz (kg/m3)
*
 Cvm         = Cpm '-' Rgpm                              ;
* Gamm        = Cpm '/' Cvm                               ;
 Gamm        = Cpm '*' (Cvm ** (-1.0))                   ;
* Rho0        = pt0 '/' (Rgpm '*' (tf0 '+' 273.15))       ;
 Rho0        = pt0 '*' ((Rgpm '*' (tf0 '+' 273.15))**(-1.0));
 Rvap0       = Rho0 '*' Yvap0                            ;
 Rhe0        = Rho0 '*' Yhe0                             ;
 Rh20        = Rho0 '*' Yh20                             ;
 Ro20        = Rho0 '*' Yo20                             ;
 Rn20        = Rho0 '*' Yn20                             ;
 Rco20       = Rho0 '*' Yco20                            ;
 Rco0        = Rho0 '*' Yco0                             ;
 Rair0       = Rho0 '*' Yair0                            ;

*-----------------------------------------------------------
* BRECHE : determination du facteur geometrique pour DEBIT
*          en EF
*

src=0. ;
src2=0. ;

  Si TTsortie                                            ;
    NBR=dime rxt.'Sorties'                               ;
    ibr=index (rxt.'Sorties')                            ;

    Repeter BBRS NBR                                     ;
     Sriches=rxt.'Sorties'.(ibr.&BBRS)                   ;
      mess ' Vérification Sortie guj ' (ibr.&BBRS)       ;
      diru=(Sriches.'diru')/(norm Sriches.'diru')        ;
      $sreche=Sriches.'$sreche'                          ;
      srechec=Sriches.'srechec'                          ;
      'SI' DIM3D                                         ;
      Msrechec     = 'CHAN' srechec 'QUAF'               ;
      elim Msrechec rxt.'epsi'                           ;
      $srechec     = 'MODE' Msrechec mdns TBT.'discr'    ;
      Sriches.'$srechec'=$srechec                        ;
  gjc = 'KCHT' $srechec 'VECT' 'SOMMET' (0.0 0.0 0.0)    ;
  gjx = 'KCHT' $sreche  'VECT' 'SOMMET' diru gjc         ;
 'SINON'                                                 ;
  gjc   = 'MANU' 'CHPO' srechec 2 'UX' 0.0 'UY' 0.0
                                  'NATURE' 'DISCRET'     ;
  gjx   = 'KCHT' $sreche  'VECT' 'SOMMET' diru gjc       ;
 'FINSI'                                                 ;

 unvf0 = 'KCHT' GEO.'$menvf' 'VECT' 'SOMMET'  gjx        ;
 src   = 'DBIT' unvf0 GEO.'$menvf'                       ;
 fgeo  = 'ABS' ((Sriches.'Ssreche') '*' (1./src))        ;
 Sriches.'facgeo' = fgeo                                 ;
    FIN BBRS                                             ;
  FINSI                                                  ;

  Si TTbreche                                            ;
    NBR=dime rxt.'Breches'                               ;
    ibr=index (rxt.'Breches')                            ;

    Repeter BBRS NBR                                     ;
     Briches=rxt.'Breches'.(ibr.&BBRS)                   ;
      mess ' Vérification Breche guj ' (ibr.&BBRS)       ;
      diru=(Briches.'diru')/(norm Briches.'diru')        ;
      $breche=Briches.'$breche'                          ;
      brechec=Briches.'brechec'                          ;
      'SI' DIM3D                                         ;
      Mbrechec     = 'CHAN' brechec 'QUAF'               ;
      elim Mbrechec rxt.'epsi'                           ;
      $brechec     = 'MODE' Mbrechec mdns TBT.'discr'    ;
      Briches.'$brechec'=$brechec                        ;
  gjc = 'KCHT' $brechec 'VECT' 'SOMMET' (0.0 0.0 0.0)    ;
  gjx = 'KCHT' $breche  'VECT' 'SOMMET' diru gjc         ;
 'SINON'                                                 ;
  gjc   = 'MANU' 'CHPO' brechec 2 'UX' 0.0 'UY' 0.0
                                  'NATURE' 'DISCRET'     ;
  gjx   = 'KCHT' $breche  'VECT' 'SOMMET' diru gjc       ;
 'FINSI'                                                 ;

 unvf0 = 'KCHT' GEO.'$menvf' 'VECT' 'SOMMET'  gjx        ;
 src   = 'DBIT' unvf0 GEO.'$menvf'                       ;
 fgeo  = 'ABS' ((Briches.'Sbreche') '*' (1./src))        ;
 Briches.'facgeo' = fgeo                                 ;
    FIN BBRS                                             ;
  FINSI                                                  ;

Si(TBT.'Tbreche') ;
 diru1=(TBT.'diru1')/(norm TBT.'diru1')                  ;
 'SI' DIM3D                                              ;
  Mbrechec     = 'CHAN' brechec 'QUAF'                   ;
  elim Mbrechec rxt.'epsi'                               ;
  $brechec     = 'MODE' Mbrechec mdns TBT.'discr'        ;
  GEO.'$brechec'=$brechec                                ;
  gjc   = 'KCHT' $brechec 'VECT' 'SOMMET' (0.0 0.0 0.0)  ;
  gjx   = 'KCHT' $breche  'VECT' 'SOMMET' diru1
                                              gjc        ;
 'SINON'                                                 ;
  gjc   = 'MANU' 'CHPO' brechec 2 'UX' 0.0 'UY' 0.0
                                  'NATURE' 'DISCRET'     ;
  gjx   = 'KCHT' $breche  'VECT' 'SOMMET' diru1 gjc      ;
 'FINSI'                                                 ;

 unvf0 = 'KCHT' GEO.'$menvf' 'VECT' 'SOMMET'  gjx        ;
 src   = 'DBIT' unvf0 GEO.'$menvf'                       ;
 fgeo  = 'ABS' ((GEO.'Sbreche') '*' (1./src))            ;
 GEO.'facgeo' = fgeo                                     ;
Finsi ;

Si (TBT.'Tbreche2');
 diru2=(TBT.'diru2')/(norm TBT.'diru2')                 ;
 'SI' DIM3D                                             ;
 Mbrechc2    = 'CHAN' brech2c 'QUAF'                    ;
 elim Mbrechc2 rxt.'epsi'                               ;
 $brech2c    = 'MODE' Mbrechc2 mdns TBT.'discr'         ;
  GEO.'$brech2c'=$brech2c                                ;
 gjc2  = 'KCHT' $brech2c 'VECT' 'SOMMET' (0.0 0.0 0.0)   ;
 gjx2  = 'KCHT' GEO.'$breche2' 'VECT' 'SOMMET' diru2 gjc2;
 'SINON'                                                 ;
 gjc2  = 'MANU' 'CHPO' brech2c 2 'UX' 0.0 'UY' 0.0
                                 'NATURE' 'DISCRET'      ;
 gjx2  = 'KCHT' $breche2 'VECT' 'SOMMET' diru2 gjc2      ;
 'FINSI'                                                 ;

 unvf0 = 'KCHT' GEO.'$menvf' 'VECT' 'SOMMET'  gjx2       ;
 src2  = 'DBIT' unvf0 GEO.'$menvf'                       ;
 fgeo2 = 'ABS' ((GEO.'Sbreche2') '*' (1./src2))          ;
 GEO.'facgeo2' = fgeo2                                   ;
Finsi ;

Si (TBT.'Tbreche3');
 diru3=(TBT.'diru3')/(norm TBT.'diru3')                 ;
 'SI' DIM3D                                             ;
 Mbrechc3    = 'CHAN' brech3c 'QUAF'                    ;
 elim Mbrechc3 rxt.'epsi'                               ;
 $brech3c    = 'MODE' Mbrechc3 mdns TBT.'discr'         ;
  GEO.'$brech3c'=$brech3c                                ;
 gjc3  = 'KCHT' $brech3c 'VECT' 'SOMMET' (0.0 0.0 0.0)   ;
 gjx3  = 'KCHT' GEO.'$breche3' 'VECT' 'SOMMET' diru3 gjc3;
 'SINON'                                                 ;
 gjc3  = 'MANU' 'CHPO' brech3c 2 'UX' 0.0 'UY' 0.0
                                 'NATURE' 'DISCRET'      ;
 gjx3  = 'KCHT' $breche3 'VECT' 'SOMMET' diru3 gjc3      ;
 'FINSI'                                                 ;

 unvf0 = 'KCHT' GEO.'$menvf' 'VECT' 'SOMMET'  gjx3       ;
 src3  = 'DBIT' unvf0 GEO.'$menvf'                       ;
 fgeo3 = 'ABS' ((GEO.'Sbreche3') '*' (1./src3))          ;
 GEO.'facgeo3' = fgeo3                                   ;
Finsi ;

*-----------------------------------------------------------
*----- FIN du TRAITEMENT DE LA BRECHE ----------------------
*-----------------------------------------------------------

*----- TRAITEMENT DES RECOMBINEURS
'SI' (TBT.'TRECOMB') ;
 NBREC = 'DIME' rxt.'RECOMB' ;
 'REPETER' BCLREC NBREC ;
    $toto = 'CHAIN' '$REC' 'ent' &BCLREC ;
    $tutu = 'CHAIN' '$REC' 'sor' &BCLREC ;
    NAME = 'CHAIN' 'REC' 'entI' &BCLREC ;
    ENTREEi = GEO.NAME ;
    NAME = 'CHAIN' 'REC' 'entC' &BCLREC ;
    ENTREEc = GEO.NAME ;
    NAME = 'CHAIN' 'REC' 'sorI' &BCLREC ;
    SORTIEi = GEO.NAME ;
    NAME = 'CHAIN' 'REC' 'sorC' &BCLREC ;
    SORTIEc = GEO.NAME ;
    DIRENT = 'CHAIN' 'DREC' 'ent' &BCLREC ;
    direntr = GEO. DIRENT ;
    DIRSOR = 'CHAIN' 'DREC' 'sor' &BCLREC ;
    dirsort = GEO. DIRSOR ;
    'SI' DIM3D ;
       toto1 = 'MANU' 'CHPO' ('CHAN' ENTREEc 'POI1')
             3 'UX' 0.0 'UY' 0.0 'UZ' 0.0 'NATURE' 'DISCRET' ;
       toto2 = 'KCHT' GEO.$toto 'VECT' 'SOMMET' direntr
                                              toto1 ;
       tutu1 = 'MANU' 'CHPO' ('CHAN' SORTIEc 'POI1')
             3 'UX' 0.0 'UY' 0.0 'UZ' 0.0 'NATURE' 'DISCRET' ;
       tutu2 = 'KCHT' GEO.$tutu 'VECT' 'SOMMET' dirsort
                                              tutu1 ;
    'SINON' ;
       toto1 = 'MANU' 'CHPO' ENTREEc
             2 'UX' 0.0 'UY' 0.0 'NATURE' 'DISCRET' ;
       toto2 = 'KCHT' GEO.$toto 'VECT' 'SOMMET' direntr
                                              toto1 ;
       tutu1 = 'MANU' 'CHPO' SORTIEc
             2 'UX' 0.0 'UY' 0.0 'NATURE' 'DISCRET' ;
       tutu2 = 'KCHT' GEO.$tutu 'VECT' 'SOMMET' dirsort
                                              tutu1 ;
    'FINSI' ;
    toto3 = 'KCHT' GEO.'$menvf' 'VECT' 'SOMMET' toto2 ;
    toto4 = 'DBIT' toto3 GEO.'$menvf' ;
    tutu3 = 'KCHT' GEO.'$menvf' 'VECT' 'SOMMET' tutu2 ;
    tutu4 = 'DBIT' tutu3 GEO.'$menvf' ;
    S_ENT = 'CHAIN' 'SREC' 'ent' &BCLREC ;
    S_SOR = 'CHAIN' 'SREC' 'sor' &BCLREC ;
    toto5 = 'ABS' ((GEO.S_ENT) '*' (toto4**(-1.0))) ;
    tutu5 = 'ABS' ((GEO.S_SOR) '*' (tutu4**(-1.0))) ;
    FG_ENT = 'CHAIN' 'fgREC' 'ent' &BCLREC ;
    GEO.FG_ENT = toto5 ;
    FG_SOR = 'CHAIN' 'fgREC' 'sor' &BCLREC ;
    GEO.FG_SOR = tutu5 ;
   'FIN' BCLREC ;
'FINSI' ;

*------------------------------------------------------------
* TRAITEMENT DES EQUATIONS A RESOUDRE
*------------------------------------------------------------
*
* - Definition de constantes intervenant dans les equations
* FCPRECI = Frequence de recalcul du préc. dans la methode iterative
* FCPRECT = Frequence de recalcul du préc. en fn du pas de temps
* calprec = logique pilotant le preconditionnement
'SI' ('EXIS' RXT 'FRPREC') ;
  calprec = VRAI ;
  'SI' ('EXIS' RXT 'FCPRECT') ;
    FCPRECT = RXT.'FCPRECT' ;
    'SI' (FCPRECT 'EGA' 1) ;
      'MESS' 'ATTENTION! FCPRECT = 1!' ;
      'MESS' 'ON PRECONDITIONNE A CHAQUE ITERATION!' ;
    'FINSI' ;
  'SINON' ;
    FCPRECT = 5 ;
  'FINSI' ;
  'SI' ('EXIS' RXT 'FCPRECI') ;
    FCPRECI = RXT.'FCPRECI' ;
    'SI' (FCPRECI 'EGA' 1) ;
      'MESS' 'ATTENTION! FCPRECI = 1!' ;
      'MESS' 'ON PRECONDITIONNE A CHAQUE ITERATION!' ;
    'FINSI' ;
  'SINON' ;
    FCPRECI = 5 ;
  'FINSI' ;
'SINON' ;
  RXT.'FRPREC' = 1 ;
  calprec = FAUX ;
  FCPRECI = 1 ;
  FCPRECT = 1 ;
'FINSI' ;

* Donnees à la brèche (vitesse et température
* pour les conditions aux limites
 uj=0.                                                   ;
 vj=-0.                                                  ;
 wj=-1.                                                  ;
 Tj = 0.                                                 ;

*-- Suivant la formulation la ligne de commande change ---------
* LCTSCA ligne de commande de TSCA
LCTSCA='TEXT' 1. 'UN' 'NUEFF' 0.                         ;
Si (Ega TBT.'FEF' 'EFM1')                                ;
LCTSCA='TEXT' 'NUm' 'UN' 0. NUT 0.7                      ;
Finsi                                                    ;

DTX= 'DT'                                                ;
*Si (EGA TBT.'FEF' 'EFM1')                               ;
*DTX= 'DELTAT'                                           ;
*Finsi                                                   ;

*---------------------------------------------------------------
*- EQUATIONS DE LA QDM
* Formulation non conservative
* Decentrement SUPG
*
'SI'((EGA TBT.'MODTURB' 'KEPSILON') et (EGA TBT.'FEF' 'EFM1'));
*---- Modèle K-Epsilon EFM1 --------------------------------
 rv= 'EQEX' 'NITER' 1 'OMEGA' 1.0  'ITMA' 0
     'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG'
     'ZONE' $vtf 'OPER' 'NSKE' 'NUm' 'NUT'   'ROG' 'INCO' 'UN' 'KN' 'EN'
     'OPTI' 'EFM1' 'CENTREE'
     'ZONE'  $vtf  'OPER' 'DFDT' 1. 'UNM' DTX 'INCO' 'UN'
     'ZONE'  $vtf  'OPER' 'DFDT' 1. 'KNM' DTX 'INCO' 'KN'
     'ZONE'  $vtf  'OPER' 'DFDT' 1. 'ENM' DTX 'INCO' 'EN'
     ;
*---- Modèle K-Epsilon EFM1 -- FIN -------------------------
 Sinon ;
rv= 'EQEX' 'NITER' 1 'OMEGA' 1.0  'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG'
*   'ZONE'  $vtf  'OPER' 'SGE' 'UN' 'NU'      'INCO' 'UN'
    'ZONE'  $vtf  'OPER' 'NS'  1. 'UN' 'NUEFF' 'ROG'    'INCO' 'UN'
    'OPTI' 'EFM1' 'CENTREE'
    'ZONE'  $vtf  'OPER' 'DFDT' 1. 'UNM' DTX 'INCO' 'UN'
    ;
 Finsi ;
*
* - Conditions aux limites sur les parois (vitesse nulle)
*   ou Fonctions de paroi
*
 Si (TBT.'FPAROI')                                           ;
   'SI'(EGA TBT.'MODTURB' 'KEPSILON')                        ;
    rv= 'EQEX' rv
    'OPTI' TBT.'FEF' TBT.'FIMPL'
    'ZONE'  (GEO.'$menvfU') 'OPER' 'FPU' 'NUm' 'UET' (TBT.'YP')
    'INCO' 'UN' 'KN' 'EN'                                    ;
   'SINON'                                                   ;
    rv= 'EQEX' rv
    'OPTI' TBT.'FEF' TBT.'FIMPL'
    'ZONE'  (GEO.'$menvfU') 'OPER' 'FPU' 1. 'UN' 'NUm' 'UET'
    (TBT.'YP') 'INCO' 'UN'                                   ;
   'FINSI'                                                   ;
 Sinon                                                       ;
 rv= 'EQEX' rv  'CLIM'
     'UN' 'UIMP' GEO.'menvfU'  0.
     'UN' 'VIMP' GEO.'menvfU'  0.                            ;
 'SI' DIM3D                                                  ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'WIMP' GEO.'menvfU' 0.                            ;
  Finsi                                                      ;
 Finsi                                                       ;
*
* - Conditions aux limites sur la brèche et les sorties
*
*!?
  Si TTsortie                                                ;
    NBR=dime rxt.'Sorties'                                   ;
    ibr=index (rxt.'Sorties')                                ;

    Repeter BBRS NBR                                         ;
     Sriches=rxt.'Sorties'.(ibr.&BBRS)                       ;
      mess ' Conditions limites sur la sortie ' (ibr.&BBRS)  ;
      srechei=Sriches.'srechei'                              ;
      srechec=Sriches.'srechec'                              ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'UIMP' srechei uj
      'UN' 'VIMP' srechei vj
      'UN' 'UIMP' srechec 0.
      'UN' 'VIMP' srechec 0.                                 ;
    FIN BBRS                                                 ;
  FINSI                                                      ;

  Si TTbreche                                                ;
    NBR=dime rxt.'Breches'                                   ;
    ibr=index (rxt.'Breches')                                ;

    Repeter BBRS NBR                                         ;
     Briches=rxt.'Breches'.(ibr.&BBRS)                       ;
      mess ' Conditions limites sur la brèche ' (ibr.&BBRS)  ;
      brechei=Briches.'brechei'                              ;
      brechec=Briches.'brechec'                              ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'UIMP' brechei uj
      'UN' 'VIMP' brechei vj
      'UN' 'UIMP' brechec 0.
      'UN' 'VIMP' brechec 0.                                 ;
    FIN BBRS                                                 ;
  FINSI                                                      ;

 Si (TBT.'Tbreche')                                          ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'UIMP' brechei uj
      'UN' 'VIMP' brechei vj
      'UN' 'UIMP' brechec 0.
      'UN' 'VIMP' brechec 0.                                 ;
 Finsi ;

 Si (TBT.'Tbreche2')                                         ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'UIMP' brech2i uj
      'UN' 'VIMP' brech2i vj
      'UN' 'UIMP' brech2c 0.
      'UN' 'VIMP' brech2c 0.                                 ;
 Finsi ;

 Si (TBT.'Tbreche3')                                         ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'UIMP' brech3i uj
      'UN' 'VIMP' brech3i vj
      'UN' 'UIMP' brech3c 0.
      'UN' 'VIMP' brech3c 0.                                 ;
 Finsi ;

 'SI' (TBT.'TRECOMB') ;
    NBREC = 'DIME' rxt.'RECOMB' ;
    'REPETER' BCLREC NBREC ;
       NAME = 'CHAIN' 'REC' 'entI' &BCLREC ;
       ENTREEi = GEO.NAME ;
       NAME = 'CHAIN' 'REC' 'entC' &BCLREC ;
       ENTREEc = GEO.NAME ;
       NAME = 'CHAIN' 'REC' 'sorI' &BCLREC ;
       SORTIEi = GEO.NAME ;
       NAME = 'CHAIN' 'REC' 'sorC' &BCLREC ;
       SORTIEc = GEO.NAME ;
       rv= 'EQEX' rv  'CLIM'
          'UN' 'UIMP' ENTREEi uj
          'UN' 'VIMP' ENTREEi vj
          'UN' 'UIMP' ENTREEc 0.
          'UN' 'VIMP' ENTREEc 0. ;
       rv= 'EQEX' rv  'CLIM'
          'UN' 'UIMP' SORTIEi uj
          'UN' 'VIMP' SORTIEi vj
          'UN' 'UIMP' SORTIEc 0.
          'UN' 'VIMP' SORTIEc 0. ;
       'SI' DIM3D ;
          rv= 'EQEX' rv  'CLIM'
             'UN' 'WIMP' ENTREEi Wj
             'UN' 'WIMP' ENTREEc 0. ;
          rv= 'EQEX' rv  'CLIM'
             'UN' 'WIMP' SORTIEi Wj
             'UN' 'WIMP' SORTIEc 0. ;
       'FINSI' ;
    'FIN' BCLREC ;
 'FINSI' ;

'SI' DIM3D                                                   ;
  Si TTsortie                                                ;
     NBR=dime rxt.'Sorties'                                  ;
     ibr=index (rxt.'Sorties')                               ;
    Repeter BBRS NBR                                         ;
     Sriches=rxt.'Sorties'.(ibr.&BBRS)                       ;
      mess ' Conditions limites sur la sortie ' (ibr.&BBRS)  ;
      srechei=Sriches.'srechei'                              ;
      srechec=Sriches.'srechec'                              ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'WIMP' srechei wj
      'UN' 'WIMP' srechec 0.                                 ;
    FIN BBRS                                                 ;
  FINSI                                                      ;

  Si TTbreche                                                ;
     NBR=dime rxt.'Breches'                                  ;
     ibr=index (rxt.'Breches')                               ;
    Repeter BBRS NBR                                         ;
     Briches=rxt.'Breches'.(ibr.&BBRS)                       ;
      mess ' Conditions limites sur la brèche ' (ibr.&BBRS)  ;
      brechei=Briches.'brechei'                              ;
      brechec=Briches.'brechec'                              ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'WIMP' brechei wj
      'UN' 'WIMP' brechec 0.                                 ;
    FIN BBRS                                                 ;
  FINSI                                                      ;

 Si (TBT.'Tbreche')                                          ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'WIMP' brechei wj
      'UN' 'WIMP' brechec 0.                                 ;
 Finsi ;

 Si (TBT.'Tbreche2')                                         ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'WIMP' brech2i wj
      'UN' 'WIMP' brech2c 0.                                 ;
 Finsi ;

 Si (TBT.'Tbreche3')                                         ;
  rv= 'EQEX' rv  'CLIM'
      'UN' 'WIMP' brech3i wj
      'UN' 'WIMP' brech3c 0.                                 ;
 Finsi ;

'FINSI'                                                      ;

'SI' (TBT.'Taxe' et (EGA (VALE MODE) 'AXIS'))                ;
     axe = GEO.'axe'                                         ;
rv= 'EQEX' rv  'CLIM'
    'UN' 'UIMP' axe 0.                                       ;
'FINSI'                                                      ;

*---------------------------------------------------------------
* Definition des inconnues vitesse UN et terme source
* de flottabilite ROG
*
* - Definition de la table des inconnues
rv.inco= tic ;

'SI' DIM3D ;
      uinj matvide= kops 'MATRIK'                            ;
  Si TTsortie                                                ;
     NBR=dime rxt.'Sorties'                                  ;
     ibr=index (rxt.'Sorties')                               ;
    Repeter BBRS NBR                                         ;
     Sriches=rxt.'Sorties'.(ibr.&BBRS)                       ;
*     mess ' Conditions limites unj ??? ' (ibr.&BBRS)        ;
      srechei=Sriches.'srechei'                              ;
      $sreche=Sriches.'$sreche'                              ;
      uino = 'KCHT' $sreche 'VECT' 'SOMMET' (0. 0. 1.)       ;
      uino = 'REDU' srechei uino                             ;
      uino = 'KCHT' $sreche 'VECT' 'SOMMET' uino             ;
      uinj = uinj + uino                                     ;
    FIN BBRS                                                 ;
  FINSI                                                      ;
  Si TTbreche                                                ;
     mess ' Tient on passe la ';
     NBR=dime rxt.'Breches'                                  ;
     ibr=index (rxt.'Breches')                               ;
    Repeter BBRS NBR                                         ;
     Briches=rxt.'Breches'.(ibr.&BBRS)                       ;
*     mess ' Conditions limites unj ??? ' (ibr.&BBRS)        ;
      brechei=Briches.'brechei'                              ;
      $breche=Briches.'$breche'                              ;
      uino = 'KCHT' $breche 'VECT' 'SOMMET' (0. 0. 1.)       ;
      uino = 'REDU' brechei uino                             ;
      uino = 'KCHT' $breche 'VECT' 'SOMMET' uino             ;
      uinj = uinj + uino                                     ;
    FIN BBRS                                                 ;
  FINSI                                                      ;
   'SI' (TBT.'Tbreche');
      mess ' Il y a une breche ';
      doma $breche impr;
      uin1 = 'KCHT' $breche 'VECT' 'SOMMET' (0. 0. 1.);
      uin1 = 'REDU' brechei uin1;
      uin1 = 'KCHT' $breche 'VECT' 'SOMMET' uin1;
      uinj = uinj + uin1;
   'FINSI';
   'SI' (TBT.'Tbreche2');
      uin2 = 'KCHT' GEO.'$breche2' 'VECT' 'SOMMET' (0. 0. (-1.));
      uin2 = 'REDU' brech2i uin2;
      uin2 = 'KCHT' GEO.'$breche2' 'VECT' 'SOMMET' uin2;
      uinj = uinj + uin2;
   'FINSI';
   'SI' (TBT.'Tbreche3');
      uin3 = 'KCHT' GEO.'$breche3' 'VECT' 'SOMMET' (0. 0. (-1.));
      uin3 = 'REDU' brech3i uin3;
      uin3 = 'KCHT' GEO.'$breche3' 'VECT' 'SOMMET' uin3;
      uinj = uinj + uin3;
   'FINSI';

Si (exist tic 'UN');
  ma=extr tic.'UN' MAILLAGE ;
  ms=doma $vtf 'SOMMET' ;
  ELIM (ma et ms) epsi ;
  tic.'UN'   =  'KCHT' $vtf    'VECT' 'SOMMET' (tic.'UN') ;
Sinon ;
   'SI' ((TBT.'Tbreche') ou (TBT.'Tbreche2') ou (TBT.'Tbreche3')
      ou TTbreche ou TTsortie);
      tic.'UN'   =  'KCHT' $vtf    'VECT' 'SOMMET' (0. 0. 0.) uinj;
   'SINON';
      tic.'UN'   =  'KCHT' $vtf    'VECT' 'SOMMET' (0. 0. 0.);
   'FINSI';
Finsi ;

Si (exist tic 'UNM');
  ma=extr tic.'UNM' MAILLAGE ;
  ms=doma $vtf 'SOMMET' ;
  ELIM (ma et ms) epsi ;
  tic.'UNM'  =  'KCHT' $vtf    'VECT' 'SOMMET' (tic.'UNM');
Sinon ;
   'SI' ((TBT.'Tbreche') ou (TBT.'Tbreche2') ou (TBT.'Tbreche3')
      ou TTbreche ou TTsortie);
      tic.'UNM'   =  'KCHT' $vtf    'VECT' 'SOMMET' (0. 0. 0.) uinj;
   'SINON';
      tic.'UNM'   =  'KCHT' $vtf    'VECT' 'SOMMET' (0. 0. 0.);
   'FINSI';
Finsi ;

Si(exist tic 'ROG');
ma=extr tic.'ROG' MAILLAGE ;
mc=doma $vtf 'CENTRE' ;
ELIM (ma et mc) epsi ;
tic.'ROG'  =  'KCHT' $vtf    'VECT' 'CENTRE' (tic.'ROG')    ;
Sinon ;
tic.'ROG'  =  'KCHT' $vtf    'VECT' 'CENTRE' (0. 0. 0.)     ;
Finsi ;

'SINON'                                                     ;

      uinj matvide= kops 'MATRIK'                            ;
  Si TTsortie                                                ;
     NBR=dime rxt.'Sorties'                                  ;
     ibr=index (rxt.'Sorties')                               ;
    Repeter BBRS NBR                                         ;
     Sriches=rxt.'Sorties'.(ibr.&BBRS)                       ;
      srechei=Sriches.'srechei'                              ;
      $sreche=Sriches.'$sreche'                              ;
      uino = 'KCHT' $sreche 'VECT' 'SOMMET' (0. 1.)          ;
      uino = 'REDU' srechei uino                             ;
      uino = 'KCHT' $sreche 'VECT' 'SOMMET' uino             ;
      uinj = uinj + uino                                     ;
    FIN BBRS                                                 ;
  FINSI                                                      ;
  Si TTbreche                                                ;
     NBR=dime rxt.'Breches'                                  ;
     ibr=index (rxt.'Breches')                               ;
    Repeter BBRS NBR                                         ;
     Briches=rxt.'Breches'.(ibr.&BBRS)                       ;
      brechei=Briches.'brechei'                              ;
      $breche=Briches.'$breche'                              ;
      uino = 'KCHT' $breche 'VECT' 'SOMMET' (0. 1.)          ;
      uino = 'REDU' brechei uino                             ;
      uino = 'KCHT' $breche 'VECT' 'SOMMET' uino             ;
      uinj = uinj + uino                                     ;
    FIN BBRS                                                 ;
  FINSI                                                      ;
   'SI' (TBT.'Tbreche');
      uin1 = 'KCHT' $breche 'VECT' 'SOMMET' (0. 1.);
      uin1 = 'REDU' brechei uin1;
      uin1 = 'KCHT' $breche 'VECT' 'SOMMET' uin1;
      uinj = uinj + uin1                                     ;
   'FINSI';
   'SI' (TBT.'Tbreche2');
      uin2 = 'KCHT' GEO.'$breche2' 'VECT' 'SOMMET' (0. (-1.));
      uin2 = 'REDU' brech2i uin2;
      uin2 = 'KCHT' GEO.'$breche2' 'VECT' 'SOMMET' uin2;
      uinj = uinj + uin2;
   'FINSI';
   'SI' (TBT.'Tbreche3');
      uin3 = 'KCHT' GEO.'$breche3' 'VECT' 'SOMMET' (0. (-1.));
      uin3 = 'REDU' brech3i uin3;
      uin3 = 'KCHT' GEO.'$breche3' 'VECT' 'SOMMET' uin3;
      uinj = uinj + uin3;
   'FINSI';


Si(exist tic 'UN');
  ma=extr tic.'UN' MAILLAGE ;
  ms=doma $vtf 'SOMMET' ;
  ELIM (ma et ms) epsi ;
  tic.'UN'   =  'KCHT' $vtf    'VECT' 'SOMMET' (tic.'UN')     ;
Sinon ;
   'SI' ((TBT.'Tbreche') ou (TBT.'Tbreche2') ou (TBT.'Tbreche3')
      ou TTbreche ou TTsortie);
      tic.'UN'   =  'KCHT' $vtf    'VECT' 'SOMMET' (0. 0.) uinj;
   'SINON';
      tic.'UN'   =  'KCHT' $vtf    'VECT' 'SOMMET' (0. 0.);
   'FINSI';
Finsi ;

Si(exist tic 'UNM');
  ma=extr tic.'UNM' MAILLAGE ;
  ms=doma $vtf 'SOMMET' ;
  ELIM (ma et ms) epsi ;
  tic.'UNM'  =  'KCHT' $vtf    'VECT' 'SOMMET' (tic.'UNM')    ;
Sinon ;
   'SI' ((TBT.'Tbreche') ou (TBT.'Tbreche2') ou (TBT.'Tbreche3')
      ou TTbreche ou TTsortie);
      tic.'UNM'   =  'KCHT' $vtf    'VECT' 'SOMMET' (0. 0.) uinj;
   'SINON';
      tic.'UNM'   =  'KCHT' $vtf    'VECT' 'SOMMET' (0. 0.);
   'FINSI';
Finsi ;

Si(exist tic 'ROG');
ma=extr tic.'ROG' MAILLAGE ;
mc=doma $vtf 'CENTRE' ;
ELIM (ma et mc) epsi ;
tic.'ROG'  =  'KCHT' $vtf    'VECT' 'CENTRE' (tic.'ROG')    ;
Sinon ;
tic.'ROG'  =  'KCHT' $vtf    'VECT' 'CENTRE' (0. 0.)        ;
Finsi ;

'FINSI'                                                     ;

'SI'(EGA TBT.'MODTURB' 'KEPSILON')                          ;
Si(exist tic 'KN')                                          ;
*ma=extr tic.'KN' MAILLAGE                                  ;
*mc=doma $vtf 'SOMMET'                                      ;
*ELIM (ma et mc) epsi                                       ;
tic.'KN'  =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'KN')      ;
Sinon                                                       ;
tic.'KN'  =  'KCHT' $vtf    'SCAL' 'SOMMET' 1.e-5           ;
Finsi                                                       ;
Si(exist tic 'EN')                                          ;
*ma=extr tic.'EN' MAILLAGE                                  ;
*mc=doma $vtf 'SOMMET'                                      ;
*ELIM (ma et mc) epsi                                       ;
tic.'EN'  =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'EN')      ;
Sinon                                                       ;
tic.'EN'  =  'KCHT' $vtf    'SCAL' 'SOMMET' 1.e-5           ;
Finsi                                                       ;
Si(exist tic 'KNM')                                         ;
*ma=extr tic.'KNM' MAILLAGE                                 ;
*mc=doma $vtf 'SOMMET'                                      ;
*ELIM (ma et mc) epsi                                       ;
tic.'KNM'  =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'KNM')    ;
Sinon                                                       ;
tic.'KNM'  =  'KCHT' $vtf    'SCAL' 'SOMMET' 1.e-5          ;
Finsi                                                       ;
Si(exist tic 'ENM')                                         ;
*ma=extr tic.'ENM' MAILLAGE                                 ;
*mc=doma $vtf 'SOMMET'                                      ;
*ELIM (ma et mc) epsi                                       ;
tic.'ENM' =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'ENM')     ;
Sinon                                                       ;
tic.'ENM' =  'KCHT' $vtf    'SCAL' 'SOMMET' 1.e-5           ;
Finsi                                                       ;
Si(exist tic 'NUT')                                         ;
*ma=extr tic.'NUT' MAILLAGE                                 ;
*mc=doma $vtf 'CENTRE'                                      ;
*ELIM (ma et mc) epsi                                       ;
tic.'NUT' =  'KCHT' $vtf    'SCAL' 'CENTRE' (tic.'NUT')     ;
Sinon                                                       ;
tic.'NUT' =  'KCHT' $vtf    'SCAL' 'CENTRE' 1.e-10          ;
Finsi                                                       ;
'FINSI'                                                     ;
*-----------------------------------------------------------------------
* Specification pour la resolution du systeme
* TYPINV = 3 : Gradient Conjugue
*              = 2 : BiCGStab
*              = 1 : Methode Directe
* PRECOND = 3 Preconditionnement I-LU(0)
* NITMAX = nombre maximal d'iterations
* RESID = precision du Residu EPSS
*
*-----------------------------------------------------------------------
* Precision EPSS
* EPSS = 1.e-5                                            ;
* EPSS = 1.e-10                                           ;
  EPSS = 1.e-20                                           ;
* Nombre total d iterations
* NTIT = 600                                              ;
  NTIT = 800                                              ;

 rv.'METHINV'.TYPINV=TBT.'TYPINV'                          ;
 rv.'METHINV'.TYPRENU=TBT.'RENU'                           ;
 rv.'METHINV'.IMPINV=TBT.'nimpr'                           ;
 rv.'METHINV'.NITMAX=NTIT                                  ;
 rv.'METHINV'.PRECOND=3                                    ;
 rv.'METHINV'.'FCPRECI' = FCPRECI                          ;
 rv.'METHINV'.'FCPRECT' = FCPRECT                          ;
 rv.'METHINV'.'CALPREC' = calprec                          ;
 rv.'METHINV'.RESID  = EPSS                                ;

*----------------------------------------------------------------------
* Definition du minimum pour recalcul du preconditionnement
*
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                             ;
*      rv.'MINPREC' = rv.'METHINV'.NITMAX                   ;
* 'FINSI'                                                   ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*----------------------------------------------------------------------
* Traitement de la PRESSION
*

'MESS' '==> Algorithme de Projection'                      ;
rvpr= 'EQEX'
    'OPTI' TBT.'FEF' TBT.'FIMPL'  TBT.'KPRE' 'SUPG'
      'ZONE'  $vtf   'OPER' 'KBBT'  -1. (TBT.'STAB') 'INCO' 'UN' 'PRES'
;

Si (NON TBT.'Tsortie')                                     ;
rvpr= 'EQEX' rvpr
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'INCOD' TBT.'KPRE'
      'ZONE'  $vtf   'OPER' 'FIMP' 'DSRC' 'INCO' 'PRES'    ;
Finsi                                                      ;

Si(exist rxt 'pi') ;

 Si(TBT.'Tsortie')                                         ;
  Si(EGA TBT.'KPRE' 'MSOMMET')                             ;
    sortiep=doma GEO.'$sortie' MSOMMET                     ;
      rvpr='EQEX' rvpr
      'CLIM' 'PRES' 'TIMP' sortiep 0.                      ;
  Finsi                                                    ;
 Sinon                                                     ;
      rvpr='EQEX' rvpr
      'CLIM' 'PRES' 'TIMP' Pimp 0.                         ;
 Finsi                                                     ;

Finsi ;

 Si (TBT.'FPAROI')                                         ;
rvpr= 'EQEX' rvpr
    'OPTI' TBT.'FEF' TBT.'FIMPL' TBT.'KPRE'
 'ZONE' (GEO.'$menvfU') 'OPER' 'VNIMP' $vtf  0.   'INCO' 'UN' 'PRES' ;
 Finsi ;

 'SI' (TBT.'Taxe')                                            ;
 rvpr= 'EQEX' rvpr
     'OPTI' TBT.'FEF' TBT.'FIMPL' TBT.'KPRE'
     'ZONE' (GEO.'$axe') 'OPER' 'VNIMP' $vtf  0.   'INCO' 'UN' 'PRES' ;
 'FINSI'                                                      ;


 MAXEL=TBT.'MAXELPRE'                                      ;
 mess ' Maximum d éléments pour une résolution directe de la pression '
 MAXEL;
 'SI' ((NBEL vtf) '<EG' MAXEL)                             ;
 rvpr.'METHINV'.TYPINV=    1                               ;
 rvpr.'METHINV'.TYPRENU=TBT.'RENU'                         ;
 rvpr.'METHINV'.IMPINV=TBT.'nimpr'                         ;
 mess ' Nombre d éléments: ' (NBEL VTF) ' => Méthode directe';
 'SINON'                                                   ;
 rvpr.'METHINV'.TYPINV=TBT.'TYPINV'                        ;
 rvpr.'METHINV'.TYPRENU=TBT.'RENU'                         ;
 rvpr.'METHINV'.IMPINV=TBT.'nimpr'                         ;
 rvpr.'METHINV'.NITMAX= NTIT                               ;
 rvpr.'METHINV'.PRECOND=3                                  ;
 rvpr.'METHINV'.'FCPRECI' = FCPRECI                        ;
 rvpr.'METHINV'.'FCPRECT' = FCPRECT                        ;
 rvpr.'METHINV'.'CALPREC' = calprec                        ;
 rvpr.'METHINV'.RESID  =1.e-12                             ;
 mess ' Nombre d éléments: ' (NBEL VTF) ' => Méthode itérative, TYPINV='
 TBT.'TYPINV';
 'FINSI'                                                   ;

 rv.'PROJ' = rvpr                                          ;

*-------------------------------------------------------------
* Definition de l'inconnue de PRESSION
*
Si(exist tic 'PRES');
ma=extr tic.'PRES' MAILLAGE ;
ms=doma $vtf TBT.'KPRE';
ELIM (ma et ms) epsi ;
tic.'PRES' =  'KCHT' $vtf   'SCAL'  TBT.'KPRE'  (tic.'PRES')   ;
Sinon ;
tic.'PRES' =  'KCHT' $vtf   'SCAL'  TBT.'KPRE'  1.e-5          ;
Finsi ;

*------------------------------------------------------------
*-- EQUATIONS DU MODèLE K-EPSILON
Si ( Exist TBT 'MODTURB')                                    ;


Si ((Ega TBT.'MODTURB' 'KEPSILON') et (NON (Ega TBT.'FEF' 'EFM1'))) ;

Rrk= 'EQEX' 'NITER' 1 'OMEGA' 1.0  'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' 'NOCONS'
    'ZONE'  $vtf  'OPER' 'TSCA' 1. 'UN' 'NUEFF' 'Sk' 'INCO' 'KN'
    'OPTI' 'EFM1' 'CENTREE'
    'ZONE'  $vtf  'OPER' 'DFDT' 1. 'KNM' DTX 'INCO' 'KN'
                                                             ;

Rre= 'EQEX' 'NITER' 1 'OMEGA' 1.0  'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' 'NOCONS'
    'ZONE'  $vtf  'OPER' 'TSCA' 1. 'UN' 'NUEFF' 'Se' 'INCO' 'EN'
    'OPTI' 'EFM1' 'CENTREE'
    'ZONE'  $vtf  'OPER' 'DFDT' 1. 'ENM' DTX 'INCO' 'EN'
                                                             ;
*
* - Conditions aux limites sur la brèche
*
 Rrk= 'EQEX' Rrk  'CLIM' 'KN' 'TIMP' GEO.'menvf'  0.         ;
 Rre= 'EQEX' Rre  'CLIM' 'EN' 'TIMP' GEO.'menvf'  1.e30      ;
 kj=0.                                                       ;
 ej=1.e30                                                    ;
  Si TTsortie                                                ;
    NBR=dime rxt.'Sorties'                                   ;
    ibr=index (rxt.'Sorties')                                ;
    Repeter BBRS NBR                                         ;
     Briches=rxt.'Sorties'.(ibr.&BBRS)                       ;
      mess ' Conditions limites sur K et Epsilon sortie '
       (ibr.&BBRS)  ;
      brechei=Briches.'brechei'                              ;
      brechec=Briches.'brechec'                              ;
 Rrk= 'EQEX' Rrk  'CLIM' 'KN' 'TIMP' brechei kj
                         'KN' 'TIMP' brechec 0.              ;
 Rre= 'EQEX' Rre  'CLIM' 'EN' 'TIMP' brechei ej
                         'EN' 'TIMP' brechec 1.e30           ;
    FIN BBRS                                                 ;
  FINSI                                                      ;

  Si TTbreche                                                ;
    NBR=dime rxt.'Breches'                                   ;
    ibr=index (rxt.'Breches')                                ;
    Repeter BBRS NBR                                         ;
     Briches=rxt.'Breches'.(ibr.&BBRS)                       ;
      mess ' Conditions limites sur K et Epsilon brèche '
       (ibr.&BBRS)  ;
      brechei=Briches.'brechei'                              ;
      brechec=Briches.'brechec'                              ;
 Rrk= 'EQEX' Rrk  'CLIM' 'KN' 'TIMP' brechei kj
                         'KN' 'TIMP' brechec 0.              ;
 Rre= 'EQEX' Rre  'CLIM' 'EN' 'TIMP' brechei ej
                         'EN' 'TIMP' brechec 1.e30           ;
    FIN BBRS                                                 ;
  FINSI                                                      ;

 Si (TBT.'Tbreche')                                          ;
 Rrk= 'EQEX' Rrk  'CLIM' 'KN' 'TIMP' brechei kj
                         'KN' 'TIMP' brechec 0.              ;
 Rre= 'EQEX' Rre  'CLIM' 'EN' 'TIMP' brechei ej
                         'EN' 'TIMP' brechec 1.e30           ;
 Finsi ;

 Si (TBT.'Tbreche2')                                         ;
 Rrk= 'EQEX' Rrk  'CLIM' 'KN' 'TIMP' brech2i kj
                         'KN' 'TIMP' brech2c 0.              ;
 Rre= 'EQEX' Rre  'CLIM' 'EN' 'TIMP' brech2i ej
                         'EN' 'TIMP' brech2c 1.e30           ;
 Finsi ;

 Si (TBT.'Tbreche3')                                         ;
 Rrk= 'EQEX' Rrk  'CLIM' 'KN' 'TIMP' brech3i kj
                         'KN' 'TIMP' brech3c 0.              ;
 Rre= 'EQEX' Rre  'CLIM' 'EN' 'TIMP' brech3i ej
                         'EN' 'TIMP' brech3c 1.e30           ;
 Finsi ;

Rrk .inco = tic                                              ;
Rrk .'METHINV'.TYPINV=TBT.'TYPINV'                           ;
Rrk .'METHINV'.TYPRENU=TBT.'RENU'                            ;
Rrk .'METHINV'.IMPINV=TBT.'nimpr'                            ;
Rrk .'METHINV'.NITMAX=NTIT                                   ;
Rrk .'METHINV'.PRECOND=3                                     ;
Rrk .'METHINV'.'FCPRECI' = FCPRECI                           ;
Rrk .'METHINV'.'FCPRECT' = FCPRECT                           ;
Rrk .'METHINV'.'CALPREC' = calprec                           ;
Rrk .'METHINV'.RESID  = EPSS                                 ;


Rre .inco = tic                                              ;
Rre .'METHINV'.TYPINV=TBT.'TYPINV'                           ;
Rre .'METHINV'.TYPRENU=TBT.'RENU'                            ;
Rre .'METHINV'.IMPINV=TBT.'nimpr'                            ;
Rre .'METHINV'.NITMAX=NTIT                                   ;
Rre .'METHINV'.PRECOND=3                                     ;
Rre .'METHINV'.'FCPRECI' = FCPRECI                           ;
Rre .'METHINV'.'FCPRECT' = FCPRECT                           ;
Rre .'METHINV'.'CALPREC' = calprec                           ;
Rre .'METHINV'.RESID  = EPSS                                 ;


*----------------------------------------------------------------------
* Definition du minimum pour recalcul du preconditionnement
*
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                  ;
*     Rrk .'MINPREC' = Rrk .'METHINV'.NITMAX                      ;
*     Rre .'MINPREC' = Rre .'METHINV'.NITMAX                      ;
* 'FINSI'                                                        ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Si (exist tic 'KN')                                             ;
  ma=extr tic.'KN' MAILLAGE                                     ;
  ms=doma $vtf 'SOMMET'                                         ;
  ELIM (ma et ms) epsi                                          ;
  tic.'KN'   =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'KN')       ;
Sinon                                                           ;
      tic.'KN'   =  'KCHT' $vtf    'SCAL' 'SOMMET'  0.          ;
Finsi                                                           ;

Si (exist tic 'KNM')                                            ;
  ma=extr tic.'KNM' MAILLAGE                                    ;
  ms=doma $vtf 'SOMMET'                                         ;
  ELIM (ma et ms) epsi                                          ;
  tic.'KNM'   =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'KNM')     ;
Sinon                                                           ;
      tic.'KNM'   =  'KCHT' $vtf    'SCAL' 'SOMMET'  0.         ;
Finsi                                                           ;

Si(exist tic 'Sk')                                              ;
ma=extr tic.'Sk' MAILLAGE                                       ;
mc=doma $vtf 'SOMMET'                                           ;
ELIM (ma et mc) epsi                                            ;
tic.'Sk'  =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'Sk')          ;
Sinon                                                           ;
tic.'Sk'  =  'KCHT' $vtf    'SCAL' 'SOMMET'  0.                 ;
Finsi                                                           ;

Si (exist tic 'EN')                                             ;
  ma=extr tic.'EN' MAILLAGE                                     ;
  ms=doma $vtf 'SOMMET'                                         ;
  ELIM (ma et ms) epsi                                          ;
  tic.'EN'   =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'EN')       ;
Sinon                                                           ;
      tic.'EN'   =  'KCHT' $vtf    'SCAL' 'SOMMET'  1.e-5       ;
Finsi                                                           ;
*mess ' EN OK ' ;
Si (exist tic 'ENM')                                            ;
  ma=extr tic.'ENM' MAILLAGE                                    ;
  ms=doma $vtf 'SOMMET'                                         ;
  ELIM (ma et ms) epsi                                          ;
  tic.'ENM'   =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'ENM')     ;
Sinon                                                           ;
      tic.'ENM'   =  'KCHT' $vtf    'SCAL' 'SOMMET'  1.e-5      ;
Finsi                                                           ;

Si(exist tic 'Se')                                              ;
ma=extr tic.'Se' MAILLAGE                                       ;
mc=doma $vtf 'SOMMET'                                           ;
ELIM (ma et mc) epsi                                            ;
tic.'Se'  =  'KCHT' $vtf    'SCAL' 'SOMMET' (tic.'Se')          ;
Sinon                                                           ;
tic.'Se'  =  'KCHT' $vtf    'SCAL' 'SOMMET'  0.                 ;
Finsi                                                           ;

Si (exist tic 'NUEFF')                                          ;
  ma=extr tic.'NUEFF' MAILLAGE                                  ;
  ms=doma $vtf 'SOMMET'                                         ;
  ELIM (ma et ms) epsi                                          ;
tic.'NUEFF'='KCHT' $vtf 'SCAL' ('CHAI' TBT.'SPGNU') (tic.'NUEFF');
Sinon                                                           ;
tic.'NUEFF'   =  'KCHT' $vtf    'SCAL' ('CHAI' TBT.'SPGNU') 0.  ;
list tic.'NUEFF' ;
Finsi                                                           ;
*
*mess ' Fin preparation KEPSILON ' ;
*
'FINSI'                                                      ;
'FINSI'                                                      ;

*------------------------------------------------------------
*-- EQUATIONS SUR LA TEMPERATURE FLUIDE TF
* Formulation non conservative Decentrement SUPG
* Termes sources : STF correspond a dP/dt
*                  'ECHI' partie convective de l'echange paroi
*                  Le modele concerne est PAROIC1
*                  ATTENTION : division par RHO.CP
* Les parois imposees sont aussi traitees par ECHI
ac='TEXT' 'NUEFF' 'UN' 0.;

* TRTF=VRAI On range la table 'rtf' dans la table 'rv' pour bénéficier
* du parallélisme par équation de EXEC
* TRTF=FAUX On traite séparément 'rtf' donc séquentiellement

 'SI' (TBT.'TRTF')                                              ;
rtf = 'EQEX' rv 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' 'NOCONS'
*     'ZONE'  $vtf  'OPER' 'TSCA' 1. 'UN' 'NUEFF' 0.   'INCO' 'TF'
      'ZONE'  $vtf  'OPER' 'TSCA' LCTSCA            'INCO' 'TF'
      'OPTI' 'EFM1' 'CENTREE'
      'ZONE'  $vtf  'OPER' 'FIMP' 'STF'           'INCO' 'TF'
      'OPTI' 'EFM1' 'CENTREE' 'IMPL'
      'ZONE'  $vtf  'OPER' 'DFDT' 1.0 'TFNM' DTX 'INCO' 'TF'
                                                                ;
 'SINON'                                                        ;

rtf = 'EQEX' 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' 'NOCONS'
*     'ZONE'  $vtf  'OPER' 'TSCA' 1. 'UN' 'NUEFF' 0.   'INCO' 'TF'
      'ZONE'  $vtf  'OPER' 'TSCA' LCTSCA            'INCO' 'TF'
      'OPTI' 'EFM1' 'CENTREE'
      'ZONE'  $vtf  'OPER' 'FIMP' 'STF'           'INCO' 'TF'
      'OPTI' 'EFM1' 'CENTREE' 'IMPL'
      'ZONE'  $vtf  'OPER' 'DFDT' 1.0 'TFNM' DTX 'INCO' 'TF'
                                                                ;
 'FINSI'                                                        ;

       rtf.'PASDETPS' = rv.'PASDETPS'                           ;

'SI' TBT.'TPAROIF'                                              ;
 'SI' TBT.'THERCO'                                              ;
   rtf = 'EQEX' rtf
   'OPTI' 'EF' 'CENTREE' 'IMPL'
   'ZONE' (GEO.'$paroif') 'OPER' 'MDIA' 'KHEW'  'INCO' 'TF'     ;
   rtf = 'EQEX' rtf
   'OPTI' 'EF' 'CENTREE' 'IMPL'
   'ZONE' (GEO.'$paroif') 'OPER' 'MDIA' 'LHEW'  'INCO' 'TP' 'TF';
 'SINON'                                                        ;
   rtf = 'EQEX' rtf
   'OPTI' 'EFM1' 'CENTREE' 'IMPL'
   'ZONE'(GEO.'$paroif') 'OPER' 'ECHI' 'KHEW' 'TBPW' 'INCO' 'TF';
 'FINSI'                                                        ;
'FINSI'                                                         ;

* XFIMP 4 Tf ; Flux de Chaleur imposés
'SI' TFIMP                                               ;
   NBFIMP=dime (rxt.'XFIMP')                             ;
   ifimp=INDEX (rxt.'XFIMP')                             ;
  REPETER BBFIMP NBFIMP                                  ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                     ;
   $mfpi=Bfimp.'$mfpi'                                   ;
   CKqt =(Bfimp.'Kqt')                                   ;
     rtf = 'EQEX' rtf
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mfpi     'OPER' 'FIMP' CKqt 'INCO' 'TF'    ;
  FIN BBFIMP                                             ;
'FINSI'                                                  ;
* XFIMP 4 Tf ; Flux de Chaleur imposés

'SI' TTIMP                                               ;
   NBTIMP=dime (rxt.'TIMP')                              ;
   itimp=INDEX (rxt.'TIMP')                              ;
  REPETER BBTIMP NBTIMP                                  ;
   Btimp=rxt.'TIMP'.(itimp.&BBTIMP)                      ;
   $mtpi=Btimp.'$mtpi'                                   ;
   CKHE1 =(Btimp.'KHE1')                                 ;
   CTBP1 =(Btimp.'TBP1')                                 ;
     rtf = 'EQEX' rtf
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE' $mtpi 'OPER' 'ECHI' CKHE1 CTBP1 'INCO' 'TF'  ;
  FIN BBTIMP                                             ;
'FINSI'                                                  ;

'SI' TBT.'TTIMP1'                                               ;
     rtf = 'EQEX' rtf
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mtp1     'OPER' 'ECHI' 'KHE1' 'TBP1' 'INCO' 'TF'  ;
'FINSI'                                                         ;

'SI' TBT.'TTIMP2'                                               ;
     rtf = 'EQEX' rtf
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mtp2     'OPER' 'ECHI' 'KHE2' 'TBP2' 'INCO' 'TF'  ;
'FINSI'                                                         ;

'SI' TBT.'TTIMP3'                                               ;
     rtf = 'EQEX' rtf
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mtp3     'OPER' 'ECHI' 'KHE3' 'TBP3' 'INCO' 'TF'  ;
'FINSI'                                                         ;

'SI' TBT.'TECHANP'                                              ;
     rtf = 'EQEX' rtf
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mtp0     'OPER' 'ECHI' 'KHE0' 'TBP0' 'INCO' 'TF'  ;
'FINSI'                                                         ;

* - Initialisation du terme Source STF
Si (non(exist tic 'STF'));
tic.'STF'  =  0.0                                               ;
Finsi ;

rtf.inco = tic                                                  ;
rtf.'METHINV'.TYPINV=TBT.'TYPINV'                               ;
rtf.'METHINV'.TYPRENU=TBT.'RENU'                                ;
rtf.'METHINV'.IMPINV=TBT.'nimpr'                                ;
rtf.'METHINV'.NITMAX=NTIT                                       ;
rtf.'METHINV'.PRECOND=3                                         ;
rtf.'METHINV'.'FCPRECI' = FCPRECI                               ;
rtf.'METHINV'.'FCPRECT' = FCPRECT                               ;
rtf.'METHINV'.'CALPREC' = calprec                               ;
rtf.'METHINV'.RESID  = EPSS                                     ;


*----------------------------------------------------------------------
* Definition du minimum pour recalcul du preconditionnement
*
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                  ;
*      rtf.'MINPREC' = rtf.'METHINV'.NITMAX                      ;
* 'FINSI'                                                        ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

*----------------------------------------------------------
* ---- EQUATION SUR LA DENSITE DE VAPEUR
* Formulation conservative - Decentrement SUPG
* BRECHE : traitee comme CLIM
* CONDENSATION : traitee par 'ECHI' sur modele PAROIC
* TRrvap=VRAI On range la table 'Rrrvap' dans la table 'rv' pour bénéficier
* du parallélisme par équation de EXEC
* TRrvap=FAUX On traite séparément 'Rrvap' donc séquentiellement


'SI' TBT.'VAPEUR'                                                 ;

 'SI' (TBT.'TRrvap')                                              ;
    Rrvap = 'EQEX' rv 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.      'INCO' 'RVP'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RVP'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE' $vtf 'OPER' 'DFDT' 1. 'RVPNM' DTX  'INCO' 'RVP'    ;
 'SINON'                                                          ;
    Rrvap = 'EQEX' 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.      'INCO' 'RVP'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RVP'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE' $vtf 'OPER' 'DFDT' 1. 'RVPNM' DTX  'INCO' 'RVP'    ;
 'FINSI'                                                          ;

    Rrvap.'PASDETPS' = rv.'PASDETPS'                              ;

'SI' TBT.'TPAROIF'                                                ;
     Rrvap = 'EQEX' Rrvap
    'OPTI' 'EFM1' 'CENTREE'
    'ZONE' (GEO.'$paroif') 'OPER' 'ECHI' 'KKCW' 'ROVIW' 'INCO' 'RVP';
'FINSI'                                                           ;

'SI' TTIMP                                                        ;
   NBTIMP=dime (rxt.'TIMP')                              ;
   itimp=INDEX (rxt.'TIMP')                              ;
  REPETER BBTIMP NBTIMP                                  ;
   Btimp=rxt.'TIMP'.(itimp.&BBTIMP)                      ;
   $mtpi=Btimp.'$mtpi'                                   ;
   CKKC1 =Btimp.'KKC1'                                   ;
   CROVI1=Btimp.'ROVI1'                                  ;
     Rrvap = 'EQEX' Rrvap
    'OPTI' 'EFM1' 'CENTREE'
    'ZONE' $mtpi 'OPER' 'ECHI' CKKC1 CROVI1 'INCO' 'RVP' ;
  FIN BBTIMP                                             ;
'FINSI'                                                           ;

'SI' TBT.'TTIMP1'                                                 ;
   CKKC1 ='KKC1'                                                  ;
   CROVI1='ROVI1'                                                 ;
     Rrvap = 'EQEX' Rrvap
    'OPTI' 'EFM1' 'CENTREE'
    'ZONE' (GEO.'$mtp1') 'OPER' 'ECHI' CKKC1 CROVI1 'INCO' 'RVP'  ;
'FINSI'                                                           ;

'SI' TBT.'TTIMP2'                                                 ;
     Rrvap = 'EQEX' Rrvap
    'OPTI' 'EFM1' 'CENTREE'
    'ZONE' (GEO.'$mtp2') 'OPER' 'ECHI' 'KKC2' 'ROVI2' 'INCO' 'RVP';
'FINSI'                                                           ;

'SI' TBT.'TTIMP3'                                                 ;
     Rrvap = 'EQEX' Rrvap
    'OPTI' 'EFM1' 'CENTREE'
    'ZONE' (GEO.'$mtp3') 'OPER' 'ECHI' 'KKC3' 'ROVI3' 'INCO' 'RVP';
'FINSI'                                                           ;

'SI' TBT.'TECHANP'                                                ;
     Rrvap = 'EQEX' Rrvap
    'OPTI' 'EFM1' 'CENTREE'
    'ZONE' (GEO.'$mtp0') 'OPER' 'ECHI' 'KKC0' 'ROVI0' 'INCO' 'RVP';
'FINSI'                                                           ;

* XFIMP 4 RVP ; Flux de masse vapeur imposés
'SI' TFIMP                                               ;
   NBFIMP=dime (rxt.'XFIMP')                             ;
   ifimp=INDEX (rxt.'XFIMP')                             ;
  REPETER BBFIMP NBFIMP                                  ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                     ;
   $mfpi=Bfimp.'$mfpi'                                   ;
   CKqeau =(Bfimp.'Kqeau')                               ;
     Rrvap = 'EQEX' Rrvap
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mfpi     'OPER' 'FIMP' CKqeau 'INCO' 'RVP' ;
  FIN BBFIMP                                             ;
'FINSI'                                                  ;
* XFIMP 4 RVP ; Flux de masse vapeur imposés

Rrvap.inco = tic                                                  ;
Rrvap.'METHINV'.TYPINV=TBT.'TYPINV'                               ;
Rrvap.'METHINV'.TYPRENU=TBT.'RENU'                                ;
Rrvap.'METHINV'.IMPINV=TBT.'nimpr'                                ;
Rrvap.'METHINV'.NITMAX=NTIT                                       ;
Rrvap.'METHINV'.PRECOND=3                                         ;
Rrvap.'METHINV'.'FCPRECI' = FCPRECI                               ;
Rrvap.'METHINV'.'FCPRECT' = FCPRECT                               ;
Rrvap.'METHINV'.'CALPREC' = calprec                               ;
Rrvap.'METHINV'.RESID  = EPSS                                     ;

*----------------------------------------------------------------------
* Definition du minimum pour recalcul du preconditionnement
*
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                    ;
*       Rrvap.'MINPREC' = Rrvap.'METHINV'.NITMAX                   ;
* 'FINSI'                                                          ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'FINSI'                                                           ;

*----------------------------------------------------------
* EQUATIONS SUR LA DENSITE HELIUM
* Formulation conservative - Decentrement SUPG
* BRECHE : condition aux limites
* TRrhe=VRAI On range la table 'Rrhe' dans la table 'rv' pour bénéficier
* du parallélisme par équation de EXEC
* TRrhe=FAUX On traite séparément 'Rrhe' donc séquentiellement


'SI' TBT.'THE'                                                    ;

 'SI' (TBT.'TRrhe')                                               ;
    Rrhe = 'EQEX' rv 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RHE'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RHE'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE'  $vtf  'OPER' 'DFDT' 1.0 'RHEM' DTX  'INCO' 'RHE'   ;
 'SINON'                                                          ;
    Rrhe = 'EQEX'  'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RHE'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RHE'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE'  $vtf  'OPER' 'DFDT' 1.0 'RHEM' DTX  'INCO' 'RHE'   ;
 'FINSI'                                                          ;

    Rrhe.'PASDETPS' = rv.'PASDETPS'                               ;

* XFIMP 4 RHE ; Flux de masse Hélium imposé
'SI' TFIMP                                               ;
   NBFIMP=dime (rxt.'XFIMP')                             ;
   ifimp=INDEX (rxt.'XFIMP')                             ;
  REPETER BBFIMP NBFIMP                                  ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                     ;
   $mfpi=Bfimp.'$mfpi'                                   ;
   CKqhe =(Bfimp.'Kqhe')                                 ;
     Rrhe = 'EQEX' Rrhe
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mfpi     'OPER' 'FIMP' CKqhe 'INCO' 'RHE'  ;
  FIN BBFIMP                                             ;
'FINSI'                                                  ;
* XFIMP 4 RHE ; Flux de masse Hélium imposé

Rrhe.inco = tic                                                   ;
Rrhe.'METHINV'.TYPINV=TBT.'TYPINV'                                ;
Rrhe.'METHINV'.TYPRENU=TBT.'RENU'                                 ;
Rrhe.'METHINV'.IMPINV=TBT.'nimpr'                                 ;
Rrhe.'METHINV'.NITMAX=NTIT                                        ;
Rrhe.'METHINV'.PRECOND=3                                          ;
Rrhe.'METHINV'.'FCPRECI' = FCPRECI                                ;
Rrhe.'METHINV'.'FCPRECT' = FCPRECT                                ;
Rrhe.'METHINV'.'CALPREC' = calprec                                ;
Rrhe.'METHINV'.RESID  = EPSS                                      ;

*----------------------------------------------------------------------
* Definition du minimum pour recalcul du preconditionnement
*
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                    ;
*      Rrhe.'MINPREC' = Rrhe.'METHINV'.NITMAX                      ;
* 'FINSI'                                                          ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'FINSI'                                                           ;

*----------------------------------------------------------
* EQUATIONS SUR LA DENSITE HYDROGENE
* Formulation conservative - Decentrement SUPG
* BRECHE : condition aux limites
* TRrh2=VRAI On range la table 'Rrh2' dans la table 'rv' pour bénéficier
* du parallélisme par équation de EXEC
* TRrh2=FAUX On traite séparément 'Rrh2' donc séquentiellement


'SI' TBT.'TH2'                                                ;

 'SI' (TBT.'TRrh2')                                               ;
    Rrh2 = 'EQEX' rv 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RH2'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RH2'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE'  $vtf  'OPER' 'DFDT' 1.0 'RH2M' DTX  'INCO' 'RH2'   ;
 'SINON'                                                          ;
    Rrh2 = 'EQEX'  'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RH2'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RH2'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE'  $vtf  'OPER' 'DFDT' 1.0 'RH2M' DTX  'INCO' 'RH2'   ;
 'FINSI'                                                          ;

    Rrh2.'PASDETPS' = rv.'PASDETPS'                               ;

* XFIMP 4 RH2 ; Flux de masse H2 imposé
'SI' TFIMP                                               ;
   NBFIMP=dime (rxt.'XFIMP')                             ;
   ifimp=INDEX (rxt.'XFIMP')                             ;
  REPETER BBFIMP NBFIMP                                  ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                     ;
   $mfpi=Bfimp.'$mfpi'                                   ;
   CKqh2 =(Bfimp.'Kqh2')                                 ;
     Rrh2 = 'EQEX' Rrh2
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mfpi     'OPER' 'FIMP' CKqh2 'INCO' 'RH2'  ;
  FIN BBFIMP                                             ;
'FINSI'                                                  ;
* XFIMP 4 RH2 ; Flux de masse H2 imposé

Rrh2.inco = tic                                                   ;
Rrh2.'METHINV'.TYPINV=TBT.'TYPINV'                                ;
Rrh2.'METHINV'.TYPRENU=TBT.'RENU'                                 ;
Rrh2.'METHINV'.IMPINV=TBT.'nimpr'                                 ;
Rrh2.'METHINV'.NITMAX=NTIT                                        ;
Rrh2.'METHINV'.PRECOND=3                                          ;
Rrh2.'METHINV'.'FCPRECI' = FCPRECI                                ;
Rrh2.'METHINV'.'FCPRECT' = FCPRECT                                ;
Rrh2.'METHINV'.'CALPREC' = calprec                                ;
Rrh2.'METHINV'.RESID  = EPSS                                      ;

*----------------------------------------------------------------------
* Definition du minimum pour recalcul du preconditionnement
*
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                    ;
*      Rrh2.'MINPREC' = Rrh2.'METHINV'.NITMAX                      ;
* 'FINSI'                                                          ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'FINSI'                                                           ;

*----------------------------------------------------------
* EQUATIONS SUR LA DENSITE OXYGENE
* Formulation conservative - Decentrement SUPG
* BRECHE : condition aux limites
* TRro2=VRAI On range la table 'Rro2' dans la table 'rv' pour bénéficier
* du parallélisme par équation de EXEC
* TRro2=FAUX On traite séparément 'Rro2' donc séquentiellement


'SI' TBT.'TO2'                                                    ;

 'SI' (TBT.'TRro2')                                               ;
    Rro2 = 'EQEX' rv 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RO2'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RO2'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RO2M' DTX  'INCO' 'RO2'     ;
 'SINON'                                                          ;
    Rro2 = 'EQEX'  'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RO2'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RO2'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RO2M' DTX  'INCO' 'RO2'     ;
 'FINSI'                                                          ;

    Rro2.'PASDETPS' = rv.'PASDETPS'                               ;

* XFIMP 4 RO2 ; Flux de masse O2 imposé
'SI' TFIMP                                               ;
   NBFIMP=dime (rxt.'XFIMP')                             ;
   ifimp=INDEX (rxt.'XFIMP')                             ;
  REPETER BBFIMP NBFIMP                                  ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                     ;
   $mfpi=Bfimp.'$mfpi'                                   ;
   CKqo2 =(Bfimp.'Kqo2')                                 ;
     Rro2 = 'EQEX' Rro2
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mfpi     'OPER' 'FIMP' CKqo2 'INCO' 'RO2'  ;
  FIN BBFIMP                                             ;
'FINSI'                                                  ;
* XFIMP 4 RO2 ; Flux de masse O2 imposé

Rro2.inco = tic                                                   ;
Rro2.'METHINV'.TYPINV=TBT.'TYPINV'                                ;
Rro2.'METHINV'.TYPRENU=TBT.'RENU'                                 ;
Rro2.'METHINV'.IMPINV=TBT.'nimpr'                                 ;
Rro2.'METHINV'.NITMAX=NTIT                                        ;
Rro2.'METHINV'.PRECOND=3                                          ;
Rro2.'METHINV'.'FCPRECI' = FCPRECI                                ;
Rro2.'METHINV'.'FCPRECT' = FCPRECT                                ;
Rro2.'METHINV'.'CALPREC' = calprec                                ;
Rro2.'METHINV'.RESID  = EPSS                                      ;

*----------------------------------------------------------------------
* Definition du minimum pour recalcul du preconditionnement
*
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                    ;
*      Rro2.'MINPREC' = Rro2.'METHINV'.NITMAX                      ;
* 'FINSI'                                                          ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'FINSI'                                                           ;

*----------------------------------------------------------
* EQUATIONS SUR LA DENSITE AZOTE
* Formulation conservative - Decentrement SUPG
* BRECHE : condition aux limites
* TRrn2=VRAI On range la table 'Rrn2' dans la table 'rv' pour bénéficier
* du parallélisme par équation de EXEC
* TRrn2=FAUX On traite séparément 'Rrn2' donc séquentiellement


'SI' TBT.'TN2'                                                    ;

 'SI' (TBT.'TRrn2')                                               ;
   Rrn2 = 'EQEX' rv 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.      'INCO' 'RN2'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RN2'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RN2M' DTX 'INCO' 'RN2'      ;
 'SINON'                                                          ;
   Rrn2 = 'EQEX'  'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.      'INCO' 'RN2'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RN2'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RN2M' DTX 'INCO' 'RN2'      ;
 'FINSI'                                                          ;

   Rrn2.'PASDETPS' = rv.'PASDETPS'                                ;


*   'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUT' 'UN'  0.0 'INCO' 'RN2'
*mess ' Option NOCONS RN2 pour test branchee AREVOIR ' ;

* XFIMP 4 RN2 ; Flux de masse N2 imposé
'SI' TFIMP                                               ;
   NBFIMP=dime (rxt.'XFIMP')                             ;
   ifimp=INDEX (rxt.'XFIMP')                             ;
  REPETER BBFIMP NBFIMP                                  ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                     ;
   $mfpi=Bfimp.'$mfpi'                                   ;
   CKqn2 =(Bfimp.'Kqn2')                                 ;
     Rrn2 = 'EQEX' Rrn2
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mfpi     'OPER' 'FIMP' CKqn2 'INCO' 'RN2'  ;
  FIN BBFIMP                                             ;
'FINSI'                                                  ;
* XFIMP 4 RN2 ; Flux de masse N2 imposé

Rrn2.inco = tic                                                   ;
Rrn2.'METHINV'.TYPINV=TBT.'TYPINV'                                ;
Rrn2.'METHINV'.TYPRENU=TBT.'RENU'                                 ;
Rrn2.'METHINV'.IMPINV=TBT.'nimpr'                                 ;
Rrn2.'METHINV'.NITMAX=NTIT                                        ;
Rrn2.'METHINV'.PRECOND=3                                          ;
Rrn2.'METHINV'.'FCPRECI' = FCPRECI                                ;
Rrn2.'METHINV'.'FCPRECT' = FCPRECT                                ;
Rrn2.'METHINV'.'CALPREC' = calprec                                ;
Rrn2.'METHINV'.RESID  = EPSS                                      ;


*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                    ;
*       Rrn2.'MINPREC' = Rrn2.'METHINV'.NITMAX                     ;
* 'FINSI'                                                          ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'FINSI'                                                           ;

*----------------------------------------------------------
* EQUATIONS SUR LA DENSITE DIOXYDE DE CARBONE
* Formulation conservative - Decentrement SUPG
* BRECHE : condition aux limites
* TRrco2=VRAI On range la table 'Rrco2' dans la table 'rv' pour bénéficier
* du parallélisme par équation de EXEC
* TRrco2=FAUX On traite séparément 'Rrco2' donc séquentiellement


'SI' TBT.'TCO2'                                                   ;

 'SI' (TBT.'TRrco2')                                              ;
    Rrco2 = 'EQEX' rv 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RCO2'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RCO2'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RCO2M' DTX 'INCO' 'RCO2'   ;
 'SINON'                                                          ;
    Rrco2 = 'EQEX'  'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RCO2'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RCO2'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RCO2M' DTX 'INCO' 'RCO2'   ;
 'FINSI'                                                          ;

    Rrco2.'PASDETPS' = rv.'PASDETPS'                              ;

* XFIMP 4 RCO2 ; Flux de masse CO2 imposé
'SI' TFIMP                                               ;
   NBFIMP=dime (rxt.'XFIMP')                             ;
   ifimp=INDEX (rxt.'XFIMP')                             ;
  REPETER BBFIMP NBFIMP                                  ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                     ;
   $mfpi=Bfimp.'$mfpi'                                   ;
   CKqco2 =(Bfimp.'Kqco2')                               ;
     Rrco2 = 'EQEX' Rrco2
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mfpi     'OPER' 'FIMP' CKqco2 'INCO' 'RCO2';
  FIN BBFIMP                                             ;
'FINSI'                                                  ;
* XFIMP 4 RCO2 ; Flux de masse CO2 imposé

Rrco2.inco = tic                                                  ;
Rrco2.'METHINV'.TYPINV=TBT.'TYPINV'                               ;
Rrco2.'METHINV'.TYPRENU=TBT.'RENU'                                ;
Rrco2.'METHINV'.IMPINV=TBT.'nimpr'                                ;
Rrco2.'METHINV'.NITMAX=NTIT                                       ;
Rrco2.'METHINV'.PRECOND=3                                         ;
Rrco2.'METHINV'.'FCPRECI' = FCPRECI                               ;
Rrco2.'METHINV'.'FCPRECT' = FCPRECT                               ;
Rrco2.'METHINV'.'CALPREC' = calprec                               ;
Rrco2.'METHINV'.RESID  = EPSS                                     ;


*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                    ;
*       Rrco2.'MINPREC' = Rrco2.'METHINV'.NITMAX                   ;
* 'FINSI'                                                          ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'FINSI'                                                           ;

*----------------------------------------------------------
* EQUATIONS SUR LA DENSITE DE l'AIR  (Nième équation)  TCO2AIR
* Formulation conservative - Decentrement SUPG
* BRECHE : condition aux limites
* TRrair=VRAI On range la table 'Rrair' dans la table 'rv' pour bénéficier
* du parallélisme par équation de EXEC
* TRrair=FAUX On traite séparément 'Rrair' donc séquentiellement


'SI' TBT.'TAIR'                                                   ;

 'SI' (TBT.'TRrair')                                              ;
    Rrair = 'EQEX' rv 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RAIR'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RAIR'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RAIRM' DTX 'INCO' 'RAIR'   ;
 'SINON'                                                          ;
    Rrair = 'EQEX'  'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RAIR'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RAIR'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RAIRM' DTX 'INCO' 'RAIR'   ;
 'FINSI'                                                          ;

    Rrair.'PASDETPS' = rv.'PASDETPS'                              ;

* XFIMP 4 RAIR ; Flux de masse Air imposé
'SI' TFIMP                                               ;
   NBFIMP=dime (rxt.'XFIMP')                             ;
   ifimp=INDEX (rxt.'XFIMP')                             ;
  REPETER BBFIMP NBFIMP                                  ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                     ;
   $mfpi=Bfimp.'$mfpi'                                   ;
   CKqair =(Bfimp.'Kqair')                               ;
     Rrair = 'EQEX' Rrair
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mfpi     'OPER' 'FIMP' CKqair 'INCO' 'RAIR';
  FIN BBFIMP                                             ;
'FINSI'                                                  ;
* XFIMP 4 RCO2 ; Flux de masse CO2 imposé

Rrair.inco = tic                                                  ;
Rrair.'METHINV'.TYPINV=TBT.'TYPINV'                               ;
Rrair.'METHINV'.TYPRENU=TBT.'RENU'                                ;
Rrair.'METHINV'.IMPINV=TBT.'nimpr'                                ;
Rrair.'METHINV'.NITMAX=NTIT                                       ;
Rrair.'METHINV'.PRECOND=3                                         ;
Rrair.'METHINV'.'FCPRECI' = FCPRECI                               ;
Rrair.'METHINV'.'FCPRECT' = FCPRECT                               ;
Rrair.'METHINV'.'CALPREC' = calprec                               ;
Rrair.'METHINV'.RESID  = EPSS                                     ;


*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                    ;
*       Rrair.'MINPREC' = Rrair.'METHINV'.NITMAX                   ;
* 'FINSI'                                                          ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'FINSI'                                                           ;

*----------------------------------------------------------
* EQUATIONS SUR LA DENSITE MONOXYDE DE CARBONE
* Formulation conservative - Decentrement SUPG
* BRECHE : condition aux limites
* TRrco=VRAI On range la table 'Rrco' dans la table 'rv' pour bénéficier
* du parallélisme par équation de EXEC
* TRrco=FAUX On traite séparément 'Rrco' donc séquentiellement


'SI' TBT.'TCO'                                                    ;

 'SI' (TBT.'TRrco')                                               ;
    Rrco = 'EQEX' rv 'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RCO'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RCO'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RCOM' DTX 'INCO' 'RCO'      ;
 'SINON'                                                          ;
    Rrco = 'EQEX'  'NITER' 1 'OMEGA' 1. 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' TBT.'FCONS'
*      'ZONE' $vtf 'OPER' 'TSCA' 'NUEFF' 'UN'  0.0     'INCO' 'RCO'
       'ZONE' $vtf 'OPER' 'TSCA' LCTSCA                'INCO' 'RCO'
       'OPTI' 'EFM1' 'CENTREE'
       'ZONE' $vtf 'OPER' 'DFDT' 1.0 'RCOM' DTX 'INCO' 'RCO'      ;
 'FINSI'                                                          ;

    Rrco.'PASDETPS' = rv.'PASDETPS'                               ;

* XFIMP 4 RCO ; Flux de masse CO imposé
'SI' TFIMP                                               ;
   NBFIMP=dime (rxt.'XFIMP')                             ;
   ifimp=INDEX (rxt.'XFIMP')                             ;
  REPETER BBFIMP NBFIMP                                  ;
   Bfimp=rxt.'XFIMP'.(ifimp.&BBFIMP)                     ;
   $mfpi=Bfimp.'$mfpi'                                   ;
   CKqco =(Bfimp.'Kqco')                                 ;
     Rrco = 'EQEX' Rrco
     'OPTI' 'EFM1' 'CENTREE' 'IMPL'
     'ZONE'  $mfpi     'OPER' 'FIMP' CKqco 'INCO' 'RCO'  ;
  FIN BBFIMP                                             ;
'FINSI'                                                  ;
* XFIMP 4 RCO ; Flux de masse CO imposé

Rrco.inco = tic                                                   ;
Rrco.'METHINV'.TYPINV=TBT.'TYPINV'                                ;
Rrco.'METHINV'.TYPRENU=TBT.'RENU'                                 ;
Rrco.'METHINV'.IMPINV=TBT.'nimpr'                                 ;
Rrco.'METHINV'.NITMAX=NTIT                                        ;
Rrco.'METHINV'.PRECOND=3                                          ;
Rrco.'METHINV'.'FCPRECI' = FCPRECI                                ;
Rrco.'METHINV'.'FCPRECT' = FCPRECT                                ;
Rrco.'METHINV'.'CALPREC' = calprec                                ;
Rrco.'METHINV'.RESID  = EPSS                                      ;


*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* 'SI' ( 'NON' tbt.'UTILPREC' )                                    ;
*      Rrco.'MINPREC' = Rrco.'METHINV'.NITMAX                      ;
* 'FINSI'                                                          ;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'FINSI'                                                           ;

*----------------------------------------------------------
* EQUATION DE LA CHALEUR POUR LA THERMIQUE PAROI TP
* CONDENSATION ET CONVECTION : densite de flux imposee FIMP
*                              sur modele PAROIC1
*
 'SI' TBT.'THERMP'                                                ;

  'SI' TBT.'THERCO'                                               ;
    rtp = rtf                                                     ;
  'SINON'                                                         ;
    rtp= 'EQEX' 'NITER' 1 'OMEGA' 1. 'ITMA' 0                     ;
    rtp.'METHINV'.TYPINV=2                                        ;
    rtp.'METHINV'.TYPRENU=TBT.'RENU'                              ;
    rtp.'METHINV'.IMPINV=TBT.'nimpr'                              ;
    rtp.'METHINV'.NITMAX=NTIT                                     ;
    rtp.'METHINV'.PRECOND=3                                       ;
    rtp.'METHINV'.'FCPRECI' = FCPRECI                             ;
    rtp.'METHINV'.'FCPRECT' = FCPRECT                             ;
    rtp.'METHINV'.'CALPREC' = calprec                             ;
    rtp.'METHINV'.RESID  = EPSS                                   ;
  'FINSI'                                                         ;

 'SI' (NON TPAROIS)                                               ;
   $vtp=GEO.'$vtp'                                                ;
   rtp= 'EQEX' rtp
   'OPTI' TBT.'FEF' TBT.'FIMPL' 'CENTREE'
          'ZONE' $vtp 'OPER' 'LAPN' 'LAMBDA'  'INCO' 'TP'
          'OPTI' 'EFM1' 'CENTREE'
          'ZONE' $vtp 'OPER' 'DFDT' 'ROCP'  'TPNM' DTX 'INCO' 'TP';
 'SINON'                                                          ;
   NPAR=dime rxt.'PAROIS'                                ;
   ipr=index (rxt.'PAROIS')                              ;
   Repeter BPRS NPAR                                     ;
   Parois=rxt.'PAROIS'.(ipr.&BPRS)                       ;
   $vtpi=GEO.(ipr.&BPRS).'$vtp'                          ;
   CLAMBDA=chai 'LAMBDA' &BPRS                           ;
   CROCP  =chai 'ROCP'   &BPRS                           ;
   rtp= 'EQEX' rtp
   'OPTI' TBT.'FEF' TBT.'FIMPL' 'CENTREE'
          'ZONE' $vtpi 'OPER' 'LAPN' CLAMBDA  'INCO' 'TP'
          'OPTI' 'EFM1' 'CENTREE'
          'ZONE' $vtpi 'OPER' 'DFDT' CROCP  'TPNM' DTX 'INCO' 'TP';
   FIN BPRS                                              ;
 'FINSI'                                                          ;

 'SI' TBT.'ECHEXT'                                                ;

   hxtc=tic.'HEXT'                                                ;
   txtc=tic.'TPEXT'                                               ;
   thx=type hxtc                                                  ;
   ttx=type txtc;                                                 ;

   Si(EGA thx 'CHPOINT')                                          ;
   hxtc='NOEL' (GEO.'$parext') hxtc                               ;
   Finsi                                                          ;
;
   Si(EGA ttx 'CHPOINT')                                          ;
   txtc='NOEL' (GEO.'$parext') txtc                               ;
   Finsi                                                          ;

   tic.'HEXTc'=hxtc                                               ;
   tic.'TPEXTc'=txtc                                              ;

   rtp= 'EQEX' rtp
  'OPTI' 'EFM1' 'CENTREE'
'ZONE' (GEO.'$parext') 'OPER' 'ECHI' 'HEXTc' 'TPEXTc' 'INCO' 'TP' ;
 'FINSI'                                                          ;

 'SI' (TBT.'TPAROIF' et (non TBT.'VAPEUR'))                       ;
   rtp= 'EQEX' rtp
  'OPTI' 'EFM1' 'CENTREE'
  'ZONE' (GEO.'$paroif') 'OPER' 'ECHI' 'KHW' 'TBFW'  'INCO' 'TP'  ;
 'FINSI'                                                          ;

 'SI' (TBT.'TPAROIF' et TBT.'VAPEUR')                             ;
       rtp= 'EQEX' rtp
          'OPTI' 'EFM1' 'CENTREE'
          'ZONE' (GEO.'$paroif') 'OPER' 'FIMP' 'FHPW' 'INCO' 'TP' ;
 'FINSI'                                                          ;

  rtp.'PASDETPS' = rv.'PASDETPS'                                  ;
  rtp.inco = tic                                                  ;

  'SI' TBT.'THERCO'; rtf = rtp ; 'FINSI'                          ;

 'FINSI'                                                          ;

*-----------------------------------------------------------------------
* TRAITEMENT DE LA CONDENSATION EN MASSE
* Modif FP 18/05/00.

'SI' (TBT.'VERSION' '>EG' 1)                                      ;
*  Variables :
*  -----------
*  rrliq : table de résolution.
*  Les variables ci-dessous sont dans la bable des inconnues tic.
*  RLIQ : masse volumique de liquide en suspension à l'instant N.
*  RLIQM : masse volumique de liquide drainé à l'instant N - 1.
*  RBRO  : masse volumique de liquide en suspension à l'instant N.
*  SLIQ : terme source lié à la formation de liquide en suspension.
*  SRVL : terme source dans l'équation sur la masse volumique de
*         vapeur (SRVL = -SLIQ).
*  STL : terme source dans l'équation de la température
*  (STL = Lv*SLIQ/Rho/Cp).

   'SI' ('EXISTE' tic 'RLIQ');
      ma = 'EXTR' tic.'RLIQ' MAILLAGE ;
      ms = 'DOMA' $vtf 'SOMMET' ;
      'ELIMINER' (ma et ms) epsi ;
      tic.'RLIQ' = 'KCHT' $vtf 'SCAL' 'SOMMET' (tic.'RLIQ');
   'SINON';
      tic.'RLIQ' = 'KCHT' $vtf 'SCAL' 'SOMMET' 0.;
   'FINSI';
   'SI' ('EXISTE' tic 'RBRO');
      ma = 'EXTR' tic.'RBRO' MAILLAGE ;
      ms = 'DOMA' $vtf 'SOMMET' ;
      'ELIMINER' (ma et ms) epsi ;
      tic.'RBRO' = 'KCHT' $vtf 'SCAL' 'SOMMET' (tic.'RBRO');
   'SINON';
      tic.'RBRO' = 'KCHT' $vtf 'SCAL' 'SOMMET' 0.;
   'FINSI';
'FINSI';

*-----------------------------------------------------------------------
* TRAITEMENT DE L'ASPERSION C. CAROLI
*
'SI' TBT.'ASPER'                                                ;

********************** EQEX VN + UN ***********************
*  nup        =  1.00e-20                                       ;
  nup        =  1.00e-10                                        ;
  rod        =  rxt.'rod'                                       ;
  gdrz       =  (-9.81 '*' (rod-Rho0)  '/' rod)                 ;

  rvn = 'EQEX' 'NITER' 1 'OMEGA' 1.0 'ITMA' 0
       'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG'
        'ZONE'  $vtf  'OPER' 'NS'  1. 'VN' nup 'GDR' 'INCO' 'VN'
        'OPTI' 'EFM1' 'CENTREE'
*        'ZONE'  $vtf  'OPER' 'DFDT' 'KDIS' 'UNM' 1.0 'INCO' 'VN'
*        'ZONE'  $vtf  'OPER' 'PENCECHI' 'KDIS' 'UNM' 1.0 'INCO' 'VN'
        'ZONE'  $vtf  'OPER' 'PENCECHI' 'KDIS' 'UN' 1.0 'INCO' 'VN'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE'  $vtf  'OPER' 'DFDT'  1.0 'VNM' DTX 'INCO' 'VN';
* Utilisé par PENCECHI
  rvn . 'TBT' = tbt ;
 'SI' DIM3D ;
  rvn = 'EQEX' rvn 'CLIM'
        'VN' 'UIMP' toitf  0.0
        'VN' 'VIMP' toitf  0.0
        'VN' 'WIMP' toitf  0.0
        'VN' 'UIMP' aspinj 0.0
        'VN' 'VIMP' aspinj 0.0
        'VN' 'WIMP' aspinj vzinj                               ;
  'SINON' ;
  rvn = 'EQEX' rvn 'CLIM'
        'VN' 'UIMP' toitf  0.0
        'VN' 'VIMP' toitf  0.0
        'VN' 'UIMP' aspinj 0.0
        'VN' 'VIMP' aspinj vzinj                               ;
  'FINSI' ;

  rv  = 'EQEX' rv
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE' $vtf 'OPER' 'PENCECHI' 'KGAS' 'VN' 1.0 'INCO' 'UN'  ;
*        'ZONE' $vtf 'OPER' 'PENCECHI' 'KGAS' 'VNM' 1.0 'INCO' 'UN'  ;
*        'ZONE' $vtf 'OPER' 'DFDT' 'KGAS' 'VNM' 1.0 'INCO' 'UN'  ;
* Utilisé par PENCECHI
  rv . 'TBT' = tbt ;

  Si(exist tic 'VN');
  ma=extr tic.'VN' MAILLAGE ;
  ms=doma $vtf 'SOMMET';
  ELIM (ma et ms) epsi ;
  tic.'VN'   =  'KCHT' $vtf   'VECT' 'SOMMET' (tic.'VN')        ;
  Sinon;
   'SI' DIM3D ;
  tic.'VN'   =  'KCHT' $vtf   'VECT' 'SOMMET' (0.0 0.0 0.0)     ;
  'SINON' ;
  tic.'VN'   =  'KCHT' $vtf   'VECT' 'SOMMET' (0.0 0.0)     ;
  'FINSI' ;
  Finsi ;

  Si(exist tic 'VNM');
  tic.'VNM'  =  'KCHT' $vtf   'VECT' 'SOMMET' (tic.'VNM')       ;
  Sinon;
  'SI' DIM3D ;
  tic.'VNM'   =  'KCHT' $vtf   'VECT' 'SOMMET' (0.0 0.0 0.0)     ;
  'SINON' ;
  tic.'VNM'   =  'KCHT' $vtf   'VECT' 'SOMMET' (0.0 0.0)     ;
  'FINSI' ;
  Finsi;

  Si(exist tic 'GDR');
  tic.'GDR'  =  'KCHT' $vtf   'VECT' 'CENTRE' (tic.'GDR')       ;
  Sinon;
  'SI' DIM3D ;
  tic.'GDR'  =  'KCHT' $vtf   'VECT' 'SOMMET' (0.0 0.0 gdrz)    ;
  'SINON' ;
  tic.'GDR'  =  'KCHT' $vtf   'VECT' 'SOMMET' (0.0 gdrz)     ;
  'FINSI' ;
  Finsi;

  Si(exist tic 'KDIS');
  tic.'KDIS' =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'KDIS')      ;
  Sinon;
  tic.'KDIS' =  'KCHT' $vtf   'SCAL' 'SOMMET' (1.0)             ;
  Finsi;

  Si(exist tic 'KGAS');
  tic.'KGAS' =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'KGAS')      ;
  Sinon;
  tic.'KGAS' =  'KCHT' $vtf   'SCAL' 'SOMMET' (1.0)             ;
  Finsi;

  rvn.'PASDETPS' = rv.'PASDETPS'                                ;
  rvn.inco                =  tic                                ;
  rvn.'METHINV'.TYPINV    = TBT.'TYPINV'                        ;
  rvn.'METHINV'.TYPRENU=TBT.'RENU'                              ;
  rvn.'METHINV'.IMPINV    =   TBT.'nimpr'                       ;
  rvn.'METHINV'.NITMAX    =  NTIT                               ;
  rvn.'METHINV'.PRECOND   =    3                                ;
  rvn.'METHINV'.'FCPRECI' = FCPRECI                             ;
  rvn.'METHINV'.'FCPRECT' = FCPRECT                             ;
  rvn.'METHINV'.'CALPREC' = calprec                             ;
  rvn.'METHINV'.RESID     =    1.0e-10                          ;

  TBT.'RVN'               =  rvn                                ;




********************** EQEX XD ****************************

  rxd = 'EQEX' 'NITER' 1 'OMEGA' 1.0 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG' 'NOCONS'
        'ZONE'  $vtf  'OPER'  'KONV' 1.0  'VN'   0.0 'INCO' 'XD'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE'  $vtf  'OPER' 'FIMP' 'SXD'            'INCO' 'XD'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE'  $vtf  'OPER' 'DFDT'  1.0 'XDM'  DTX 'INCO' 'XD'
                                                                ;
  rxd = 'EQEX' rxd 'CLIM'
        'XD' 'TIMP' toitf  0.0
        'XD' 'TIMP' aspinj xdinj                                ;

  Si(exist tic 'XD');
  tic.'XD'   =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'XD')        ;
  Sinon ;
  tic.'XD'   =  'KCHT' $vtf   'SCAL' 'SOMMET' (0.0)             ;
  Finsi ;

  Si(exist tic 'XDM');
  tic.'XDM'  =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'XDM')       ;
  Sinon ;
  tic.'XDM'  =  'KCHT' $vtf   'SCAL' 'SOMMET' (0.0)             ;
  Finsi ;

  Si(exist tic 'SXD');
  tic.'SXD'  =  'KCHT' $vtf   'SCAL' 'CENTRE' (tic.'SXD')       ;
  Sinon ;
  tic.'SXD'  =  'KCHT' $vtf   'SCAL' 'CENTRE' (0.0)             ;
  Finsi ;

  rxd.'PASDETPS' = rv.'PASDETPS'                                ;
  rxd.inco                = tic                                 ;
  rxd.'METHINV'.TYPINV    =  TBT.'TYPINV'                       ;
  rxd.'METHINV'.TYPRENU=TBT.'RENU'                              ;
  rxd.'METHINV'.IMPINV    =   TBT.'nimpr'                       ;
  rxd.'METHINV'.NITMAX    = NTIT                                ;
  rxd.'METHINV'.PRECOND   =   3                                 ;
  rxd.'METHINV'.'FCPRECI' = FCPRECI                             ;
  rxd.'METHINV'.'FCPRECT' = FCPRECT                             ;
  rxd.'METHINV'.'CALPREC' = calprec                             ;
  rxd.'METHINV'.RESID     =   1.0e-10                           ;

  TBT.'RXD'               = rxd                                 ;

********************** EQEX DD ****************************

  rdd = 'EQEX' 'NITER' 1 'OMEGA' 1.0 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG'
        'ZONE' $vtf 'OPER' 'KONV' 1.0 'VN' 0.0 'INCO' 'DD'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE' $vtf 'OPER' 'FIMP' 'SDIA'       'INCO' 'DD'
        'OPTI' 'EFM1' 'CENTREE'
        'ZONE' $vtf 'OPER' 'DFDT' 1.0 'DDM' DTX 'INCO' 'DD'    ;
                                                                ;
  rdd = 'EQEX' rdd 'CLIM'
  'DD' 'TIMP' toitf  ddinj                                      ;

  Si(exist tic 'DD');
  tic.'DD'   =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'DD')        ;
  Sinon;
  tic.'DD'   =  'KCHT' $vtf   'SCAL' 'SOMMET' (ddinj)           ;
  Finsi;

  Si(exist tic 'DDM');
  tic.'DDM'  =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'DDM')       ;
  Sinon;
  tic.'DDM'  =  'KCHT' $vtf   'SCAL' 'SOMMET' (ddinj)           ;
  Finsi;

  Si(exist tic 'SDIA');
  ma=extr tic.'SDIA' MAILLAGE ;
  ms=doma $vtf 'CENTRE';
  ELIM (ma et ms) epsi ;
  tic.'SDIA' =  'KCHT' $vtf   'SCAL' 'CENTRE' (tic.'SDIA')      ;
  Sinon;
  tic.'SDIA' =  'KCHT' $vtf   'SCAL' 'CENTRE' (0.0  )           ;
  Finsi;

  rdd.'PASDETPS' = rv.'PASDETPS'                                ;
  rdd.inco                = tic                                 ;
  rdd.'METHINV'.TYPINV    =  TBT.'TYPINV'                       ;
  rdd.'METHINV'.TYPRENU=TBT.'RENU'                              ;
  rdd.'METHINV'.IMPINV    =   TBT.'nimpr'                       ;
  rdd.'METHINV'.NITMAX    = NTIT                                ;
  rdd.'METHINV'.PRECOND   =   3                                 ;
  rdd.'METHINV'.'FCPRECI' = FCPRECI                             ;
  rdd.'METHINV'.'FCPRECT' = FCPRECT                             ;
  rdd.'METHINV'.'CALPREC' = calprec                             ;
  rdd.'METHINV'.RESID     =   1.0e-10                           ;

  TBT.'RDD'               = rdd                                 ;

********************** EQEX TD + TF ***********************

  rtd = 'EQEX' 'NITER' 1 'OMEGA' 1.0 'ITMA' 0
    'OPTI' TBT.'FEF' TBT.'FIMPL' 'SUPG'
   'ZONE'  $vtf  'OPER'  'TSCA' 1. 'VN' nup  0.0     'INCO' 'TD'
   'OPTI' 'EFM1' 'CENTREE'
*   'ZONE'  $vtf  'OPER' 'DFDT' 'HDIS' 'TFNM' 1.0     'INCO' 'TD'
*   'ZONE'  $vtf  'OPER' 'PENCECHI' 'HDIS' 'TFNM' 1.0     'INCO' 'TD'
   'ZONE'  $vtf  'OPER' 'PENCECHI' 'HDIS' 'TF' 1.0     'INCO' 'TD'
   'OPTI' 'EFM1' 'CENTREE'
   'ZONE'  $vtf  'OPER' 'FIMP' 'STD'                 'INCO' 'TD'
   'OPTI' 'EFM1' 'CENTREE'
   'ZONE'  $vtf  'OPER' 'DFDT'  1.0   'TDM'  DTX    'INCO' 'TD' ;
  rtd = 'EQEX' rtd CLIM
  TD TIMP aspinj tdinj                                          ;
* Utilisation de tbt par PENCECHI
  rtd . 'TBT' = tbt ;

  rtf = 'EQEX' rtf
  'OPTI' 'EFM1' 'CENTREE'
  'ZONE'  $vtf  'OPER' 'PENCECHI' 'HGAS' 'TD' 1.0 'INCO' 'TF'      ;
*  'ZONE'  $vtf  'OPER' 'PENCECHI' 'HGAS' 'TDM' 1.0 'INCO' 'TF'      ;
*  'ZONE'  $vtf  'OPER' 'DFDT' 'HGAS' 'TDM' 1.0 'INCO' 'TF'      ;
* Utilisé par PENCECHI
   rtf . 'TBT' = tbt ;

  Si(exist tic 'TD');
  tic.'TD'   =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'TD')        ;
  Sinon;
  tic.'TD'   =  'KCHT' $vtf   'SCAL' 'SOMMET' (tdinj)           ;
  Finsi;

  Si(exist tic 'TDM');
  tic.'TDM'  =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'TDM')       ;
  Sinon;
  tic.'TDM'  =  'KCHT' $vtf   'SCAL' 'SOMMET' (tdinj)           ;
  Finsi;

  Si(exist tic 'HDIS');
  tic.'HDIS' =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'HDIS')      ;
  Sinon;
  tic.'HDIS' =  'KCHT' $vtf   'SCAL' 'SOMMET' (0.0)             ;
  Finsi;

  Si(exist tic 'HGAS');
  tic.'HGAS' =  'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'HGAS')      ;
  Sinon;
  tic.'HGAS' =  'KCHT' $vtf   'SCAL' 'SOMMET' (0.0)             ;
  Finsi;

  Si(exist tic 'STD');
  tic.'STD'  =  'KCHT' $vtf   'SCAL' 'CENTRE' (tic.'STD')       ;
  Sinon;
  tic.'STD'  =  'KCHT' $vtf   'SCAL' 'CENTRE' (0.0)             ;
  Finsi;


  rtd.'PASDETPS' = rv.'PASDETPS'                                ;
  rtd.inco                = tic                                 ;
  rtd.'METHINV'.TYPINV    =  TBT.'TYPINV'                       ;
  rtd.'METHINV'.TYPRENU=TBT.'RENU'                              ;
  rtd.'METHINV'.IMPINV    =   TBT.'nimpr'                       ;
  rtd.'METHINV'.NITMAX    = NTIT                                ;
  rtd.'METHINV'.PRECOND   =   3                                 ;
  rtd.'METHINV'.'FCPRECI' = FCPRECI                             ;
  rtd.'METHINV'.'FCPRECT' = FCPRECT                             ;
  rtd.'METHINV'.'CALPREC' = calprec                             ;
  rtd.'METHINV'.RESID     =   1.0e-10                           ;

  TBT.'RTD'               = rtd                                 ;

********************** EQEX RVP + RHO *********************

  Rrvap = 'EQEX' Rrvap
          'OPTI' 'EFM1' 'CENTREE'
          'ZONE'  $vtf  'OPER' 'FIMP' 'SRVP' 'INCO' 'RVP'       ;


  Si(exist tic 'SRVP');
  tic.'SRVP' =  'KCHT' $vtf   'SCAL' 'CENTRE' (tic.'SRVP')      ;
  Sinon;
  tic.'SRVP' =  'KCHT' $vtf   'SCAL' 'CENTRE' (0.0)             ;
  Finsi;

'FINSI'                                                         ;

*-------------------------------------------------------------
* FIN DE LA DISCRETISATION DES EQUATIONS EQEX
*-------------------------------------------------------------

mess ' ==> VERIFICATION COMPATIBILITE INITIALISATION  <==     ' ;
*************************************
**** initialisations temporaires ****
*************************************

 Si(non(exist tic 'NUPADT'));
 tic.'NUPADT'=0 ;
 Finsi;

* A/ Suivi temporel
*------------------
* LTPS  : liste des temps calcules (s)
* LMAXU : module maximum de la vitesse (m/s)
* Rhom : densite du mélange (kg/m3)
* Rhomv : densite de vapeur dans le mélange (kg/m3)    (Si VAPEUR VRAI)
* Rhomvg: densite de vapeur + brouillard dans le mélange (kg/m3)
*
* Rhomhe: densite de helium dans le mélange (kg/m3)    (Si THE    VRAI)
* Rhomh2: densite de h2     dans le mélange (kg/m3)    (Si TH2    VRAI)
* Rhomo2: densite de o2     dans le mélange (kg/m3)    (Si TO2    VRAI)
* Rhomn2: densite de n2     dans le mélange (kg/m3)    (Si Tn2    VRAI)
* Rhomco: densite de CO     dans le mélange (kg/m3)    (Si Tco    VRAI)
* Rhomco2 : densite de CO2 dans le mélange (kg/m3)     (Si Tco2   VRAI)
* Rhomco2 : densite de l'air dans le mélange (kg/m3)
* Tfm : temperature moyenne du fluide (Celsius)
* Tpm : Température moyenne paroi (Celsius)            (Si THERMP VRAI)
* Tpcm: Température ???           (Celsius)            (Si TTIMP  VRAI)
* Qc : debit de condensation total (kg/s)   (masse et paroi)
* Econd : energie extraite par condensation (J/m3)
* Hcond : enthalpie extraite par condensation (J/m3)
* Econv : energie de convection (J/m3)
* Easpe : energie extraite par l'aspersion (J/m3)      (Si ASPER  VRAI)
* Haspe : enthalpie extraite par l'aspersion (J/m3)    (Si ASPER  VRAI)
* Qaspe : debit aspersion  (kg/s)                      (Si ASPER  VRAI)
* Remn : énergie interne spécifique du mélange (J/m3)
* Rgpm : constante de gaz parfaits du mélange (J/kg/K)
* Cvm Cpm Gamm : capacite calorifique du mélange (J/kg/K) et rapport
* Roj : densite a l'injection (kg/m3)
* Ltbpi : température imposée (TTIMP) stoké dans rxt.'TIMP'.'TIMPI'
* Ltbp1 : température imposée (TTIMP1)
* Ltbp2 : température imposée (TTIMP2)
* Ltbp3 : température imposée (TTIMP3)
* Ltbp0 : température moyenne définie par l'utilisateur (TECHANP)

 ndli=(dime tic.'LTPS')                                         ;


* Calcul de la masse initiale
 REm0        = Rho0 '*' Cvm '*' (Tf0 '+' 273.15)               ;
 Mrest       = Rvap0 * Vtotal                                  ;

* Calcul de Econv initial
Econvw = 0.0                                             ;
Econv1 = 0.0                                             ;
Econv2 = 0.0                                             ;
Econv3 = 0.0                                             ;
Econv0 = 0.0                                             ;

Ltbp1 = 0.0 ; Ltbp2 = 0.0 ; Ltbp3 = 0.0 ; Ltbp0 = 0.0 ;

'SI'((TBT.'THERMP') et (TBT.'TPAROIF'));
* Energie extraite du gaz par convection
   Tfpw        = rxt.'TF0'           ;
   Tbpw        = rxt.'Tp0'           ;
   Hconvw      = rxt.'ECHAN'         ;
   Surfw       = GEO.'Sparoif'       ;
   Econvw      = Hconvw '*' (Tfpw '-' Tbpw) '*' Surfw  ;
*Mess '!!!!!!!!' ;
*Mess ' Bizarre Bizarre Econvw n est valable qu à l initialisation';
*Mess '!!!!!!!!' ;
'FINSI'                                                ;

   Econvi=0.                                             ;
'SI' TTIMP                                               ;
   NBTIMP=dime (rxt.'TIMP')                              ;
   itimp=INDEX (rxt.'TIMP')                              ;
  REPETER BBTIMP NBTIMP                                  ;
   Btimp=rxt.'TIMP'.(itimp.&BBTIMP)                      ;
* Energie extraite du gaz par convection
   Tfpi        = rxt.'TF0'                  ;
   Ltbpi       = EXTR Btimp.'TIMP' 1        ;
   Btimp.'Ltbpi'=Btimp.'Ltbpi' et (Prog Ltbpi);
   Hconvi      = Btimp.'ECHAN'              ;
   Surfi       = Btimp.'Smtpi'              ;
   Econvi      = Econvi +
  (Hconvi '*' (Tfpi '-' Ltbpi) '*' Surfi)   ;
  FIN BBTIMP                                             ;
'FINSI'                                                  ;

'SI' TBT.'TTIMP1'                           ;
* Energie extraite du gaz par convection
   Tfp1        = rxt.'TF0'                  ;
   Ltbp1       = EXTR rxt.'TIMP1'.'TIMP' 1  ;
   Hconv1      = rxt.'TIMP1'.'ECHAN'        ;
   Surf1       = GEO.'Smtp1'                ;
   Econv1      = Hconv1 '*' (Tfp1 '-' Ltbp1) '*' Surf1   ;
'FINSI'                                                  ;

'SI' TBT.'TTIMP2'                           ;
* Energie extraite du gaz par convection
   Tfp2        = rxt.'TF0'                  ;
   Ltbp2       = EXTR rxt.'TIMP2'.'TIMP' 1  ;
   Hconv2      = rxt.'TIMP2'.'ECHAN'        ;
   Surf2       = GEO.'Smtp2'                ;
   Econv2      = Hconv2 '*' (Tfp2 '-' Ltbp2) '*' Surf2   ;
'FINSI'                                                  ;

'SI' TBT.'TTIMP3'                           ;
* Energie extraite du gaz par convection
   Tfp3        = rxt.'TF0'                  ;
   Ltbp3       = EXTR rxt.'TIMP3'.'TIMP' 1  ;
   Hconv3      = rxt.'TIMP3'.'ECHAN'        ;
   Surf3       = GEO.'Smtp3'                ;
   Econv3      = Hconv3 '*' (Tfp3 '-' Ltbp3) '*' Surf3   ;
'FINSI'                                                  ;

'SI' TBT.'TECHANP'                          ;
* Energie extraite du gaz par convection
   Tfp0        = rxt.'TF0'                  ;
   Ltbp0       = rxt.'ECHANP'.'TMUR'        ;
   Hconv0      = rxt.'ECHANP'.'ECHAN'       ;
   Surf0       = GEO.'Smtp0'                ;
   Econv0      = Hconv0 '*' (Tfp0 '-' Ltbp0) '*' Surf0   ;
'FINSI'                                                  ;

   Econv = Econvw '+' Econvi '+'
           Econv1 '+' Econv2 '+' Econv3 '+' Econv0 ;
*MESS 'Econv = ' Econv ;

* Identification des LISTREELs
tic.'Lg0D'= tic.'Lg0D'
et   ('MOTS'  'LMAX' 'U   ' 'Rhom' 'n   ' 'Rhom' 'v   ' 'Rhom' 'he  '
'Rhom' 'h2  ' 'Rhom' 'o2  ' 'Rhom' 'n2  ' 'Rhom' 'co  ' 'Rhom' 'co2 '
'Rhom' 'air ' 'Rhom' 'vg  '
'Tfm ' '    ' 'Tpm ' '    ' 'Qc  ' '    ' 'Econ' 'd   ' 'Hcon' 'd   '
'Econ' 'v   ' 'Easp' 'e   ' 'Hasp' 'e   ' 'Qasp' 'e   ' 'Remn' '    '
'Rgpm' '    ' 'Cvm ' '    ' 'Gamm' '    ' 'Cpm ' '    ' 'PT  ' '    '
);
tic.'Lg0D'=tic.'Lg0D' et ('MOTS'
'dPdt' '    ' 'guj ' '    ' 'guj2' '    ' 'Qj  ' '    ' 'Qj2 ' '    '
'Ksi ' '    ' 'Ksi2' '    ' 'Ksi3' '    '
'Minj' '    ' 'Mcon' 'd   ' 'Mres' 't   ' 'Hj  ' '    ' 'Ej  ' '    '
'Hj2 ' '    ' 'Ej2 ' '    ' 'guj3' '    ' 'Qj3 ' '    ' 'Hj3 ' '    '
'Ej3 ' '    ' 'Ltbp' '1   ' 'Ltbp' '2   ' 'Ltbp' '3   ' 'Rliq' 'm   '
'Rbro' 'm   ' 'Qlj ' '    ' 'Qlj2' '    ' 'Qlj3' '    ' 'Hlj ' '    '
'Hlj2' '    ' 'Hlj3' '    ' 'Mliq' 'puis' 'Hliq' 'puis' '    ' '    ');
tic.'Lg0D'=tic.'Lg0D' et ('MOTS'
'Qlj ' '    ' 'Qlj2' '    ' 'Qlj3' '    ' 'Hlj ' '    ' 'Hlj2' '    '
'Hlj3' '    ' 'Tinj' '    ' 'Tinj' '2   ' 'Tinj' '3   ' '    ' '    '
);

* Valeur d'initialisation par défaut
tic.'Li0D'= tic.'Li0D'
et   ('PROG'   0.            Rho0          Rvap0         Rhe0
 Rh20          Ro20          Rn20          Rco0          Rco20
 Rair0         Rvap0
 Tf0           Tpm0          0.            0.            0.
 Econv         0.            0.            0.            REm0
 Rgpm          Cvm           Gamm          Cpm           PT0
);
tic.'Li0D'=tic.'Li0D' et ('PROG'
 0.            0.            0.            0.            0.
 1.            1.            1.
 0.            0.            Mrest         0.            0.
 0.            0.            0.            0.            0.
 0.            Ltbp1         Ltbp2         Ltbp3         0.
 0.            0.            0.            0.            0.
 0.            0.            0.            0.            0. );
tic.'Li0D'=tic.'Li0D' et ('PROG'
 0.            0.            0.            0.            0.
 0.            0.            0.            0.            0. );

* L'ajustement se fait à la fin du paragraphe B/ apres
* avoir complété le tableau Lg0D (voir Ajustement)

* Modif. FP 19/05/00
 'SI' (TBT.'CONDMAS');
* Rliqm : Densité moyenne (rapportée au volume) du liquide
    'SI' ('NON' ('EXISTE' tic 'Rliqm'));
       tic.'Rliqm' = 'PROG' ndli * 0.;
    'FINSI';
    'SI' ('NON' ('EXISTE' tic 'Rbrom'));
       tic.'Rbrom' = 'PROG' ndli * 0.;
    'FINSI';
 'FINSI';

 Roj         = Rho0                                            ;

* PT : pression totale (Pa)
* dPdt : variation temporelle de la pression (J/m3/s)
* guj : vitesse injection (m/s) 1ère brèche
* guj2: vitesse injection (m/s) 2ème brèche
* Minj : masse totale injectee (kg)
* Mcond : masse totale condensee (kg)
* Mrest : masse de vapeur restante dans l'enceinte (kg)
* Hj : enthalpie injection (J/Kg)
* Ej : energie interne injection (J/Kg)
* Emur : energie stockee dans le mur (J/Kg)


 'SI' TBT.'THERMP'                                            ;
      Emur0 = rxt.'ROCP' * (rxt.'Tp0' + 273.15)           ;
      Si(non(exist tic 'Emur'));
      tic.'Emur' = 'PROG' ndli * Emur0                        ;
      Finsi;
 'FINSI'                                                      ;
*
*
*------------------------------------------------------------
* Sauvegarde des corrections pour bilan 0D : on garde la cor-
* rection si 0D ou le max et le min si multiD
* Sur les especes : c'est MultiD
* Sur Rho : c'est 0D
* Sur Tf : c'est MultiD
 tic.'drho' = 'PROG' ndli * 0.0                               ;
 tic.'MdTf' = 'PROG' ndli * 0.0                               ;
 tic.'mdTf' = 'PROG' ndli * 0.0                               ;
 'SI' TBT.'VAPEUR'                                            ;
 tic.'Mdrvap' = 'PROG' ndli * 0.0                             ;
 'FINSI'                                                      ;
 'SI' TBT.'THE'                                               ;
 tic.'Mdrhe' = 'PROG' ndli * 0.0                              ;
 'FINSI'                                                      ;
 'SI' TBT.'TH2'                                               ;
 tic.'Mdrh2' = 'PROG' ndli * 0.0                              ;
 'FINSI'                                                      ;
 'SI' TBT.'TO2'                                               ;
 tic.'Mdro2' = 'PROG' ndli * 0.0                              ;
 'FINSI'                                                      ;
 'SI' TBT.'TN2'                                               ;
 tic.'Mdrn2' = 'PROG' ndli * 0.0                              ;
 'FINSI'                                                      ;
 'SI' TBT.'TCO'                                               ;
 tic.'Mdrco' = 'PROG' ndli * 0.0                              ;
 'FINSI'                                                      ;
 'SI' TBT.'TCO2'                                              ;
 tic.'Mdrco2' = 'PROG' ndli * 0.0                             ;
 'FINSI'                                                      ;
*Il y a toujours de l'air
 tic.'Mdrair' = 'PROG' ndli * 0.0                             ;
*------------------------------------------------------------
* B/ CHPOINT
*-----------

 'SI' TBT.'THERMP'                                           ;
      Si(exist tic 'TP')                                     ;
      ma=extr tic.'TP' MAILLAGE                              ;
      ms=doma GEO.'$vtp' 'SOMMET'                            ;
      ELIM (ma et ms) epsi                                   ;
      tic.'TP' = 'KCHT' GEO.'$vtp' 'SCAL' 'SOMMET' (tic.'TP');
      Sinon                                                  ;
      tic.'TP' = 'KCHT' GEO.'$vtp' 'SCAL' 'SOMMET' tp0       ;
      Finsi                                                  ;

      Si(exist tic 'TPNM');
      tic.'TPNM' = 'KCHT' GEO.'$vtp' 'SCAL' 'SOMMET' (tic.'TPNM');
      Sinon ;
      tic.'TPNM' = 'KCHT' GEO.'$vtp' 'SCAL' 'SOMMET' tp0         ;
      Finsi ;

 'FINSI'                                                     ;

 Si(exist tic 'TF');
 tic.'TF'    = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'TF')      ;
 Sinon ;
 tic.'TF'    = 'KCHT' $vtf   'SCAL' 'SOMMET' tf0             ;
 Finsi ;

 Si(exist tic 'TFNM');
 tic.'TFNM'  = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'TFNM')    ;
 Sinon ;
 tic.'TFNM'  = 'KCHT' $vtf   'SCAL' 'SOMMET' tf0             ;
 Finsi ;

 Si(exist tic 'RHO');
 tic.'RHO'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RHO')     ;
 Sinon ;
 tic.'RHO'   = 'KCHT' $vtf   'SCAL' 'SOMMET' rho0            ;
 Finsi ;

 Si(exist tic 'RHONM');
 tic.'RHONM' = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RHONM')   ;
 Sinon ;
 tic.'RHONM' = 'KCHT' $vtf   'SCAL' 'SOMMET' rho0            ;
 Finsi ;

* Cas avec Fonctions de PAROI
 'SI' TBT.'FPAROI'                                           ;
 Si(exist tic 'UET');
 tic.'UET' = 'KCHT' (GEO.'$menvfU') 'SCAL'
                                    ('CHAI' TBT.'SPGNU') (tic.'UET');
 Sinon ;
 tic.'UET' = 'KCHT' (GEO.'$menvfU') 'SCAL' ('CHAI' TBT.'SPGNU') 1.e-5;
 Finsi ;
 'FINSI'                                                     ;

* Cas avec Vapeur donc eventuellement condensation
 'SI' TBT.'VAPEUR'                                           ;
   Si(exist tic 'RVP')                                       ;
   tic.'RVP'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RVP')   ;
   Sinon                                                     ;
   tic.'RVP'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Rvap0         ;
   Finsi                                                     ;

   Si(exist tic 'ROVP')                                      ;
   tic.'ROVP'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'ROVP') ;
   Sinon                                                     ;
   tic.'ROVP'   = tic.'RVP'                                  ;
   Finsi                                                     ;

   Si(exist tic 'RVPNM')                                     ;
   tic.'RVPNM' = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RVPNM') ;
   Sinon                                                     ;
   tic.'RVPNM' = 'KCHT' $vtf   'SCAL' 'SOMMET' Rvap0         ;
   Finsi                                                     ;

   Si(exist tic 'YVAP')                                      ;
   tic.'YVAP'  = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'YVAP')  ;
   Sinon                                                     ;
   tic.'YVAP'  = 'KCHT' $vtf   'SCAL' 'SOMMET' Yvap0         ;
   Finsi                                                     ;
 'FINSI'                                                     ;

 'SI' TBT.'TPAROIF'                                          ;
  Si (exist tic 'KKCW')                                      ;
   ma=extr tic.'KKCW' MAILLAGE                               ;
   ms=doma GEO.'$paroif' 'CENTRE'                            ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'KKCW' = 'KCHT' GEO.'$paroif' 'SCAL' 'CENTRE' (tic.'KKCW') ;
  Sinon ;
   tic.'KKCW' = 'KCHT' GEO.'$paroif' 'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

   'SI' TBT.'VAPEUR'                                         ;
     Si (exist tic 'ROVIW')                                  ;
      ma=extr tic.'ROVIW'  MAILLAGE                          ;
      ms=doma GEO.'$paroif' 'SOMMET'                         ;
      ELIM (ma et ms) GEO.'epsi'                             ;
   tic.'ROVIW' = 'KCHT' GEO.'$paroif' 'SCAL' 'SOMMET' (tic.'ROVIW') ;
     Sinon                                                   ;
   tic.'ROVIW' = 'KCHT' GEO.'$paroif' 'SCAL' 'SOMMET'
                              ('REDU' tic.'RVP' GEO.'paroif');
     Finsi                                                   ;
   'FINSI'                                                   ;

  Si (exist tic 'FHPW')                                      ;
   tic.'FHPW' = 'KCHT' GEO.'$paroif' 'SCAL' 'CENTRE' (tic.'FHPW') ;
  Sinon ;
   tic.'FHPW' = 'KCHT' GEO.'$paroif' 'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

  tic.'Lg0D'=tic.'Lg0D' et ('MOTS' 'Mcon' 'dw  ' 'Qcw ' '    ');
  tic.'Li0D'=tic.'Li0D' et ('PROG'  0.            0.          );

 'FINSI'                                                     ;

  tic.'Lg0D'=tic.'Lg0D' et ('MOTS' 'Mcon' 'dm  ' 'Qcm ' '    ');
  tic.'Li0D'=tic.'Li0D' et ('PROG'  0.            0.          );


 'SI' TTIMP                                                  ;
   NBTIMP=dime (rxt.'TIMP')                              ;
   itimp=INDEX (rxt.'TIMP')                              ;
  REPETER BBTIMP NBTIMP                                  ;
   Btimp=rxt.'TIMP'.(itimp.&BBTIMP)                      ;

   CKKC1=Btimp.'KKC1'                                    ;
  Si (exist tic CKKC1)                                   ;
   ma=extr (tic.CKKC1) MAILLAGE                          ;
   ms=doma Btimp.'$mtpi' 'CENTRE'                        ;
   ELIM (ma et ms) GEO.'epsi'                            ;
   tic.CKKC1 = 'KCHT' Btimp.'$mtpi' 'SCAL' 'CENTRE' (tic.CKKC1);
  Sinon ;
   tic.CKKC1='KCHT' Btimp.'$mtpi' 'SCAL' 'CENTRE' 0.     ;
  Finsi                                                  ;

   CKH1=Btimp.'KH1'                                          ;
  Si (exist tic CKH1)                                        ;
   ma=extr (tic.CKH1) MAILLAGE                               ;
   ms=doma Btimp.'$mtpi' 'CENTRE'                            ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.CKH1 = 'KCHT' Btimp.'$mtpi' 'SCAL' 'CENTRE' (tic.CKH1);
  Sinon ;
   tic.CKH1 = 'KCHT' Btimp.'$mtpi'   'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

   'SI' TBT.'VAPEUR'                                         ;
   CROVI1=Btimp.'ROVI1'                                  ;
  Si (exist tic CROVI1)                                      ;
   ma=extr (tic.CROVI1)  MAILLAGE                            ;
   ms=doma Btimp.'$mtpi'   'SOMMET'                          ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.CROVI1='KCHT' Btimp.'$mtpi' 'SCAL' 'SOMMET' (tic.CROVI1);
  Sinon ;
   tic.CROVI1= 'KCHT' Btimp.'$mtpi'   'SCAL' 'SOMMET'
                              ('REDU' tic.'RVP' Btimp.'mtpi');
  Finsi                                                      ;
   'FINSI'                                                   ;
  CQc1=chai 'Qc1' &BBTIMP                                    ;
  CMcond1=chai 'Mcond1' &BBTIMP                              ;
  tic.CQc1=Prog 0.                                           ;
  tic.CMcond1=Prog 0.                                        ;

  CFHP1=Btimp.'FHP1'                                         ;
  Si (exist tic CFHP1)                                       ;
   tic.CFHP1 = 'KCHT' Btimp.'$mtpi' 'SCAL' 'CENTRE' (tic.CFHP1);
  Sinon ;
   tic.CFHP1 = 'KCHT' Btimp.'$mtpi'   'SCAL' 'CENTRE' 0.     ;
  Finsi                                                      ;


*?tic.'Lg0D'=tic.'Lg0D' et ('MOTS' 'Mcon' 'd1  ' 'Qc1 ' '    ');
*?tic.'Li0D'=tic.'Li0D' et ('PROG'  0.            0.          );

   FIN BBTIMP                                                ;
 'FINSI'                                                     ;

 'SI' TBT.'TTIMP1'                                           ;
   CKKC1 ='KKC1'                                             ;
  Si (exist tic CKKC1)                                       ;
   ma=extr (tic.CKKC1) MAILLAGE                              ;
   ms=doma GEO.'$mtp1' 'CENTRE'                              ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.CKKC1 = 'KCHT' GEO.'$mtp1'   'SCAL' 'CENTRE' (tic.CKKC1) ;
  Sinon ;
   tic.CKKC1 = 'KCHT' GEO.'$mtp1'   'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

  Si (exist tic 'KH1')                                       ;
   ma=extr tic.'KH1' MAILLAGE                                ;
   ms=doma GEO.'$mtp1' 'CENTRE'                              ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'KH1' = 'KCHT' GEO.'$mtp1' 'SCAL' 'CENTRE' (tic.'KH1');
  Sinon ;
   tic.'KH1' = 'KCHT' GEO.'$mtp1'   'SCAL' 'CENTRE' 0.       ;
  Finsi                                                      ;

   'SI' TBT.'VAPEUR'                                         ;
   CROVI1='ROVI1'                                            ;
  Si (exist tic CROVI1)                                      ;
   ma=extr tic.CROVI1  MAILLAGE                              ;
   ms=doma GEO.'$mtp1'   'SOMMET'                            ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.CROVI1 = 'KCHT' GEO.'$mtp1'   'SCAL' 'SOMMET' (tic.CROVI1) ;
  Sinon ;
   tic.CROVI1 = 'KCHT' GEO.'$mtp1'   'SCAL' 'SOMMET'
                              ('REDU' tic.'RVP' GEO.'mtp1'  );
  Finsi                                                      ;
   'FINSI'                                                   ;

  Si (exist tic 'FHP1')                                      ;
   tic.'FHP1' = 'KCHT' GEO.'$mtp1'   'SCAL' 'CENTRE' (tic.'FHP1') ;
  Sinon ;
   tic.'FHP1' = 'KCHT' GEO.'$mtp1'   'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

  tic.'Lg0D'=tic.'Lg0D' et ('MOTS' 'Mcon' 'd1  ' 'Qc1 ' '    ');
  tic.'Li0D'=tic.'Li0D' et ('PROG'  0.            0.          );

 'FINSI'                                                     ;

 'SI' TBT.'TTIMP2'                                           ;
  Si (exist tic 'KKC2')                                      ;
   ma=extr tic.'KKC2' MAILLAGE                               ;
   ms=doma GEO.'$mtp2' 'CENTRE'                              ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'KKC2' = 'KCHT' GEO.'$mtp2'   'SCAL' 'CENTRE' (tic.'KKC2') ;
  Sinon ;
   tic.'KKC2' = 'KCHT' GEO.'$mtp2'   'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

  Si (exist tic 'KH2')                                       ;
   ma=extr tic.'KH2' MAILLAGE                                ;
   ms=doma GEO.'$mtp2' 'CENTRE'                              ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'KH2' = 'KCHT' GEO.'$mtp2' 'SCAL' 'CENTRE' (tic.'KH2');
  Sinon ;
   tic.'KH2' = 'KCHT' GEO.'$mtp2'   'SCAL' 'CENTRE' 0.       ;
  Finsi                                                      ;

   'SI' TBT.'VAPEUR'                                         ;
  Si (exist tic 'ROVI2')                                     ;
   ma=extr tic.'ROVI2'  MAILLAGE                             ;
   ms=doma GEO.'$mtp2'   'SOMMET'                            ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'ROVI2' = 'KCHT' GEO.'$mtp2'   'SCAL' 'SOMMET' (tic.'ROVI2') ;
  Sinon ;
   tic.'ROVI2' = 'KCHT' GEO.'$mtp2'   'SCAL' 'SOMMET'
                              ('REDU' tic.'RVP' GEO.'mtp2'  );
  Finsi                                                      ;
   'FINSI'                                                   ;

  Si (exist tic 'FHP2')                                      ;
   tic.'FHP2' = 'KCHT' GEO.'$mtp2'   'SCAL' 'CENTRE' (tic.'FHP2') ;
  Sinon ;
   tic.'FHP2' = 'KCHT' GEO.'$mtp2'   'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

  tic.'Lg0D'=tic.'Lg0D' et ('MOTS' 'Mcon' 'd2  ' 'Qc2 ' '    ');
  tic.'Li0D'=tic.'Li0D' et ('PROG'  0.            0.          );

 'FINSI'                                                     ;

 'SI' TBT.'TTIMP3'                                           ;
  Si (exist tic 'KKC3')                                      ;
   ma=extr tic.'KKC3' MAILLAGE                               ;
   ms=doma GEO.'$mtp3' 'CENTRE'                              ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'KKC3' = 'KCHT' GEO.'$mtp3' 'SCAL' 'CENTRE' (tic.'KKC3');
  Sinon ;
   tic.'KKC3' = 'KCHT' GEO.'$mtp3'   'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

  Si (exist tic 'KH3')                                       ;
   ma=extr tic.'KH3' MAILLAGE                                ;
   ms=doma GEO.'$mtp3' 'CENTRE'                              ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'KH3' = 'KCHT' GEO.'$mtp3' 'SCAL' 'CENTRE' (tic.'KH3');
  Sinon ;
   tic.'KH3' = 'KCHT' GEO.'$mtp3'   'SCAL' 'CENTRE' 0.       ;
  Finsi                                                      ;

   'SI' TBT.'VAPEUR'                                         ;
  Si (exist tic 'ROVI3')                                     ;
   ma=extr tic.'ROVI3'  MAILLAGE                             ;
   ms=doma GEO.'$mtp3'   'SOMMET'                            ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'ROVI3' = 'KCHT' GEO.'$mtp3'   'SCAL' 'SOMMET' (tic.'ROVI3') ;
  Sinon ;
   tic.'ROVI3' = 'KCHT' GEO.'$mtp3'   'SCAL' 'SOMMET'
                              ('REDU' tic.'RVP' GEO.'mtp3'  );
  Finsi                                                      ;
   'FINSI'                                                   ;

  Si (exist tic 'FHP3')                                      ;
   tic.'FHP3' = 'KCHT' GEO.'$mtp3'   'SCAL' 'CENTRE' (tic.'FHP3') ;
  Sinon ;
   tic.'FHP3' = 'KCHT' GEO.'$mtp3'   'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

  tic.'Lg0D'=tic.'Lg0D' et ('MOTS' 'Mcon' 'd3  ' 'Qc3 ' '    ');
  tic.'Li0D'=tic.'Li0D' et ('PROG'  0.            0.          );

 'FINSI'                                                     ;
* Fin Cas avec Vapeur donc eventuellement condensation

 'SI' TBT.'TECHANP'                                          ;
  Si (exist tic 'KKC0')                                      ;
   ma=extr tic.'KKC0' MAILLAGE                               ;
   ms=doma GEO.'$mtp0' 'CENTRE'                              ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'KKC0' = 'KCHT' GEO.'$mtp0' 'SCAL' 'CENTRE' (tic.'KKC0');
  Sinon ;
   tic.'KKC0' = 'KCHT' GEO.'$mtp0'   'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

  Si (exist tic 'KH0')                                       ;
   ma=extr tic.'KH0' MAILLAGE                                ;
   ms=doma GEO.'$mtp0' 'CENTRE'                              ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'KH0' = 'KCHT' GEO.'$mtp0' 'SCAL' 'CENTRE' (tic.'KH0');
  Sinon ;
   tic.'KH0' = 'KCHT' GEO.'$mtp0'   'SCAL' 'CENTRE'
                                     (rxt.'ECHANP'.'ECHAN')  ;
  Finsi                                                      ;

   'SI' TBT.'VAPEUR'                                         ;
  Si (exist tic 'ROVI0')                                     ;
   ma=extr tic.'ROVI0'  MAILLAGE                             ;
   ms=doma GEO.'$mtp0'   'SOMMET'                            ;
   ELIM (ma et ms) GEO.'epsi'                                ;
   tic.'ROVI0' = 'KCHT' GEO.'$mtp0'   'SCAL' 'SOMMET' (tic.'ROVI0') ;
  Sinon ;
   tic.'ROVI0' = 'KCHT' GEO.'$mtp0'   'SCAL' 'SOMMET'
                              ('REDU' tic.'RVP' GEO.'mtp0'  );
  Finsi                                                      ;
   'FINSI'                                                   ;

  Si (exist tic 'FHP0')                                      ;
   tic.'FHP0' = 'KCHT' GEO.'$mtp0'   'SCAL' 'CENTRE' (tic.'FHP0') ;
  Sinon ;
   tic.'FHP0' = 'KCHT' GEO.'$mtp0'   'SCAL' 'CENTRE' 0.      ;
  Finsi                                                      ;

  tic.'Lg0D'=tic.'Lg0D' et ('MOTS' 'Mcon' 'd0  ' 'Qc0 ' '    ');
  tic.'Li0D'=tic.'Li0D' et ('PROG'  0.            0.          );

 'FINSI'                                                     ;
* Fin Cas avec Vapeur donc eventuellement condensation

 'SI' TBT.'THE'                                              ;
 Si(exist tic 'RHE');
 tic.'RHE'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RHE')     ;
 Sinon ;
 tic.'RHE'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Rhe0            ;
 Finsi ;

 Si(exist tic 'RHEM');
 tic.'RHEM'  = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RHEM')    ;
 Sinon ;
 tic.'RHEM'  = 'KCHT' $vtf   'SCAL' 'SOMMET' Rhe0            ;
 Finsi ;

 Si(exist tic 'YHE');
 tic.'YHE'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'YHE')     ;
 Sinon ;
 tic.'YHE'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Yhe0            ;
 Finsi ;

 'SINON'                                                     ;
 tic.'YHE'   = 0.                                            ;
 'FINSI'                                                     ;

 'SI' TBT.'TH2'                                              ;
 Si(exist tic 'RH2');
 tic.'RH2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RH2')     ;
 Sinon ;
 tic.'RH2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Rh20            ;
 Finsi ;

 Si(exist tic 'RH2M');
 tic.'RH2M'  = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RH2M')    ;
 Sinon ;
 tic.'RH2M'  = 'KCHT' $vtf   'SCAL' 'SOMMET' Rh20            ;
 Finsi ;

 Si(exist tic 'YH2');
 tic.'YH2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'YH2')     ;
 Sinon ;
 tic.'YH2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Yh20            ;
 Finsi ;

 'SINON'                                                     ;
 tic.'YH2'   = 0.                                            ;
 'FINSI'                                                     ;

 'SI' TBT.'TO2'                                              ;
 Si(exist tic 'RO2');
 tic.'RO2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RO2')     ;
 Sinon ;
 tic.'RO2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Ro20            ;
 Finsi ;

 tic.'RO2M'  = 'KCHT' $vtf   'SCAL' 'SOMMET' Ro20            ;
 Si(exist tic 'YO2');
 tic.'YO2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'YO2')     ;
 Sinon ;
 tic.'YO2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Yo20            ;
 Finsi ;

 'SINON'                                                     ;
 tic.'YO2'   = 0.                                            ;
 'FINSI'                                                     ;

 'SI' TBT.'TN2'                                              ;
 Si(exist tic 'RN2');
 tic.'RN2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RN2')     ;
 Sinon ;
 tic.'RN2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Rn20            ;
 Finsi ;

 Si(exist tic 'RN2M');
 tic.'RN2M'  = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RN2M')    ;
 Sinon ;
 tic.'RN2M'  = 'KCHT' $vtf   'SCAL' 'SOMMET' Rn20            ;
 Finsi ;

 Si(exist tic 'YN2');
 tic.'YN2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'YN2')     ;
 Sinon ;
 tic.'YN2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Yn20            ;
 Finsi ;

 'SINON'                                                     ;
 tic.'YN2'   = 0.                                            ;
 'FINSI'                                                     ;

 'SI' TBT.'TCO2'                                             ;

 Si(exist tic 'RCO2');
 tic.'RCO2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RCO2')   ;
 Sinon ;
 tic.'RCO2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Rco20          ;
 Finsi ;

 Si(exist tic 'RCO2M');
 tic.'RCO2M'  = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RCO2M')  ;
 Sinon ;
 tic.'RCO2M'  = 'KCHT' $vtf   'SCAL' 'SOMMET' Rco20          ;
 Finsi ;

 Si(exist tic 'YCO2');
 tic.'YCO2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'YCO2')   ;
 Sinon ;
 tic.'YCO2'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Yco20          ;
 Finsi ;

 'SINON'                                                     ;
 tic.'YCO2'   = 0.                                           ;
 'FINSI'                                                     ;

 'SI' TBT.'TAIR'                                             ;

 Si(exist tic 'RAIR');
 tic.'RAIR'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RAIR')   ;
 Sinon ;
 tic.'RAIR'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Rair0          ;
 Finsi ;

 Si(exist tic 'RAIRM');
 tic.'RAIRM'  = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RAIRM')  ;
 Sinon ;
 tic.'RAIRM'  = 'KCHT' $vtf   'SCAL' 'SOMMET' Rair0          ;
 Finsi ;

 Si(exist tic 'YAIR');
 tic.'YAIR'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'YAIR')   ;
 Sinon ;
 tic.'YAIR'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Yair0          ;
 Finsi ;

 'SINON'                                                     ;
 tic.'YAIR'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Yair0          ;
 'FINSI'                                                     ;

 'SI' TBT.'TCO'                                              ;

 Si(exist tic 'RCO');
 tic.'RCO'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RCO')     ;
 Sinon ;
 tic.'RCO'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Rco0            ;
 Finsi ;

 Si(exist tic 'RCOM');
 tic.'RCOM'  = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'RCOM')    ;
 Sinon ;
 tic.'RCOM'  = 'KCHT' $vtf   'SCAL' 'SOMMET' Rco0            ;
 Finsi ;

 Si(exist tic 'YCO');
 tic.'YCO'   = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'YCO')     ;
 Sinon ;
 tic.'YCO'   = 'KCHT' $vtf   'SCAL' 'SOMMET' Yco0            ;
 Finsi ;

 'SINON'                                                     ;
 tic.'YCO'    = 0.                                           ;
 'FINSI'                                                     ;

*****************************************************************
* Ajustement des LISTREELs                                      *
* On fait l'ajustement de listreel                              *
* après avoir complété le tableau Lg0D                          *
 Lg0D=tic.'Lg0D'                                                ;
 Li0D=tic.'Li0D'                                                ;
 nlg0D = (dime Lg0D) / 2                                        ;
 Repeter Bcli nlg0D                                             ;
 nm=chai (extr Lg0D (2 * &bcli - 1)) (extr Lg0D (2 * &bcli))    ;
 vm=extr Li0D &bcli                                             ;
 Si(non(exist tic nm))                                          ;
 tic.nm = 'PROG'  ndli * vm                                     ;
 Sinon                                                          ;
 ndlj=dime tic.nm                                               ;
  Si(< ndlj ndli)                                               ;
  mess 'NDLI=' ndli  'NDLj=' ndlj ;
  mess ' On ajuste tic.' nm ;
  tic.nm=('PROG' (ndli - ndlj)*0. ) et tic.nm                   ;
  Finsi                                                         ;
  Si(> ndlj ndli)                                               ;
  mess ' dimension de tic.' nm ' trop grande '                  ;
  mess ndlj ' alors que ce devrait être ' ndli                  ;
  mess ' On ne sait pas quoi faire           '                  ;
  erreur 5                                                      ;
  Finsi                                                         ;
 Finsi                                                          ;
 Fin Bcli                                                       ;

* Au tour des parois à T imposées
    'SI' TTIMP                                                  ;
       NBTIMP=dime (rxt.'TIMP')                                 ;
       itimp=INDEX (rxt.'TIMP')                                 ;
      REPETER BBTIMP NBTIMP                                     ;
       Btimp=rxt.'TIMP'.(itimp.&BBTIMP)                         ;
      CMcond1=Btimp.'Mcond1'                                    ;
 'SI' (EXIST tic.CMcond1)                                       ;
  ndlj=dime tic.CMcond1                                         ;
  Si(< ndlj ndli)                                               ;
  mess ' On ajuste tic.' CMcond1 ;
  tic.CMCOND1=('PROG' (ndli - ndlj)*0. ) et tic.CMCOND1         ;
  Finsi                                                         ;

  Si(> ndlj ndli)                                               ;
  mess ' dimension de tic.' cmcond1 ' trop grande '             ;
  mess ndlj ' alors que ce devrait être ' ndli                  ;
  mess ' On ne sait pas quoi faire           '                  ;
  erreur 5                                                      ;
  Finsi                                                         ;

  'FINSI'                                                       ;
  FIN BBTIMP                                                    ;
 'FINSI'                                                        ;
* Fin des parois à T imposées

*****************************************************************


*-------------------------------------------------------
* C/ FLOTTANT ou LOGIQUE

Si(non(exist tic 'Tps'));
tic.'Tps'  = 0.0                                             ;
Finsi ;

Si(exist tic 'Rgp') ;
  ma=extr tic.'Rgp' MAILLAGE ;
  ms=doma $vtf 'SOMMET';
  ELIM (ma et ms) epsi ;
 tic.'Rgp'    = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'Rgp')    ;
sinon ;
 tic.'Rgp'   = Rgp                                           ;
finsi ;

Si(exist tic 'Rgpi') ;
  ma=extr tic.'Rgpi' MAILLAGE ;
  ms=doma $vtf 'SOMMET';
  ELIM (ma et ms) epsi ;
 tic.'Rgpi'    = 'KCHT' $vtf   'SCAL' 'SOMMET' (tic.'Rgpi')  ;
sinon ;
 syi=tic.'YHE' + tic.'YH2' + tic.'YO2' + tic.'YN2' + tic.'YCO2' +
     tic.'YCO' + tic.'YAIR'                                  ;
 Rit =inve syi                                               ;
 Yihe = tic.'YHE' * Rit  ; Yih2 = tic.'YH2' * Rit ;
 Yio2 = tic.'YO2' * Rit  ; Yin2 = tic.'YN2' * Rit ;
 Yico2= tic.'YCO2' * Rit ; Yico = tic.'YCO' * Rit ;
 Yiair= tic.'YAIR' * Rit ;
 Rgpi =                         (Rgair '*' Yiair)
        '+' (Rghe '*' Yihe ) '+' (Rgh2  '*' Yih2 )
        '+' (Rgo2 '*' Yio2 ) '+' (Rgn2  '*' Yin2 )
        '+' (Rgco '*' Yico ) '+' (Rgco2 '*' Yico2 )      ;
 tic.'Rgpi'   = Rgpi                                         ;
finsi ;

Si(exist tic 'Mu');
tic.'Mu'= kcht $vtf scal sommet (tic.'Mu') ;
sinon ;
tic.'Mu' = Mu                                                ;
finsi ;

TBT.'RV'=rv                                                  ;
TBT.'RRHO'=rrho                                              ;

 'SI' TBT.'VAPEUR'                                           ;
     TBT.'Rrvap'=Rrvap                                       ;
'FINSI'                                                      ;
'SI' TBT.'THE'                                               ;
     TBT.'Rrhe'=Rrhe                                         ;
'FINSI'                                                      ;
'SI' TBT.'TH2'                                               ;
     TBT.'Rrh2'=Rrh2                                         ;
'FINSI'                                                      ;
'SI' TBT.'TO2'                                               ;
      TBT.'Rro2'=Rro2                                        ;
'FINSI'                                                      ;
'SI' TBT.'TN2'                                               ;
      TBT.'Rrn2'=Rrn2                                        ;
'FINSI'                                                      ;
'SI' TBT.'TCO2'                                              ;
     TBT.'Rrco2'=Rrco2                                       ;
'FINSI'                                                      ;
'SI' TBT.'TAIR'                                              ;
     TBT.'Rrair'=Rrair                                       ;
'FINSI'                                                      ;
'SI' TBT.'TCO'                                               ;
     TBT.'Rrco'=Rrco                                         ;
'FINSI'                                                      ;

TBT.'RTF'=rtf                                                ;
'SI' TBT.'THERMP'                                            ;
     TBT.'RTP'=rtp                                           ;
'FINSI'                                                      ;

Si (Exist TBT 'MODTURB')                                 ;
Si ( Ega TBT.'MODTURB' 'KEPSILON')                       ;
   TBT.'Rrk'= Rrk                                        ;
   TBT.'Rre'= Rre                                        ;
Finsi                                                    ;
Finsi                                                    ;
*--------------------------------------------------------
*--------------------------------------------------------
* D/ APERSION
'SI' TBT.'ASPER'                                         ;
GEO.'$aspinj'= $aspinj                                   ;
GEO.'$toitf'  = $toitf                                   ;
'FINSI'                                                  ;

* RECOMBINEUR
'SI' TBT.'TRECOMB' ;
  'SI' ('NON' ('EXIS' TIC 'RECOMB')) ;
    TIC . 'RECOMB' = 'TABLE' ;
    NBREC = 'DIME' rxt . 'RECOMB' ;
    'REPETER' BCLREC NBREC ;

      TIC . 'RECOMB' . &BCLREC = 'TABLE' ;

      TIC . 'RECOMB' . &BCLREC . 'DEB'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'Uin'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'Uout' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'Tin'  = 'PROG' tf0 ;
      TIC . 'RECOMB' . &BCLREC . 'Tout' = 'PROG' tf0 ;
      TIC . 'RECOMB' . &BCLREC . 'Tpla' = 'PROG' (tf0 + 273.15) ;
      TIC . 'RECOMB' . &BCLREC . 'EFF'  = 'PROG' 0.0 ;

      TIC . 'RECOMB' . &BCLREC . 'YH2E'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YH2OE' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YO2E'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YN2E'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YHEE'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YCO2E' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YCOE'  = 'PROG' 0.0 ;

      TIC . 'RECOMB' . &BCLREC . 'RH2E'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RH2OE' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RO2E'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RN2E'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RHEE'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RCO2E' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RCOE'  = 'PROG' 0.0 ;

      TIC . 'RECOMB' . &BCLREC . 'YH2S'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YH2OS' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YO2S'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YN2S'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YHES'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YCO2S' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'YCOS'  = 'PROG' 0.0 ;

      TIC . 'RECOMB' . &BCLREC . 'RH2S'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RH2OS' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RO2S'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RN2S'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RHES'  = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RCO2S' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'RCOS'  = 'PROG' 0.0 ;

      TIC . 'RECOMB' . &BCLREC . 'Hin' = 'PROG' 0.0 ;
      TIC . 'RECOMB' . &BCLREC . 'Hout'= 'PROG' 0.0 ;
    'FIN' BCLREC ;

    TIC . 'QIN_H2'   = 'PROG' 0.0 ;
    TIC . 'QIN_H2O'  = 'PROG' 0.0 ;
    TIC . 'QIN_O2'   = 'PROG' 0.0 ;
    TIC . 'QIN_N2'   = 'PROG' 0.0 ;
    TIC . 'QIN_HE'   = 'PROG' 0.0 ;
    TIC . 'QIN_CO2'  = 'PROG' 0.0 ;
    TIC . 'QIN_CO'   = 'PROG' 0.0 ;

    TIC . 'QOUT_H2'  = 'PROG' 0.0 ;
    TIC . 'QOUT_H2O' = 'PROG' 0.0 ;
    TIC . 'QOUT_O2'  = 'PROG' 0.0 ;
    TIC . 'QOUT_N2'  = 'PROG' 0.0 ;
    TIC . 'QOUT_HE'  = 'PROG' 0.0 ;
    TIC . 'QOUT_CO2' = 'PROG' 0.0 ;
    TIC . 'QOUT_CO'  = 'PROG' 0.0 ;

  'FINSI' ;
'FINSI' ;

mess 'FIN PREPARATION - VERIFICATION - DEBUT ALGORITHME' ;
*** FIN PREPARATION - DEBUT ALGORITHME ******************
FINPROC;













