$$$$ FCOURANT
* FCOURANT  PROCEDUR  GOUNAND   18/10/25    21:15:01     9973
************************************************************************
* NOM         : FCOURANT
* DESCRIPTION : Calcul la fonction de courant en 2D et 2D Axi
*               par une méthode d'éléments finis moindres carrés
*
* LANGAGE     : GIBIANE-CAST3M
* AUTEUR      : Stéphane GOUNAND (CEA/DEN/DM2S/SFME/LTMF)
*               mél : gounand@semt2.smts.cea.fr
**********************************************************************
* VERSION    : v1, 22/11/2007, version initiale
* HISTORIQUE : v1, 22/11/2007, création
* HISTORIQUE : 2018/10/15 : 2eme forme en axi +  (fiche 9973)
*              composantes UR et UZ par defaut
*              recodage, utilisation RESO par defaut, utilisation GIBI.ERREUR
* HISTORIQUE :
************************************************************************
*
* Procedure fonction de courant 2D et 2D axi
*
*             psi est la fonction de courant (streamfunction)
* en 2D, on résout :   dpsi/dx =   u_y
*                      dpsi/dy = - u_x
*
*             psi est la fonction de courant (Stokes streamfunction)
*             B_\theta = psi / r est le potentiel vecteur (B_r = B_z =0)
*
*
* en 2D axi , on résout soit la forme "regularisee" :
*                         dpsi/dr  =   2 pi r u_z
*                         dpsi/dz  = - 2 pi r u_r
*                       soit la forme "normale" :
*                 ou    :  1/(2 pi r)  dpsi/dr =   u_z
*                          1/(2 pi r)  dpsi/dz = - u_r
*
* Par defaut on resout la forme regularisee. On ne le met pas dans la
* notice par souci de simplicite.
*
*
'DEBPROC' FCOURANT ;
*
'ARGUMENT' mail*'MAILLAGE' ;
disc = DEADUTIL 'TYPM' mail ;
mquaf = 'CHAN' mail 'QUAF' ;
'ARGUMENT' un*'CHPOINT' ;
*
* Verif que un est bien defini sur mail
*
mun = 'EXTR' un 'MAIL' ;
pmail = 'CHAN' mail 'POI1' ; pmun = 'CHAN' mun 'POI1' ;
minter = 'INTE' pmail pmun ;
mnoun = 'DIFF' pmail minter ;
'SI' ('>' ('NBEL' mnoun) 0) ;
   nnoex = 'POIN' mnoun 1 ;
* 771 0 ATTENTION !!! Le CHPOINT ne definit pas de valeur au noeud %i1
   'ERRE' 771 'AVEC' nnoex ;
'FINS' ;
*
'ARGUMENT' rigblo/'RIGIDITE' ;
lrb = 'EXISTE' rigblo ;
'SI' lrb ;
   'ARGUMENT' chblo/'CHPOINT' ;
   lcb = 'EXISTE' chblo ;
'SINON' ;
   lcb = FAUX ;
'FINSI' ;
*
'SI' ('NON' ('EXISTE' rigblo)) ;
   pref  = 'POIN' ('CHANGER' mail 'POI1') 1 ;
   rigblo  = 'BLOQ' 'T' pref ;
'FINSI' ;
*
'ARGUMENT' rvm/'TABLE' ;
'SI' ('NON' ('EXISTE' rvm)) ;
   typsolv = 0 ;
'SINO' ;
   typsolv = 1 ;
'FINSI' ;
*
dim = 'VALEUR' 'DIME' ;
*
'SI' ('NEG' dim 2) ;
* 709 2
* Fonction indisponible en dimension %i1.
   'ERREUR' 709 'AVEC' dim ;
'FINSI' ;
*
laxi = 'EGA' ('VALEUR' 'MODE') 'AXIS' ;
*
'SI' laxi ;
   ncr = 'MOTS' 'UR' ; ncz = 'MOTS' 'UZ' ;
* Forme regularisee ou normale
   'ARGU' mform/'MOT' ;
   'SI' ('NON' ('EXIS' mform)) ;
      mform = 'REGU' ;
   'FINS' ;
   lform = 'MOTS' 'REGU' 'NORM' ;
   iform = 'POSI' mform 'DANS' lform ;
*1052 2
*Mot-cle incorrect "%M1:4". Voici la liste des valeurs admises :
*1052 2
*%M5:40
   'SI' ('EGA' iform 0) ;
      'ERRE' 1052 'AVEC' ('CHAI' mform 'REGU NORM') ;
   'FINS' ;
* iform = 0 : régularisée
* iform = 1 : standard
*dbg   'SI' ('EGA' iform 1) ;
*dbg      'MESS' 'FCOURANT Axi : forme regularisee' ;
*dbg   'SINO' ;
*dbg      'MESS' 'FCOURANT Axi : forme normale' ;
*dbg   'FINS' ;
* Si on ne trouve pas de composantes UR ou UZ dans le champ un en entree
* mais des composantes UX,UY alors on les autorise car c'est la
* convention de nommage avec EQEX et EXEC...
   ncun = 'EXTR' un 'COMP' ;
   'SI' ('NON' ('EXIS' (ncr 'ET' ncz) ncun 'OU')) ;
      'SI' ('EXIS' ('MOTS' 'UX' 'UY') ncun 'ET') ;
         ncr = 'MOTS' 'UX' ; ncz = 'MOTS' 'UY' ;
      'FINS' ;
   'FINS' ;
*
   cdpr  = '*' ('COORDONNEE' 1 mail) ('*' PI 2.D0) ;
*
   'SI' ('EGA' iform 1) ;
* Cas 2D Axi Forme regularisee
      numop  = 2 ; numvar = 1 ; numder = 2 ;
      numdat = 1 ; numcof = 1 ;
*
      A = ININLIN numop numvar numdat numcof numder ;
      A . 'VAR' . 1 . 'NOMDDL' = 'MOTS' 'T' ;
      A . 'VAR' . 1 . 'DISC'   = disc ;
*
      A . 'DAT' . 1 . 'NOMDDL' = 'MOTS' 'DUMM' ;
      A . 'DAT' . 1 . 'DISC'   = 'CSTE' ;
      A . 'DAT' . 1 . 'VALEUR' = -1. ;
      A . 'COF' . 1 . 'COMPOR' = 'IDEN' ;
      A . 'COF' . 1 . 'LDAT'   = 'LECT' 1 ;
*
      A . 1 . 1 . 1 = 'LECT' ;
      A . 2 . 1 . 2 = 'LECT' 1 ;
*
      numdat = 2 ; numcof = 2 ;
      B = ININLIN numop numvar numdat numcof numder ;
      B . 'VAR' . 1 . 'NOMDDL' = 'MOTS' 'Q' ;
      B . 'VAR' . 1 . 'DISC'   = disc ;
*
      B . 'DAT' . 1 . 'NOMDDL' = 'MOTS' 'DUMM' ;
      B . 'DAT' . 1 . 'DISC'   = 'CSTE' ;
      B . 'DAT' . 1 . 'VALEUR' = -1. ;
      B . 'COF' . 1 . 'COMPOR' = 'IDEN' ;
      B . 'COF' . 1 . 'LDAT'   = 'LECT' 1 ;
*
      B . 'DAT' . 2 . 'NOMDDL' = 'MOTS' 'SCAL' ;
      B . 'DAT' . 2 . 'DISC'   = disc ;
      B . 'DAT' . 2 . 'VALEUR' = cdpr ;
      B . 'COF' . 2 . 'COMPOR' = 'IDEN' ;
      B . 'COF' . 2 . 'LDAT'   = 'LECT' 2 ;
*
      B . 1 . 1 . 1 = 'LECT' 2 ;
      B . 2 . 1 . 2 = 'LECT' 1 2 ;
*
      numvar = 2 ; numdat = 1 ; numcof = 1 ;
      C = ININLIN numop numvar numdat numcof numder ;
      C . 'VAR' . 1 . 'NOMDDL' = ncr ;
      C . 'VAR' . 1 . 'DISC'   = disc ;
      C . 'VAR' . 1 . 'VALEUR' = un ;
      C . 'VAR' . 2 . 'NOMDDL' = ncz ;
      C . 'VAR' . 2 . 'DISC'   = disc ;
      C . 'VAR' . 2 . 'VALEUR' = un ;
      C . 'DAT' . 1 . 'NOMDDL' = 'MOTS' 'SCAL' ;
      C . 'DAT' . 1 . 'DISC'   = disc ;
      C . 'DAT' . 1 . 'VALEUR' = cdpr ;
      C . 'COF' . 1 . 'COMPOR' = 'IDEN' ;
      C . 'COF' . 1 . 'LDAT'   = 'LECT' 1 ;
*
      C . 1 . 2 . 0 = 'LECT' 1 ;
      C . 2 . 1 . 0 = 'LECT' 1 ;
   'SINO' ;
* Cas 2D Axi Forme normale
      numop  = 2 ; numvar = 1 ; numder = 2 ;
      numdat = 2 ; numcof = 2 ;
*
      A = ININLIN numop numvar numdat numcof numder ;
      A . 'VAR' . 1 . 'NOMDDL' = 'MOTS' 'T' ;
      A . 'VAR' . 1 . 'DISC'   = disc ;
*
      A . 'DAT' . 1 . 'NOMDDL' = 'MOTS' 'DUMM' ;
      A . 'DAT' . 1 . 'DISC'   = 'CSTE' ;
      A . 'DAT' . 1 . 'VALEUR' = -1. ;
      A . 'COF' . 1 . 'COMPOR' = 'IDEN' ;
      A . 'COF' . 1 . 'LDAT'   = 'LECT' 1 ;
*
      A . 'DAT' . 2 . 'NOMDDL' = 'MOTS' 'SCAL' ;
      A . 'DAT' . 2 . 'DISC'   = disc ;
      A . 'DAT' . 2 . 'VALEUR' = cdpr ;
      A . 'COF' . 2 . 'COMPOR' = 'IDEN' ;
      A . 'COF' . 2 . 'LDAT'   = 'LECT' 2 ;
      A . 1 . 1 . 1 = 'LECT' -2 ;
      A . 2 . 1 . 2 = 'LECT' 1 -2 ;
*
      numdat = 1 ; numcof = 1 ;
      B = ININLIN numop numvar numdat numcof numder ;
      B . 'VAR' . 1 . 'NOMDDL' = 'MOTS' 'Q' ;
      B . 'VAR' . 1 . 'DISC'   = disc ;
*
      B . 'DAT' . 1 . 'NOMDDL' = 'MOTS' 'DUMM' ;
      B . 'DAT' . 1 . 'DISC'   = 'CSTE' ;
      B . 'DAT' . 1 . 'VALEUR' = -1. ;
      B . 'COF' . 1 . 'COMPOR' = 'IDEN' ;
      B . 'COF' . 1 . 'LDAT'   = 'LECT' 1 ;
*
      B . 1 . 1 . 1 = 'LECT'   ;
      B . 2 . 1 . 2 = 'LECT' 1 ;
*
      numvar = 2 ; numdat = 0 ; numcof = 0 ;
      C = ININLIN numop numvar numdat numcof numder ;
      C . 'VAR' . 1 . 'NOMDDL' = ncr ;
      C . 'VAR' . 1 . 'DISC'   = disc ;
      C . 'VAR' . 1 . 'VALEUR' = un ;
      C . 'VAR' . 2 . 'NOMDDL' = ncz ;
      C . 'VAR' . 2 . 'DISC'   = disc ;
      C . 'VAR' . 2 . 'VALEUR' = un ;
*
      C . 1 . 2 . 0 = 'LECT' ;
      C . 2 . 1 . 0 = 'LECT' ;
   'FINS' ;
*
'SINON'  ;
* Cas 2D PLAN
   ncx = 'MOTS' 'UX' ; ncy = 'MOTS' 'UY' ;
*
   numop  = 2 ; numvar = 1 ; numder = 2 ;
   numdat = 1 ; numcof = 1 ;
*
   A = ININLIN numop numvar numdat numcof numder ;
   A . 'VAR' . 1 . 'NOMDDL' = 'MOTS' 'T' ;
   A . 'VAR' . 1 . 'DISC'   = disc ;
   A . 'DAT' . 1 . 'NOMDDL' = 'MOTS' 'DUMM' ;
   A . 'DAT' . 1 . 'DISC'   = 'CSTE' ;
   A . 'DAT' . 1 . 'VALEUR' = -1 ;
   A . 'COF' . 1 . 'COMPOR' = 'IDEN' ;
   A . 'COF' . 1 . 'LDAT'   = 'LECT' 1 ;

   A . 1 . 1 . 1 = 'LECT' ;
   A . 2 . 1 . 2 = 'LECT' 1 ;
*
   B = ININLIN numop numvar numdat numcof numder ;
   B . 'VAR' . 1 . 'NOMDDL' = 'MOTS' 'Q' ;
   B . 'VAR' . 1 . 'DISC'   = disc ;
   B . 'DAT' . 1 . 'NOMDDL' = 'MOTS' 'DUMM' ;
   B . 'DAT' . 1 . 'DISC'   = 'CSTE' ;
   B . 'DAT' . 1 . 'VALEUR' = -1 ;
   B . 'COF' . 1 . 'COMPOR' = 'IDEN' ;
   B . 'COF' . 1 . 'LDAT'   = 'LECT' 1 ;

   B . 1 . 1 . 1 = 'LECT' ;
   B . 2 . 1 . 2 = 'LECT' 1 ;
*
   numvar = 2 ; numdat = 0 ; numcof = 0 ;
   C = ININLIN numop numvar numdat numcof numder ;
   C . 'VAR' . 1 . 'NOMDDL' = ncx ;
   C . 'VAR' . 1 . 'DISC'   = disc ;
   C . 'VAR' . 1 . 'VALEUR' = un ;
   C . 'VAR' . 2 . 'NOMDDL' = ncy ;
   C . 'VAR' . 2 . 'DISC'   = disc ;
   C . 'VAR' . 2 . 'VALEUR' = un ;
*
   C . 1 . 2 . 0 = 'LECT' ;
   C . 2 . 1 . 0 = 'LECT' ;
'FINSI' ;
*
mat  = NLINP mquaf disc A B 'GAU7' ;
* Remettre la symetrie si necessaire
* Au 2018/10/19 : le test de symetrie de RESO est assez contraignant
* pour que cela ne marche pas !
*lpri = 'EXTR' mat 'COMP' ;
*ldua = 'EXTR' mat 'COMP' 'DUAL' ;
*mat = 'CHAN' 'INCO' mat lpri lpri ldua ldua 'SYME' ;
*old mat = 'KOPS' 'RIMA' mat ;
smb  = NLINP mquaf disc C B 'GAU7' ;
mtot = mat 'ET' rigblo ;
ftot = smb ;
'SI' lcb ;
   ftot = 'ET' ftot chblo ;
'FINS' ;
*
'SI' ('EGA' typsolv 0) ;
   solt = 'RESO' mtot ftot ;
'SINO' ;
   solt = 'KRES' mtot 'TYPI' rvm 'SMBR' ftot ;
'FINS' ;
psi = 'EXCO' 'T' solt 'PSI' ;
'RESPRO' psi ;
*
'FINPROC' ;


