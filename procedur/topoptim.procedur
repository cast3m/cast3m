$$$$ TOPOPTIM
* TOPOPTIM  PROCEDUR  CB215821  18/03/22    21:15:03     9786

************************************************************************
** Topology optimization procedure
**
** Author:
** Guenhael Le Quilliec (LaMe - Polytech Tours)
**
** Version:
** 2.2 2018/02/09 Make it compatible with the new version of TOPOSAUV
**                allowing early stop and restart of the optimization
** 2.1 2017/11/11 Compliant mechanism output displacement maximization
** 2.0 2017/04/18 Geometric restrictions, non-linear, multiobjective,
**                multiphysic, customable topology optimization
** 1.1 2015/11/02 Check if volume fraction > proportion of frozen area
** 1.0 2014/04/28 Linear mono-objective topology optimization
************************************************************************

DEBP TOPOPTIM tab0*'TABLE' ;

**********************************************************************
*                           START MESSAGE                            *
**********************************************************************

MESS '        ' ;
MESS '        ' ;
MESS '        ' ;
MESS '+--------------------------------------------------------------'
     '---------------+' ;
MESS '|                                                              '
     '               |' ;
MESS '|                                                              '
     '               |' ;
MESS '|                            DEBUT DE LA PROCEDURE             '
     '               |' ;
MESS '|                                                              '
     '               |' ;
MESS '|    ______  ______   ______  ______   ______  ______  __   __ '
     '   __          |' ;
MESS '|   /\__  _\/\  __ \ /\  == \/\  __ \ /\  == \/\__  _\/\ \ /\ ='
     '-./  \  v2.1   |' ;
MESS '|   \/_/\ \/\ \ \/\ \\ \  _-/\ \ \/\ \\ \  _-/\/_/\ \/\ \ \\ \ '
     '\-./\ \  ----  |' ;
MESS '|      \ \_\ \ \_____\\ \_\   \ \_____\\ \_\     \ \_\ \ \_\\ \'
     '_\ \ \_\       |' ;
MESS '|       \/_/  \/_____/ \/_/    \/_____/ \/_/      \/_/  \/_/ \/'
     '_/  \/_/       |' ;
MESS '|         _____________________________________________________'
     '__________     |' ;
MESS '|        /\____________________________________________________'
     '__________\    |' ;
MESS '|        \/____________________________________________________'
     '__________/    |' ;
MESS '|                                                              '
     '               |' ;
MESS '|                                                              '
     '               |' ;
MESS '+--------------------------------------------------------------'
     '---------------+' ;
MESS '        ' ;

**********************************************************************
*                               INPUT                                *
**********************************************************************

* Mesh, model, boundary conditions and loading
* ********************************************

* Table of the finite element model data
sbs0 = EXIS tab0 'RESOLUTION_PASAPAS' ;
SI sbs0 ;
    mdl0 = tab0.'RESOLUTION_PASAPAS' ;
SINO ;
    mdl0 = tab0.'RESOLUTION_LINEAIRE' ;
FINS ;

* Mechanical boundary conditions
bcM_nb0 = 0 ;
SI (EXIS mdl0 'BLOCAGES_MECANIQUES') ;
    bcM_nb0 = 1 ;
    bcM0 = mdl0.'BLOCAGES_MECANIQUES' ;
    SI (EGA (TYPE bcM0) 'TABLE') ;
        REPE loop1 (DIME bcM0) ;
            SI (EXIS bcM0 &loop1) ;
                bcM_nb0 = &loop1 ;
            FINS ;
        FIN loop1 ;
        SI (EGA bcM_nb0 1) ;
            bcM0 = bcM0.(1) ;
        FINS ;
    FINS ;
FINS ;

* Thermal boundary conditions
bcT_nb0 = 0 ;
SI (EXIS mdl0 'BLOCAGES_THERMIQUES') ;
    bcT_nb0 = 1 ;
    bcT0 = mdl0.'BLOCAGES_THERMIQUES' ;
    SI (EGA (TYPE bcT0) 'TABLE') ;
        REPE loop1 (DIME bcT0) ;
            SI (EXIS bcT0 &loop1) ;
                bcT_nb0 = &loop1 ;
            FINS ;
        FIN loop1 ;
        SI (EGA bcT_nb0 1) ;
            bcT0 = bcT0.(1) ;
        FINS ;
    FINS ;
FINS ;

* Loading
load_nb0 = 1 ;
load0 = mdl0.'CHARGEMENT' ;
SI (EGA (TYPE load0) 'TABLE') ;
    REPE loop1 (DIME load0) ;
        SI (EXIS load0 &loop1) ;
            load_nb0 = &loop1 ;
        FINS ;
    FIN loop1 ;
    SI (EGA load_nb0 1) ;
        load0 = load0.(1) ;
    FINS ;
FINS ;

* Model
mod0 = mdl0.'MODELE' ;
mecha0 = EXIS mod0 'FORM' 'MECANIQUE' ;
SI mecha0 ;
    modM0 = EXTR mod0 'FORM' 'MECANIQUE' ;
FINS ;
therm0 = EXIS mod0 'FORM' 'THERMIQUE' ;
SI therm0 ;
    modT0 = EXTR mod0 'FORM' 'THERMIQUE' ;
FINS ;
cntct0 = EXIS mod0 'FORM' 'CONTACT' ;
SI cntct0 ;
    modC0 = EXTR mod0 'FORM' 'CONTACT' ;
FINS ;

* Material
mat0 = mdl0.'CARACTERISTIQUES' ;
SI mecha0 ;
    matM0 = REDU mat0 modM0 ;
FINS ;
SI therm0 ;
    matT0 = REDU mat0 modT0 ;
FINS ;
SI cntct0 ;
    matC0 = REDU mat0 modC0 ;
FINS ;

* Mesh
msh0 = EXTR mod0 'MAIL' ;
SI mecha0 ;
    mshMT0 = EXTR modM0 'MAIL' ;
SINO ;
    mshMT0 = EXTR modT0 'MAIL' ;
FINS ;
SI cntct0 ;
    mshC0 = EXTR modC0 'MAIL' ;
FINS ;

* Check that the number of elements of each mesh (thermal and mecha)
* equals that of the global mesh otherwise the procedure can't work
SI (mecha0 ET therm0) ;
    SI (NEG (NBEL (EXTR modM0 'MAIL')) (NBEL (EXTR modT0 'MAIL'))) ;
        MESS 'Les modeles thermique et mecanique doivent s appuyer '
             'sur un meme maillage.' ;
        ERRE 'Veuillez adapter vos modeles en consequence.' ;
    FINS ;
FINS ;

* Compliant mechanism topology optimization
mcn0 = EXIS tab0 'MECANISME' ;

* Compliant mechanism output loading
load_nb1 = 0 ;
SI mcn0 ;
    load_nb1 = 1 ;
    load1 = tab0.'MECANISME' ;
    SI (EGA (TYPE load1) 'TABLE') ;
        REPE loop1 (DIME load1) ;
            SI (EXIS load1 &loop1) ;
                load_nb1 = &loop1 ;
            FINS ;
        FIN loop1 ;
        SI (EGA load_nb1 1) ;
            load1 = load1.(1) ;
        FINS ;
    FINS ;
FINS ;

* Solve the problem also without springs
SI (NON (EXIS tab0 'MECANISME_ZERO_SPRING')) ;
    tab0.'MECANISME_ZERO_SPRING' = FAUX ;
FINS ;
ZeroSpg0 = tab0.'MECANISME_ZERO_SPRING' ;

* Check that a mechanical model exists
SI (mcn0 ET (NON mecha0)) ;
    MESS 'Pour effectuer une optimisation de mecanisme deformable, '
         'il faut imperativement preciser un modele mecanique.' ;
    ERRE 'Veuillez preciser le modeles mecanique a utiliser.' ;
FINS ;

* General optimization options
* ****************************

* Frozen area
froz0 = EXIS tab0 'ZONE_FIGEE' ;
SI froz0 ;
    msh2 = tab0.'ZONE_FIGEE' ;
    msh1 = DIFF mshMT0 msh2 ;
    SI mecha0 ;
        modM1 = REDU modM0 msh1 ;
        modM2 = REDU modM0 msh2 ;
        matM1 = REDU matM0 msh1 ;
        matM2 = REDU matM0 msh2 ;
    FINS ;
    SI therm0 ;
        modT1 = REDU modT0 msh1 ;
        modT2 = REDU modT0 msh2 ;
        matT1 = REDU matT0 msh1 ;
        matT2 = REDU matT0 msh2 ;
    FINS ;
SINO ;
    msh1 = mshMT0 ;
    SI mecha0 ;
        modM1 = modM0 ;
        matM1 = matM0 ;
    FINS ;
    SI therm0 ;
        modT1 = modT0 ;
        matT1 = matT0 ;
    FINS ;
FINS ;

* Ratio between the mechanical stiffness of the voids and the material
SI (NON (EXIS tab0 'RAPPORT_RAIDEURS_MECANIQUES')) ;
    SI (mcn0 OU therm0) ;
        tab0.'RAPPORT_RAIDEURS_MECANIQUES' = 1.0e-8 ;
    SINO ;
        tab0.'RAPPORT_RAIDEURS_MECANIQUES' = 0.0 ;
    FINS ;
FINS ;
vdM0 = tab0.'RAPPORT_RAIDEURS_MECANIQUES' ;

* Ratio between the thermal stiffness of the voids and the material
SI (NON (EXIS tab0 'RAPPORT_RAIDEURS_THERMIQUES')) ;
    tab0.'RAPPORT_RAIDEURS_THERMIQUES' = 0.001 ;
FINS ;
vdT0 = tab0.'RAPPORT_RAIDEURS_THERMIQUES' ;

* Minimal threshold value of the topology field to save elements
SI (NON (EXIS tab0 'SEUIL')) ;
    tab0.'SEUIL' = 1.0e-9 ;
FINS ;
thrsh0 = tab0.'SEUIL' ;

* Volume fraction
SI (NON (EXIS tab0 'FRACTION_VOLUME')) ;
    tab0.'FRACTION_VOLUME' = 0.4 ;
FINS ;
volfrac0 = FLOT tab0.'FRACTION_VOLUME' ;

* Personal procedure that can be used, amongst others, to
* calculate/modify the sensibility field and objective value
SI (NON (EXIS tab0 'PROCEDURE_TOPOPERS')) ;
    tab0.'PROCEDURE_TOPOPERS' = FAUX ;
FINS ;
ProcP0 = tab0.'PROCEDURE_TOPOPERS' ;

* Weights
SI (NON (EXIS tab0 'POIDS_MECANISME')) ;
    tab0.'POIDS_MECANISME' = 1.0 ;
FINS ;
WghtMcn0 = tab0.'POIDS_MECANISME' ;
SI (NON (EXIS tab0 'POIDS_ENERGIE_DEFO')) ;
    SI mcn0 ;
        tab0.'POIDS_ENERGIE_DEFO' = 0.0 ;
    SINO ;
        tab0.'POIDS_ENERGIE_DEFO' = 1.0 ;
    FINS ;
FINS ;
WghtM0 = tab0.'POIDS_ENERGIE_DEFO' ;
SI (NON (EXIS tab0 'POIDS_TEMPERATURE')) ;
    SI mcn0 ;
        tab0.'POIDS_TEMPERATURE' = 0.0 ;
    SINO ;
        tab0.'POIDS_TEMPERATURE' = 1.0 ;
    FINS ;
FINS ;
WghtT0 = tab0.'POIDS_TEMPERATURE' ;

* Procedure to add a geometric restrictions
ProcR0 = EXIS tab0 'RESTRICTIONS' ;

* Number of the last completed cycle
SI (NON (EXIS tab0 'CYCLE')) ;
    tab0.'CYCLE' = 0 ;
FINS ;
cy0 = (ENTI (tab0.'CYCLE')) + 1 ;

* Maximum number of optimization cycles
SI (NON (EXIS tab0 'MAX_CYCLES')) ;
    tab0.'MAX_CYCLES' = 100 ;
FINS ;
maxcy0 = ENTI (tab0.'MAX_CYCLES') ;

* Filter rate
SI (NON (EXIS tab0 'TAUX_FILTRAGE')) ;
    tab0.'TAUX_FILTRAGE' = 1 ;
FINS ;
frate0 = tab0.'TAUX_FILTRAGE' ;

* Convergence criterion
SI (NON (EXIS tab0 'CRITERE')) ;
    tab0.'CRITERE' = 0.01 ;
FINS ;
crit0 = tab0.'CRITERE' ;

* Maximum increment of the topology field between two cycles
SI (NON (EXIS tab0 'TOPOLOGIE_MAX_INC')) ;
    tab0.'TOPOLOGIE_MAX_INC' = 0.2 ;
FINS ;

* Topology minimum value of the optimality criterion method
SI (NON (EXIS tab0 'TOPOLOGIE_MIN')) ;
    SI mcn0 ;
        tab0.'TOPOLOGIE_MIN' = 0.001 ;
    SINO ;
        tab0.'TOPOLOGIE_MIN' = 0.0 ;
    FINS ;
FINS ;

* Optimality criterion (OC)
* *************************

* Initial lower bound for the Lagrangian multiplier
SI (NON (EXIS tab0 'OC_L1')) ;
    tab0.'OC_L1' = 0.0 ;
FINS ;

* Intial upper bound for the Lagrangian multiplier
SI (NON (EXIS tab0 'OC_L2')) ;
    tab0.'OC_L2' = 1.0e5 ;
FINS ;

* Minimal value for the upper bound
SI (NON (EXIS tab0 'OC_L2_MIN')) ;
    tab0.'OC_L2_MIN' = 1.0e-40 ;
FINS ;

* Convergence criterion for the bi-sectioning algorithm
SI (NON (EXIS tab0 'OC_CRITERE')) ;
    tab0.'OC_CRITERE' = 1.0e-8 ;
FINS ;

* Maximum number of iterations for the bi-sectioning algorithm
SI (NON (EXIS tab0 'OC_MAX_IT')) ;
    tab0.'OC_MAX_IT' = 1.0e5 ;
FINS ;

* Lower bound for B (where B**D is the ratio between the new and the
* previous topology fields)
SI (NON (EXIS tab0 'OC_B_MIN')) ;
    tab0.'OC_B_MIN' = 1.0e-10 ;
FINS ;

* Damping factor (D)
* ******************

SI (NON (EXIS tab0 'FACTEUR_D')) ;
    tab0.'FACTEUR_D' = 0.5 ;
FINS ;
dVari0 = EGA (TYPE tab0.'FACTEUR_D') 'EVOLUTIO' ;
SI dVari0 ;
    dEvol0 = tab0.'FACTEUR_D' ;
    d0 = IPOL (FLOT cy0) dEvol0 ;
SINO ;
    d0 = tab0.'FACTEUR_D' ;
FINS ;

* Penalty factor (P)
* ******************

* Start value of P
SI (NON (EXIS tab0 'FACTEUR_P')) ;
    tab0.'FACTEUR_P' = 3.0 ;
FINS ;
pVari0 = EGA (TYPE tab0.'FACTEUR_P') 'EVOLUTIO' ;
SI pVari0 ;
    pEvol0 = tab0.'FACTEUR_P' ;
    p0 = IPOL (FLOT cy0) pEvol0 ;
SINO ;
    p0 = tab0.'FACTEUR_P' ;
FINS ;

* Grey Scale Factor (Q)
* *********************

* Start value of Q
SI (NON (EXIS tab0 'FACTEUR_Q')) ;
    tab0.'FACTEUR_Q' = 1.0 ;
FINS ;
qVari0 = EGA (TYPE tab0.'FACTEUR_Q') 'EVOLUTIO' ;
SI qVari0 ;
    qEvol0 = tab0.'FACTEUR_Q' ;
    q0 = IPOL (FLOT cy0) qEvol0 ;
SINO ;
    q0 = tab0.'FACTEUR_Q' ;
FINS ;

* Complementary options
* *********************

* Only for step by step resolution
SI sbs0 ;
*   Save time list
    SI (NON (EXIS mdl0 'TEMPS_SAUVES')) ;
        SavTime0 = EXTR (LECT 1 (DIME mdl0.'TEMPS_CALCULES'))
                        mdl0.'TEMPS_CALCULES' ;
    SINO ;
        SavTime0 = mdl0.'TEMPS_SAUVES' ;
    FINS ;
*   Number of steps
    NbStp0 = (DIME SavTime0) - 1 ;
FINS ;

* Numerical precision
SI (NON (EXIS tab0 'PRECISION')) ;
    tab0.'PRECISION' = 1.0e-9 ;
FINS ;
prec0 = tab0.'PRECISION' ;

* Division by zero protection
SI (NON (EXIS tab0 'ZERO_DIVISION')) ;
    tab0.'ZERO_DIVISION' = 0.001 ;
FINS ;
zdiv0 = tab0.'ZERO_DIVISION' ;

* Draw topology
SI (NON (EXIS tab0 'TRAC')) ;
    tab0.'TRAC' = VRAI ;
FINS ;
trac0 = tab0.'TRAC' ;

* Convergence
tab0.'CONVERGENCE' = FAUX ;

* Cycles to be saved
SI (NON (EXIS tab0 'CYCLES_SAUVEGARDES')) ;
    tab0.'CYCLES_SAUVEGARDES' = LECT ;
FINS ;

* Data to be saved
SI (NON (EXIS tab0 'MES_SAUVEGARDES')) ;
    tab0.'MES_SAUVEGARDES' = TABL ;
FINS ;
SI (NON (EXIS tab0.'MES_SAUVEGARDES' 'TOPOLOGIE')) ;
    tab0.'MES_SAUVEGARDES'.'TOPOLOGIE' = VRAI ;
FINS ;
SI (NON (EXIS tab0.'MES_SAUVEGARDES' 'MAILLAGE')) ;
    tab0.'MES_SAUVEGARDES'.'MAILLAGE' = VRAI ;
FINS ;
SI (NON (EXIS tab0.'MES_SAUVEGARDES' 'RESOLUTION')) ;
    tab0.'MES_SAUVEGARDES'.'RESOLUTION' = FAUX ;
FINS ;

* Topology output table
SI (NON (EXIS tab0 'TOPOLOGIE')) ;
    tab0.'TOPOLOGIE' = TABL ;
FINS ;

* Mesh output table
SI (NON (EXIS tab0 'MAILLAGE')) ;
    tab0.'MAILLAGE' = TABL ;
FINS ;

* Resolution output table
SI (NON (EXIS tab0 'RESOLUTION')) ;
    tab0.'RESOLUTION' = TABL ;
FINS ;

**********************************************************************
*                           PREPROCESSING                            *
**********************************************************************

* Various element fields
* **********************

* Mechanical model element fields
SI mecha0 ;
*   Unitary field
    unM1 = MANU 'CHML' modM1 'SCAL' 1.0 'TYPE' 'SCALAIRE' 'GRAVITE' ;
*   Volume of each element
    volElM1 = INTG 'ELEM' unM1 modM1 matM0 ;
*   Change the unitary field so that is not considered as constant
*   to avoid problems with the function POIN 'SUPE'
    unM1 = volElM1 / volElM1 ;
    SI froz0 ;
*       Unitary field
        unM2 = MANU 'CHML' modM2 'SCAL' 1.0
                    'TYPE' 'SCALAIRE' 'GRAVITE' ;
*       Volume of each element
        volElM2 = INTG 'ELEM' unM2 modM2 matM0 ;
    FINS ;
FINS ;

* Thermal model element fields
SI therm0 ;
*   Unitary field
    unT1 = MANU 'CHML' modT1 'SCAL' 1.0 'TYPE' 'SCALAIRE' 'GRAVITE' ;
*   Volume of each element
    volElT1 = INTG 'ELEM' unT1 modT1 matT0 ;
*   In thermal mode, 'GRAVITE' option is not respected
*   This problem is solved by INTG 'ELEM' divided by itself
*   This also change the unitary field so that is not considered as
*   constant to avoid problems with the function POIN 'SUPE'
    unT1 = volElT1 / volElT1 ;
    SI froz0 ;
*       Unitary field
        unT2 = MANU 'CHML' modT2 'SCAL' 1.0
                    'TYPE' 'SCALAIRE' 'GRAVITE' ;
*       Volume of each element
        volElT2 = INTG 'ELEM' unT2 modT2 matT0 ;
*       In thermal mode, 'GRAVITE' option is not respected
*       This problem is solved by INTG 'ELEM' divided by itself
        unT2 = volElT2 / volElT2 ;
    FINS ;
FINS ;

* Default fields
SI mecha0 ;
    un1 = unM1 ;
    SI froz0 ;
        un2 = unM2 ;
    FINS ;
SINO ;
    un1 = unT1 ;
    SI froz0 ;
        un2 = unT2 ;
    FINS ;
FINS ;
zero1  = un1 * 0.0 ;
voidM1 = un1 * vdM0 ;
voidT1 = un1 * vdT0 ;
* Node mesh of the barycenters
bmsh1 = un1 POIN 'SUPE' -1.0 ;

* Initial volumes
SI froz0 ;
    SI mecha0 ;
        vol1 = INTG un1 modM1 matM1 ;
        vol2 = INTG un2 modM2 matM2 ;
    SINO ;
        vol1 = INTG un1 modT1 matT1 ;
        vol2 = INTG un2 modT2 matT2 ;
    FINS ;
    vol0 = vol1 + vol2 ;
SINO ;
    SI mecha0 ;
        vol1 = INTG un1 modM1 matM1 ;
    SINO ;
        vol1 = INTG un1 modT1 matT1 ;
    FINS ;
    vol2 = 0.0 ;
    vol0 = vol1 ;
FINS ;

* Initial topology
SI (EXIS tab0.'TOPOLOGIE' (cy0 - 1)) ;
    SI mecha0 ;
*       Express the input topology element field at the barycenters of
*       the elements of the model modM1
        x0 = TOPOCHAN tab0.'TOPOLOGIE'.(cy0 - 1) modM1 bmsh1 ;
        x0 = CHAN 'TYPE' x0 'SCALAIRE' ;
        x0 = x0 * (vol1 * volfrac0 / (INTG x0 modM1 matM1)) ;
    SINO ;
*       Express the input topology element field at the barycenters of
*       the elements of the model modT1
        x0 = TOPOCHAN tab0.'TOPOLOGIE'.(cy0 - 1) modT1 bmsh1 ;
        x0 = CHAN 'TYPE' x0 'SCALAIRE' ;
*       In thermal mode, 'GRAVITE' option is not respected
*       This problem is solved by INTG 'ELEM'
        x0 = (INTG 'ELEM' x0 modT1 matT1) / volElT1 ;
        x0 = x0 * (vol1 * volfrac0 / (INTG x0 modT1 matT1)) ;
    FINS ;
SINO ;
    SI (NEG cy0 1) ;
        MESS (CHAI 'Le cycle de depart est le ' cy0 '.') ;
        MESS (CHAI 'Or la topologie ' (cy0 - 1) ' n existe pas.') ;
        ERRE 'Veuillez preciser la topologie du cycle precedent.' ;
    SINO ;
        x0 = un1 * volfrac0 ;
    FINS ;
FINS ;

* Multiple cases of loads and/or boundary conditions
case_nb0 = MAXI (LECT load_nb0 load_nb1 bcT_nb0 bcM_nb0) ;
mltcase0 = case_nb0 > 1 ;
SI mltcase0 ;
    SI (((load_nb0 > 1) ET (NEG load_nb0 case_nb0)) OU
        ((load_nb1 > 1) ET (NEG load_nb1 case_nb0)) OU
        ((bcT_nb0  > 1) ET (NEG bcT_nb0  case_nb0)) OU
        ((bcM_nb0  > 1) ET (NEG bcM_nb0  case_nb0))) ;
        MESS 'Le nombre de cas de charges ne correspond pas au '
             'nombre de cas de conditions aux limites. '
             'Lorsque superieurs a 1, le nombre de cas de charge et '
             'de cas de conditions aux limites doivent correspondre.';
        ERRE 'Veuillez verifier vos donnees d entree.' ;
    FINS ;
*   Transform a single load into a list of identical loads in a table
    SI (EGA load_nb0 1) ;
        tmp0 = TABL ;
        REPE loop1 case_nb0 ;
            tmp0.&loop1 = load0 ;
        FIN loop1 ;
        load0 = tmp0 ;
    FINS ;
*   Transform a single load into a list of identical loads in a table
    SI (EGA load_nb1 1) ;
        tmp0 = TABL ;
        REPE loop1 case_nb0 ;
            tmp0.&loop1 = load1 ;
        FIN loop1 ;
        load1 = tmp0 ;
    FINS ;
*   Transform mecha. BC into a list of identical mecha. BC in a table
    SI (EGA bcM_nb0 1) ;
        tmp0 = TABL ;
        REPE loop1 case_nb0 ;
            tmp0.&loop1 = bcM0 ;
        FIN loop1 ;
        bcM0 = tmp0 ;
    FINS ;
*   Transform therm. BC into a list of identical therm. BC in a table
    SI (EGA bcT_nb0 1) ;
        tmp0 = TABL ;
        REPE loop1 case_nb0 ;
            tmp0.&loop1 = bcT0 ;
        FIN loop1 ;
        bcT0 = tmp0 ;
    FINS ;
FINS ;

* Number and name of the components for the forces and the
* displacements
SI mecha0 ;
    CompFrc0 = EXTR modM0 'FORC' ;
    CompDpl0 = EXTR modM0 'DEPL' ;
    CompNb0  = DIME CompDpl0 ;
FINS ;

* Springs for the compliant mechanism optimization
SI mcn0 ;
    SI mltcase0 ;
        Spr0 = TABL ;
        REPE loop1 case_nb0 ;
            Spr0.&loop1 = VIDE 'RIGIDITE'/'RIGIDITE' ;
            SI sbs0 ;
                tmp0 = EXTR (DIME SavTime0) SavTime0 ;
                tmp0 = (TIRE load0.&loop1 tmp0) +
                       (TIRE load1.&loop1 tmp0) ;
            SINO ;
                tmp0 = load0.&loop1 + load1.&loop1 ;
            FINS ;
            tmp1 = EXTR tmp0 'MAIL' ;
            tmp2 = NBNO tmp1 ;
            REPE loop2 CompNb0 ;
                tmp3 = EXTR CompFrc0 &loop2 ;
                tmp4 = EXTR CompDpl0 &loop2 ;
                REPE loop3 tmp2 ;
                    tmp5 = tmp1 POIN &loop3 ;
                    tmp6 = (ABS (EXTR tmp0 tmp3 tmp5)) * 0.1 ;
                    Spr0.&loop1 = Spr0.&loop1 ET
                                  (APPU tmp4 tmp6 tmp5) ;
                FIN loop3 ;
            FIN loop2 ;
        FIN loop1 ;
    SINO ;
        Spr0 = VIDE 'RIGIDITE'/'RIGIDITE' ;
        SI sbs0 ;
            tmp0 = EXTR (DIME SavTime0) SavTime0 ;
            tmp0 = (TIRE load0 tmp0) + (TIRE load1 tmp0) ;
        SINO ;
            tmp0 = load0 + load1 ;
        FINS ;
        tmp1 = EXTR tmp0 'MAIL' ;
        tmp2 = NBNO tmp1 ;
        REPE loop1 CompNb0 ;
            tmp3 = EXTR CompFrc0 &loop1 ;
            tmp4 = EXTR CompDpl0 &loop1 ;
            REPE loop2 tmp2 ;
                tmp5 = tmp1 POIN &loop2 ;
                tmp6 = (ABS (EXTR tmp0 tmp3 tmp5)) * 0.1 ;
                Spr0 = Spr0 ET (APPU tmp4 tmp6 tmp5) ;
            FIN loop2 ;
        FIN loop1 ;
    FINS ;
FINS ;

* Isovalues
isoval0 = PROG 0.0 'PAS' (1.0 / 56.0) 1.0 ;

* Initializations
Lstobj0  = PROG ;
Lstchg0  = PROG ;
Lstp0    = PROG ;
Lstq0    = PROG ;
Lstnbel0 = LECT ;

**********************************************************************
*                           WORKING TABLE                            *
**********************************************************************

* This table will be used to save some data in case they are needed
* outsite this procedure

* Some input data
* ***************

tab0.'WTABLE' = TABL ;
tab0.'WTABLE'.'CYCLE' = cy0 ;
tab0.'WTABLE'.'NB_CAS' = case_nb0 ;
tab0.'WTABLE'.'MAILLAGE' = TABL ;
tab0.'WTABLE'.'MAILLAGE'.(0) = msh0 ;
tab0.'WTABLE'.'MAILLAGE'.(1) = msh1 ;
tab0.'WTABLE'.'MAILLAGE'.'GRAVITE' = bmsh1 ;
SI froz0 ;
    tab0.'WTABLE'.'MAILLAGE'.(2) = msh2 ;
FINS ;
tab0.'WTABLE'.'MODELE' = TABL ;
SI mecha0 ;
    tab0.'WTABLE'.'MECANIQUE' = TABL ;
    tab0.'WTABLE'.'MECANIQUE'.'MODELE' = TABL ;
    tab0.'WTABLE'.'MECANIQUE'.'MODELE'.(0) = modM0 ;
    tab0.'WTABLE'.'MECANIQUE'.'MODELE'.(1) = modM1 ;
    tab0.'WTABLE'.'MECANIQUE'.'CARACTERISTIQUES' = TABL ;
    tab0.'WTABLE'.'MECANIQUE'.'CARACTERISTIQUES'.(0) = matM0 ;
    tab0.'WTABLE'.'MECANIQUE'.'CARACTERISTIQUES'.(1) = matM1 ;
    SI froz0 ;
        tab0.'WTABLE'.'MECANIQUE'.'MODELE'.(2) = modM2 ;
        tab0.'WTABLE'.'MECANIQUE'.'CARACTERISTIQUES'.(2) = matM2 ;
    FINS ;
FINS ;
SI therm0 ;
    tab0.'WTABLE'.'THERMIQUE' = TABL ;
    tab0.'WTABLE'.'THERMIQUE'.'MODELE' = TABL ;
    tab0.'WTABLE'.'THERMIQUE'.'MODELE'.(0) = modT0 ;
    tab0.'WTABLE'.'THERMIQUE'.'MODELE'.(1) = modT1 ;
    tab0.'WTABLE'.'THERMIQUE'.'CARACTERISTIQUES' = TABL ;
    tab0.'WTABLE'.'THERMIQUE'.'CARACTERISTIQUES'.(0) = matT0 ;
    tab0.'WTABLE'.'THERMIQUE'.'CARACTERISTIQUES'.(1) = matT1 ;
    SI froz0 ;
        tab0.'WTABLE'.'THERMIQUE'.'MODELE'.(2) = modT2 ;
        tab0.'WTABLE'.'THERMIQUE'.'CARACTERISTIQUES'.(2) = matT2 ;
    FINS ;
FINS ;
SI cntct0 ;
    tab0.'WTABLE'.'CONTACT' = TABL ;
    tab0.'WTABLE'.'CONTACT'.'MODELE' = modC0 ;
FINS ;

* Element fields
* **************

SI mecha0 ;
    tab0.'WTABLE'.'MECANIQUE'.'UN' = TABL ;
    tab0.'WTABLE'.'MECANIQUE'.'UN'.(1) = unM1 ;
    tab0.'WTABLE'.'MECANIQUE'.'VOLUME' = TABL ;
    tab0.'WTABLE'.'MECANIQUE'.'VOLUME'.(1) = volElM1 ;
    SI froz0 ;
        tab0.'WTABLE'.'MECANIQUE'.'UN'.(2) = unM2 ;
        tab0.'WTABLE'.'MECANIQUE'.'VOLUME'.(2) = volElM2 ;
    FINS ;
FINS ;
SI therm0 ;
    tab0.'WTABLE'.'THERMIQUE'.'UN' = TABL ;
    tab0.'WTABLE'.'THERMIQUE'.'UN'.(1) = unT1 ;
    tab0.'WTABLE'.'THERMIQUE'.'VOLUME' = TABL ;
    tab0.'WTABLE'.'THERMIQUE'.'VOLUME'.(1) = volElT1 ;
    SI froz0 ;
        tab0.'WTABLE'.'THERMIQUE'.'UN'.(2) = unT2 ;
        tab0.'WTABLE'.'THERMIQUE'.'VOLUME'.(2) = volElT2 ;
    FINS ;
FINS ;
tab0.'WTABLE'.'UN' = TABL ;
tab0.'WTABLE'.'UN'.(1) = un1 ;
SI froz0 ;
    tab0.'WTABLE'.'UN'.(2) = un2 ;
FINS ;

* Volumes
* *******

tab0.'WTABLE'.'VOLUME' = TABL ;
tab0.'WTABLE'.'VOLUME'.(0) = vol0 ;
tab0.'WTABLE'.'VOLUME'.(1) = vol1 ;
SI froz0 ;
    tab0.'WTABLE'.'VOLUME'.(1) = vol1 ;
FINS ;

* Optimization data
* *****************

tab0.'WTABLE'.'FACTEUR_D' = d0 ;
tab0.'WTABLE'.'FACTEUR_P' = p0 ;
tab0.'WTABLE'.'FACTEUR_Q' = q0 ;
tab0.'WTABLE'.'TOPOLOGIE' = x0 ;

**********************************************************************
*                            INFORMATION                             *
**********************************************************************

MESS 'Information sur l optimisation topologique :' ;
MESS '============================================' ;
SI (NEG cy0 1) ;
    MESS '  - Poursuite / reprise d une optimisation topologique' ;
FINS ;
SI sbs0 ;
    MESS '  - Resolution non lineaire (via l operateur PASAPAS)' ;
SINO ;
    MESS '  - Resolution lineaire (via l operateur RESO)' ;
FINS ;
SI (mecha0 ET therm0) ;
    MESS '    d un problem thermo-mecanique' ;
SINO ;
    SI mecha0 ;
        MESS '    d un problem mecanique' ;
    FINS ;
    SI therm0 ;
        MESS '    d un problem thermique' ;
    FINS ;
FINS ;
SI mltcase0 ;
    MESS '    avec de multiples cas de charge ('case_nb0')' ;
    SI ProcR0 ;
        MESS '    et des restrictions geometriques' ;
    FINS ;
SINO ;
    SI ProcR0 ;
        MESS '    avec des restrictions geometriques' ;
    FINS ;
FINS ;
SI mcn0 ;
    MESS '  - Maximisation des deplacements de sortie d un mecanisme';
FINS ;
SI (mecha0 ET ((ABS WghtM0) > prec0)) ;
    MESS '  - Minimisation de l energie de deformation elastique';
FINS ;
SI (therm0 ET ((ABS WghtT0) > prec0)) ;
    MESS '  - Minimisation de la quantite de chaleur' ;
FINS ;
MESS '  - Contrainte sur la fraction volumique de ' volfrac0 ;
SI froz0 ;
    MESS '    avec une portion du domaine initial figee' ;
FINS ;
SI ProcP0 ;
    MESS '  - Appel d une procedure utilisateur (TOPOPERS)' ;
FINS ;
tmp1 = NEG (VALE 'RESO') 'ITER' ;
SI (mecha0 ET (NON sbs0)) ;
    tmp2 = NEG (VALE 'EPSI') 'LINEAIRE' ;
SINO ;
    tmp2 = FAUX ;
FINS ;
SI (tmp1 OU tmp2) ;
    MESS '        ' ;
    MESS 'Remarque(s) :' ;
    MESS '=============' ;
    SI tmp1 ;
        MESS '  - L option de resolution iterative n est pas '
             'activee.' ;
        MESS '    Activee la pour de meilleures performances.' ;
    FINS ;
    SI tmp2 ;
        MESS '  - L option de la methode de calcul des deformations '
             'n est' ;
        MESS '    pas lineaire.';
        MESS '    Si le probleme le permet, utiliser le calcul '
             'lineaire' ;
        MESS '    des deformations pour de meilleures performances.' ;
    FINS ;
FINS ;
MESS '        ' ;
SI (NON sbs0) ;
    MESS ' cy.   |     obj.     |  max change  |  Penal. fac. |'
         '   GSF fac.   | nb. el.' ;
FINS ;

**********************************************************************
*                         OPTIMIZATION LOOP                          *
**********************************************************************

* Optimization loop
REPE loop0 (maxcy0 - cy0 + 1) ;

*   Initializations
    obj0 = 0.0 ;
    dc0  = zero1 ;
    tab0.'WTABLE'.'OBJECTIF' = obj0 ;
    tab0.'WTABLE'.'SENSIBILITE' = dc0 ;

*   A factor
    SI dVari0 ;
        d0 = IPOL (FLOT cy0) dEvol0 ;
*       Save it in case it is needed outsite this procedure
        tab0.'WTABLE'.'FACTEUR_D' = d0 ;
    FINS ;

*   P factor
    SI pVari0 ;
        p0 = IPOL (FLOT cy0) pEvol0 ;
*       Save it in case it is needed outsite this procedure
        tab0.'WTABLE'.'FACTEUR_P' = p0 ;
    FINS ;

*   Q factor
    SI qVari0 ;
        q0 = IPOL (FLOT cy0) qEvol0 ;
*       Save it in case it is needed outsite this procedure
        tab0.'WTABLE'.'FACTEUR_Q' = q0 ;
    FINS ;

*   Density fields
    SI mecha0 ;
        DensM0 = voidM1 + ((1.0 - vdM0) * (x0**p0)) ;
        DensMax0 = DensM0 ;
    FINS ;
    SI therm0 ;
        DensT0 = voidT1 + ((1.0 - vdT0) * (x0**p0)) ;
        SI mecha0 ;
*           Switch the model of the element field DensT0
*           from Mecha to Therm
            DensT0 = TOPOCHAN DensT0 modT1 bmsh1 ;
            DensMax0 = MAXI DensM0 DensT0 ;
        SINO ;
            DensMax0 = DensT0 ;
        FINS ;
    FINS ;

*   Active mesh, model and material
    SI froz0 ;
        mshA = (DensMax0 + un2) ELEM 'SUPE' thrsh0 ;
    SINO ;
        mshA = DensMax0 ELEM 'SUPE' thrsh0 ;
    FINS ;
    SI cntct0 ;
        tmp0 = DIFF mshMT0 mshA ;
        SI ((NBEL tmp0) > 0) ;
            tmp0 = (MANU 'CHPO' tmp0 1 'SCAL'1.0) POIN 'SUPE' 0.0 ;
            tmp0 = mshC0 ELEM 'APPU' 'LARG' tmp0 ;
            mshCA = DIFF mshC0 tmp0 ;
        SINO ;
            mshCA = mshC0 ;
        FINS ;
        modCA = REDU modC0 mshCA ;
        matCA = REDU matC0 mshCA ;
    FINS ;

*   Material
    matA = VIDE 'MCHAML' ;
    SI mecha0 ;
        SI froz0 ;
            matMA = (TOPOMATE modM1 matM1 DensM0) ET matM2 ;
        SINO ;
            matMA = TOPOMATE modM1 matM1 DensM0 ;
        FINS ;
        matMA = REDU matMA mshA ;
        matA = matA ET matMA ;
    FINS ;
    SI therm0 ;
        SI froz0 ;
            matTA = (TOPOMATE modT1 matT1 DensT0) ET matT2 ;
        SINO ;
            matTA = TOPOMATE modT1 matT1 DensT0 ;
        FINS ;
        matTA = REDU matTA mshA ;
        matA = matA ET matTA ;
    FINS ;

*   Model
    modA = VIDE 'MMODEL' ;
    SI mecha0 ;
        modMA = REDU modM0 mshA ;
        modA = modA ET modMA ;
    FINS ;
    SI therm0 ;
        modTA = REDU modT0 mshA ;
        modA = modA ET modTA ;
    FINS ;

*   Number of active elements
    nbel0 = NBEL mshA ;

*   Solve FE problem(s)
    SI mltcase0 ;
        SI (NON sbs0) ;
                MESS '        ' ;
        FINS ;
        mdlA = TABL ;
        REPE loop1 case_nb0 ;
            mdlA.&loop1 = COPI mdl0 ;
            SI mecha0 ;
                mdlA.&loop1.'BLOCAGES_MECANIQUES' = bcM0.&loop1 ;
            FINS ;
            SI therm0 ;
                mdlA.&loop1.'BLOCAGES_THERMIQUES' = bcT0.&loop1 ;
            FINS ;
            mdlA.&loop1.'CHARGEMENT'              = load0.&loop1 ;
            SI cntct0 ;
                mdlA.&loop1.'MODELE'              = modA ET modCA ;
                mdlA.&loop1.'CARACTERISTIQUES'    = matA ET matCA ;
            SINO ;
                mdlA.&loop1.'MODELE'              = modA ;
                mdlA.&loop1.'CARACTERISTIQUES'    = matA ;
            FINS ;
            SI mcn0 ;
                mdlA.&loop1.'MECANISME_ENTREE'    = TABL ;
                mdlA.&loop1.'MECANISME_SORTIE'    = TABL ;
            FINS ;
            MENA 'OBLI' ;
            SI sbs0 ;
                mdlA.&loop1.'TEMPS_SAUVES' = SavTime0 ;
                SI mcn0 ;
                    mdlA.&loop1.'MECANISME_ENTREE' =
                                COPI mdlA.&loop1 ;
                 mdlA.&loop1.'MECANISME_ENTREE'.'RIGIDITE_CONSTANTE' =
                                Spr0.&loop1 ;
                    mdlA.&loop1.'MECANISME_SORTIE' =
                                COPI mdlA.&loop1.'MECANISME_ENTREE' ;
                    mdlA.&loop1.'MECANISME_SORTIE'.'CHARGEMENT' =
                                load1.&loop1 ;
                    MESS '        ' ;
                    MESS '+--------------------------------------+' ;
                    MESS '|                                      |' ;
                    MESS '|        TOPOPTIM : Progression        |' ;
                    MESS '|                                      |' ;
                    MESS '|     Resolution Mecanisme Entree      |' ;
                    MESS '|              Cycle ' cy0 '          |' ;
                    MESS '|      Cas de charge '&loop1'/'case_nb0' |';
                    MESS '|                                      |' ;
                    MESS '+--------------------------------------+' ;
                    MESS '        ' ;
                    PASAPAS (mdlA.&loop1.'MECANISME_ENTREE') ;
                    MESS '        ' ;
                    MESS '+--------------------------------------+' ;
                    MESS '|                                      |' ;
                    MESS '|        TOPOPTIM : Progression        |' ;
                    MESS '|                                      |' ;
                    MESS '|     Resolution Mecanisme Sortie      |' ;
                    MESS '|              Cycle ' cy0 '          |' ;
                    MESS '|      Cas de charge '&loop1'/'case_nb0' |';
                    MESS '|                                      |' ;
                    MESS '+--------------------------------------+' ;
                    MESS '        ' ;
                    PASAPAS (mdlA.&loop1.'MECANISME_SORTIE') ;
                FINS ;
                SI (((NON mcn0) ET mecha0) OU (mcn0 ET
                     (ZeroSpg0 OU ((ABS WghtM0) > prec0)))) ;
                    MESS '        ' ;
                    MESS '+--------------------------------------+' ;
                    MESS '|                                      |' ;
                    MESS '|        TOPOPTIM : Progression        |' ;
                    MESS '|                                      |' ;
                    SI mcn0 ;
                      MESS '|       Resolution Sans Ressorts       |';
                    FINS ;
                    MESS '|              Cycle ' cy0 '          |' ;
                    MESS '|      Cas de charge '&loop1'/'case_nb0' |';
                    MESS '|                                      |' ;
                    MESS '+--------------------------------------+' ;
                    MESS '        ' ;
                    PASAPAS (mdlA.&loop1) ;
                FINS ;
            SINO ;
                MESS 'Cas de charge ' &loop1 '/' case_nb0 ;
                SI mecha0 ;
                    tmp0 = (RIGI modMA matMA) ET bcM0.&loop1 ;
                    SI mcn0 ;
                        tmp1 = tmp0 ET Spr0.&loop1 ;
                        tmp2 = RESO tmp1 load0.&loop1 ;
                        mdlA.&loop1.'MECANISME_ENTREE'.'DEPLACEMENTS'=
                                        tmp2 ;
                        mdlA.&loop1.'MECANISME_ENTREE'.'CONTRAINTES' =
                                        SIGM 'LINE' modMA matMA tmp2 ;
                        mdlA.&loop1.'MECANISME_ENTREE'.'DEFORMATIONS'=
                                        EPSI 'LINE' modMA matMA tmp2 ;
                        tmp2 = RESO tmp1 load1.&loop1 ;
                        mdlA.&loop1.'MECANISME_SORTIE'.'DEPLACEMENTS'=
                                        tmp2 ;
                        mdlA.&loop1.'MECANISME_SORTIE'.'CONTRAINTES' =
                                        SIGM 'LINE' modMA matMA tmp2 ;
                        mdlA.&loop1.'MECANISME_SORTIE'.'DEFORMATIONS'=
                                        EPSI 'LINE' modMA matMA tmp2 ;
                    FINS ;
                    SI (((NON mcn0) ET mecha0) OU (mcn0 ET
                         (ZeroSpg0 OU ((ABS WghtM0) > prec0)))) ;
                        tmp0 = RESO tmp0 load0.&loop1 ;
                        mdlA.&loop1.'DEPLACEMENTS' = tmp0 ;
                        mdlA.&loop1.'CONTRAINTES'  =
                                        SIGM 'LINE' modMA matMA tmp0 ;
                        mdlA.&loop1.'DEFORMATIONS' =
                                        EPSI 'LINE' modMA matMA tmp0 ;
                    FINS ;
                FINS ;
                SI therm0 ;
                    mdlA.&loop1.'TEMPERATURES' =
                             RESO ((COND modTA matTA) ET bcT0.&loop1)
                                  load0.&loop1 ;
                FINS ;
            FINS ;
        FIN loop1 ;
        SI (NON sbs0) ;
                MESS '        ' ;
        FINS ;
    SINO ;
        mdlA = COPI mdl0 ;
        SI cntct0 ;
            mdlA.'MODELE'              = modA ET modCA ;
            mdlA.'CARACTERISTIQUES'    = matA ET matCA ;
        SINO ;
            mdlA.'MODELE'              = modA ;
            mdlA.'CARACTERISTIQUES'    = matA ;
        FINS ;
        SI mcn0 ;
            mdlA.'MECANISME_ENTREE'    = TABL ;
            mdlA.'MECANISME_SORTIE'    = TABL ;
        FINS ;
        MENA 'OBLI' ;
        SI sbs0 ;
            mdlA.'TEMPS_SAUVES' = SavTime0 ;
            SI mcn0 ;
                mdlA.'MECANISME_ENTREE' = COPI mdlA ;
                mdlA.'MECANISME_ENTREE'.'RIGIDITE_CONSTANTE' = Spr0 ;
                mdlA.'MECANISME_SORTIE' =
                                    COPI mdlA.'MECANISME_ENTREE' ;
                mdlA.'MECANISME_SORTIE'.'CHARGEMENT' = load1 ;
                MESS '        ' ;
                MESS '+--------------------------------------+' ;
                MESS '|                                      |' ;
                MESS '|        TOPOPTIM : Progression        |' ;
                MESS '|                                      |' ;
                MESS '|     Resolution Mecanisme Entree      |' ;
                MESS '|                                      |' ;
                MESS '+--------------------------------------+' ;
                MESS '        ' ;
                PASAPAS (mdlA.'MECANISME_ENTREE') ;
                MESS '        ' ;
                MESS '+--------------------------------------+' ;
                MESS '|                                      |' ;
                MESS '|        TOPOPTIM : Progression        |' ;
                MESS '|                                      |' ;
                MESS '|     Resolution Mecanisme Sortie      |' ;
                MESS '|                                      |' ;
                MESS '+--------------------------------------+' ;
                MESS '        ' ;
                PASAPAS (mdlA.'MECANISME_SORTIE') ;
            FINS ;
            SI (((NON mcn0) ET mecha0) OU (mcn0 ET
                 (ZeroSpg0 OU ((ABS WghtM0) > prec0)))) ;
                SI mcn0 ;
                    MESS '        ' ;
                    MESS '+--------------------------------------+' ;
                    MESS '|                                      |' ;
                    MESS '|        TOPOPTIM : Progression        |' ;
                    MESS '|                                      |' ;
                    MESS '|       Resolution Sans Ressorts       |' ;
                    MESS '|                                      |' ;
                    MESS '+--------------------------------------+' ;
                    MESS '        ' ;
                FINS ;
                PASAPAS mdlA ;
            FINS ;
        SINO ;
            SI mecha0 ;
                tmp0 = (RIGI modMA matMA) ET bcM0 ;
                SI mcn0 ;
                    tmp1 = tmp0 ET Spr0 ;
                    tmp2 = RESO tmp1 load0 ;
                    mdlA.'MECANISME_ENTREE'.'DEPLACEMENTS' = tmp2 ;
                    mdlA.'MECANISME_ENTREE'.'CONTRAINTES'  =
                                    SIGM 'LINE' modMA matMA tmp2 ;
                    mdlA.'MECANISME_ENTREE'.'DEFORMATIONS' =
                                    EPSI 'LINE' modMA matMA tmp2 ;
                    tmp2 = RESO tmp1 load1 ;
                    mdlA.'MECANISME_SORTIE'.'DEPLACEMENTS' = tmp2 ;
                    mdlA.'MECANISME_SORTIE'.'CONTRAINTES'  =
                                    SIGM 'LINE' modMA matMA tmp2 ;
                    mdlA.'MECANISME_SORTIE'.'DEFORMATIONS' =
                                    EPSI 'LINE' modMA matMA tmp2 ;
                FINS ;
                SI (((NON mcn0) ET mecha0) OU (mcn0 ET
                     (ZeroSpg0 OU ((ABS WghtM0) > prec0)))) ;
                    tmp0 = RESO tmp0 load0 ;
                    mdlA.'DEPLACEMENTS' = tmp0 ;
                    mdlA.'CONTRAINTES'  =
                                    SIGM 'LINE' modMA matMA tmp0 ;
                    mdlA.'DEFORMATIONS' =
                                    EPSI 'LINE' modMA matMA tmp0 ;
                FINS ;
            FINS ;
            SI therm0 ;
                mdlA.'TEMPERATURES' =
                           RESO ((COND modTA matTA) ET bcT0) load0 ;
            FINS ;
        FINS ;
    FINS ;

*   Active mesh, model, material and resolution belonging to msh1
    mshA = mshA ELEM 'APPU' 'STRI' msh1 ;
    modA = REDU modA mshA ;
    SI mecha0 ;
        modMA = REDU modM0 mshA ;
        matMA = REDU matMA mshA ;
    FINS ;
    SI therm0 ;
        modTA = REDU modT0 mshA ;
        matTA = REDU matTA mshA ;
    FINS ;

*   Save these data in case they are needed outsite this procedure
    tab0.'WTABLE'.'RESOLUTION' = mdlA ;
    tab0.'WTABLE'.'MAILLAGE'.'A' = mshA ;
    tab0.'WTABLE'.'MODELE'.'A' = modA ;
    SI mecha0 ;
        tab0.'WTABLE'.'MECANIQUE'.'MODELE'.'A' = modMA ;
        tab0.'WTABLE'.'MECANIQUE'.'CARACTERISTIQUES'.'A' = matMA ;
    FINS ;
    SI therm0 ;
        tab0.'WTABLE'.'THERMIQUE'.'MODELE'.'A' = modTA ;
        tab0.'WTABLE'.'THERMIQUE'.'CARACTERISTIQUES'.'A' = matTA ;
    FINS ;

*   User defined procedure
    SI ProcP0 ;
        TOPOPERS tab0 ;
*       Collect the previous data in case they changed in TOPOPERS
        obj0 = tab0.'WTABLE'.'OBJECTIF' ;
        dc0 = tab0.'WTABLE'.'SENSIBILITE' ;
    FINS ;

*   Mechanism objective value and the sensitivity field
    SI mcn0 ;
        SI mltcase0 ;
            REPE loop1 case_nb0 ;
            SI sbs0 ;
                sigAE = REDU
                 (mdlA.&loop1.'MECANISME_ENTREE'.'CONTRAINTES'.NbStp0)
                        mshA ;
                epsAE = ELAS modMA sigAE matMA ;
                sigAS = REDU
                 (mdlA.&loop1.'MECANISME_SORTIE'.'CONTRAINTES'.NbStp0)
                        mshA ;
*                epsAS = ELAS modMA sigAS matMA ;
            SINO ;
*               sigAE = REDU
*                 (mdlA.&loop1.'MECANISME_ENTREE'.'CONTRAINTES')
*                       mshA ;
                epsAE = REDU
                  (mdlA.&loop1.'MECANISME_ENTREE'.'DEFORMATIONS')
                        mshA ;
                sigAS = REDU
                  (mdlA.&loop1.'MECANISME_SORTIE'.'CONTRAINTES')
                        mshA ;
*                epsAS = REDU
*                 (mdlA.&loop1.'MECANISME_SORTIE'.'DEFORMATIONS')
*                       mshA ;
            FINS ;
*           1/2.Cijkl.[1/2(diUEj+djUEi)].[1/2(dkUSl+dlUSk)]
*           =1/2.Cijkl.EPSEij.EPSSkl
*           =1/2.EPSEij.SIGSij
            eneA = ENER modMA sigAS epsAE ;
*           Element field of the strain energy density at barycenter
            eneA = (INTG 'ELEM' eneA modMA matMA) /
                   (REDU volElM1 modMA) ;
*           Total strain energy
            tmp0 = INTG eneA modMA matMA ;
*           Objective function:
            obj0 = obj0 + (WghtMcn0 * tmp0 / case_nb0) ;
*           Rigidity property field at barycenter
            tmp0 = CHAN 'CHAM' (EXCO 'YOUN' matMA 'SCAL')
                        modMA 'GRAVITE' '' ;
*           1/2.EPSEij.EPSSij
            tmp0 = zero1 + (REDU (eneA/tmp0) modM1) ;
*           Sensitivity field:
            dc0  = dc0 + ((WghtMcn0 / case_nb0) * tmp0 *
                          ((1.0 - vdM0) * p0 * (x0**(p0 - 1.0)))) ;
*           Objective function:
            obj0 = obj0 + (0.0 / case_nb0) ;
            FIN loop1 ;
        SINO ;
            SI sbs0 ;
                sigAE = REDU
                        (mdlA.'MECANISME_ENTREE'.'CONTRAINTES'.NbStp0)
                         mshA ;
                epsAE = ELAS modMA sigAE matMA ;
                sigAS = REDU
                        (mdlA.'MECANISME_SORTIE'.'CONTRAINTES'.NbStp0)
                         mshA ;
*               epsAS = ELAS modMA sigAS matMA ;
            SINO ;
*               sigAE = REDU (mdlA.'MECANISME_ENTREE'.'CONTRAINTES')
*                             mshA ;
                epsAE = REDU (mdlA.'MECANISME_ENTREE'.'DEFORMATIONS')
                              mshA ;
                sigAS = REDU (mdlA.'MECANISME_SORTIE'.'CONTRAINTES')
                              mshA ;
*               epsAS = REDU (mdlA.'MECANISME_SORTIE'.'DEFORMATIONS')
*                             mshA ;
            FINS ;
*           1/2.Cijkl.[1/2(diUEj+djUEi)].[1/2(dkUSl+dlUSk)]
*           =1/2.Cijkl.EPSEij.EPSSkl
*           =1/2.EPSEij.SIGSij
            eneA = ENER modMA sigAS epsAE ;
*           Element field of the strain energy density at barycenter
            eneA = (INTG 'ELEM' eneA modMA matMA) /
                   (REDU volElM1 modMA) ;
*           Total strain energy
            tmp0 = INTG eneA modMA matMA ;
*           Objective function:
            obj0 = obj0 + (WghtMcn0 * tmp0) ;
*           Rigidity property field at barycenter
            tmp0 = CHAN 'CHAM' (EXCO 'YOUN' matMA 'SCAL')
                        modMA 'GRAVITE' '' ;
*           1/2.EPSEij.EPSSij
            tmp0 = zero1 + (REDU (eneA/tmp0) modM1) ;
*           Sensitivity field:
            dc0  = dc0 + (WghtMcn0 * tmp0 *
                          ((1.0 - vdM0) * p0 * (x0**(p0 - 1.0)))) ;
        FINS ;
*       Save these data in case they are needed outsite this procedure
        tab0.'WTABLE'.'OBJECTIF' = obj0 ;
        tab0.'WTABLE'.'SENSIBILITE' = dc0 ;
    FINS ;

*   Strain energy objective value and the sensitivity field
    SI (mecha0 ET ((ABS WghtM0) > prec0)) ;
        SI mltcase0 ;
            REPE loop1 case_nb0 ;
            SI sbs0 ;
                sigA = REDU (mdlA.&loop1.'CONTRAINTES'.NbStp0) mshA ;
                epsA = ELAS modMA sigA matMA ;
            SINO ;
                sigA = REDU (mdlA.&loop1.'CONTRAINTES') mshA ;
                epsA = REDU (mdlA.&loop1.'DEFORMATIONS') mshA ;
            FINS ;
*           1/2.Cijkl.[1/2(diUj+djUi)].[1/2(dkUl+dlUk)]
*           =1/2.Cijkl.EPSij.EPSkl
*           =1/2.EPSij.SIGij
*           =Element field of the elastic strain energy density at
*            integration points:
            eneA = ENER modMA sigA epsA ;
*           Element field of the strain energy density at barycenter
            eneA = (INTG 'ELEM' eneA modMA matMA) /
                   (REDU volElM1 modMA) ;
*           Objective function:
*           Add the total elastic strain energy * weight / nb of cases
            obj0 = obj0 +
                   (WghtM0 * (INTG eneA modMA matMA) / case_nb0) ;
*           Rigidity property field at barycenter
            tmp0 = CHAN 'CHAM' (EXCO 'YOUN' matMA 'SCAL')
                        modMA 'GRAVITE' '' ;
*           1/2.EPSij.EPSij
            tmp0 = zero1 + (REDU (eneA/tmp0) modM1) ;
*           Sensitivity field:
            dc0  = dc0 + ((WghtM0 / case_nb0) * tmp0 *
                          ((vdM0 - 1.0) * p0 * (x0**(p0 - 1.0)))) ;
            FIN loop1 ;
        SINO ;
            SI sbs0 ;
                sigA = REDU (mdlA.'CONTRAINTES'.NbStp0) mshA ;
                epsA = ELAS modMA sigA matMA ;
            SINO ;
                sigA = REDU (mdlA.'CONTRAINTES') mshA ;
                epsA = REDU (mdlA.'DEFORMATIONS') mshA ;
            FINS ;
*           1/2.Cijkl.[1/2(diUj+djUi)].[1/2(dkUl+dlUk)]
*           =1/2.Cijkl.EPSij.EPSkl
*           =1/2.EPSij.SIGij
*           =Element field of the elastic strain energy density at
*            integration points:
            eneA = ENER modMA sigA epsA ;
*           Element field of the strain energy density at barycenter
            eneA = (INTG 'ELEM' eneA modMA matMA) /
                   (REDU volElM1 modMA) ;
*           Total strain energy
            tmp0 = INTG eneA modMA matMA ;
*           Objective function
            obj0 = obj0 + (WghtM0 * tmp0) ;
*           Rigidity property field at barycenter
            tmp0 = CHAN 'CHAM' (EXCO 'YOUN' matMA 'SCAL')
                        modMA 'GRAVITE' '' ;
*           1/2.EPSij.EPSij
            tmp0 = zero1 + (REDU (eneA/tmp0) modM1) ;
*           Sensitivity field
            dc0  = dc0 + (WghtM0 * tmp0 *
                          ((vdM0 - 1.0) * p0 * (x0**(p0 - 1.0)))) ;
        FINS ;
*       Save these data in case they are needed outsite this procedure
        tab0.'WTABLE'.'OBJECTIF' = obj0 ;
        tab0.'WTABLE'.'SENSIBILITE' = dc0 ;
    FINS ;

*   Thermal compliance objective value and the sensitivity field
    SI (therm0 ET ((ABS WghtT0) > prec0)) ;
        SI mltcase0 ;
            REPE loop1 case_nb0 ;
*           Temperature node field
            SI sbs0 ;
                TA = REDU (mdlA.&loop1.'TEMPERATURES'.NbStp0) mshA ;
            SINO ;
                TA = REDU (mdlA.&loop1.'TEMPERATURES') mshA ;
            FINS ;
*           1/2.K.grad(T).grad(T)
*           =1/2.K.grad(T)^2
*           =Element field of the thermal compliance density at
*            integration points:
*           (without 1/2 nor K, they will be added locally for
*            better performances)
            grdTA = GRAD modTA TA ;
            cmp0 = EXTR grdTA 'COMP' ;
            eneA = (EXCO (EXTR cmp0 (DIME cmp0)) grdTA 'SCAL')**2 ;
            REPE loop2 ((DIME cmp0) - 1) ;
                eneA = eneA +
                       ((EXCO (EXTR cmp0 &loop2) grdTA 'SCAL')**2) ;
            FIN loop2 ;
*           Element field at barycenter
            eneA = (INTG 'ELEM' eneA modTA matTA) /
                   (REDU volElT1 modTA) ;
*           Conductivity field at barycenter: K
            tmp0 = CHAN 'CHAM' (EXCO 'K' matTA 'SCAL')
                        modTA 'GRAVITE' '' ;
*           Integration (with K)
            tmp0 = INTG (eneA * tmp0) modTA matTA ;
*           Objective function (with 1/2)
            obj0 = obj0 + (WghtT0 * 0.5 * tmp0 / case_nb0) ;
*           Switch the model of the element field eneA
*           from Therm to Mecha
            tmp0 = zero1 + (REDU eneA modT1) ;
            SI mecha0 ;
                tmp0 = TOPOCHAN tmp0 modM1 bmsh1 ;
            FINS ;
*           Sensitivity field (with 1/2)
            dc0  = dc0 + ((WghtT0 * 0.5 / case_nb0) * tmp0 *
                          ((vdT0 - 1.0) * p0 * (x0**(p0 - 1.0)))) ;
            FIN loop1 ;
        SINO ;
*           Temperature node field
            SI sbs0 ;
                TA = REDU (mdlA.'TEMPERATURES'.NbStp0) mshA ;
            SINO ;
                TA = REDU (mdlA.'TEMPERATURES') mshA ;
            FINS ;
*           1/2.K.grad(T).grad(T)
*           =1/2.K.grad(T)^2
*           =Element field of the thermal compliance density at
*            integration points:
*           (without 1/2 nor K, they will be added locally for
*            better performances)
            grdTA = GRAD modTA TA ;
            cmp0 = EXTR grdTA 'COMP' ;
            eneA = (EXCO (EXTR cmp0 (DIME cmp0)) grdTA 'SCAL')**2 ;
            REPE loop2 ((DIME cmp0) - 1) ;
                eneA = eneA +
                       ((EXCO (EXTR cmp0 &loop2) grdTA 'SCAL')**2) ;
            FIN loop2 ;
*           Element field at barycenter
            eneA = (INTG 'ELEM' eneA modTA matTA) /
                   (REDU volElT1 modTA) ;
*           Conductivity field at barycenter: K
            tmp0 = CHAN 'CHAM' (EXCO 'K' matTA 'SCAL')
                        modTA 'GRAVITE' '' ;
*           Integration (with K)
            tmp0 = INTG (eneA * tmp0) modTA matTA ;
*           Objective function (with 1/2)
            obj0 = obj0 + (WghtT0 * 0.5 * tmp0) ;
*           Switch the model of the element field eneA
*           from Therm to Mecha
            tmp0 = zero1 + (REDU eneA modT1) ;
            SI mecha0 ;
                tmp0 = TOPOCHAN tmp0 modM1 bmsh1 ;
            FINS ;
*           Sensitivity field (with 1/2)
            dc0  = dc0 + ((WghtT0 * 0.5) * tmp0 *
                          ((vdT0 - 1.0) * p0 * (x0**(p0 - 1.0)))) ;
        FINS ;
*       Save these data in case they are needed outsite this procedure
        tab0.'WTABLE'.'OBJECTIF' = obj0 ;
        tab0.'WTABLE'.'SENSIBILITE' = dc0 ;
    FINS ;

*   Add some restrictions
    SI ProcR0 ;
        TOPORSTR tab0 ;
*       Get the new sensitivity field generated from TOPORSTR
        dc0 = tab0.'WTABLE'.'SENSIBILITE' ;
    FINS ;

*   Sensitivity filtering
    TOPOFILT tab0 ;
    dc0 = tab0.'WTABLE'.'SENSIBILITE' ;

*   Previous topology
    xOld0 = x0 ;

*   Topology update using the optimality criterion method
    TOPOCRIT tab0 ;
    x0 = tab0.'WTABLE'.'TOPOLOGIE' ;

*   Compute the change
    change0 = MAXI (ABS (x0 - xOld0)) ;
*   Save it in case it is needed outsite this procedure
    tab0.'WTABLE'.'CHANGE' = change0 ;

*   Save progression information
    Lstobj0  = Lstobj0 ET  (PROG obj0) ;
    Lstchg0  = Lstchg0 ET  (PROG change0) ;
    Lstp0    = Lstp0   ET  (PROG p0) ;
    Lstq0    = Lstq0   ET  (PROG q0) ;
    Lstnbel0 = Lstnbel0 ET (LECT nbel0) ;

*   Save output data
    TOPOSAUV tab0 ;

*   Save the number of the last completed cycle
    tab0.'CYCLE' = cy0 ;

*   Plot to screen
    SI trac0 ;
        SI froz0 ;
            tmp1 = x0 + un2 ;
            SI mecha0 ;
                tmp2 = modM0 REDU (mshA ET msh2) ;
            SINO ;
                tmp2 = modT0 REDU (mshA ET msh2) ;
            FINS ;
        SINO ;
            tmp1 = x0 ;
            SI mecha0 ;
                tmp2 = modMA ;
            SINO ;
                tmp2 = modTA ;
            FINS ;
        FINS ;
        tmp1 = REDU tmp1 tmp2 ;
        SI ((NON mltcase0) ET (NON mcn0) ET mecha0 ET sbs0) ;
            tmp1 tmp2 = tmp1 tmp2 PLUS mdlA.'DEPLACEMENTS'.NbStp0;
        FINS ;
        TRAC tmp1 tmp2 isoval0 'NCLK' ;
    FINS ;

*   Write progression to screen
    SI (NON sbs0) ;
        MESS cy0 (CHAI 'FORMAT' '(ES14.7E2)' obj0 ' '
                       'FORMAT' '(ES14.7E2)' change0 ' '
                       'FORMAT' '(ES14.7E2)' p0 ' '
                       'FORMAT' '(ES14.7E2)' q0 ' ') nbel0 ;
    FINS ;

*   Convergence test
    SI ((change0 < crit0) OU (EGA cy0 maxcy0)) ;
        tab0.'CONVERGENCE' = change0 < crit0 ;
        QUIT loop0 ;
    FINS ;

*   Write progression to screen
*   After the test in case of step by step resolution since there will
*   be a summary at the end
    SI sbs0 ;
        MESS '        ' ;
        MESS '+------------------------------------------------------'
             '-----------------------+' ;
        MESS '|                                                      '
             '                       |' ;
        MESS '|                           TOPOPTIM : Progression     '
             '                       |' ;
        MESS '|                                                      '
             '                       |' ;
        MESS '|                                Cycle ' cy0 '      '
             '                         |' ;
        MESS '|                                                      '
             '                       |' ;
            MESS '|      obj.     |   max change  |  Penal. fac.  |'
                 '    GSF fac.   |   nb. el.   |' ;
            MESS '| ' obj0 '  ' change0 p0 q0 ' ' nbel0 ' |' ;
        MESS '|                                                      '
             '                       |' ;
        MESS '+------------------------------------------------------'
             '-----------------------+' ;
        MESS '        ' ;
    FINS ;

*   Cleaning
    mshA = 0 ;
    modA = 0 ;
    SI mecha0 ;
        modMA = 0 ;
        matMA = 0 ;
    FINS ;
    SI therm0 ;
        modTA = 0 ;
        matTA = 0 ;
    FINS ;
    OTER (tab0.'WTABLE') 'RESOLUTION' ;
    OTER (tab0.'WTABLE'.'MAILLAGE') 'A' ;
    OTER (tab0.'WTABLE'.'MODELE') 'A' ;
    SI mecha0 ;
        OTER (tab0.'WTABLE'.'MECANIQUE'.'MODELE') 'A' ;
        OTER (tab0.'WTABLE'.'MECANIQUE'.'CARACTERISTIQUES') 'A' ;
    FINS ;
    SI therm0 ;
        OTER (tab0.'WTABLE'.'THERMIQUE'.'MODELE') 'A' ;
        OTER (tab0.'WTABLE'.'THERMIQUE'.'CARACTERISTIQUES') 'A' ;
    FINS ;

*   Number of the next cycle
    cy0 = cy0 + 1 ;
*   Save the number of the current cycle in the working table in case
*   it is needed outsite this procedure
    tab0.'WTABLE'.'CYCLE' = cy0 ;

FIN loop0 ;

**********************************************************************
*                               OUTPUT                               *
**********************************************************************

* Cleaning
OTER tab0 'WTABLE' ;
MENA 'OBLI' ;

**********************************************************************
*                            END MESSAGE                             *
**********************************************************************

*   Write cycle history to screen
SI sbs0 ;
    MESS '        ' ;
    MESS '+----------------------------------------------------------'
         '-------------------+' ;
    MESS '|                                                          '
         '                   |' ;
    MESS '|                              TOPOPTIM : Bilan            '
         '                   |' ;
    MESS '|                                                          '
         '                   |' ;
    MESS '+----------------------------------------------------------'
         '-------------------+' ;
    MESS '        ' ;
    MESS ' cy.   |     obj.     |  max change  |  Penal. fac. |'
         '   GSF fac.   | nb. el.' ;
    REPE loop0 (DIME Lstobj0) ;
        MESS &loop0 (CHAI
                     'FORMAT' '(ES14.7E2)' (EXTR Lstobj0 &loop0) ' '
                     'FORMAT' '(ES14.7E2)' (EXTR Lstchg0 &loop0) ' '
                     'FORMAT' '(ES14.7E2)' (EXTR Lstp0   &loop0) ' '
                     'FORMAT' '(ES14.7E2)' (EXTR Lstq0   &loop0) ' ')
                     (EXTR Lstnbel0 &loop0) ;
                     ;
    FIN loop0 ;
FINS ;
MESS '        ' ;
SI tab0.'CONVERGENCE' ;
    MESS ' Convergence apres ' (DIME Lstobj0) ' cycles.' ;
SINO ;
    MESS ' Nombre maximum de cycles d optimisation atteint.' ;
FINS ;
MESS '        ' ;
MESS '+--------------------------------------------------------------'
     '---------------+' ;
MESS '|                                                              '
     '               |' ;
MESS '|                             FIN DE LA PROCEDURE              '
     '               |' ;
MESS '|                                                              '
     '               |' ;
MESS '|                               T O P O P T I M                '
     '               |' ;
MESS '|                                                              '
     '               |' ;
MESS '+--------------------------------------------------------------'
     '---------------+' ;
MESS '        ' ;
MESS '        ' ;
MESS '        ' ;

FINP ;

$$$$

