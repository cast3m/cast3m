$$$$ G_THETA1
* G_THETA1  PROCEDUR  CB215821  15/12/02    21:15:09     8719
* G_THETA1   PROCEDUR  VALETA    96/05/09    21:15:10     2138
'DEBPROC' G_THETA1 TABMOD*'TABLE' MATERI*'MCHAML' SUPTAB*'TABLE';
*|=====================================================================|
*|                                                                     |
*|    OBJET :                                                          |
*|    =======                                                          |
*|                                                                     |
*| 1) calculer le taux de restitution d'energie G en                   |
*|    elasticite, en elasto-plasticite,en elasto-dynamique ou          |
*|    l'integrale C* en visco-plasticite en 2D, 3D (massif ou          |
*|    visco-plasticite en 2D, 3D (massif ou coque mince), ou en        |
*|    coque mince axisymetrique. Les materiaux utilises peuvent etre   |
*|    homogenes, non-homogenes, ou composites sous des chargements     |
*|    de type mecaniques, thermiques, forces volumiques, ou pressions  |
*|    sur le fond de la fissure.                                       |
*| 2) decouper les modes mixtes (separation de K1, K2 et K3) en        |
*|    elasticite pour les problems en 2D, 3D (massif uniquement),      |
*|    ou en axisymetrique. Pour separer les modes, la version          |
*|    actuelle de la procedure ne fonctione qu'en cas de materiaux     |
*|    homogenes et isotrope.                                           |
*|                                                                     |
*|    ENTREE :                                                         |
*|    ========                                                         |
*|                                                                     |
*|    Arguments obligatoires :                                         |
*|    -------------------------                                        |
*|                                                                     |
*| TABMOD  objet du type TABLE stockant tous les objets MODELS         |
*|         sur une petite zone de maillage entourant le plus grand des |
*|         contours qu'on a defini pour calculer G ou C*. L'indice     |
*|         de cette table est 1, 2, 3,...,n (n : nombre de modeles     |
*|         dans la petite zone de maillage). Si l'on n'a pas prevu     |
*|         des modeles dans cette petite zone ou si l'on utilise la    |
*|         procedure pour decoupler les modes, TABMOD ici doit contenir|
*|         les objets MODELS globales du problems utilises dans la     |
*|         resolution par elements finis. Dans ce cas le support       |
*|         maillage de l'ensemble de modeles est la structure totale   |
*|         etudiee.                                                    |
*| MATERI  Objet MCHAML de sous-type CARACTERISTIQUES donnant les      |
*|         propriétés matérielles (module Young, coefficient de        |
*|         Poisson...) + les proprietes geometriques dans le cas       |
*|         des elements en coque mince (epaisseur, excentrement...).   |
*|         Les composantes de MATERI peuvent etre des objets de type   |
*|         FLOTTANT, MCHAML, EVOLUTIO, NUAGE selon le probleme traité. |
*|         Il convient de donner ici le materiau total du probleme     |
*|         englobant toute la structure.                               |
*| SUPTAB  objet de type table.                                        |
*|         En entree, SUPTAB sert a definir les options et les         |
*|         parametres du calcul. Ses indices sont des objets de type   |
*|         MOTS (a ecrire en toutes lettres) dont voici la liste:      |
*|                                                                     |
*| SUPTAB.CHTHETA  = CHPOINT (TABLE en 3D) de deplacement cree         |
*|                   par la procedure CH_THETA.                        |
*| SUPTAB.DEPLACEMENT = TABLE si le calcul est effectue pas a pas,     |
*|                      CHPOINT si en un seul pas (probleme lineaire). |
*|                      Dans le premier cas SUPTAB.DEPLACEMENT         |
*|                      contient touts les deplacements en indice      |
*|                      de la definition des valeurs du parametre      |
*|                      d'evolution (ex : table RESUDEPL de NONLIN).   |
*| SUPTAB.CONTRAINTE  = TABLE si le calcul est effectue pas a pas,     |
*|                      MCHAML si en un seul pas (probleme lineaire).  |
*|                      Dans le premier cas SUPTAB.CONTRAINTE contient |
*|                      toutes les contraintes en meme indice du       |
*|                      parametre d'evolution que la table             |
*|                      SUPTAB.DEPLACEMENT (ex : table RESUCONT de     |
*|                      NONLIN).                                       |
*|                                                                     |
*|    Arquments facultatifs :                                          |
*|    -----------------------                                          |
*|                                                                     |
*|    1 : Probleme non-lineaire (elasto ou visco-plasticite)           |
*|                                                                     |
*| SUPTAB.VARINTERNE = TABLE. Pour les calculs non-lineaires effectues |
*|                     pas a pas, elle donne les variables internes    |
*|                     en meme indice d'evolution que les tables       |
*|                     SUPTAB.DEPLACEMENT ou SUPTAB.CONTRAINTE         |
*|                     (ex : table RESUVARI de NONLIN). Cette table    |
*|                     est fournie dans le cas ou les deformations     |
*|                     inelastiques ne sont pas nulles, sinon          |
*|                     le probleme est considere comme lineaire.       |
*| SUPTAB.CHARGEMENT = CHARGEMENT.Pour les calculs non-lineaires       |
*|                     effectues pas a pas ,on doit rappeler ici le    |
*|                     chargement utilise.(exige si on a utilise       |
*|                     la procedure PASAPAS)                           |
*| SUPTAB.TEMPS      = TABLE. Pour les calculs non-lineaires effectues |
*|                     pas a pas avec la procedure PASAPAS, cette table|
*|                     contient la variable 'temps' en meme indice     |
*|                     entier d'evolution que les tables               |
*|                     SUPTAB.DEPLACEMENT ou SUPTAB.CONTRAINTE         |
*| SUPTAB.GRANDS_DEPLACEMENTS = VRAI pour un calcul en grands          |
*|                              deplacements. Dans ce cas le CH_THETA  |
*|                              est recalcule automatiquement          |
*|                              dans la procedure G_THETA a chaque pas |
*|                              sur la geometrie deformee . La donnee  |
*|                              de la table utilisee pour le calcul    |
*|                              initial de CH_THETA (sur geometrie non |
*|                              deformee) est donc obligatoire :       |
*|                   - SUPTAB.'TABLE_CH_THETA' = table utilisee pour le|
*|                                               calcul initial de     |
*|                                               CH_THETA .            |
*|    2 : En thermo-mecanique                                          |
*|                                                                     |
*| SUPTAB.TEMPERATURE = TABLE pour les calculs effectues pas a pas,    |
*|                      CHPOINT si en un seul pas (probleme lineaire). |
*|                      Dans le premier cas SUPTAB.TEMPERATURE         |
*|                      contient toutes les temperatures absolutes     |
*|                      en indice d'evolution du parametre de temps,   |
*|                      qui doit etre plus large ou egale a celle des  |
*|                      tables SUPTAB.DEPLACEMENT ou SUPTAB.CONTRAINTE |
*|                      (ex : table CHPOTHETA utilisee dans NONLIN).   |
*|                      (inutile si on a utilise PASAPAS)              |
*| SUPTAB.TREFERENCE  = CHPOINT de temperature de reference (ex :      |
*|                      chpoint TREFERENCE utilisee dans NONLIN).      |
*|                      (inutile si on a utilise PASAPAS)              |
*| SUPTAB.TALPHAREFE  = FLOTTANT, requis dans le cas de coefficient de |
*|                      dilatation thermique alpha dépendant de la     |
*|                      température. Il est la valeur de la température|
*|                      de référence qui sert à definir l'alpha dans   |
*|                      l'expression de la deformation thermique :     |
*|                      EPSTH = ALPHA(T)*(T - TALPHAREFE) -            |
*|                      ALPHA(TREFERENCE)*(TREFERENCE - TALPHAREFE)    |
*|                                                                     |
*|    3 : En presence de pression ou/et force volumique                |
*|        agissant dans un voisinage du fond de la fissure             |
*|                                                                     |
*| SUPTAB.PRESSION  = Objet de type CHPOINT ou CHARGEMENT, requis dans |
*|                    dans le cas ou il existe une force volumique     |
*|                    ou/et une pression s'exercant dans un voisinage  |
*|                    du fond de la fissure. Si cette force varie avec |
*|                    le temps on donne un objet de type CHARGEMENT.   |
*|                    SI cette force reste constante, on donne un      |
*|                    un objet de type CHPOINT                         |
*|                    (le logique VRAI suffit si on a utilise PASAPAS) |
*|                                                                     |
*|    4 : En cas de reprise de calcul                                  |
*|                                                                     |
*| SUPTAB.REPRIS = VRAI                                                |
*|        En plasticite ou fluage, cette option permet de reprendre    |
*|        le calcul de G a partir d'un pas de calcul donne             |
*|                                                                     |
*|    5 : En cas de materiaux composites                               |
*|                                                                     |
*| SUPTAB.PARALLELE = VRAI si la fissure est parallele a toutes les    |
*|                    interfaces des matériaux differents, FAUX sinon. |
*|                    Dans le premier cas on precise encore :          |
*| SUPTAB.INTERFACE = TABLE stockant tous les interfaces (de type      |
*|                    MAILLAGE) des materiaux differents. L'indice     |
*|                    de cette table est 1, 2, 3,..., N (N : nombre    |
*|                    d'interfaces des materiaux. En cas des           |
*|                    materiaux composites, il convient de             |
*|                    constuire les table TABMOD et INTERFACE          |
*|                    comme montre ci-dessous                          |
*|                                                                     |
*|        --------------|------------|-------------|------------|      |
*|        |             |            |             |            |      |
*|        |  TABMOD.1   |  TABMOD.2  | TABMOD.3 ...|  TABMOD.n  |      |
*|        |             |            |             |            |      |
*|        --------------|------------|-------------|------------|      |
*|                INTERFACE.1  INTERFACE.2 ... INTERFACE.N             |
*|                                                                     |
*|    6 : Dans le cas de calcul de l'integrale C* en visco-plasticite  |
*|                                                                     |
*| SUPTAB.'LOI'      = MOT pour preciser la loi de fluage utilisee     |
*|                     dans le calcul. On rapelle que les lois         |
*|                     acctuellement utilisables sont                  |
*|                     NORTON, BLACKBURN, RCCMR_316, RCCMR_304,        |
*|                     LEMAITRE ET POLYNOMIAL.                         |
*| SUPTAB.'DEFINELA' = TABLE. Pour les calculs en viscoplastique,      |
*|                     elle donne les déformations inélastiques        |
*|                     en meme indice d'evolution que les tables       |
*|                     SUPTAB.DEPLACEMENT ou SUPTAB.CONTRAINTE         |
*|                     (ex : table RESUDEFI de NONLIN).                |
*| SUPTAB.'DEFI_INI' = MCHAML pour donner la déformation inélastique   |
*|                     au debut de la periode de fluage. Si elle est   |
*|                     nulle, on la crée avec l'opérateur 'ZERO'.      |
*| SUPTAB.'DEPL_INI' = CHPOINT pour donner le champ de deplacements    |
*|                     au debut de la periode de fluage (ex :          |
*|                     solution deplacement elastique).                |
*| SUPTAB.'CONT_INI' = MCHAML pour donner le champ de contraintes      |
*|                     au debut de la periode de fluage (ex :          |
*|                     solution contrainte elastique).                 |
*| SUPTAB.'TEMP_INI' = CHPOINT pour donner le champ de temperature     |
*|                     ABSOLUTE au debut de la periode de fluage.      |
*| SUPTAB.'TEMP0'    = FLOTTANT (facultatif) pour donner le temps a    |
*|                     partir duquel commence la periode de fluage.    |
*|                     Par defaut c'est le temps zero qui correspond   |
*|                     le debut de la fluage. Il est a noter que       |
*|                     l'integrale C* n'est independant du contour     |
*|                     d'integration que lorsque le fluage est         |
*|                     stationaire, c'est-a-dire quand le champ de     |
*|                     contraintes est redistribue et ne varie plus.   |
*|                                                                     |
*|    7 : Pour un front de fissure tridimensionnel                     |
*|                                                                     |
*| SUPTAB.'AVANCE'   =  MAILLAGE pour donner les points du front pour  |
*|                      lesquels le calcul sera effectue. Si cet       |
*|                      argument est absent, le calcul sera fait pour  |
*|                      tous les noeuds sur le front de la fissure.    |
*|                                                                     |
*|    8 : En cas de decouplage des modes mixtes                        |
*|                                                                     |
*| SUPTAB.'MODMIXTE' = Objet LOGIQUE egale VRAI si on veut separer     |
*|                     les modes. Dans ce cas il faut preciser         |
*| SUPTAB.'LEVRESUP' = MAILLAGE représentant la lèvre supérieur de     |
*|                     la fissure.                                     |
*| SUPTAB.'LEVREINF' = MAILLAGE représentant la lèvre inférieur de     |
*|                     la fissure                                      |
*| SUPTAB.'FONDFISS' = POINT ou MAILLAGE représentant la pointe de     |
*|                     la fissure                                      |
*|                                                                     |
*|    9 : En elasto-dynamique                                          |
*|                                                                     |
*| SUPTAB.'VITESSE    =  TABLE en elasto-dynamique,                    |
*|                       contient les VITESSES                         |
*|                                                                     |
*| SUPTAB.'TDYN'      =  TABLE en elasto-dynamique, contient tous      |
*|                       les INSTANTS de sortie.                       |
*|                                                                     |
*|                                                                     |
*|    SORTIE :                                                         |
*|    ========                                                         |
*|                                                                     |
*|    Dans tous les cas de calcul                                      |
*|    ---------------------------                                      |
*|                                                                     |
*| SUPTAB.G = 1) Pour le taux de restitution d'énergie G ou            |
*|               l'intégrale C* habituelle, SUPTAB.G est, en 2D, une   |
*|               table si le calcul est effectue pas a pas, flottant   |
*|               si en un seul pas. Dans le premier cas, G est en meme |
*|               indice d'evolution du parametre de temps que celle    |
*|               des tables SUPTAB.DEPLACEMENT ou SUPTAB.CONTRAINTE    |
*|               (ou SUPTAB.VARINTERNE en elasto ou visco-plasticite). |
*|               En 3D, si le calcul est realise pas a pas SUPTAB.G    |
*|               est indicee par deux parametres dont le premier est   |
*|               le facteur d'evolution de temps et le deuxieme les    |
*|               points sur le front de la fissure. Pour un calcul     |
*|               realise en un seul pas SUPTAB.G a une seule indice    |
*|               representant les points sur le front de la fissure.   |
*|               Exemple : la valeur de G ou C* est                    |
*|               en 2D pour un calcul realise pas a pas a l'instant    |
*|                     T1, (SUPTAB.'G'.T1)                             |
*|               en 2D pour un calcul en un seul pas, (SUPTAB.'G')     |
*|               en 3D au point P1 pour un calcul realise pas a pas a  |
*|                     l'instant T1, (SUPTAB.'G'.T1.P1)                |
*|               en 3D au point P1 pour un calcul realise en un seul   |
*|                     pas, (SUPTAB.'G'.P1)                            |
*|            2) En cas de decouplage des modes mixtes (separation     |
*|               des facteurs K1, K2 et K3), SUPTAB.G est, en 2D, une  |
*|               table indicee par les mots 'I' et 'II' representant   |
*|               deux flottants associes a K1 et K2, respectivement.   |
*|               Si le calcul est realise pas a pas, SUPTAB.G.'I' et   |
*|               SUPTAB.G.'II' sont deux tables, en meme indice        |
*|               d'evolution du parametre de temps que celle des       |
*|               tables SUPTAB.DEPLACEMENT ou SUPTAB.CONTRAINTE (ou    |
*|               SUPTAB.VARINTERNE). En 3D, si le calcul est realise   |
*|               pas a pas, SUPTAB.G est indicee par trois parametres  |
*|               dont le premier est le mot 'I', 'II' ou 'III'         |
*|               representant des valeurs associées a K1, K2 ou K3,    |
*|               la deuxieme indice est le facteur d'evolution de temps|
*|               representant les instants auxquels on a realise le    |
*|               calcul et la troisieme le point representant les      |
*|               noeuds sur le front de la fissure. Pour les calcul    |
*|               realise en un seul pas, SUPTAB.G est indicee par      |
*|               deux parametres dont le premier est le mot 'I', 'II'  |
*|               ou 'III' et le deuxieme les noeuds sur le front de la |
*|               fissure.                                              |
*|               Exemple : le facteur d'intensite de contrainte en     |
*|               mode MI (MI est un objet de type mot valant 'I', 'II' |
*|               ou 'III') est Ki = (Gi/C_MATE)**0.5 avec i = 1, 2, 3, |
*|               C_MATE une constante dependant du module d'Young et   |
*|               du coefficient de Poisson et Gi un flottant egale a : |
*|               en 2D pour un calcul realise pas a pas a l'instant    |
*|                     T1, (SUPTAB.'G'.MI.T1)                          |
*|               en 2D pour un calcul en un seul pas, (SUPTAB.MI.'G')  |
*|               en 3D au point P1 pour un calcul realise pas a pas a  |
*|                     l'instant T1, (SUPTAB.'G'.MI.T1.P1)             |
*|               en 3D au point P1 pour un calcul realise en un seul   |
*|                     pas, (SUPTAB.'G'.MI.P1)                         |
*|               REMARQUE : La constante materielle C_MATE est sauvee  |
*|                          dans l'objet FLOTTANT SUPTAB.C_MATE. Pour  |
*|                          fissure dans l'interface de bimetallique,  |
*|                          elle est une fonction des modules d'Young  |
*|                          et coefficients de Poisson des materiaux.  |
*|                          Les signes pour les FIC K1 et K2 sont      |
*|                          stockees dans les objets SUPTAB.'SIGNE_K1' |
*|                          et SUPTAB.'SIGNE_K2', egale à 1 s'ils sont |
*|                          positifs, -1 s'ils sont negatifs.          |
*|                                                                     |
*|    En cas de calcul effectue pas a pas                              |
*|    -----------------------------------                              |
*|                                                                     |
*| SUPTAB.EVOLG = 1) En cas de calcul du taux de restitution d'énergie |
*|                   G ou de l'intégrale C* habituelle d'un probleme   |
*|                   plan, SUPTAB.EVOLG est un objet de type EVOLUTION |
*|                   donnant la valeur de G ou C* en fonction du temps |
*|                   en elasto ou visco-plasticite. Pour un front de   |
*|                   fissure tridimensionnel EVOLG est une table       |
*|                   indicee par les points donnant les evolutions de  |
*|                   G ou C* pour chaque point en fonction du temps.   |
*|                   Exemple : En 2D, on peut tracer l'evolution de    |
*|                   G ou C* par : DESS (SUPTAB.'EVOLG');              |
*|                   En 3D, on peut tracer l'evolution de G ou C*      |
*|                   au point P1 en fonction du temps par :            |
*|                   DESS (SUPTAB.'EVOLG'.P1);                         |
*|                2) En cas de decouplage des modes mixtes (separation |
*|                   des facteurs K1, K2 et K3), SUPTAB.EVOLG est, en  |
*|                   2D, une table indicee par les mots 'I' et 'II'    |
*|                   representant deux evolutions de la valeur de      |
*|                   Gi (i = 1, 2) en fonction du temps. En 3D         |
*|                   SUPTAB.EVOLG est indicee par deux parametres      |
*|                   dont le premier est le mot 'I', 'II' ou 'III'     |
*|                   representant des valeurs Gi associées a K1, K2 ou |
*|                   K3, la deuxieme indice est le point representant  |
*|                   les noeuds sur le front de la fissure.            |
*|                   Exemple : En 2D, on peut tracer l'evolution de    |
*|                   mode MI (MI est un objet de type mot valant 'I',  |
*|                   'II') par : DESS (SUPTAB.'EVOLG'.MI);             |
*|                   En 3D, on peut tracer l'evolution de mode MI      |
*|                   (MI est un objet de type mot valant 'I', 'II',    |
*|                   ou 'III') au point P1 en fonction du temps par :  |
*|                   DESS (SUPTAB.'EVOLG'.MI.P1);                      |
*|                                                                     |
*|                                                                     |
*| SUPTAB.'CRITERE_DECHARGE' = En cas de calcul élasto-plastique       |
*|         isotrope ou cinématique, éventuellement thermique, on       |
*|         calcul un critère de décharge des contraintes défini par    |
*|         ( si, F = courbe de traction ): crit = F(EPSeq)/ SIGeq.     |
*|         crit = 1. si non-décharge et crit > 1. si décharge.         |
*|         SUPTAB.'CRITERE_DECHARGE' est une table indicée par les     |
*|         temps de calcul.                                            |
*|                                                                     |
*|  En cas de calcul elasto-dynamique  :                               |
*|  -----------------------------------                                |
*|                                                                     |
*|    SUPTAB.'G' =  Table contenant les valeurs de G indicée par les   |
*|                  instants de calculs.                               |
*|=====================================================================|
*
'SAUT' 1 'LIGNE'; &DIME ='VALE' 'DIME'; &MODE ='VALE' 'MODE';
&ELEM = 'VALEUR' 'ELEM'; MOTAX = 'MOT' AXIS ; VALPI = PI;
****
* stockage de la configuration initiale
  CONFIG0 = FORM;
*
'SI' ('EXISTE' SUPTAB 'REPRIS');
   IREPRI = SUPTAB.'REPRIS';
'SINON';
   IREPRI = FAUX;
'FINSI';
****
IPAP = ('EGA' ('TYPE' SUPTAB.'CONTRAINTE') 'TABLE   ') 'ET'
       ('EGA' ('TYPE' SUPTAB.'DEPLACEMENT') 'TABLE   ');
****
IFLUA = ('EXIS' SUPTAB 'LOI') 'OU'
        ('EXIS' SUPTAB 'DEPL_INI') 'OU'
        ('EXIS' SUPTAB 'CONT_INI') 'OU'
        ('EXIS' SUPTAB 'DEFI_INI') 'OU'
        ('EXIS' SUPTAB 'DEFINELA');
****
OBJMOD = TABMOD.1; NBOBJ = 'DIME' ('INDE' TABMOD); I = 1;
'SI' ('>' NBOBJ 1) ;
  'REPETER' NBJ1 (NBOBJ - 1);
     I = I + 1; OBJMOD = OBJMOD 'ET' TABMOD.I;
  'FIN' NBJ1;
'FINSI' ;
MAPART = 'EXTR' OBJMOD 'MAIL';
****
NBNO1 = 'NBNO' ('ELEM' (CHAN 'LIGNE' MAPART) 1);
ILIN = 'EGA' NBNO1 2; IQUA = 'EGA' NBNO1 3;
ICOQU = (&DIME 'EGA' 3) 'ET' ILIN 'ET' (('EGA' &ELEM 'SEG2')
        'OU' ('EGA' &ELEM 'TRI3') 'OU' ('EGA' &ELEM 'QUA4'));
****
'SI' ((&DIME 'EGA' 3) 'ET' ('>' NBOBJ 1));
  'MESS' 'ERREUR : ON NE PEUT PAS ENCORE TRAITER LES PROBLEMES';
  'MESS' 'DE MULTI-MODELES DE MATERIAUX COMPOSITES EN 3D';
  'QUITTER' G_THETA;
'FINSI';
**************************************************
********* TEST DE COMPABILITE DES DONNEES ********
**************************************************
'SI' ('<' ('NBNO' ('EXTR' MATERI 'MAIL')) ('NBNO' MAPART));
  'MESS' 'ERREUR : LE SUPPORT GEOMETRIQUE DE MATERIAU EST';
  'MESS' 'PLUS PETIT QUE CELUI DE L ENSEMBLE DE MODELES';
  'QUITTER' G_THETA;
'FINSI';
'SI' ('<' ('NBEL' ('EXTR' MATERI 'MAIL')) ('NBEL' MAPART));
  'MESS' 'ERREUR : LE SUPPORT GEOMETRIQUE DE MATERIAU EST';
  'MESS' 'PLUS PETIT QUE CELUI DE L ENSEMBLE DE MODELES';
  'QUITTER' G_THETA;
'FINSI';
****
'SI' ('EXIST' SUPTAB 'MODMIXTE');
   IMIXT = SUPTAB.'MODMIXTE';
'SINON';
   IMIXT = FAUX;
'FINSI';
'SI' IMIXT;
   'SI' ICOQU;
     'MESS' 'ERREUR : ON NE PEUT PAS ENCORE DECOUPER';
     'MESS' 'LES MODES POUR LES ELEMENTS DE COQUE MINCE';
     'QUITTER' G_THETA;
   'FINSI';
   'SI' ('NON' ('EXIST' SUPTAB 'LEVRESUP'));
     'ERREUR' 'ON VEUT LA LEVRE SUPERIEURE DE LA FISSURE';
     'QUITTER' G_THETA;
   'FINSI';
   'SI' ('NON' ('EXIST' SUPTAB 'LEVREINF'));
     'ERREUR' 'ON VEUT LA LEVRE INFERIEURE DE LA FISSURE';
     'QUITTER' G_THETA;
   'FINSI';
   'SI' ('NON' ('EXIST' SUPTAB 'FONDFISS'));
     'ERREUR' 'ON VEUT LE FOND DE LA FISSURE';
     'QUITTER' G_THETA;
   'FINSI';
    NB1 = 'NBNO' MAPART;
    NB2 = 'NBNO' (MAPART 'ET' SUPTAB.'LEVRESUP');
    NB3 = 'NBNO' (MAPART 'ET' SUPTAB.'LEVREINF');
   'SI' (('NEG' NB1 NB2) 'OU' ('NEG' NB1 NB3));
     'MESS' 'ERREUR : LES LEVRES DE LA FISSURE N EST PAS';
     'MESS' 'COHERENTES AVEC LE MAILLAGE DES OBJETS MODELES';
     'QUITTER' G_THETA;
   'FINSI';
'FINSI';
***
'SI' ('NON' ('EXISTE' SUPTAB 'CONTRAINTE'));
   'ERREUR' 'IL FAUT DONNER LE CHAMP DE CONTRAINTE';
   'QUITTER' G_THETA;
'FINSI';
'SI' ('NON' ('EXISTE' SUPTAB 'DEPLACEMENT'));
   'ERREUR' 'IL FAUT DONNER LE CHAMP DE DEPLACEMENT';
   'QUITTER' G_THETA;
'FINSI';
'SI' (IPAP 'ET' ('NON' IMIXT));
  'SI' ('NON' ('EXISTE' SUPTAB 'VARINTERNE'));
    'MESS' '   ATTENTION : EN ABSENCE DES VARIABLES INTERNES';
    'MESS' '   LE PROBLEME EST CONSIDERE COMME LINEAIRE.';
  'FINSI';
'FINSI';
'SI' ('NON' ('EXISTE' SUPTAB 'CHTHETA'));
   'ERREUR' 'IL FAUT DONNER LE CHAMP THETA';
   'QUITTER' G_THETA;
'FINSI';
***
'SI' ('EXISTE' SUPTAB 'PARALLELE');
  'SI' (NBOBJ 'EGA' 1);
    'ERRE' 'IL FAUT UNE TABLE STOCKANT TOUS LES OBJETS MODELES';
    'QUITTER' G_THETA;
  'FINSI';
   IPARAL = SUPTAB.'PARALLELE';
'SINON';
   IPARAL = FAUX;
'FINSI';
***
IDANS = FAUX; MODINF = 0; MODSUP = 0;
'SI' (IPARAL 'ET' IMIXT);
  'REPETER' NBJ1 (NBOBJ - 1);
     EL_1 = 'EXTR' TABMOD.&NBJ1 'MAIL';
     EL_2 = 'EXTR' TABMOD.(&NBJ1 + 1) 'MAIL';
     NB1 = 'NBNO' (EL_1 'ET' SUPTAB.'LEVRESUP');
     NB2 = 'NBNO' (EL_2 'ET' SUPTAB.'LEVREINF');
    'SI' (('EGA' ('NBNO' EL_1) NB1) 'ET' ('EGA' ('NBNO' EL_2) NB2));
       MODSUP = TABMOD.&NBJ1; MODINF = TABMOD.(&NBJ1 + 1);
       LCOM1 = ('CONT' EL_1) 'ELEM' 'APPU' 'STRI' ('CONT' EL_2);
       IDANS = VRAI; 'QUITTER' NBJ1;
    'FINSI';
     NB1 = 'NBNO' (EL_1 'ET' SUPTAB.'LEVREINF');
     NB2 = 'NBNO' (EL_2 'ET' SUPTAB.'LEVRESUP');
    'SI' (('EGA' ('NBNO' EL_1) NB1) 'ET' ('EGA' ('NBNO' EL_2) NB2));
       MODINF = TABMOD.&NBJ1; MODSUP = TABMOD.(&NBJ1 + 1);
       LCOM1 = ('CONT' EL_1) 'ELEM' 'APPU' 'STRI' ('CONT' EL_2);
       IDANS = VRAI; 'QUITTER' NBJ1;
    'FINSI';
  'FIN' NBJ1;
'FINSI';
***
'SI' ('EXISTE' SUPTAB 'GRANDS_DEPLACEMENTS');
   IGDEPL = VRAI;
  'SI' ('EXISTE' SUPTAB 'TABLE_CH_THETA');
     TAB1 = TABLE;
     TAB1 = SUPTAB.'TABLE_CH_THETA';
  'SINON';
    'MESS' ' IL FAUT DONNER LA TABLE UTILISEE POUR LE CALCUL
             DE CH_THETA ';
    'QUITTER'  G_THETA;
 'FINSI';
'SINON';
  IGDEPL = FAUX;
'FINSI';
***
ITHER = ('EXIST' SUPTAB 'TEMPERATURE') 'OU'
        ('EXIST' SUPTAB 'TREFERENCE');
TESTHER = FAUX ; PASA = FAUX ;
*Adaptation eventuelle des donnees issue de PASAPAS
SUPTABB = TABLE ;
'SI' IPAP ;
 'SI' ('NON' ('EXISTE' SUPTAB 'VITESSE'));
*Controle de l'indiçage des tables
  CONTROP = 'INDEX' (SUPTAB.'CONTRAINTE') ;
  VALCONT = CONTROP.1 ;
  'SI' ('EGA' ('TYPE' VALCONT) 'FLOTTANT') ;
    PASA = FAUX ;
  'SINON' ;
    'SI' ('EGA' ('TYPE' VALCONT) 'ENTIER  ') ;
      PASA = VRAI ;
    'SINON' ;
      'ERREUR' 'INDICE DE TABLE INCOMPATIBLE' ;
    'FINSI' ;
  'FINSI' ;
  'SI' PASA ;
*lecture du chargement
    'SI' ('EXISTE' SUPTAB 'CHARGEMENT') ;
      CHAR1 = SUPTAB.'CHARGEMENT' ;
      TESTHER = 'EXIS' CHAR1 'T   ' ;
    'SINON' ;
      'ERREUR' 'ON VEUT LE CHARGEMENT' ;
    'FINSI' ;
*lecture des variable de temps
    'SI' ('EXISTE' SUPTAB 'TEMPS') ;
       N = (DIME (SUPTAB.'TEMPS')) - 1 ;
    'SINON' ;
      'ERREUR' 'ON VEUT LA TABLE DES TEMPS SAUVES' ;
    'FINSI' ;
    TSIG = TABLE ;TDEPL = TABLE ;TVARI = TABLE ;TDEFI = TABLE ;I = 0 ;
    SUPTEM = SUPTAB.'TEMPS' ;
    SUPCON = SUPTAB.'CONTRAINTE' ;
    SUPDEP = SUPTAB.'DEPLACEMENT' ;
    'SI' ('EXISTE' SUPTAB 'VARINTERNE') ;
      'SI' ('EGA' ('TYPE' SUPTAB.'VARINTERNE') 'TABLE   ') ;
        SUPVAR = SUPTAB.'VARINTERNE' ;
      'FINSI' ;
    'FINSI' ;
    'SI' IFLUA ; SUPDFI = SUPTAB.'DEFINELA' ; 'FINSI' ;
    'REPETER' BINST N ;
      I = I + 1 ;
      TI = SUPTEM.I; TSIG.TI = SUPCON.I; TDEPL.TI = SUPDEP.I;
    'SI' ('EXISTE' SUPTAB 'VARINTERNE') ;
      'SI' ('EGA' ('TYPE' SUPTAB.'VARINTERNE') 'TABLE   ') ;
        TVARI.TI = SUPVAR.I ;
      'FINSI' ;
      'FINSI' ;
      'SI' IFLUA; TDEFI.TI = SUPDFI.I ; 'FINSI' ;
    'FIN' BINST ;
    SUPTABB.'DEPLACEMENT' = TDEPL ;
    SUPTABB.'CONTRAINTE' = TSIG ;
    'SI' ('EXISTE' SUPTAB 'VARINTERNE') ;
      'SI' ('EGA' ('TYPE' SUPTAB.'VARINTERNE') 'TABLE   ') ;
        SUPTABB.'VARINTERNE' = TVARI ;
      'FINSI' ;
    'FINSI' ;
    'SI' IFLUA; SUPTABB.'DEFINELA' = TDEFI ; 'FINSI' ;
   'FINSI';
  'SINON' ;
    SUPTABB.'DEPLACEMENT' = SUPTAB.'DEPLACEMENT' ;
    SUPTABB.'CONTRAINTE' = SUPTAB.'CONTRAINTE' ;
    'SI' ('EXISTE' SUPTAB 'VARINTERNE') ;
      'SI' ('EGA' ('TYPE' SUPTAB.'VARINTERNE') 'TABLE   ') ;
        SUPTABB.'VARINTERNE' = SUPTAB.'VARINTERNE' ;
      'FINSI' ;
    'FINSI' ;
  'FINSI';
'SINON' ;
  SUPTABB.'DEPLACEMENT' = SUPTAB.'DEPLACEMENT' ;
  SUPTABB.'CONTRAINTE' = SUPTAB.'CONTRAINTE' ;
 'SI' ('EXISTE' SUPTAB 'VARINTERNE') ;
   'SI' ('EGA' ('TYPE' SUPTAB.'VARINTERNE') 'TABLE   ') ;
      SUPTABB.'VARINTERNE' = SUPTAB.'VARINTERNE' ;
   'FINSI' ;
 'FINSI' ;
'FINSI' ;
*
'SI' ITHER;
  'SI' ('NON' ('EXIST' SUPTAB 'TEMPERATURE')) ;
    'SI' ('NON' PASA) ;
      'ERREUR' 'ON VEUT LA CARTE DE TEMPERATURE';
      'QUITTER' G_THETA;
    'FINSI' ;
  'FINSI' ;
  'SI' ('NON' ('EXIST' SUPTAB 'TREFERENCE')) ;
    'ERREUR' 'ON VEUT LA TEMPERATURE DE REFERENCE';
    'QUITTER' G_THETA;
  'FINSI';
  'SI' ('EXISTE' SUPTAB 'TALPHAREFE');
     TALPH1 = SUPTAB.'TALPHAREFE';
  'SINON';
     TALPH1 = 0.;
  'FINSI';
'SINON' ;
  'SI' TESTHER ;
    'ERREUR' 'EXISTENCE DE TEMPERATURES: TEMPERATURE DE REFERENCE ?';
    'QUITTER' G_THETA;
  'FINSI' ;
'FINSI';
*
*** MODPLA : table indicée par entier pour stocker les modèles
***          mécaniques de chaque objet MMODEL. Elle est vide
***          si le modèle est élastique ou élastoplastique
***          avec une courbe de traction independante de la
***          température. Dans le cas contraire la table vaut
***          1 si le modèle est plastique isotrope. Alors une
***            nouvelle courbe de traction EPSE-SIGMA est faite.
***          2 si le modèle est plastique cinématique
***          3 si le modèle est plastique parfaite
YOUVARI = FAUX; NUVARI = FAUX; ALFVARI = FAUX; MODPLA = TABLE;
TABTRA = TABLE;
'REPETER' BCMOD1 NBOBJ;
   MODI = TABMOD.&BCMOD1;
   MATI = 'REDU' MATERI MODI;
   YO1 = 'EXCO' MATI 'YOUN';
   TYPYO = 'TYPE' ('EXTR' YO1 'YOUN' 1 1 1);
  'SI' ('EGA' TYPYO 'EVOLUTIO');
     YOUVARI = VRAI;
  'SINON';
     TEST1 = (('MAXI' YO1) - ('MINI' YO1))/('MINI' YO1);
    'SI' ((TEST1 '>' 1.E-10) 'ET' ('NON' IPARAL));
       YOUVARI = VRAI;
    'FINSI';
  'FINSI';
*
   NU1 = 'EXCO' MATI 'NU';
   TYPNU = 'TYPE' ('EXTR' NU1 'NU' 1 1 1);
  'SI' ('EGA' TYPNU 'EVOLUTIO');
     NUVARI = VRAI;
  'SINON';
     TEST1 = (('MAXI' NU1) - ('MINI' NU1))/('MINI' NU1);
    'SI' ((TEST1 '>' 1.E-10) 'ET' ('NON' IPARAL));
       NUVARI = VRAI;
    'FINSI';
  'FINSI';
*
  'SI' ITHER;
     AL1 = 'EXCO' MATI 'ALPH';
     TYPAL = 'TYPE' ('EXTR' AL1 'ALPH' 1 1 1);
    'SI' ('EGA' TYPAL 'EVOLUTIO');
       ALFVARI = VRAI;
    'SINON';
       TEST1 = (('MAXI' AL1) - ('MINI' AL1))/('MINI' AL1);
      'SI' ((TEST1 '>' 1.E-10) 'ET' ('NON' IPARAL));
         ALFVARI = VRAI;
      'FINSI';
    'FINSI';
  'FINSI';
*
  'SI' ('EXIST' MATI 'TRAC');
     TR1 = 'EXCO' MATI 'TRAC';
     TYPTR = 'TYPE' ('EXTR' TR1 'TRAC' 1 1 1);
    'SI' ('EGA' TYPTR 'NUAGE   ');
       MODPLA.&BCMOD1 = 1;
       TRA1 = 'EXTR' TR1 'TRAC' 1 1 1; COM1 = 'EXTR' TRA1 'COMP';
       NOMEVO1 = 'MOT' 'TRAC'; NOMFLO1 = 'MOT' 'T';
      'REPETER' BNUA1 ('DIME' TRA1 'UPLE');
        'SI' ('EGA' &BNUA1 1);
           NUA1 = 'EXTR' TRA1 'MINI' NOMFLO1;
        'SINON';
           NUA1 = 'EXTR' TRA1 'SUPE' NOMFLO1 (T1 + 1.E-10);
        'FINSI';
         T1 =  'EXTR' NUA1 NOMFLO1;
         EV1 = 'EXTR' NUA1 NOMEVO1;
         PSIG1 = 'EXTR' EV1 'ORDO'; PEPS1 = 'EXTR' EV1 'ABSC';
         VYOU1 = ('EXTR' 2 PSIG1) / ('EXTR' 2 PEPS1);
         PEPS2 = PROG;
        'REPETER' BSIG1 (('DIME' PSIG1) - 1);
           VA1 = ('EXTR' (&BSIG1 + 1) PEPS1) -
                (('EXTR' (&BSIG1 + 1) PSIG1) / VYOU1);
           PEPS2 = PEPS2 'ET' ('PROG' VA1);
        'FIN' BSIG1;
         EV1 = 'EVOL' 'MANU' 'EPSE' PEPS2 'SIGM' ('ENLE' PSIG1 1);
        'SI' (&BNUA1 'EGA' 1);
           TRA2 = 'NUAG' 'COMP' NOMFLO1 T1 'COMP' NOMEVO1 EV1;
        'SINON';
           TRA2 = TRA2 'ET' ('NUAG' 'COMP' NOMFLO1
                            T1 'COMP' NOMEVO1 EV1);
        'FINSI';
      'FIN' BNUA1;
       TABTRA.&BCMOD1 = TRA2;
*** On enlève la courbe de traction si elle depend de
*** la temperature (operation trop couteuse pour VARI)
       MAT0 = MATI; LCOMP1 = 'EXTR' MAT0 'COMP';
      'REPETER' BCOM1 ('DIME' LCOMP1);
         C1 = 'EXTR' LCOMP1 &BCOM1;
        'SI' ('NEG' C1 'TRAC');
          'SI' ('EGA' &BCOM1 1);
             MATI = 'MATE' MODI C1 ('EXCO' C1 MAT0);
          'SINON';
             MATI = MATI 'ET' ('MATE' MODI C1 ('EXCO' C1 MAT0));
          'FINSI';
        'FINSI';
      'FIN' BCOM1;
    'FINSI';
  'SINON';
    'SI' ('EXIST' MATI 'SIGY');
       SI1 = 'EXCO' MATI 'SIGY';
       TYPSI = 'TYPE' ('EXTR' SI1 'SIGY' 1 1 1);
      'SI' ('EXIST' MATI 'H');
         H1 = 'EXCO' MATI 'H';
         TYPH = 'TYPE' ('EXTR' H1 'H' 1 1 1);
        'SI' (('EGA' TYPH 'EVOLUTIO') 'OU'
              ('EGA' TYPSI 'EVOLUTIO'));
           MODPLA.&BCMOD1 = 2;
        'FINSI';
      'SINON';
        'SI' ('EGA' TYPSI 'EVOLUTIO');
           MODPLA.&BCMOD1 = 3;
        'FINSI';
      'FINSI';
    'FINSI';
  'FINSI';
  'SI' ('EGA' &BCMOD1 1);
     MATREDU = MATI;
  'SINON';
     MATREDU = MATREDU 'ET' MATI;
  'FINSI';
'FIN' BCMOD1;
MATVARI = YOUVARI 'OU' NUVARI 'OU' ALFVARI
         'OU' (('DIME' MODPLA) '>' 0);
***
'SI' (IMIXT 'ET' MATVARI);
   'MESS' 'ERREUR : ON NE PEUT PAS ENCORE DECOUPER LES';
   'MESS' 'MODES POUR UN MATERIAU NON CONSTANT PAR MORCEAUX';
   'QUITTER' G_THETA;
'FINSI';
***
IPARTI = 'EXIST' SUPTAB 'AVANCE';
***
IINTER = FAUX;
'SI' ('NON' IPARAL);
'SI' ('>' NBOBJ 1);
   IINTER = VRAI;
  'SI' ('NON' ('EXIST' SUPTAB 'INTERFACE')) ;
     'ERREUR' 'ON VEUT LA TABLE STOCKANT LES INTERFACES';
     'QUITTER' G_THETA;
  'SINON';
     LINTER = SUPTAB.'INTERFACE' ;
    'SI' ((('DIME' LINTER) + 1) 'NEG' NBOBJ);
       'MESS' 'ERREUR : IL CONVIENT DE REMPLIR LES TABLES MODELE';
       'MESS' 'ET INTERFACE COMME DECRITES DANS LA NOTICE.';
       'QUITTER' G_THETA;
    'FINSI';
    'REPETER' BIN1 ('DIME' LINTER);
       MI1 = LINTER.&BIN1;
       MO1 = 'EXTR' (TABMOD.&BIN1) 'MAIL';
       MO2 = 'EXTR' (TABMOD.(&BIN1 + 1)) 'MAIL';
       NB1 = 'NBNO' MO1; NB2 = 'NBNO' (MO1 ET MI1);
       NB3 = 'NBNO' MO2; NB4 = 'NBNO' (MO2 ET MI1);
       'SI' ('NON' (('EGA' NB1 NB2) 'ET' ('EGA' NB3 NB4)));
         'MESS' 'ERREUR : L INTERFACE No' &BIN1 'N EST';
         'MESS' 'PAS COHERENTE AVEC LES OBJETS MODELES.';
         'QUITTER' G_THETA;
       'FINSI';
    'FIN' BIN1;
  'FINSI';
'FINSI';
'SI' (('EGA' NBOBJ 1) 'ET' ('EXIST' SUPTAB 'INTERFACE'));
   'MESS' 'ERREUR : UN SEUL OBJET MODELE NE PERMET';
   'MESS' 'PAS DE PRENDRE EN COMPTE DES INTERFACES.';
   'QUITTER' G_THETA;
'FINSI';
'FINSI';
***
'SI' IFLUA;
   'SI' ('NON' ('EXIST' SUPTAB 'LOI'));
     'ERREUR' 'IL FAUT PRECISER LA LOI DE FLUAGE UTILISEE';
     'QUITTER' G_THETA;
   'FINSI';
   'SI' ('NON' ('EXIST' SUPTAB 'CONT_INI'));
     'ERREUR' 'ON VEUT LA CONTRAINTE AU DEBUT DU FLUAGE';
     'QUITTER' G_THETA;
   'FINSI';
   'SI' ('NON' ('EXIST' SUPTAB 'DEPL_INI'));
     'ERREUR' 'ON VEUT LE DEPLACEMENT AU DEBUT DU FLUAGE';
     'QUITTER' G_THETA;
   'FINSI';
   'SI' ('NON' ('EXIST' SUPTAB 'DEFI_INI'));
     'ERREUR' 'ON VEUT LA DEFORMATION INELASTIQUE AU DEBUT DU FLUAGE';
     'QUITTER' G_THETA;
   'FINSI';
   'SI' ('NON' ('EXIST' SUPTAB 'DEFINELA'));
     'ERREUR' 'ON VEUT LA TABLE DE DEFORMATIONS INELASTIQUES';
     'QUITTER' G_THETA;
   'FINSI';
'FINSI';
***
'SI' (IFLUA 'ET' ITHER);
   'SI' ('NON' ('EXIST' SUPTAB 'TEMP_INI'));
     'ERREUR' 'ON VEUT LA TEMPERATURE AU DEBUT DU FLUAGE';
     'QUITTER' G_THETA;
   'FINSI';
'FINSI';
***
'SI' ICOQU;
   'SI' ('NON' ('EXIST' MATREDU 'EPAI'));
     'MESS' 'ERREUR : DANS LE MATERIAU ON N A PAS TROUVE LA';
     'MESS' '         COMPOSANTE DONNANT L EPAISSEUR DE LA COQUE';
     'QUITTER' G_THETA;
   'SINON';
      EPAICH = 'CHAN' ('EXCO' MATREDU 'EPAI' 'SCAL')
               'STRESSES' OBJMOD;
   'FINSI';
'FINSI';
***
IPRES = FAUX;
'SI' PASA ;
  'SI' ('EXIST' SUPTAB 'PRESSION') ;
    'SI' ('NEG' SUPTAB.'PRESSION' FAUX) ;
      IPRES = VRAI ;
    'FINSI' ;
  'FINSI' ;
'SINON' ;
  'SI' ('EXIST' SUPTAB 'PRESSION') ;
     PRESSI = SUPTAB.'PRESSION'; IPRES = VRAI ;
  'FINSI' ;
'FINSI' ;
***
ENEDEF = TABLE; ENEVON = TABLE;
'SI' ('EXIST' SUPTAB 'ENEDEF');
   ENEDEF*'TABLE' = SUPTAB.'ENEDEF';
'FINSI';
'SI' ('EXIST' SUPTAB 'ENEVON');
   ENEVON*'TABLE' = SUPTAB.'ENEVON';
'FINSI';
***
'SI' IPAP;
***Affichage en cas de calcul dynamique****
 'SI' ('EXIST' SUPTAB 'VITESSE') ;
            TXMECANI= 'MOT' ' ';
            TXTERMI = 'MOT' ' ';
            TXPRESS = 'MOT' ' ';
  'SINON';
   TXMECANI= 'MOT' '    Mecanique';
   TXTERMI = 'MOT' '    Thermique';
   TXPRESS = 'MOT' '    Volumique';
  'FINSI';
'SINON';
   TXMECANI= 'MOT' ' Mecanique';
   TXTERMI = 'MOT' '    Thermique';
   TXPRESS = 'MOT' '    Volumique';
'FINSI';
**************************************************
***  QUELQUES MOTS POUR SIMPLIFIER L'ECRITURE  ***
**************************************************
E = 'MOT' 'EXCO'; MOTU = 'MOTS' 'UX' 'UY'; C = 'MOT' 'CHAI';
MOTF = 'MOTS' 'FX' 'FY'; S = 'MOT' 'SCAL'; MTS1 = 'MOTS' 'SCAL';
U1 = 'MOT' 'UX'; U2 = 'MOT' 'UY'; U3 = 'MOT' 'UZ';
F1 = 'MOT' 'FX'; F2 = 'MOT' 'FY'; F3 = 'MOT' 'FZ';
GR1 = 'MOT' 'UX,X'; GR2 = 'MOT' 'UX,Y'; GR3 = 'MOT' 'UX,Z';
GR4 = 'MOT' 'UY,X'; GR5 = 'MOT' 'UY,Y'; GR6 = 'MOT' 'UY,Z';
GR7 = 'MOT' 'UZ,X'; GR8 = 'MOT' 'UZ,Y'; GR9 = 'MOT' 'UZ,Z';
SM1 = 'MOT' 'SMXX'; SM2 = 'MOT' 'SMYY'; SM3 = 'MOT' 'SMZZ';
SM4 = 'MOT' 'SMXY'; SM5 = 'MOT' 'SMXZ'; SM6 = 'MOT' 'SMYZ';
'SI' ('EGA' MOTAX &MODE) ;
   MOTU = 'MOTS' 'UR' 'UZ' ; MOTF = 'MOTS' 'FR' 'FZ' ;
   U1 = 'MOT' 'UR'; U2 = 'MOT' 'UZ'; U3 = 'MOT' 'UT';
   F1 = 'MOT' 'FR'; F2 = 'MOT' 'FZ';
   GR1 = 'MOT' 'UR,R'; GR2 = 'MOT' 'UR,Z'; GR3 = 'MOT' 'UR,T';
   GR4 = 'MOT' 'UZ,R'; GR5 = 'MOT' 'UZ,Z'; GR6 = 'MOT' 'UZ,T';
   GR7 = 'MOT' 'UT,R'; GR8 = 'MOT' 'UT,Z'; GR9 = 'MOT' 'UT,T';
   SM1 = 'MOT' 'SMRR'; SM2 = 'MOT' 'SMZZ'; SM3 = 'MOT' 'SMTT';
   SM4 = 'MOT' 'SMRZ';
'FINSI';
'SI' (&DIME 'EGA' 3) ;
   MOTU = 'MOTS' 'UX' 'UY' 'UZ' ; MOTF = 'MOTS' 'FX' 'FY' 'FZ' ;
'FINSI';
****
TX4 = 'MOT' 'TAUX DE RESTITUTION D ENERGIE EN ELASTO-DYNAMIQUE';
'SI' IFLUA;
'SI' ITHER;
TX1 = 'MOT' 'VALEUR DE L INTEGRALE C* EN VISCO-THERMO-PLASTIQUE';
'SINON';
TX1 = 'MOT' '   VALEUR DE L INTEGRALE C* EN VISCO-PLASTICITE';
'FINSI';
CHA1 = 'CHAI' 'INTEGRALE C* EN FONCTION DU TEMPS';
MOTTI = 'MOT' 'C*';
MOTCO = 'MOT' '     Valeur C*';
'SINON';
'SI' ITHER;
'SI' IMIXT;
TX1 = 'MOT' ' DECOUPLAGE DES MODES MIXTES EN THERMO-PLASTICITE ';
'SINON';
TX1 = 'MOT' 'TAUX DE RESTITUTION D ENERGIE EN THERMO-PLASTICITE';
'FINSI';
'SINON';
'SI' IMIXT;
TX1 = 'MOT' ' DECOUPLAGE DES MODES MIXTES EN ELASTO-PLASTICITE ';
'SINON';
TX1 = 'MOT' 'TAUX DE RESTITUTION D ENERGIE EN ELASTO-PLASTICITE';
'FINSI';
'FINSI';
CHA1 = 'CHAI' 'TAUX DE RESTITUTION G EN FONCTION DU TEMPS';
MOTTI = 'MOT' 'G';
'SI' IMIXT;
   CHA1='CHAI' 'TAUX DE RESTITUTION Gi EN FONCTION DU TEMPS';
   MOTTI = 'MOT' 'Gi';
'FINSI';
'FINSI';
MOTCO = 'MOT' '     Le Taux G';
TX2 = 'CHAIN' '     Contribution due au chargement     ';
TX3 = 'CHAIN' '     °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°     ';
'SI' IMIXT;
  MOTCO = 'MOT' '      Valeurs ';
  TX2 = 'CHAIN' ' M et J* dus aux chargements F1* et F2* ';
  TX3 = 'CHAIN' ' °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°° ';
'FINSI';
*********************************************************
************ NOM DES COMPOSANTES DE MATERIAUX ***********
*********************************************************
***
*** ITYPEF = 99 SI EN ELASTO OU THERMO-ELASTO-PLASTICITE
*** ITYPEF = 1 VISCO-PLASTICITE. LOI DE FLUAGE NORTON
*** ITYPEF = 2 VISCO-PLASTICITE. LOI DE FLUAGE BLACKBURN
*** ITYPEF = 3 VISCO-PLASTICITE. LOI DE FLUAGE RCCMR_316
*** ITYPEF = 4 VISCO-PLASTICITE. LOI DE FLUAGE RCCMR_304
*** ITYPEF = 5 VISCO-PLASTICITE. LOI DE FLUAGE LEMAITRE
*** ITYPEF = 6 VISCO-PLASTICITE. LOI DE FLUAGE POLYNOMIAL
*** POUR ITYPEF = 1 ET 6 ON A UNE EXPRESSION EXPLICITE
*** DE L'INTEGRATION DE LA VITESSE DU FLUAGE SUR LE TEMPS
***
ITYPEF = 99;
'SI' IFLUA; TEMP0 = 0.;
  'SI' ('EXIS' SUPTAB 'TEMP0'); TEMP0 = SUPTAB.'TEMP0'; 'FINSI';
  'SI' ('EGA' SUPTAB.'LOI' 'NORTON'); ITYPEF = 1; 'FINSI';
  'SI' ('EGA' SUPTAB.'LOI' 'BLACKBURN'); ITYPEF=2; 'FINS';
  'SI' ('EGA' SUPTAB.'LOI' 'RCCMR_316'); ITYPEF=3; 'FINS';
  'SI' ('EGA' SUPTAB.'LOI' 'RCCMR_304'); ITYPEF=4; 'FINS';
  'SI' ('EGA' SUPTAB.'LOI' 'LEMAITRE'); ITYPEF=5; 'FINSI';
  'SI' ('EGA' SUPTAB.'LOI' 'POLYNOMIAL'); ITYPEF=6;'FINS';
  'SI' ('EGA' ITYPEF 99);
    'ERREUR' 'LA LOI DE FLUAGE DONNEE EST INCONNUE';
    'QUITTER' G_THETA;
  'FINSI';
'FINSI';
***************************************************
********** DEPLACEMENT, GRADIANT INITIAUX *********
***************************************************
DEP000 ='CHAN' 'CHPO' OBJMOD ('ZERO' OBJMOD 'DEPLACEM');
GRA000 = 'ZERO' OBJMOD 'GRADIENT';
***************************************************
***** INDICE DE TEMPERATURE RANGEE DENA LTHER *****
***************************************************
'SI' ('NON' PASA) ;
  'SI' (ITHER 'ET' IPAP) ;
     TEPER*'TABLE'= SUPTAB.'TEMPERATURE';
     ITET = 'INDE' TEPER ; NBTET = 'DIME' ITET ;
     IT = 1 ;
     LTHER = 'PROG' (ITET.IT) ;
    'REPETER' TEPERATU ;
       IT = IT + 1 ;
      'SI' ('EXISTE' ITET IT) ;
         VALTET = 'PROG' (ITET.IT) ;
         LTHER = LTHER 'ET' VALTET ;
      'SINON' ;
        'QUITTER' TEPERATU ;
      'FINSI' ;
    'FIN' TEPERATU ;
    LTHER = 'ORDONNER' LTHER ;
  'FINSI' ;
'FINSI' ;
***************************************************
********* TABLES POUR STOCKER LES RESULTATS *******
***************************************************
SUPTAB.'G' = TABLE;

'SI' ('NON' ('EXIST' SUPTAB 'CRITERE_DECHARGE')) ;
    SUPTAB.'CRITERE_DECHARGE' = TABLE ;
'FINSI';
***************************************************
*************** SI REPRISE DE CALCUL **************
***************************************************
'SI' (IREPRI 'ET' IPAP);
    NBG = 'DIME' ('INDE' (SUPTAB.'G'));
    NBDEP = NBDEP - NBG ;
   'SI' (NBDEP '<EG' 0);
     'MESS' 'CALCULS DEJA EFFECTUES. PAS DE REPRISE';
     'QUITTER' G_THETA;
   'FINSI';
    SIG1 = SUPTAB.'SIG1';
    PROTEMP = EXTR (SUPTAB.'EVOLG') 'ABSC';
    PROVALG = EXTR (SUPTAB.'EVOLG') 'ORDO';
    VAR1 = SUPTAB.'VAR1';
    VDI1 = SUPTAB.'VDI1';
    MAT1 = SUPTAB.'MAT1';
    WELAS = 0.5*('ENER' OBJMOD SIG1 ('ELAS' OBJMOD SIG1 MAT1));
    IDD1 = 'INDE' ENEDEF;
    WPLAS = ENEDEF.(IDD1.('DIME' IDD1)) - WELAS;
   'SI' ((('DIME' MODPLA) '>' 0) 'ET' ITHER);
      WVMIS = ENEVON.(IDD1.('DIME' IDD1));
   'FINSI';
   'SI' ICOQU;
      MOTU = MOTU 'ET' ('MOTS' RX RY RZ) ;
      MOTF = MOTF 'ET' ('MOTS' MX MY MZ) ;
   'FINSI';
'SINON';
    NBG = 0;PROVALG = PROG; PROTEMP = PROG;
'FINSI';
***************************************************
****************  AFFICHAGE DU TITRE **************
***************************************************
'SI' IPAP;
*Affichage du titre dans le cas d'un calcul en dynamique
   'SI' ('EXIST' SUPTAB 'VITESSE') ;
    'MESS' '        ' TX4;
    'MESS' '   Instant ' '     Taux G ';
    'SINON';
  'SI' (('EGA' &DIME 2) 'OU' ICOQU);
    'MESS' '        ' TX1;
    'MESS';
    'MESS' '             ' TX2; 'MESS' '             ' TX3;
    'MESS' '   Instant ' TXMECANI TXTERMI TXPRESS MOTCO;
  'FINSI';
  'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
    'MESS' '           ' TX1;
    'MESS';
    'MESS' '                ' TX2; 'MESS' '                ' TX3;
    'MESS' ' Noeuds ' '   Instant ' TXMECANI TXTERMI TXPRESS MOTCO;
  'FINSI';
  'FINSI';
  'SAUT' 1 'LIGNE';
'SINON';
  'SI' (('EGA' &DIME 2) 'OU' ICOQU);
    'MESS' '      ' TX2; 'MESS' '      ' TX3;
    'MESS' ' ' TXMECANI TXTERMI TXPRESS MOTCO;
  'FINSI';
  'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
    'MESS' '          ' TX2; 'MESS' '          ' TX3;
    'MESS' ' Noeuds  ' TXMECANI TXTERMI TXPRESS MOTCO;
  'FINSI';
'FINSI';
********************************************
*** ZONE OU LE CHAMP THETA N'EST PAS NUL ***
********************************************
'SI' (('EGA' &DIME 2) 'OU' ICOQU);
   TETA = SUPTAB.'CHTHETA'; MENL1 = 'MOT' 'CONT';
'FINSI';
'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
   TETA = SUPTAB.'CHTHETA'.'GLOBAL'; MENL1 = 'MOT' 'ENVE';
'FINSI';
TETA = TETA + DEP000;
NORM1 = ((E U1 TETA S)**2) + ((E U2 TETA S)**2);
'SI' ('EGA' &DIME 3);
   NORM1 = NORM1 + ((E U3 TETA S)**2);
'FINSI';
NORM1 = 'CHAN' 'CHAM' OBJMOD (NORM1**0.5);
VA1 = ('MAXI' NORM1) - 1.E-5; VA2 = ('MAXI' NORM1) + 1.E-5;
ELTETA = NORM1 'ELEM' 'COMPRIS' VA1 VA2;
'SI' IDANS;
   LCOM1 = 'CHAN' (LCOM1 'ELEM' 'APPU' 'STRI' ELTETA) 'POI1';
'FINSI';
*******************************************************
* CONDITIONS AUX LIMITES POUR LE DECOUPLAGE DES MODES *
* OU LES CONTRAINTES/DEPLACEMENTS POUR LE CALCUL DE G *
*******************************************************
'SI' IMIXT;
   PM = SUPTAB.'FONDFISS';
  'SI' ('EGA' &DIME 2);
     X1 Y1 = 'COOR' MAPART; X0 Y0 = 'COOR' PM;
     DIS1 = (((X1 - X0)**2) + ((Y1 - Y0)**2))**0.5;
  'SINON';
     X1 Y1 Z1 = 'COOR' MAPART;
    'SI' ('NON' ICOQU); PM = 'POIN' PM 'INIT'; 'FINSI';
     X0 Y0 Z0 = 'COOR' PM;
     DIS1 = (((X1 - X0)**2) + ((Y1 - Y0)**2) + ((Z1 - Z0)**2))**0.5;
  'FINSI';
   PLOIN1 = 'POIN' 1 ('POIN' 'MAXI' DIS1);
  'SI' ('EGA' &DIME 2);
     X1 Y1 = 'COOR' (MAPART 'DIFF'
              (SUPTAB.'LEVREINF' 'ET' SUPTAB.'LEVRESUP'));
     X0 Y0 = 'COOR' PLOIN1;
     DIS1 = (((X1 - X0)**2) + ((Y1 - Y0)**2))**0.5;
  'SINON';
     X1 Y1 Z1 = 'COOR' (MAPART 'DIFF'
                 (SUPTAB.'LEVREINF' 'ET' SUPTAB.'LEVRESUP'));
     X0 Y0 Z0 = 'COOR' PLOIN1;
     DIS1 = (((X1 - X0)**2) + ((Y1 - Y0)**2) + ((Z1 - Z0)**2))**0.5;
  'FINSI';
   PLOIN2 = 'POIN' 1 ('POIN' 'MAXI' DIS1);
   BLOQ1 = ('BLOQ' 'DEPL' 'ROTA' PLOIN2) 'ET' ('BLOQ' U2 PLOIN1);
  'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
     BLOQ1 = BLOQ1 'ET' ('BLOQ' UZ MAPART);
  'FINSI';
'FINSI';
******************************************
* FISSURE DANS LE REPERE GLOBAL ET LOCAL *
******************************************
'SI' (IMIXT 'ET' ('EGA' &DIME 2));
* Inclinaison de la fissure par rapport à l'axe globale
   XG0 YG0 = 'COOR' PM;
   SEG1 = SUPTAB.'LEVRESUP' 'ELEM' 'APPU' 'LARG' PM;
   SEG1 = 'ORDO' SEG1; P_SUP = 'POIN' SEG1 'INIT';
  'SI' ('EGA' P_SUP PM);
     P_SUP = 'POIN' SEG1 'FINA';
  'FINSI';
   SEG1 = SUPTAB.'LEVREINF' 'ELEM' 'APPU' 'LARG' PM;
   SEG1 = 'ORDO' SEG1; P_INF = 'POIN' SEG1 'INIT';
  'SI' ('EGA' P_INF PM);
     P_INF = 'POIN' SEG1 'FINA';
  'FINSI';
   XP1 = 'COOR' 1 P_SUP; XP2 = 'COOR' 1 P_INF;
   YP1 = 'COOR' 2 P_SUP; YP2 = 'COOR' 2 P_INF;
   PHI1 = 'ATG' (YG0 - ((YP1 + YP2)/2.)) (XG0 - ((XP1 + XP2)/2.));
* Coordonnées dans le repère général et local
   XG1 YG1 = 'COOR' ELTETA;
   XL1 = ((XG1 - XG0)*('COS' PHI1)) + ((YG1 - YG0)*('SIN' PHI1));
   YL1 = ((YG1 - YG0)*('COS' PHI1)) - ((XG1 - XG0)*('SIN' PHI1));
   TETA1 = 'ATG' YL1 (XL1 + 1.E-30);
   R1 = (((XL1*XL1) + (YL1*YL1))**0.5) + 1.E-20;
   EL_1 = ELTETA 'ELEM' 'APPU' 'LARG' P_SUP;
   EL_2 = ELTETA 'ELEM' 'APPU' 'LARG' P_INF;
   VA1 = 'XTY' ('MANU' 'CHPO' EL_1 1 'SCAL' 1.)
               ('REDU' YL1 EL_1) MTS1 MTS1;
   VA2 = 'XTY' ('MANU' 'CHPO' EL_2 1 'SCAL' 1.)
               ('REDU' YL1 EL_2) MTS1 MTS1;
  'SI' (('<' VA1 0.) 'ET' ('>' VA2 0.));
     PPPP = P_SUP; P_SUP = P_INF; P_INF = PPPP;
     MMDD = MODSUP; MODSUP = MODINF; MODINF = MMDD;
  'FINSI';
  'SI' (('EGA' XP1 XP2 1.E-30) 'ET' ('EGA' YP1 YP2 1.E-30));
     TETA_S = 'REDU' TETA1 SUPTAB.'LEVRESUP';
     TETA_F = 'REDU' TETA1 SUPTAB.'LEVREINF';
     TETA1 = TETA1 - TETA_S - TETA_F;
    'SI' (('>' VA1 0.) 'ET' ('<' VA2 0.));
       TETA1 = TETA1 + ((TETA_S*0.) + 180.) + ((TETA_F*0.) - 180.);
    'SINON';
       TETA1 = TETA1 + ((TETA_F*0.) + 180.) + ((TETA_S*0.) - 180.);
    'FINSI';
  'FINSI';
   TETAR1 = TETA1*VALPI/180.;
  'SI' IDANS;
     EL_1 = ('EXTR' MODSUP 'MAIL') 'ELEM' 'APPU' 'STRI' ELTETA;
     EL_2 = ('EXTR' MODINF 'MAIL') 'ELEM' 'APPU' 'STRI' ELTETA;
     PEL_1 = ('CHAN' EL_1 'POI1') 'DIFF' LCOM1;
     PEL_2 = ('CHAN' EL_2 'POI1') 'DIFF' LCOM1;
  'FINSI';
'FINSI';
**************************************************
* SOLUTION DE CONTRAINTE/DEPLACEMENT DU PROBLEME *
**************************************************
'SI' ('NON' IPAP);
   SIGF = 'REDU' (SUPTABB.'CONTRAINTE') OBJMOD;
   DEPINT = 'REDU' (SUPTABB.'DEPLACEMENT') MAPART;
   NBDEP = 1;
'SINON';
   SIG*'TABLE' = (SUPTABB.'CONTRAINTE') ;
   DEP*'TABLE' = SUPTABB.'DEPLACEMENT' ;
  'SI' ('EXIST' SUPTAB 'VITESSE') ;
     VIT*'TABLE' = SUPTAB.'VITESSE' ;
  'FINSI' ;
  'SI' IFLUA; DFI*'TABLE' = SUPTABB.'DEFINELA'; 'FINSI';
  'SI' ('EXIST' SUPTAB 'VARINTERNE');
     VAR*'TABLE' = SUPTABB.'VARINTERNE';
  'SINON';
     VAR = TABLE;
  'FINSI';
   IDEP = 'INDE' DEP ; NBDEP = 'DIME' IDEP ;
'FINSI';
***********************************************
***********************************************
********* BOUCLE SUR LE PAS DE CALCUL *********
***********************************************
***********************************************
TEMPREEL = PROG ;
IABC = 0 ; 'SI' IMIXT; NBDEP = 1; 'FINSI';
'REPETER' BOUCEXT NBDEP ;
   IABC = IABC + 1 ;
   S10 = 0.; S20 = 0.; S30 = 0.; S40 = 0.; S50 = 0.;
   S60 = 0.; S70 = 0.; S80 = 0.; S90 = 0.; S100 = 0.;
   S110 = 0.; S120 = 0.; S130 = 0.; S140 = 0.;S300 = 0.;
   S500 = 0.;
***************************************************
***** DEPLACEMENT,CONTRAINTE A L INSTANT INST *****
***************************************************
  'SI' IPAP;
     IABC = NBG + IABC ;
     INST = IDEP.IABC ;
     PROTEMP = PROTEMP ET (PROG INST) ;
     SIGF = (SIG.INST) 'REDU' OBJMOD;
*Calcul du temps reel pour le calcul en dynamique
 'SI' ('EXIST' SUPTAB 'VITESSE') ;
     TDYN = SUPTAB.'TDYN';
     TEMP1 = TDYN.INST ;
     TEMPREEL = TEMPREEL ET (PROG TEMP1);
 'FINSI' ;
************************************************
    'SI' ('EXIST' VAR INST);
       VARF = (VAR.INST) 'REDU' OBJMOD;
    'SINON';
       VARF = 'ZERO' OBJMOD 'VARINTER';
    'FINSI';
    'SI' IFLUA;
      'SI' ('EGA' IABC 1) ;
         DELTAT = IDEP.IABC - TEMP0;
         DEPINT = (DEP.(IDEP.IABC)) - (SUPTAB.'DEPL_INI');
         VITDFI = (DFI.(IDEP.IABC)) - (SUPTAB.'DEFI_INI');
         SIG1 = 'REDU' OBJMOD (SUPTAB.'CONT_INI');
      'FINSI';
      'SI' (IABC '>' 1);
         DELTAT = (IDEP.IABC) - (IDEP.(IABC - 1));
         DEPINT = (DEP.(IDEP.IABC)) - (DEP.(IDEP.(IABC - 1)));
         VITDFI = (DFI.(IDEP.IABC)) - (DFI.(IDEP.(IABC - 1)));
      'FINSI';
       DEPINT = ('REDU' MAPART DEPINT) / DELTAT;
       VITDFI = ('REDU' MAPART VITDFI) / DELTAT;
    'SINON';
       DEPINT = (DEP.INST) 'REDU' MAPART;
******************************************
*Cas du calcul en dynamique
 'SI' ('EXIST' SUPTAB 'VITESSE') ;
       VITF = (VIT.INST) 'REDU' MAPART ;
     'FINSI' ;
******************************************
    'FINSI';
  'FINSI';
****************************************************
******* cas de calculs en grands deplacements ******
****************************************************
  'SI' IGDEPL;
    'FORM' DEPINT;
     SUPTAB.'CHTHETA' = CH_THETA TAB1;
    'FORM' CONFIG0;
  'FINSI';
************************************
****** Signe des FIC K1 et K2 ******
************************************
'SI' (IMIXT 'ET' ('EGA' &DIME 2));
   DUXG1 = ('EXTR' DEPINT U1 P_SUP) - ('EXTR' DEPINT U1 P_INF);
   DUYG1 = ('EXTR' DEPINT U2 P_SUP) - ('EXTR' DEPINT U2 P_INF);
   DUXL1 = (DUXG1*('COS' PHI1)) + (DUYG1*('SIN' PHI1));
   DUYL1 = (DUYG1*('COS' PHI1)) - (DUXG1*('SIN' PHI1));
   SUPTAB.'SIGNE_K1' = 'SIGN' DUYL1;
   SUPTAB.'SIGNE_K2' = 'SIGN' DUXL1;
'FINSI';
***************************************************
*********** TEMPERATURE A L INSTANT INST **********
***************************************************
  'SI' ITHER ;
    'SI' IPAP;
      'SI' PASA ;
        TEPINT = 'TIRE' CHAR1 INST 'T' ;
        TEPINT = 'REDU' TEPINT MAPART ;
        TEPINT = TEPINT - TALPH1 ;
      'SINON' ;
         K = 0 ;
        'REPETER' BLOC1 NBTET ;
           K = K + 1 ;
           NBRE = 'EXTR' LTHER K ;
          'SI' (NBRE '>EG' INST) ; 'QUITTER' BLOC1 ; 'FINSI' ;
        'FIN' BLOC1 ;
         K = K - 1 ;
        'SI' (> ('ABS' ((NBRE-INST)/INST)) 0.001) ;
           NBRE1 = 'EXTR' LTHER K ;
           NBRE2 = 'EXTR' LTHER (K+1) ;
           D1 = INST - NBRE1 ; D2 = NBRE2 - INST ;
           TEPINT = ((('REDU' TEPER.NBRE1 MAPART)*D2)+
                     (('REDU' TEPER.NBRE2 MAPART)*D1))*(1/(D1+D2));
           TEPINT = TEPINT - ('REDU' (SUPTAB.'TREFERENCE') MAPART);
        'SINON';
           TEPINT = ('REDU' TEPER.NBRE MAPART)
                  - ('REDU' (SUPTAB.'TREFERENCE') MAPART) ;
        'FINSI';
      'FINSI' ;
      'SI' IFLUA;
         TEP1 = TEPINT;
        'SI' ('EGA' IABC 1) ;
           DELTAT = IDEP.IABC - TEMP0;
           TEPINT = TEPINT - (SUPTAB.'TEMP_INI') +
                    ('REDU' (SUPTAB.'TREFERENCE') MAPART);
        'FINSI';
        'SI' (IABC '>' 1);
           DELTAT = (IDEP.IABC) - (IDEP.(IABC - 1));
           TEPINT = TEPINT - TEP2; DETR TEP2;
        'FINSI';
         TEPINT = TEPINT / DELTAT ;
         TEP2 = TEP1; DETR TEP1;
      'FINSI';
    'SINON';
       TEPINT = ('REDU' (SUPTAB.'TEMPERATURE') MAPART)
              - ('REDU' (SUPTAB.'TREFERENCE') MAPART) ;
    'FINSI';
  'FINSI';
***************************************************
************ MATERIAU A L INSTANT INST ************
***************************************************
  'SI' (MATVARI 'ET' ITHER);
     TEPABS = TEPINT + TALPH1 ;
     MAT1 = 'VARI' 'NUAG' OBJMOD MATREDU ('EXCO' 'T' TEPABS 'T');
  'SINON';
     MAT1 = MATREDU;
  'FINSI';
****************************************************
*** SOLUTIONS AUXILAIRES EN DECOUPLAGE DES MODES ***
****************************************************
   NBMIXT = 1; IM = 0;
  'SI' IMIXT;
     NBMIXT = 2;
* Constantes physiques de bi-matériaux
     CHAM1 = ('EXCO' 'YOUN' MAT1) 'ET' ('EXCO' 'NU  ' MAT1);
    'SI' ('NON' IDANS);
       CHPO1 = 'CHAN' 'CHPO' OBJMOD CHAM1;
       VYO_1 = 'EXTR' CHPO1 'YOUN' PM;
       VNU_1 = 'EXTR' CHPO1 'NU  ' PM;
       VYO_2 = VYO_1; VNU_2 = VNU_1;
    'SINON';
       CHPO1 = 'CHAN' 'CHPO' MODSUP ('REDU' CHAM1 MODSUP);
       VYO_1 = 'EXTR' CHPO1 'YOUN' PM;
       VNU_1 = 'EXTR' CHPO1 'NU  ' PM;
       CHPO1 = 'CHAN' 'CHPO' MODINF ('REDU' CHAM1 MODINF);
       VYO_2 = 'EXTR' CHPO1 'YOUN' PM;
       VNU_2 = 'EXTR' CHPO1 'NU  ' PM;
    'FINSI';
     KSI_1 = (3. - (4. * VNU_1));
     KSI_2 = (3. - (4. * VNU_2));
    'SI' ('EGA' &MODE 'PLANCONT');
       KSI_1 = (3. - VNU_1) / (1. + VNU_1);
       KSI_2 = (3. - VNU_2) / (1. + VNU_2);
    'FINSI';
     MU_1 = VYO_1/(2.*(1. + VNU_1));
     MU_2 = VYO_2/(2.*(1. + VNU_2));
     VA1 = (KSI_1/MU_1) + (1./MU_2);
     VA2 = (KSI_2/MU_2) + (1./MU_1);
     EPS1 = (1./(2.*VALPI))*(LOG (VA1/VA2));
     COSH1 = VALPI*EPS1;
     COSH1 = (('EXP' COSH1) + ('EXP' (COSH1*(-1.))))/2.;
     VA1 = (MU_1 + (KSI_1*MU_2))*(MU_2 + (KSI_2*MU_1));
     VA2 = MU_1*MU_2*((MU_1*(1. + KSI_2)) + (MU_2*(1. + KSI_1)));
     C_MATE = (COSH1*COSH1*VA1)/(4.*VA2);
     SUPTAB.'C_MATE' = C_MATE;
    'SI' (('EGA' &DIME 2) 'ET' ('NON' IDANS));
       EPSLG_R = EPS1*('LOG' R1);
       VA1 = 'COS' (EPSLG_R*180./VALPI);
       VA2 = 'SIN' (EPSLG_R*180./VALPI);
       BTA1 = ((0.5*VA1) + (EPS1*VA2))/(0.25 + (EPS1*EPS1));
       BTAPM1 = ((0.5*VA2) - (EPS1*VA1))/(0.25 + (EPS1*EPS1));
       DTA_1 = 'EXP' (0. - ((VALPI - TETAR1)*EPS1));
       DTA_2 = 'EXP' ((VALPI + TETAR1)*EPS1);
       GAM_1 = (KSI_1*DTA_1) - (DTA_1**(-1.));
       GAM_2 = (KSI_2*DTA_2) - (DTA_2**(-1.));
       GAMPM_1 = (KSI_1*DTA_1) + (DTA_1**(-1.));
       GAMPM_2 = (KSI_2*DTA_2) + (DTA_2**(-1.));
       GTAR1 = EPSLG_R + (TETAR1*0.5);
       COS2 = 'COS' (TETA1/2.); SIN2 = 'SIN' (TETA1/2.);
       D_1 = (BTA1*GAM_1*COS2) + (BTAPM1*GAMPM_1*SIN2);
       D_2 = (BTA1*GAM_2*COS2) + (BTAPM1*GAMPM_2*SIN2);
       DPM_1 = (BTAPM1*GAM_1*COS2) - (BTA1*GAMPM_1*SIN2);
       DPM_2 = (BTAPM1*GAM_2*COS2) - (BTA1*GAMPM_2*SIN2);
       CVA_1 = ('SIN' TETA1)*('SIN' (GTAR1*180./VALPI));
       CVA_2 = ('SIN' TETA1)*('COS' (GTAR1*180./VALPI));
       COE_1 = ((R1/(2.*VALPI))**0.5)/(4.*MU_1);
       COE_2 = ((R1/(2.*VALPI))**0.5)/(4.*MU_2);
    'FINSI';
    'SI' ('EGA' &DIME 3);
       NBMIXT = 2;
    'FINSI';
  'FINSI';
  'REPETER' BOUCMIXT NBMIXT;
   IM = IM + 1;
  'SI' IMIXT;
    'SI' (('EGA' &DIME 2) 'ET' ('NON' IDANS));
      'SI' (IM 'EGA' 1);
         MOTMIX = 'MOT' 'I'; MOJET1 = 'MOT' '    J1* =>   ';
         UX_1 = COE_1*(D_1 + (2.*DTA_1*CVA_1));
         UX_2 = COE_2*(D_2 + (2.*DTA_2*CVA_1));
         UY_1 = (-1.)*COE_1*(DPM_1 + (2.*DTA_1*CVA_2));
         UY_2 = (-1.)*COE_2*(DPM_2 + (2.*DTA_2*CVA_2));
      'FINSI';
      'SI' (IM 'EGA' 2);
         MOTMIX = 'MOT' 'II'; 'SAUT' 1 LIGNE;
         MOJET1 = 'MOT' '    J2* =>   ';
         UX_1 = (-1.)*COE_1*(DPM_1 - (2.*DTA_1*CVA_2));
         UX_2 = (-1.)*COE_2*(DPM_2 - (2.*DTA_2*CVA_2));
         UY_1 = (-1.)*COE_1*(D_1 - (2.*DTA_1*CVA_1));
         UY_2 = (-1.)*COE_2*(D_2 - (2.*DTA_2*CVA_1));
      'FINSI';
* Champ déplcement dans le repère local et général
      'SI' ('NON' IDANS);
         UL1 = UX_1 * 1.; UL2 = UY_1 * 1.;
      'SINON';
         UL1 = ('REDU' UX_1 PEL_1) + ('REDU' UX_2 PEL_2) +
             ((('REDU' UX_1 LCOM1) + ('REDU' UX_2 LCOM1))/2.);
         UL2 = ('REDU' UY_1 PEL_1) + ('REDU' UY_2 PEL_2) +
             ((('REDU' UY_1 LCOM1) + ('REDU' UY_2 LCOM1))/2.);
      'FINSI';
       UG1 = (UL1*('COS' PHI1)) - (UL2*('SIN' PHI1));
       UG2 = (UL1*('SIN' PHI1)) + (UL2*('COS' PHI1));
       UG1 = 'CHAN' 'ATTRIBUT' UG1 'NATURE' 'DIFFUS';
       UG2 = 'CHAN' 'ATTRIBUT' UG2 'NATURE' 'DIFFUS';
       DEPINT = (('NOMC' UG1 U1) 'ET' ('NOMC' UG2 U2)) + DEP000;
       SIGF = 'SIGM' MAT1 OBJMOD DEPINT;
       IPRES = VRAI; PRESSI = 'BSIG' SIGF OBJMOD;
    'SINON';
       IPRES = VRAI;
       LSUP = SUPTAB.'LEVRESUP'; LINF = SUPTAB.'LEVREINF';
      'SI' ('EGA' &DIME 3);
         IPRES = FAUX;
         LSUP = LSUP 'DIFF' (LSUP 'ELEM' 'APPU' 'STRI' ELTETA);
         LINF = LINF 'DIFF' (LINF 'ELEM' 'APPU' 'STRI' ELTETA);
      'FINSI';
       F11 = 'PRES' 'MASS' OBJMOD LSUP 1.;
       F21 = 'PRES' 'MASS' OBJMOD LINF 1.;
      'SI' (IM 'EGA' 1);
         MOTMIX = 'MOT' 'I'; MOJET1 = 'MOT' '    J1* =>   ';
         PRESSI = F11 + F21;
      'FINSI';
      'SI' (IM 'EGA' 2);
         MOTMIX = 'MOT' 'II'; 'SAUT' 1 LIGNE;
         MOJET1 = 'MOT' '    J2* =>   ';
         PRESSI = (('EXCO' F1 F11 F2)*(-1.)) + ('EXCO' F2 F11 F1)
                + (('EXCO' F1 F21 F2)*(-1.)) + ('EXCO' F2 F21 F1);
      'FINSI';
      'SI' (IM 'EGA' 3);
         MOTMIX = 'MOT' 'III'; 'SAUT' 1 LIGNE;
         MOJET1 = 'MOT' '    J3* =>   ';
      'FINSI';
       DEPINT = 'RESO' (('RIGI' OBJMOD MAT1) 'ET' BLOQ1) PRESSI;
       SIGF = 'SIGM' MAT1 OBJMOD DEPINT;
    'FINSI';
     DEPINT = 'REDU' DEPINT MAPART;
     SIGF = 'REDU' SIGF OBJMOD;
     SUPTAB.'G'.MOTMIX = TABLE;
     ITHER = FAUX;
***************************************************
************* APPEL A LA PROCEDURE T_PITA *********
***************************************************
     TAB = TABLE;
     TAB.'DEPLACEMENT' = SUPTABB.'DEPLACEMENT';
     TAB.'CONTRAINTE'= SUPTABB.'CONTRAINTE';
     TAB.'CHTHETA' = SUPTAB.'CHTHETA';
     TAB.'DEPL_AUXI' = DEPINT;
     TAB.'CONT_AUXI' = SIGF;
     TAB.'PRES_AUXI' = PRESSI;
    'SI' ('EXIST' SUPTAB 'PARALELLE');
       TAB.'PARALELLE' = SUPTAB.'PARALELLE';
    'FINSI';
    'SI' ('EXIST' SUPTAB 'PRESSION');
       TAB.'PRESSION' = SUPTAB.'PRESSION';
    'FINSI';
    'SI' IPARTI;
       TAB.'AVANCE' = SUPTAB.'AVANCE';
    'FINSI';
    'SI' (('EXIST' SUPTAB 'TEMPERATURE') 'OU' TESTHER);
      'SI' TESTHER;
         TAB.'TEMPERATURE' = SUPTAB.'CHARGEMENT';
      'SINON';
         TAB.'TEMPERATURE' = SUPTAB.'TEMPERATURE';
      'FINSI';
       TAB.'TREFERENCE' = SUPTAB.'TREFERENCE';
       TAB.'TALPHAREFE' = TALPH1;
    'FINSI';
     T_PITETA TABMOD MATERI TAB;
    'SI' (TAB.'IERR'); 'QUITTER' G_THETA; 'FINSI';
     TPI = TAB.'DGDA'; 'OUBL' TAB;
  'FINSI';
***************************************************
************ GRADIENT A L INSTANT INST ************
***************************************************
   GRADEP = 'GRAD' OBJMOD MAT1 DEPINT ;
   GRADEF = 'TEXT' '        ' ;
  'SI' ICOQU; GRADEF = 'GRAF' OBJMOD DEPINT; 'FINSI';
  'SI' ITHER;
     TEPEGR = 'GRAD' OBJMOD MAT1 ((E 'T' TEPINT U1) + DEP000);
  'FINSI';
********************************************************
* SI LA COURBE DE TRACTION DEPEND DE LA TEMPERATURE ON *
* CALCULE LA VARIATION DE CONTRAINTE DE VON-MISES LORS *
* D'UNE AUGMENTATION (DETATE) DE LA TEMPERATURE A INST *
********************************************************
  'SI' ((('DIME' MODPLA) '>' 0) 'ET' ITHER 'ET'
         ('NON' ('EXIST' ENEDEF INST)));
     DETATE = 1.;
     TEP1 = TEPABS + ('MANU' 'CHPO' MAPART 1 'T' DETATE);
     EPS1 = 'EXCO' VARF 'EPSE';
     MSQ1 = 'MASQ' 'SUPERIEUR' EPS1 1.E-20;
     VMI1 = ('CHAN' ('VMIS' OBJMOD SIGF MAT1)
                     'TYPE' 'SCALAIRE')*MSQ1;
     DETAVM = VMI1 * 0.;
    'REPETER' BCMOD2 NBOBJ;
       MODI = TABMOD.&BCMOD2;
       VM1 = 'REDU' VMI1 MODI;
      'SI' ('EXIS' MODPLA &BCMOD2);
        'SI' ('EGA' MODPLA.&BCMOD2 1);
           MA1 = 'VARI' 'NUAG' MODI ('MATE' MODI
                 'TRAC' TABTRA.&BCMOD2) TEP1;
           VM2 = 'VARI' 'NUAG' MODI (E 'TRAC' MA1 'SIGM')
                 ('REDU' EPS1 MODI) 'STRESSES' 'SCALAIRE';
           VM2 = (E VM2 'SIGM' S) * ('REDU' MSQ1 MODI);
        'FINSI';
        'SI' (('EGA' MODPLA.&BCMOD2 2) 'OU'
              ('EGA' MODPLA.&BCMOD2 3));
           MA1 = 'VARI' 'NUAG' MODI ('REDU' MATERI MODI) TEP1;
           EPS2 = 'REDU' EPS1 MODI;
           VM2 = 'CHAN' 'STRESSES' MODI (E MA1 'SIGY' S);
          'SI' ('EGA' MODPLA.&BCMOD2 2);
             HSCAL1 = 'EXCO' MA1 'H' 'SCAL';
             VM2 = VM2 + (('CHAN' 'STRESSES' MODI HSCAL1)*EPS2);
          'FINSI';
           VM2 = VM2 * ('REDU' MSQ1 MODI);
        'FINSI';
         DETAVM = DETAVM + ((VM2 - VM1) / DETATE);
      'FINSI';
    'FIN' BCMOD2;
  'FINSI';
****************************************************
******* EN CAS DE CALCUL EN VISCO_PLASTICITE *******
****************************************************
  'SI' IFLUA;
    'SI' ('EGA' ITYPEF 1);
       CHAF1 = 'CHAN' 'STRESSES' OBJMOD (E 'AF1' MAT1 S);
       CHAF2 = 'CHAN' 'STRESSES' OBJMOD (E 'AF2' MAT1 S);
       CHAF3 = 'CHAN' 'STRESSES' OBJMOD (E 'AF3' MAT1 S);
    'FINSI';
    'SI' ('EGA' ITYPEF 6);
       CHAF0 = 'CHAN' 'STRESSES' OBJMOD (E 'AF0' MAT1 S);
       CHAF1 = 'CHAN' 'STRESSES' OBJMOD (E 'AF1' MAT1 S);
       CHAF2 = 'CHAN' 'STRESSES' OBJMOD (E 'AF2' MAT1 S);
       CHAF3 = 'CHAN' 'STRESSES' OBJMOD (E 'AF3' MAT1 S);
    'FINSI';
  'FINSI';

*******************************************************
****      CRITERE DE DECHARGE DES CONTRAINTES      ****
*******************************************************
***
*** EVALUATION EN ELASTO-PLASTICITE OU THERMO-ELASTO-PLASTICITE
*** PAR COMPARAISON AVEC UN CALCUL EN ELASTICITE NON-LINEAIRE
*** EN PRENANT POUR REFERENCE LES CONTRAINTES DE VON-MISES DU
*** CALCUL RENDU PAR PASAPAS ET LES CONTRAINTES EQUIVALENTES LUES
*** SUR LES COURBES DE TRACTION
***
 'SI' ('NON' ('EXIST' (SUPTAB.'CRITERE_DECHARGE') INST)) ;

 'SI' (('NON' ('EXIST' ENEDEF INST)) 'ET' ('EGA' ITYPEF 99) 'ET' IPAP);

      EXISCRIT = FAUX ;
      VMITOT1 = 0. ;
      VMITOT2 = 0. ;

       'REPETER' BCMOD0 NBOBJ;

       MODI = TABMOD.&BCMOD0 ;
       MATI = 'REDU' MAT1 MODI ;
       EPSE1 = 'EXCO' VARF 'EPSE' ;
       EPSET = 'REDU' EPSE1 MODI ;
       MSQ = 'MASQ' 'SUPERIEUR' EPSET 1.E-6 ;

************
         'SI' ('EXIS' MODPLA &BCMOD0) ;
*** MODPLA : table indicée par entier pour stocker les modèles
***          1 si le modèle est plastique isotrope. Alors une
***            nouvelle courbe de traction EPSE-SIGMA est faite.
***          2 si le modèle est plastique cinématique

          EXISCRIT = VRAI ;
          TEPABS = TEPINT + TALPH1 ;

          YOU = 'CHAN' 'STRESSES' MODI ('EXCO' MATI 'YOUN') ;

          'SI' ('EGA' MODPLA.&BCMOD0 1);
*          *modèle est plastique isotrope. on utilise la courbe de traction TABT
            MATA = 'VARI' 'NUAG' MODI ('MATE' MODI
                    'TRAC' TABTRA.&BCMOD0) TEPABS ;
*           *VMIS1 = contraintes de Von-Mises en elastoplastique
            VMIS1 = 'CHAN' ('VMIS' MODI SIGF MATA) 'TYPE' 'SCALAIRE';
            EPELAST = 'EXCO' (VMIS1*(YOU**(-1))) 'SCAL' 'EPSE' ;
            EPSTOT = EPELAST + EPSET ;
*          *VMIS2 = contraintes déduites des déformations équivalentes par la co
            VMIS2 = 'VARI' 'NUAG' MODI (E 'TRAC' MATA 'SIGM')
                     EPSTOT 'STRESSES' 'SCALAIRE';
          'FINSI';

          'SI' ('EGA' MODPLA.&BCMOD0 2) ;
*         *modèle est plastique cinematique, cas ou SIGY et H sont des évolution
            VMIS1 = 'CHAN' ('VMIS' MODI SIGF MATI) 'TYPE' 'SCALAIRE';
            VMIS22 = 'CHAN' 'STRESSES' MODI (E MATI 'SIGY' S) ;
            HSCAL = 'EXCO' MATI 'H' 'SCAL';
            VMIS2 = VMIS22 + (('CHAN' 'STRESSES' MODI HSCAL) * EPSET);
          'FINSI';

          'SI' (('EGA' MODPLA.&BCMOD0 1) 'OU' ('EGA' MODPLA.&BCMOD0 2));
             VMIS1P = VMIS1 * MSQ ;
             VMIS1S = 'INTG' MODI VMIS1P ;
             VMIS2P = VMIS2 * MSQ ;
             VMIS2S = 'INTG' MODI VMIS2P ;
            'SI' ('EGA' &BCMOD0 1) ;
              VMITOT1 = VMIS1S ;
              VMITOT2 = VMIS2S ;
            'SINON' ;
              VMITOT1 = VMITOT1 + VMIS1S ;
              VMITOT2 = VMITOT2 + VMIS2S ;
            'FINSI' ;
          'FINSI';

         'SINON';
*** modèle élastoplastique et modèle plastique cinématique
***  avec caractéristiques independantes de la température

         CRIT = FAUX ;

        'SI' ('EXIST' MATI 'TRAC') ;
*       *extraction de la courbe de traction du modele MODI
          TRACTI = 'EXTR' MATI 'TRAC' 1 1 1 ;
          PEPSO = 'EXTR' TRACTI 'ABSC' ;
          PSIGM = 'EXTR' TRACTI 'ORDO' ;
          TRACTI = 'EVOL' 'MANU' 'EPSE' PEPSO 'SIGM' PSIGM ;
*       *VMIS1 = contraintes de Von-Mises en elastoplastique
          VMIS1 = 'CHAN' ('VMIS' MODI ('REDU' SIGF MODI) MATI)
                  'TYPE' 'SCALAIRE';
          YOU = 'CHAN' 'STRESSES' MODI ('EXCO' MATI 'YOUN') ;
          EPELAST = 'EXCO' (VMIS1*(YOU**(-1))) 'SCAL' 'EPSE' ;
          EPSTOT = EPELAST + EPSET ;
*       *VMIS2 = contraintes déduites des déformations équivalentes par la courb
          VMIS2 = 'VARI' MODI EPSTOT TRACTI 'STRESSES' 'SCALAIRE';
          CRIT = VRAI ;

        'SINON';
          'SI' (('EXIST' MATI 'SIGY') 'ET' ('EXIST' MATI 'H')) ;
*       *modèle est plastique cinematique traité ici séparément du cas ou SIGY e
*       *c'est inutile car MAT1 est déja instantié en température mais il faudra
*       *MODPLA dans son ensemble avec ZONE et une identification de automatique
            VMIS1 = 'CHAN' ('VMIS' MODI SIGF MATI) 'TYPE' 'SCALAIRE';
            VMIS22 = 'CHAN' 'STRESSES' MODI (E MATI 'SIGY' S) ;
            HSCAL = 'EXCO' MATI 'H' 'SCAL';
            VMIS2 = VMIS22 + (('CHAN' 'STRESSES' MODI HSCAL) * EPSET);
            CRIT = VRAI ;
          'FINSI';

        'FINSI';

        'SI' CRIT ;
           EXISCRIT = VRAI ;

           VMIS1P = VMIS1* MSQ ;
           VMIS1S = 'INTG' MODI VMIS1P ;
           VMIS2P = VMIS2 * MSQ ;
           VMIS2S = 'INTG' MODI VMIS2P ;

           VMITOT1 = VMITOT1 + VMIS1S ;
           VMITOT2 = VMITOT2 + VMIS2S ;

        'FINSI' ;


         'FINSI';
       'FIN' BCMOD0;

    'SI' EXISCRIT;
     'SI' ('EGA' VMITOT1 0.) ;
        MESS 'Pas de déformations plastiques supérieures à 1.E-6' ;
         SUPTAB.'CRITERE_DECHARGE'.INST = 1.0000 ;
     'SINON' ;
*       MESS 'VMITOT1 = ' VMITOT1 ;
*       MESS 'VMITOT2 = ' VMITOT2 ;
       MESS 'Critère de décharge :' (VMITOT2/VMITOT1) ;
         SUPTAB.'CRITERE_DECHARGE'.INST = (VMITOT2/VMITOT1) ;
     'FINSI';
    'FINSI';

 'FINSI';
 'FINSI';

*******************************************************
**** ENERGIE DE DEFORMATION ELASTIQUE ET PLASTIQUE ****
*******************************************************
***
*** DENSITE D'ENERGIE EN ELASTO OU THERMO-ELASTO-PLASTICITE ET
*** DENSITE D'ENERGIE LIEE A LA VARIATION DE COURBE DE TRACTION
***
  'SI' (('NON' ('EXIST' ENEDEF INST)) 'OU' IMIXT);
   IAVAN = VRAI;
  'SI' ('EGA' ITYPEF 99);
     WELAS = 0.5*('ENER' OBJMOD SIGF ('ELAS' OBJMOD SIGF MAT1));
    'SI' (IPAP 'ET' ('NON' IMIXT));
      'SI' (('EGA' IABC 1) 'ET' ('NON' IREPRI)) ;
         VMI1 = 'CHAN' ('VMIS' OBJMOD SIGF MAT1) 'TYPE' 'SCALAIRE';
        'SI' ICOQU; VMI1 = VMI1*OBJMOD EPAICH; 'FINSI';
         WPLAS = 0.5*VMI1*(E VARF 'EPSE');
        'SI' ((('DIME' MODPLA) '>' 0) 'ET' ITHER);
           WVMIS = 0.5*DETAVM*(E VARF 'EPSE') ;
        'FINSI';
      'SINON' ;
         VMI1 = 'CHAN' (0.5*(('VMIS' OBJMOD SIG1 MAT1) +
                 ('VMIS' OBJMOD SIGF MAT1))) 'TYPE' 'SCALAIRE';
        'SI' ICOQU; VMI1 = VMI1*OBJMOD EPAICH; 'FINSI';
         WPLAS = WPLAS + (VMI1*(E (VARF - VAR1) 'EPSE'));
        'SI' ((('DIME' MODPLA) '>' 0) 'ET' ITHER);
           WVMIS = WVMIS + ((0.5*(DETAV1 + DETAVM))*
                   (E (VARF - VAR1) 'EPSE'));
        'FINSI';
      'FINSI' ;
       ENERM = WELAS + WPLAS;
       SIG1 = SIGF; VAR1 = VARF;
      'SI' ((('DIME' MODPLA) '>' 0) 'ET' ITHER); DETAV1 = DETAVM;
      'FINSI';
    'SINON';
       ENERM = WELAS; IAVAN = FAUX;
    'FINSI';
  'FINSI';
***
*** DENSITE D'ENERGIE POUR LES FLUAGES DONT ON A UNE
*** EXPRESSION EXPLICITE DE L'INTEGRATION SUR LE TEMPS
***
  'SI' ('EGA' ITYPEF 1);
     UN1 = CHAF1 * (CHAF1 ** (-1.));
     COE1 = ((MINI (CHAF2 + UN1)) + (MAXI (CHAF2 + UN1)))/2.;
     COE2 = ((MINI CHAF3) + (MAXI CHAF3))/2.;
     VMI1 = E S ('VMIS' OBJMOD SIGF MAT1);
     ENERM = (CHAF2*((CHAF2 + UN1)**(-1.)))*CHAF1*
             (VMI1**COE1)*CHAF3*(INST**(COE2 - 1));
    'SI' ICOQU; ENERM = ENERM*OBJMOD EPAICH; 'FINSI';
  'FINSI';
  'SI' ('EGA' ITYPEF 6);
     VMI1 = E S ('VMIS' OBJMOD SIGF MAT1);
     ENERM1 = (1./2.)*CHAF1*(VMI1**2.);
     ENERM2 = (2./3.)*CHAF2*(VMI1**3.);
     ENERM3 = (3./4.)*CHAF3*(VMI1**4.);
     ENERM = ENERM1 + ENERM2 + ENERM3;
    'SI' ICOQU; ENERM = ENERM*OBJMOD EPAICH; 'FINSI';
  'FINSI';
***
*** ON N'A PAS UNE EXPRESSION EXPLICITE DE
*** L'INTEGRATION DU FLUAGE SUR LE TEMPS
***
  'SI' (('>' ITYPEF 1) 'ET' ('<' ITYPEF 6));
     SIGMOY = 0.5*(SIG1 + SIGF);
    'SI' (('EGA' IABC 1) 'ET' ('NON' IREPRI));
       ENERM = 'ENER' OBJMOD VITDFI SIGMOY;
    'SINON' ;
       ENERM = ENERM + ('ENER' OBJMOD (VITDFI - VDI1) SIGMOY);
    'FINSI' ;
     SIG1 = SIGF; VDI1 = VITDFI;
  'FINSI';
***
*** ON STOCKE L'ENEGIE DANS UNE TABLE
***
  'SI' IPAP;
     ENEDEF.INST = ENERM;
    'SI' ((('DIME' MODPLA) '>' 0) 'ET' ITHER);
       ENEVON.INST = WVMIS;
    'FINSI';
  'FINSI';
***
*** SI L'ENEGIE EST DEJA CALCULEE ON LE RESTITUE
***
  'SINON';
   IAVAN = FAUX; ENERM = ENEDEF.INST;
  'SI' ((('DIME' MODPLA) '>' 0) 'ET' ITHER);
     WVMIS = ENEVON.INST;
  'FINSI';
  'FINSI';
****************************************************
********** RECUPERATION DU POINT A AVANCER *********
****************************************************
  'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
    'SI' (IPAP 'ET' ('NON' IMIXT));
       SUPTAB.'G'.INST = TABLE;
    'FINSI';
     TTETA*'TABLE' = SUPTAB.'CHTHETA';
     INT = 'INDEX' TTETA;
    'SI' IPARTI;
      'SI' ('EGA' ('TYPE' (SUPTAB.'AVANCE')) 'MAILLAGE');
         PMA = 'CHAN' 'POI1' (SUPTAB.'AVANCE');
         NBOU = ('NBNO' PMA) + 1;
      'SINON';
         PMA = SUPTAB.'AVANCE'; NBOU = 2;
      'FINSI';
    'SINON';
       NBOU = 'DIME' TTETA;
    'FINSI';
  'FINSI';
  'SI' (('EGA' &DIME 2) 'OU' ICOQU);
     NBOU = 1;
  'FINSI';
**************************************************
********  BOUCLE SUR LES POINTS A AVANCER  *******
**************************************************
  'REPETER' BCNOEU NBOU;
  'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
    'SI' (&BCNOEU 'EGA' NBOU);
       PM = MOT 'GLOBAL';
       NUNOE = 'CHAI' ' ' PM ' ';
    'SINON';
       PM = INT.&BCNOEU;
      'SI' IPARTI;
        'SI' ('EGA' ('TYPE' (SUPTAB.'AVANCE')) 'MAILLAGE');
           PM = 'POIN' PMA &BCNOEU;
        'SINON';
           PM = SUPTAB.'AVANCE';
        'FINSI';
      'FINSI';
       NUNOE = 'NOEU' PM;
    'FINSI';
     TETA = TTETA.PM;
  'FINSI';
  'SI' (('EGA' &DIME 2) 'OU' ICOQU);
     TETA = SUPTAB.'CHTHETA';
  'FINSI';
**************************************************
************* GRADIANT DU CHAMP THETA ************
**************************************************
   TETA = TETA + DEP000;
   TETAGR = 'GRAD' OBJMOD MAT1 TETA ;
   DIVTETA = (E GR1 TETAGR S)+(E GR5 TETAGR S)+(E GR9 TETAGR S);
**************************************************
**** LES COMPOSANTES DU CHAMP THETA EN MCHAML ****
**************************************************
   TETX = 'CHAN' 'CHAM' OBJMOD (E U1 TETA S) 'STRESSES';
   TETY = 'CHAN' 'CHAM' OBJMOD (E U2 TETA S) 'STRESSES';
  'SI' (&DIME 'EGA' 3) ;
     TETZ = 'CHAN' 'CHAM' OBJMOD (E U3 TETA S) 'STRESSES';
  'FINSI';
********************************************************
*********** SI LE MATERIAU N'EST PAS CONSTANT **********
*** S60 = 0.5*(grad D)*THETA*(EPSI elas)*(EPSI elas) ***
********* S70 = Tr(sigma)*T*(Grad Alpha)*THETA *********
********************************************************
***Détermination de rho en cas de calcul en dynamique***
'SI' ('EXIST' SUPTAB 'VITESSE') ;
       RHO1 = 'REDU' (E MAT1 'RHO' S) OBJMOD;
       RHO11= 'CHAN' 'CHPO' OBJMOD RHO1 ;
      'FINSI';
***********************************************
 'SI' MATVARI;
*** Le coefficient de Poisson est constant ***
     NU1 = 'REDU' (E MAT1 'NU' S) OBJMOD;
     NU1 = E NU1  S 'NU';
****** Gradient de Module d'young ******
 'SI' YOUVARI;
       YOU1 = 'REDU' (E MAT1 'YOUN' S) OBJMOD;
       YOUGR = GRA000;
       I = 0;
      'REPETER' NBJ2 NBOBJ;
         I = I + 1;
         YO1 = 'CHAN' 'CHPO' TABMOD.I
               ('REDU' (E MAT1 'YOUN' S) TABMOD.I);
         YOUGR = YOUGR + ('GRAD' TABMOD.I MAT1 (('NOMC' U1 YO1)
                 + ('REDU' DEP000 ('EXTR' YO1 'MAIL'))));
      'FIN' NBJ2;
       YOU1 = ((E GR1 YOUGR S)*OBJMOD TETX) +
              ((E GR2 YOUGR S)*OBJMOD TETY);
      'SI' (&DIME 'EGA' 3);
         YOU1 = YOU1 + ((E GR3 YOUGR S)*OBJMOD TETZ);
      'FINSI';
       YOU1 = E YOU1 S 'YOUN';
       DMAT = 'MATE' OBJMOD 'YOUN' YOU1 'NU' NU1;
       SIGPRIM = ('HOOK' OBJMOD DMAT)*OBJMOD
                 ('ELAS' OBJMOD SIGF MAT1);
       S60 = 'INTG' OBJMOD (0.5*('ENER' OBJMOD
              SIGPRIM ('ELAS' OBJMOD SIGF MAT1)));
    'FINSI';
****** Gradient de Coefficient de Dilatation ******
    'SI' (ITHER 'ET' ALFVARI);
       ALF1 = 'REDU' (E MAT1 'ALPH' S) OBJMOD;
       ALFGR = GRA000; I = 0;
      'REPETER' NBJ3 NBOBJ;
         I = I + 1;
         AL1 = 'CHAN' 'CHPO' TABMOD.I
               ('REDU' (E MAT1 'ALPH' S) TABMOD.I);
         ALFGR = ALFGR + ('GRAD' TABMOD.I MAT1 (('NOMC' U1 AL1)
                 + ('REDU' DEP000 ('EXTR' AL1 'MAIL'))));
      'FIN' NBJ3;
       ALF1 = ((E GR1 ALFGR S)*OBJMOD TETX) +
              ((E GR2 ALFGR S)*OBJMOD TETY);
      'SI' (&DIME 'EGA' 3) ;
         ALF1 = ALF1 + ((E GR3 ALFGR S)*OBJMOD TETZ);
      'FINSI' ;
       ALF1 = E ALF1 S 'ALPH';
       DMAT = 'MATE' OBJMOD 'YOUN' 1. 'NU' NU1 'ALPH' ALF1;
       S70 = 'INTG' OBJMOD ('ENER' OBJMOD SIGF ('ELASTI'
              OBJMOD ('THETA' OBJMOD TEPINT DMAT) DMAT));
    'FINSI';
  'FINSI';
***********************************************
******** S40 = Tr(sigma)*(Grad T)*THETA *******
***********************************************
  'SI' ITHER;
     TEMU = ((E GR1 TEPEGR S)*OBJMOD TETX) +
            ((E GR2 TEPEGR S)*OBJMOD TETY) ;
    'SI' (&DIME 'EGA' 3) ;
       TEMU = TEMU + ((E GR3 TEPEGR S)*OBJMOD TETZ);
    'FINSI' ;
     TEMU = 'CHAN' 'TYPE' ('EXCO' 'SCAL' TEMU 'T') 'TEMPERATURES';
     EPSTU = 'ELAS' OBJMOD ('THETA' OBJMOD MAT1 TEMU) MAT1;
     S40 = 'INTG' OBJMOD ('ENER' OBJMOD SIGF EPSTU);
  'FINSI';
****************************************************
********* S120 = wvmis*(Grad T)*THETA avec *********
* wvmis = SOME d(Von_mises)/d(Temperature) d(EPSE) *
****************************************************
  'SI' ((('DIME' MODPLA) '>' 0) 'ET' ITHER);
     TEMU = 'CHAN' 'TYPE' ('EXCO' 'T' TEMU 'SCAL') 'SCALAIRE';
     S120 = 'INTG' OBJMOD (WVMIS * TEMU);
  'FINSI';
*********************************************************
*** Contribution due a la force au fond de la fissure ***
***************** S50 = F*(grad U)*THETA ****************
*********************************************************
  'SI' IPRES ;
    'SI' ('NON' IMIXT);
      'SI' PASA ;
         PREINT = ('TIRE' CHAR1 INST 'MECA') 'REDU' MAPART ;
      'SINON' ;
         MOC1 = 'CHAIN' 'C' ('TYPE' PRESSI);
        'SI' ('EGA' MOC1 'CCHARGEME');
           PREINT = ('TIRE' PRESSI INST) 'REDU' MAPART ;
        'SINON';
           PREINT = PRESSI 'REDU' MAPART ;
        'FINSI';
      'FINSI' ;
    'SINON' ;
       PREINT = PRESSI 'REDU' MAPART ;
    'FINSI' ;
     GRADCH = 'CHANGER' 'CHPO' OBJMOD GRADEP ;
     DEPLX = ((E GR1 GRADCH S)*(E U1 TETA S)) +
             ((E GR2 GRADCH S)*(E U2 TETA S)) ;
     DEPLY = ((E GR4 GRADCH S)*(E U1 TETA S)) +
             ((E GR5 GRADCH S)*(E U2 TETA S)) ;
     DEP0 = DEP000 + ('NOMC' DEPLX U1) + ('NOMC' DEPLY U2);
    'SI' (&DIME 'EGA' 3) ;
       DEPLX = DEPLX + ((E GR3 GRADCH S)*(E U3 TETA S));
       DEPLY = DEPLY + ((E GR6 GRADCH S)*(E U3 TETA S));
       DEPLZ = ((E GR7 GRADCH S)*(E U1 TETA S)) +
               ((E GR8 GRADCH S)*(E U2 TETA S)) +
               ((E GR9 GRADCH S)*(E U3 TETA S)) ;
       DEP0 = ('NOMC' DEPLX U1) + ('NOMC' DEPLY U2) +
              ('NOMC' DEPLZ U3);
    'FINSI' ;
    'SI' ICOQU ;
       GRAFCH = 'CHANGER' 'CHPO' OBJMOD GRADEF ;
       BXX = E 'BX,X' GRAFCH S;
       BXY = E 'BX,Y' GRAFCH S;
       BYX = E 'BY,X' GRAFCH S;
       BYY = E 'BY,Y' GRAFCH S;
       DEPFX = 'NOMC' 'RX' ( (BXX*(E 'UX' TETA S))+
                             (BXY*(E 'UY' TETA S)) );
       DEPFY = 'NOMC' 'RY' ( (BYX*(E 'UX' TETA S))+
                             (BYY*(E 'UY' TETA S)) );
       DEP0 = DEP000 + DEPFX + DEPFY;
    'FINSI' ;
     S50 = 'XTY' PREINT DEP0 MOTF MOTU ;
  'FINSI';
**************************************************
**** Contribution due a l'energie mecanique ******
************** S10 = w*(div THETA) ***************
******* S20 = sigma*(grad U)*(grad THETA) ********
**************************************************
   S10 = 'INTG' OBJMOD (ENERM*OBJMOD DIVTETA) ;
  'SI' ICOQU;
     S20 = 'INTG' OBJMOD ('WORK' OBJMOD SIGF
            (GRADEP*OBJMOD TETAGR) (GRADEF*OBJMOD TETAGR)) ;
  'SINON';
     S20 = 'INTG' OBJMOD ('WORK' OBJMOD SIGF
                         (GRADEP*OBJMOD TETAGR)) ;
  'FINSI';
****************************************************
** Calcul des termes supplementaires en dynamique **
****************************************************
    'SI' ('EXIST' SUPTAB 'VITESSE') ;
    RH1  = 'CHAN' 'CHAM' RHO11 OBJMOD STRESSES ;
    VITF = 'CHAN' 'CHAM'  OBJMOD VITF 'STRESSES';
ATT5 = ((E U1 VITF)**2) + ((E U2 VITF)**2) ;
S300 = 'INTG' OBJMOD (0.5*(RH1 * ATT5 * DIVTETA)) ;
ATT61 = ((E GR1 GRADEP 'SCAL')*TETX) + ((E GR2 GRADEP 'SCAL')*TETY) ;
ATT62 = ((E GR4 GRADEP 'SCAL')*TETX) + ((E GR5 GRADEP 'SCAL')*TETY) ;
ATT6 = ((E U1 VITF 'SCAL')*ATT61) + ((E U2 VITF 'SCAL')*ATT62) ;
S400 = 'INTG' OBJMOD(RH1 * ATT6 );
       'SI' ('EGA' IABC 1);
    TEMP22 = TEMP1;
    S401 = S400;
    S500 = S400;
       'SINON' ;
    'SI' ('EGA' IABC 2);
*
** calcul du pas de temps DT en dynamique
*
     DT1 = TEMP1 - TEMP22;
    'FINSI';
       S500 = (S400 - S401) / DT1 ;
       S401 = S400;
    'FINSI' ;
  'FINSI';
*******************************************************
** Terme supplementaire en cas de materiaux composite *
********* integrale sur la ligne d'interface **********
************ S100 = (W(b) - W(a))*TETA(x) *************
** S110 = SIGF*n*[ (dU/dX)(b) - (dU/dX)(a) ]*TETA(x) **
****** SIGF*n = Force agissant sur l'interface ********
*******************************************************
  'SI' IINTER ;
     I = 0;
    'REPETER' NBJ4 (NBOBJ - 1);
       I = I + 1;
       OBJINT = 'MODE' LINTER.I 'MECANIQUE' 'ELASTIQUE';
       TETXL = 'REDU' LINTER.I (E U1 TETA S);
       TETXLC = 'CHAN' 'CHAM' OBJINT TETXL 'STRESSES';
***
       ENEMA = 'REDU' LINTER.I ('CHAN' 'CHPO' TABMOD.I
                ('REDU' TABMOD.I ENERM));
       ENEMB = 'REDU' LINTER.I ('CHAN' 'CHPO' TABMOD.(I + 1)
                ('REDU' TABMOD.(I + 1) ENERM));
       ENRMAL = 'CHAN' 'CHAM' OBJINT ENEMA 'STRESSES';
       ENRMBL = 'CHAN' 'CHAM' OBJINT ENEMB 'STRESSES';
       S100 = S100 + ('INTG' OBJINT
              ((ENRMBL - ENRMAL) * OBJINT TETXLC));
***
       GRADA = 'REDU' LINTER.I ('CHAN' 'CHPO' TABMOD.I
                ('REDU' TABMOD.I GRADEP));
       GRADB = 'REDU' LINTER.I ('CHAN' 'CHPO' TABMOD.(I + 1)
                ('REDU' TABMOD.(I + 1) GRADEP));
       UXXAL = 'CHAN' 'CHAM' OBJINT (E GR1 GRADA S) 'STRESSES';
       UXXBL = 'CHAN' 'CHAM' OBJINT (E GR1 GRADB S) 'STRESSES';
       UYXAL = 'CHAN' 'CHAM' OBJINT (E GR4 GRADA S) 'STRESSES';
       UYXBL = 'CHAN' 'CHAM' OBJINT (E GR4 GRADB S) 'STRESSES';
       SIGML = 'REDU' LINTER.I ('CHAN' 'CHPO' OBJMOD SIGF);
       SIXXL = 'CHAN' 'CHAM' OBJINT (E SM1 SIGML S) 'STRESSES';
       SIXYL = 'CHAN' 'CHAM' OBJINT (E SM4 SIGML S) 'STRESSES';
       AAAA1 = (SIXXL * OBJINT (UXXBL - UXXAL)) +
               (SIXYL * OBJINT (UYXBL - UYXAL));
       S110 = S110 + ('INTG' OBJINT (AAAA1*OBJINT TETXLC));
    'FIN' NBJ4;
  'FINSI';

**************************************************
******** RASSEMBLAGE DE DIFFERENTS TERMES ********
**************************************************
   GMCANI = S20 - S10 - S60 - S100 + S110 ;
   GTERMI = S40 + S70 - S120 ;
   GPRESS = 0. - S50 ;
*Regroupement des termes en cas de calcul en dynamique*
 'SI' ('EXIST' SUPTAB 'VITESSE');
   GDYN = S300 + S500 ;
   GTOTA = GMCANI + GTERMI + GPRESS + GDYN ;
 'SINON';
  GTOTA = GMCANI + GTERMI + GPRESS ;
 'FINSI';
***************************************************
****** STOCKAGE DES RESULTATS DANS SUPTAB.'G' *****
***************************************************
   C1 = C GMCANI ' '; C2 = C GTERMI ' ';
   C3 = C GPRESS '  '; C4 = C GTOTA;
  'SI' IPAP;
**Affichage de G dans le cas d'un calcul en dynamique**
   'SI' ('EXIST' SUPTAB 'VITESSE') ;
      'SI' (('EGA' &DIME 2 )'OU'('EGA' &DIME 3)) ;
       'MESS' INST'       'GTOTA;
       PROVALG = PROVALG ET (PROG GTOTA);
       SUPTAB.'G'.INST = GTOTA;
      'FINSI';
*******************************************************
   'SINON';
    'SI' (('EGA' &DIME 2) 'OU' ICOQU);
       'SI' ('EGA' &DIME 2);
         PROVALG = PROVALG ET (PROG GTOTA);
       'FINSI';
      'SI' IMIXT;
        'MESS' MOJET1 C1 C2 C3 C4;
         INN = 'INDE' TPI;
        'REPETER' BB1 ('DIME' TPI);
           VA1 = ((TPI.(INN.&BB1))**2) / (4.* GTOTA);
           SUPTAB.'G'.MOTMIX.(INN.&BB1) = VA1;
        'FIN' BB1;
      'SINON';
        'MESS' (C INST ' ') C1 C2 C3 C4;
         SUPTAB.'G'.INST = GTOTA;
      'FINSI';
    'FINSI';
    'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
      'SI' IMIXT;
        'MESS' NUNOE MOJET1 C1 C2 C3 C4;
         IND1 = 'INDE' TPI;
         IND2 = 'INDE' (TPI.(IND1.1));
        'REPETER' BB1 ('DIME' IND2);
           PM = IND2.&BB1;
          'REPETER' BB2 ('DIME' IND1);
             T1 = IND1.&BB2;
            'SI' ('NON' ('EXIST' (SUPTAB.'G'.MOTMIX) T1));
               SUPTAB.'G'.MOTMIX.T1 = TABLE;
            'FINSI';
             VA1 = ((TPI.T1.PM)**2) / (4.* GTOTA);
             SUPTAB.'G'.MOTMIX.T1.PM = VA1;
          'FIN' BB2;
        'FIN' BB1;
      'SINON';
        'MESS' NUNOE (C INST ' ') C1 C2 C3 C4;
         SUPTAB.'G'.INST.PM = GTOTA;
      'FINSI';
    'FINSI';
   'FINSI';
  'SINON';
    'SI' (('EGA' &DIME 2) 'OU' ICOQU);
      'MESS' C1 C2 C3 C4;
      'SI' IMIXT;
         SUPTAB.'G'.MOTMIX = (TPI**2) / (4.* GTOTA);
      'SINON';
         SUPTAB.'G' = GTOTA;
      'FINSI';
    'FINSI';
    'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
      'MESS' NUNOE C1 C2 C3 C4;
      'SI' IMIXT;
         INN = 'INDE' TPI;
        'REPETER' BB1 ('DIME' TPI);
           VA1 = ((TPI.(INN.&BB1))**2) / (4.* GTOTA);
           SUPTAB.'G'.MOTMIX.(INN.&BB1) = VA1;
        'FIN' BB1;
      'SINON';
         SUPTAB.'G'.PM = GTOTA;
      'FINSI';
    'FINSI';
   'FINSI';
  'MENA';

'FIN' BCNOEU;
'MENA';
'SI' (IPAP 'ET' (NBOU '>' 1));
  'SAUT' 1 'LIGNE';
'FINSI';
'SI' (IPAP 'ET' (NBOU 'EGA' 1));
  'SI' (('ABS' ((&BOUCEXT/10) - (&BOUCEXT/10.))) '<' 1.D-10);
    'SAUT' 1 'LIGNE';
  'FINSI';
'FINSI';
'FIN' BOUCMIXT;
'FIN' BOUCEXT ;
****************************************************
********* FIN BOUCLE SUR LE PAS DE CALCUL  *********
****************************************************
****************************************************
**** STOCKAGE DES RESULTATS DANS SUPTAB.'EVOLG' ****
****************************************************
'SI' IPAP;
***Affichage de G pour le calul en dynamique****
 'SI' ('EXIST' SUPTAB 'VITESSE') ;
    'SI' (('EGA' &DIME 2) 'OU' ('EGA' &DIME 3));
       SUPTAB.'EVOLG' = 'EVOL' 'MANU' 'TEMPS' TEMPREEL 'G(t)' PROVALG;
    'FINSI';
*************************************************
 'SINON';
   SUPTAB.'EVOLG' = TABLE;
   IND1 = 'INDE' (SUPTAB.'G');
  'SI' (('EGA' &DIME 2) 'OU' ICOQU);
    'TITRE' CHA1;
    'SI' IMIXT;
      'REPETER' BB1 ('DIME' IND1);
         MOT1 = IND1.&BB1; PT = PROG; PG = PROG;
         IND2 = 'INDE' (SUPTAB.'G'.MOT1);
        'REPETER' BB2 ('DIME' IND2);
           T1 = IND2.&BB2;
           PT = PT 'ET' (PROG T1);
           PG = PG 'ET' (PROG SUPTAB.'G'.MOT1.T1);
        'FIN' BB2;
         SUPTAB.'EVOLG'.MOT1='EVOL' 'MANU' 'TEMPS' PT MOTTI PG;
      'FIN' BB1;
    'SINON';
       PT = PROG; PG = PROG;
      'REPETER' BB1 ('DIME' IND1);
         T1 = IND1.&BB1;
         PT = PT 'ET' (PROG T1);
         PG = PG 'ET' (PROG SUPTAB.'G'.T1);
      'FIN' BB1;
       SUPTAB.'EVOLG'='EVOL' 'MANU' 'TEMPS' PT MOTTI PG;
    'FINSI';
  'FINSI';
  'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
    'SI' IMIXT;
      'REPETER' BB1 ('DIME' IND1);
         MOT1 = IND1.&BB1; SUPTAB.'EVOLG'.MOT1 = TABLE;
         IND2 = 'INDE' (SUPTAB.'G'.MOT1);
         IND3 = 'INDE' (SUPTAB.'G'.MOT1.(IND2.1));
        'REPETER' BB2 ('DIME' IND3);
           PM = IND3.&BB2; PT = PROG; PG = PROG;
          'SI' ('EGA' &BB2 ('DIME' IND3));
             CHA2 = 'CHAI' ' (Global)';
          'SINON';
             CHA2 = 'CHAI' ' (Pt ' ('NOEUD' PM) ')';
          'FINSI';
          'TITR' ('CHAI' CHA1 CHA2);
          'REPETER' BB3 ('DIME' IND2);
             T1 = IND2.&BB3;
             PT = PT 'ET' (PROG T1);
             PG = PG 'ET' (PROG SUPTAB.'G'.MOT1.T1.PM);
          'FIN' BB3;
           SUPTAB.'EVOLG'.MOT1.PM='EVOL' 'MANU' 'TEMPS' PT MOTTI PG;
        'FIN' BB2;
      'FIN' BB1;
    'SINON';
       IND2 = 'INDE' (SUPTAB.'G'.(IND1.1));
      'REPETER' BB1 ('DIME' IND2);
         PM = IND2.&BB1; PT = PROG; PG = PROG;
        'SI' ('EGA' &BB1 ('DIME' IND2));
           CHA2 = 'CHAI' ' (Global)';
        'SINON';
           CHA2 = 'CHAI' ' (Pt ' ('NOEUD' PM) ')';
        'FINSI';
        'TITR' ('CHAI' CHA1 CHA2);
        'REPETER' BB2 ('DIME' IND1);
           T1 = IND1.&BB2;
           PT = PT 'ET' (PROG T1);
           PG = PG 'ET' (PROG SUPTAB.'G'.T1.PM);
        'FIN' BB2;
         SUPTAB.'EVOLG'.PM='EVOL' 'MANU' 'TEMPS' PT MOTTI PG;
      'FIN' BB1;
    'FINSI';
  'FINSI';
 'FINSI';
'FINSI';
********************************************************
**** STOCKAGE POUR UNE EVENTUELLE REPRISE DE CALCUL ****
********************************************************
'SI' (IPAP 'ET' IAVAN);
   SUPTAB.'ENEDEF' = ENEDEF;
  'SI' ((('DIME' MODPLA) '>' 0) 'ET' ITHER);
     SUPTAB.'ENEVON' = ENEVON;
  'FINSI';
   SUPTAB.'SIG1' = SIG1 ;
   SUPTAB.'VAR1' = VAR1 ;
   SUPTAB.'VDI1' = VDI1 ;
   SUPTAB.'MAT1' = MAT1 ;
'FINSI';
'FINPROC' SUPTAB;
$$$$


