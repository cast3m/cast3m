$$$$ PROBABRS
* PROBABRS  PROCEDUR  AM        99/07/13    21:15:06     3631
'DEBPROC' PROBABRS MuR*'FLOTTANT' SigR*'FLOTTANT'
                   rR*'FLOTTANT' bR*'FLOTTANT'
                 MuS*'FLOTTANT' SigS*'FLOTTANT'
                   rS*'FLOTTANT' bS*'FLOTTANT';
*|=====================================================================
*|
*| << OBJET >> :
*|
*| Procedure permettant le calcul de la probabilite de defaillance
*| idealisee :
*|             Prob(R<S)
*| Probabilite que la resistance    (R) soit inferieure a
*|                 la sollicitation (S)
*|
*| (la resistance et la sollicitation sont definies par leur
*|  quatre premiers moments statistiques)
*|
*|
*| << ENTREE >> :
*| -- ARGUMENTS OBLIGATOIRES DANS TOUS LES CAS --
*|
*| MuR, MuS : objets de type REEL designant la valeur moyenne
*|                    de R et S.
*|
*| SigR, SigS : objets de type REEL designant l'ecart-type
*|                    de R et S.
*|
*| rR, rS : objets de type REEL designant la valeur du coefficient
*|                    de symétrie de R et S.
*|
*| bR, bS : objets de type REEL designant la valeur du coefficient
*|                    d'aplatissement de R et S.
*|
*| << SORTIE >> :
*|
*| Pf : objet de type REEL designant la probabilite de défaillance
*|
*|=====================================================================
*
* ______________________
*
* DECLARATIONS GENERALES
* ______________________
*
SI = 'MOT' 'SI' ; SINON = 'MOT' 'SINON' ; FINSI = 'MOT' 'FINSI' ;
REPETER = 'MOT' 'REPETER'; QUITTER = 'MOT' 'QUITTER'; FIN = 'MOT' 'FIN';
EXISTE = 'MOT' 'EXISTE' ; EGA = 'MOT' 'EGA' ;
ERREUR = 'MOT' 'ERREUR' ;
ENTIER   = 'MOT' 'ENTIER  ' ;
FLOTTANT = 'MOT' 'FLOTTANT' ;
MOT      = 'MOT' 'MOT     ' ;
* _____
*
* TESTS
* _____
*
* _________________
*
* DEBUT DES CALCULS
* _________________
*
*
Pf =0.;
oldS = 0.;
FR = 0.;
NPAS = 600;
tabmin = PROG (MuS-(6*SigS)) (MuR-(6*SigR));
tabmax = PROG (MuS+(6*SigS)) (MuR+(6*SigR));
binf = mini tabmin;
bsup = maxi tabmax;
h = (bsup-binf)/NPAS;
REPE BOUC NPAS;
  absx = binf + (&BOUC*h);
  valR = PROB MuR SigR rR bR absx;
  valS = PROB MuS SigS rS bS absx;
  fS = (valS-oldS)/h;
  FR = valR;
  Pf = Pf + (h*fS*FR);
  oldS = valS;
FIN BOUC;
'FINPROC' Pf;
$$$$

