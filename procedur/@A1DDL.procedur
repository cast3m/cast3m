$$$$ @A1DDL
* @A1DDL    PROCEDUR  BR232186  14/06/03    21:15:01     8061
DEBP @A1DDL TABDYN * TABLE;
**********************************************
* PROCEDURE @A1DDL.PROCEDUR
**********************************************
* Entree :      TABDYN (type TABLE)
*               TABLE DE PARAMETRES
**********************************************
* Sortie :      EVDR (type EVOLUTION)
*               EVOLUTION TEMP. DES DEPLACEMENTS
*
*               EVVR (type EVOLUTION)
*               EVOLUTION TEMP. DES VITESSES
*
*               EVAR (type EVOLUTION)
*               EVOLUTION TEMP. DES ACCELERATIONS
*
*               TAB3 (type TABLE)
*               TABLE DE VARIABLES INTERNES
*               A CONVERGENCE
**********************************************
* Commentaire : Integration temporelle
*               des equations d un oscillateur
*               a 1DDL non lineaire
*               avec actualisation de
*               l amortissement
**********************************************
* Developpeur : COMPUTATIONAL ENGINEERING
*               AND STRUCTURES SAS
*               contact@c-e-s.fr
**********************************************

* Recuperation des variables
M      = TABDYN .  1;
BETA   = TABDYN .  2;
GAMMA  = TABDYN .  3;
FPLAS  = TABDYN .  4;
KA     = TABDYN .  5;
KB     = TABDYN .  6;
ACTU   = TABDYN .  7;
TIME   = TABDYN .  8;
AXTAB  = TABDYN .  9;
XI0    = TABDYN . 10;
XMIN   = TABDYN . 11;
AMMAX  = TABDYN . 12;
NC     = TABDYN . 13;
DPLUS  = TABDYN . 14;
DMOIN  = TABDYN . 15;
MAXDP  = TABDYN . 16;
MAXDM  = TABDYN . 17;
AOLD   = TABDYN . 18;

* Initialisation des parametres dynamiques
F0    = (((KB + KA) / M)**0.5) / (2.0 * PI);
DT    = ((EXTR TIME 2) - (EXTR TIME 1));
V0    = 0.0;
D0    = 0.0;
FD    = 0.0;
W0    = ((2.0 * PI) * F0);
XNL   = XI0 - XMIN;
CA    = (M * (2.0 * (XI0 * W0)));
K     = (M * (W0**2.0));
S     = 1.0 / (M + (((GAMMA * DT) * CA) + ((BETA * (DT**2)) * K)));

* Table pour la loi de comportement
* TAB1 . 1 = K1 -- pente elastique
* TAB1 . 2 = K2 -- pente endommagee
* TAB1 . 3 = K3 -- pente plastique
* TAB1 . 4 = X0 -- seuil 1
* TAB1 . 5 = X1 -- seuil 2
TAB1 = TABLE;
TAB1 . 1 = KA + KB;
TAB1 . 2 = 0.515 * (TAB1 . 1);
TAB1 . 3 = 0.017 * (TAB1 . 1);
TAB1 . 4 = 0.0022;
TAB1 . 5 = 0.024;

* Calcul du chargement dynamique
F     = (-1.0 * (M * AXTAB));

* Nombre de pas de temps
NSTEP = DIME TIME;

* Definition de quelques tables
AR    = PROG (S * ((EXTR F 1) - (CA * V0) - (K * D0)));
DT22  = (((DT**2.0) / 2.0) *(1.0 - (2.0 * beta)));
DT21  = (1.0 - GAMMA) * DT;

DR     = PROG D0;
VR     = PROG V0;
FCO    = PROG NSTEP*0.0;
ENDO   = PROG NSTEP*0.0;
AMPL   = PROG NSTEP*0.0;
CALXID = PROG NSTEP*0.0;
AMD    = PROG NSTEP*0.0;
AMMD   = PROG NSTEP*0.0;
AMMS   = PROG NSTEP*0.0;
XI     = PROG 0.0;
CNL    = PROG NSTEP*0.0;
FNLR   = PROG NSTEP*0.0;

DD    = (EXTR DR 1) + (((EXTR VR 1) * DT) + (DT22 * (EXTR AR 1)));
VV    = (EXTR VR 1) + ((EXTR AR 1) * DT21);

* Boucle sur les pas de temps

I = 1;

REPE BOU1 (NSTEP - 1);
I = I + 1;

* Valeur de l indice courant
LIST ((NSTEP - I));

* Valeur du deplacement
DI = (EXTR DR (I - 1));

* Predicteur en deplacement
DD = (EXTR DR (I - 1)) +
     ((EXTR VR (I - 1)) * DT);
DD = DD + ((1.0 - (2.0 * BETA)) *
(((DT ** 2.0) / 2.0) * (EXTR AR (I - 1))));

* Predicteur en vitesse
VV = (EXTR VR (I - 1)) + (((EXTR AR (I - 1)) * (1.0 - GAMMA)) * DT);

* Residu initial
RESDU = 1.0;

SI (RESDU > 0.01);

REPE BOU2 1;

DJ = DD;

* Input des variables internes
DATA = TABLE;
DATA . 1 = TABDYN . 15;
DATA . 2 = TABDYN . 16;
DATA . 3 = DJ;
DATA . 4 = TABDYN . 17;
DATA . 5 = TABDYN . 18;

* Loi de comportement
TAB3  = @MODTRI TAB1 DATA;

* Quelques stockages
FO1   = TAB3 . 1;
DPLUS = TAB3 . 2;
DMOIN = TAB3 . 3;
MAXDP = TAB3 . 4;
MAXDM = TAB3 . 5;
FF    = TAB3 . 6;

FCO = INSE FCO I FO1;

* Gestion du pourcentage d effort maximum
SI (>EG I 4);

FCOUR  = (ABS (EXTR FCO I));
FPREC  = (ABS (EXTR FCO (I - 1)));
FPREC2 = (ABS (EXTR FCO (I - 2)));
FPREC3 = (ABS (EXTR FCO (I - 3)));

SI (FCOUR > FD);
ENDO = INSE ENDO I (FCOUR / FPLAS);
FD   = FCOUR;
SINON;
ENDO = INSE ENDO I (EXTR ENDO (I - 1));
FINSI;

SI (ET (ET (ET (FCOUR < FPREC) (FPREC > FPREC2))
           (FPREC2 > FPREC3)) (>EG (EXTR ENDO I) 0.0000001));
AMPL = INSE AMPL I (FPREC / ((EXTR ENDO I) * FPLAS));
SINON;
AMPL = INSE AMPL I (EXTR AMPL (I - 1));
FINSI;

SINON;

AMPL = INSE AMPL I 0.0;
ENDO = INSE ENDO I 0.0;

FINSI;

* Parametres d actualisation de l amortissement
CALXID = INSE CALXID I ((EXTR ENDO I) * 100.0);

TEMP1  = @CFD10 (EXTR CALXID I);
AMD    = INSE AMD I TEMP1;

AMMD   = INSE AMMD I (MAXI (PROG (EXTR AMD I) AOLD));

TEMP1  = @CFS10 (EXTR AMPL I);
AMMS   = INSE AMMS I TEMP1;

* Quelques stockages
TABDYN . 14 = DPLUS;
TABDYN . 15 = DMOIN;
TABDYN . 17 = MAXDP;
TABDYN . 18 = MAXDM;

TAB3 . 7 = (EXTR AMMD I);

* Calcul du coefficient d amortissement actualise
SI (ACTU EGA 3);
XI = INSE XI I (((EXTR AMMD I) * (EXTR AMMS I)) + XMIN);
SINON;
SI (ACTU EGA 2);
XI = INSE XI I (((1.0 - NC) * (MAXI (PROG (EXTR AMMD I) AOLD))) + XMIN);
SINON;
SI (ACTU EGA 1);
XI = INSE XI I (((EXTR AMMD I) * (EXTR AMMS I)) + XMIN);
SINON;
XI = INSE XI I XMIN;
FINSI;
FINSI;
FINSI;

* On sature le taux d amortissement
SI ((EXTR XI I) > AMMAX);
XI = INSE XI I AMMAX;
FINSI;

* On calcule le coefficient d amortissement
CNL = INSE CNL I (2.0 * (M * (W0 * (EXTR XI I))));

* Inversion de la raideur dynamique
S   = 1.0 / (M + (((GAMMA * DT) * (EXTR CNL I)) +
((BETA * (DT**2)) * K)));

* On stocke les efforts
FNLR = INSE FNLR I FO1;

* On calcule l acceleration
TEMP1 = (S * ((EXTR F I) - (1.0 *
(((EXTR CNL I) * VV) + (EXTR FNLR I)))));
AR    = INSE AR I TEMP1;

* On corrige la vitesse et le deplacement
TEMP2 = VV + ((GAMMA * DT) * TEMP1);
VR    = INSE VR I TEMP2;

TEMP3 = DD + (BETA * ((DT ** 2.0) * TEMP1));
DR    = INSE DR I TEMP3;

* On calcule le residu
RESDU = (EXTR F I);
TEMP1 = ((EXTR CNL I) * VV);

RESDU = RESDU + (-1.0 * TEMP1);
RESDU = RESDU + (-1.0 * (EXTR FNLR I));
TEMP1 = M * (EXTR AR I);
RESDU = RESDU + (-1.0 * TEMP1);

DD = EXTR DR I;
VV = EXTR VR I;

FIN BOU2;

FINSI;

FIN BOU1;

* On renvoie les evolutions de
* deplacement, vitesse, l acceleration et l amortissement
EVDR = EVOL MANU TIME DR;
EVVR = EVOL MANU TIME VR;
EVAR = EVOL MANU TIME AR;
EVXI = EVOL MANU TIME XI;

RESPRO EVDR EVVR EVAR EVXI TAB3;

FINP;

