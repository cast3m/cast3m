$$$$ @PCPT
* @PCPT     PROCEDUR  MB234859  17/09/26    21:15:03     9567
***********************************************************************
*
* CETTE PROCEDURE A ETE MISE GRACIEUSEMENT A DISPOSITION DES
* UTILISATEURS PAR LE LTDS - Ecole Centrale Lyon (S. Fouvry et S.Garcin)
*
***********************************************************************
*    PROCEDURE ETABLISSANT LA LISTE DES INSTANTS A CALCULER (@PCPT)
*
* Entree :
*   delta_t  : amplitude de raideur
*   delta_et : amplitude de deplacement impose
*   t_0      : instant ou demarre les cycles d'usure
*   period   : periode temporelle d'un cycle d'usure
*   N_cyclFr   nombre de cycle de fretting considere
*   N_DemiPe : les nombres de points calcules et enregistres sur les
*   N_DemiPl : demi-pentes et demi-plateaux du cycle de fretting
*
* Sortie :
*   Distrib  : liste des instants a calculer

* A appeler dans le jeu de donnees
*
***********************************************************************
DEBP @PCPT delta_t*'FLOTTANT' delta_et*'FLOTTANT' t_0*'FLOTTANT'
             period*'FLOTTANT' N_cyclFr*'FLOTTANT'
             N_DemiPe*'ENTIER' N_DemiPl*'ENTIER' ;

* Booleen d'affichage des Points Temporels (DEBUG)
  OPPtTemp = FAUX ;

* Test sur le nombre de cycles de fretting voulu > 1.25
  SI (N_cyclFr < 1.25) ;
    MessErr = ET  'Le nombre de cycle de fretting renseigne dans la '
      'procedure @PCPT est inferieur a la limite basse (fixee a 1.25)' ;
    ERRE(MessErr);
  FINSI ;

* Test de la condition de glissement total
  SI (delta_et > delta_t) ;
    OuiGlTot = VRAI ;
  SINON ;
    OuiGlTot = FAUX ;
  FINSI ;

* Test du bon remplissage des nombres de points a parcourir
  SI OuiGlTot ;
    SI (N_DemiPl < 2) ;
      ERRE('N_DemiPl n est pas conforme, il doit etre superieur a 2');
    FINSI;
  FINSI ;

  SI (N_DemiPe < 2) ;
    ERRE('N_DemiPe n est pas conforme, il doit etre superieur a 2');
  FINSI;

* Definition de donnees intermediaires importantes :
  QuartPer = period / 4. ;
  DemiPer  = period / 2. ;
  TempsTot = period * N_cyclFr ;

* Nombre de cycles apres le premier Quart de cycle (car 1er Quart traite a part)
  N_c_ApQ1 = N_cyclFr - 0.25 ;
* Nombre de demi cycles pleins (Range de distribution standardise)
  N_DemiCy = ENTI 'INFERIEUR' (2.*N_c_ApQ1) ;
* Portion de demi cycle restante (non standardise)
  TpsResta = TempsTot - QuartPer - (N_DemiCy * DemiPer) ;

* A t-on un multiple entier de la periode? Si oui rien a faire
  SI ((ABS TpsResta) <EG  1.e-10);
    NeedAdap = FAUX ;
  SINON ;
    NeedAdap = VRAI ;
  FINSI ;

* Repartition du temps en glissement partiel (pente) et
* en glissement total (plateau)
  SI OuiGlTot ;
    TauxGlPa = delta_t / delta_et ;
    TauxGlTo = 1. - TauxGlPa ;
  SINON ;
    TauxGlPa = 1. ;
    TauxGlTo = 0. ;
  FINSI ;

  T_DemiPe = QuartPer * TauxGlPa ;
  T_DemiPl = QuartPer * TauxGlTo ;
  DT_DemPe = T_DemiPe / (N_DemiPe - 1) ;
  DT_DemPl = T_DemiPl / (N_DemiPl - 1) ;

* Constitution du premier quart de cycle (traite a part)
  Distr1Q = PROG DT_DemPe PAS DT_DemPe T_DemiPe PAS DT_DemPl QuartPer ;
  SI (N_DemiPe EGA 2) ;
    Distr1Q = PROG T_DemiPe PAS DT_DemPl QuartPer ; ;
  FINSI ;

* Compteur incremental du temps atteint a la fin de la distribution en cours
  TpsFinDi = QuartPer ;
  Distrib  = Distr1Q ;

* Decoupage standardise d'une demi-periode
  DistDemC = PROG DT_DemPe PAS DT_DemPe (2*T_DemiPe)
                           PAS DT_DemPl DemiPer ;

  REPE B1 N_DemiCy ;
    NewDistr = DistDemC  +   TpsFinDi ;
    Distrib  = Distrib   ET  NewDistr ;
    TpsFinDi = TpsFinDi  +   DemiPer  ;
  FIN B1 ;

* Algo de gestion de l'eventuelle derniere demi portion du cycle non complete :
*  Cas 1 : TpsResta = 2 * T_DemiPe => On complete sur la pente
*  Cas 2 : TpsResta > 2 * T_DemiPe => On complete sur la pente et on
*        rajoute 2*N_DemiPl points sur le reste de plateau a discretiser
*  Cas 3 : TpsResta < 2 * T_DemiPe => On rajoute 2*N_DemiPe points sur
*          le reste de pente a discretiser
  SI NeedAdap ;
    SI (TpsResta >EG (2.*T_DemiPe)) ;
      DistFina = PROG DT_DemPe PAS DT_DemPe (2*T_DemiPe) ;
      DistFina = DistFina  +  TpsFinDi     ;
      TpsFinDi = TpsFinDi  +  (2*T_DemiPe) ;

      SI (TpsResta > (2.*T_DemiPe + 1.e-10)) ;
        TpsResta = TpsResta  -  (2.*T_DemiPe)  ;
        DT_adap  = TpsResta  /  (2.*N_DemiPl - 2.) ;
        DistTemp = PROG DT_adap PAS DT_adap TpsResta ;
        DistTemp = DistTemp  +  TpsFinDi ;
        DistFina = DistFina  ET DistTemp ;
        TpsFinDi = TpsFinDi  +  TpsResta ;
      FINSI ;
    SINON ;
      DT_adap  = TpsResta  /  (2.*N_DemiPe - 2.) ;
      DistFina = PROG DT_adap PAS DT_adap TpsResta ;
      DistFina = DistFina  +  TpsFinDi ;
      TpsFinDi = TpsFinDi  +  TpsResta ;
    FINSI ;
*   Ajout de la derniere portion de distribution
    Distrib = Distrib  ET  DistFina ;
  FINSI ;

  Distrib = Distrib  +  t_0 ;

* Section de trace pour verifier le resultat obtenu par la procedure
  SI OPPtTemp ;
    N_pts = DIME Distrib ;
    Abs_N = PROG 1 PAS 1 N_pts ;
    PtsTpDis = EVOL 'MANU' Abs_N Distrib ;
    SpecCrb    = TABL ;
    SpecCrb. 1 = 'MARQ CROI' ;
    DESS PtsTpDis SpecCrb 'LOGO' 'GRIL' 'TITR'
    'Points temporels pour decrire le cycle de Fretting'  ;
  FINSI ;

FINP Distrib ;
$$$$

