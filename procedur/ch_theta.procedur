$$$$ CH_THETA
* CH_THETA  PROCEDUR  FD218221  16/10/24    21:15:00     9134
'DEBPROC' CH_THETA SUPTAB*TABLE ;
*|=====================================================================|
*|                                                                     |
*|  << OBJET >> :                                                      |
*|                                                                     |
*|  Procedure determinant un champ/point de type THETA, c'est-a-dire   |
*|  un champ/point dont le norme est constant a l'interieur d'une      |
*|  courronne entourant le front d'une fissure, zero a l'exterieur de  |
*|  cette courronne. Le vecteur represente par le champ THETA indique  |
*|  la direction de propagation eventuelle de la fissure.              |
*|                                                                     |
*|  << ENTREE >> :                                                     |
*|                                                                     |
*|  SUPTAB = Objet de type TABLE dont les indices sont des             |
*|           objets de type MOT (a ecrire en toutes lettres) :         |
*|                                                                     |
*|  ARGUMENTS OBLIGATOIRES DANS TOUS LES CAS                           |
*|  °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°                           |
*|                                                                     |
*|  SUPTAB.'MAILLAGE' = Objet de type MAILLAGE representant soit       |
*|                      la structure totale etudiee (maillage          |
*|                      utilise dans l'analyse par elements finis,     |
*|                      soit, pour reduire le temps de calcul, le      |
*|                      maillage entourant le plus grand des contours  |
*|                      qu'on a defini pour calculer le champ THETA.   |
*|  SUPTAB.'FISSURE'  = Objet de type MAILLAGE donnant toutes les deux |
*|                      levres d'une fissure si elle est complete (la  |
*|                      fissure presente des noeuds doubles), une      |
*|                      seule levre si l'autre levre n'est pas maillée |
*|                      en raison, par example, de la symetrie du      |
*|                      probleme.                                      |
*|  SUPTAB.'FRONT_FISSURE' = Objet de type POINT (representant la      |
*|                           pointe de la fissure) si la fissure est   |
*|                           une ligne, de type MAILLAGE (representant |
*|                           le front de la fissure) si la fissure est |
*|                           sur un plan en 3D.                        |
*|  SUPTAB.'COUCHE'   = Objet de type ENTIER representant le nombre    |
*|                      de couches d'elements (autour du point de      |
*|                      fissure) qui se deplacent pour simuler la      |
*|                      propagtion de la fissure.                      |
*|                                                                     |
*|  CAS D'UNE FISSURE CIRCULAIRE DANS UNE GEOMETRIE PLANE              |
*|  °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°              |
*|                                                                     |
*|  SUPTAB.'PCENTRE'  = centre de la fissure circulaire                |
*|                                                                     |
*|                                                                     |
*|  CAS OU L EXTENSION DE FISSURE CORRESPOND A UNE                     |
*|  °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°                     |
*|  SIMPLE TRANSLATION DANS UN TUYAUTERIE DROITE (3D)                  |
*|  °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°                  |
*|                                                                     |
*|  Dans ce cas on effectue dans la procedure une transformation de    |
*|  tuyau en plaque en passant au systeme de coordonnees cylindriques. |
*|  Il est alors necessaire de fournir :                               |
*|                                                                     |
*|  SUPTAB.'POINT_1' = centre du systeme de coordonnees                |
*|  SUPTAB.'POINT_2' = POINT tel que l'axe defini par POINT_1          |
*|                     vers POINT_2 soit l'axe Z poisitif              |
*|  SUPTAB.'POINT_3' = POINT tel que le plan defini par les 3 points   |
*|                     POINT_1 POINT_2 POINT_3 donne l'angle theta nul |
*|                                                                     |
*|  CAS OU L EXTENSION DE FISSURE NE CORRESPOND PAS                    |
*|  °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°                    |
*|  A UNE SIMPLE TRANSLATION                                           |
*|  °°°°°°°°°°°°°°°°°°°°°°°°                                           |
*|                                                                     |
*|  A) Fissure dans un tuyauterie droite (3D, Rotation)                |
*|                                                                     |
*|  SUPTAB.'POINT_1' = Objet de type POINT                             |
*|  SUPTAB.'POINT_2' = Objet de type POINT qui, avec le point POINT_1, |
*|                     constitue l'axe perpendiculaire a la section    |
*|                     fissuree.                                       |
*|                                                                     |
*|  B) Fissure dans un coude (3D, rotation + transformation)           |
*|                                                                     |
*|     Outre les deux points SUPTAB.'POINT_1' et SUPTAB.'POINT_2'      |
*|     definis en haut on donne encore :                               |
*|  SUPTAB.'CHPOINT_TRANSFORMATION' = Objet de type CHPOINT utilise    |
*|                                    pour transformer une coude en    |
*|                                    un tuyauterie droite.            |
*|                                                                     |
*|  SUPTAB.'OPERATEUR' = Objet de type MOT valant 'PLUS' ou 'MOIN'     |
*|                       pour indiquer l'operateur PLUS ou MOIN a      |
*|                       utiliser si l'on veut transformer la coude    |
*|                       en un tuyauterie droite.                      |
*|                                                                     |
*|  EN CAS DES ELEMENTS DE COQUE                                       |
*|  °°°°°°°°°°°°°°°°°°°°°°°°°°°°                                       |
*|                                                                     |
*|  SUPTAB.'EPAISSEUR' = Objet de type FLOTTANT donnant l'épaisseur    |
*|                       de la coque a la pointe de la fissure         |
*|                                                                     |
*|                                                                     |
*|  << SORTIE >> :                                                     |
*|                                                                     |
*|  TETA = Objet de type :                                             |
*|                                                                     |
*|       - TABLE INDICEE PAR DES OBJETS DE TYPE POINT CONTENANT        |
*|         DES ELEMENTS DE TYPE CHPOINT DANS LE CAS 3 DIMENSIONS.      |
*|         CHAQUE ELEMENT CONTIENT LE CHAMP THETA AU NOEUD DU          |
*|         FRONT DE COORDONNEES CELLES DU POINT P : TETA.P. ELLE       |
*|         EST EGALEMENT INDICEE PAR LE MOT 'GLOBAL' POUR DONNER       |
*|         LE CHAMP THETA GLOBAL LE LONG DE TOUT FRONT DE LA FISSURE   |
*|       - ELEMENT DE TYPE CHPOINT CONTENANT LE CHAMP THETA EN 2       |
*|         DIMENSIONS (OU EN 3 DIMENSIONS AVEC DES ELEMENTS DE         |
*|         COQUE MINCE) A LA POINTE DE FISSURE                         |
*|                                                                     |
*|=====================================================================|
*-- ICOQU = VRAI ==> Elements de coque
*-- ILIN =  VRAI ==> Elements lineaires
*-- IQUA =  VRAI ==> Elements nonlineaires
&DIME = 'VALEUR' DIME ; &MODE = 'VALEUR' MODE ;
&ELEM = 'VALEUR' ELEM ; MOTAX = 'MOT' AXIS ;
ITRAN = VRAI; IROTA = FAUX; VALPI = PI;
*------------------------------------------------*
*-------- TEST DE COMPABILITE DES DONNEES -------*
*------------------------------------------------*
'SI' ('EGA' &ELEM 'UUUU');
   'MESS' 'ERREUR : TYPE D ELEMENTS NON CONNU. UTILISEZ';
   'MESS' '         L OPERATEUR OPTI POUR LE DECLARER';
   'QUITTER' CH_THETA;
'FINSI';
'SI' ('NON' ('EXIST' SUPTAB 'MAILLAGE'));
   'MESS' 'ERREUR : ON N A PAS TROUVE DANS LA'
   'MESS' '         TABLE L OBJET MAILLAGE';
   'QUITTER' CH_THETA;
'SINON';
   MAILLAGE = SUPTAB.'MAILLAGE' ;
   NB1 = 'NBNO' ('CHAN' MAILLAGE 'POI1');
'FINSI';
M_FISS = 'ELEM' MAILLAGE 'APPU' 'LARG' SUPTAB.'FRONT_FISSURE';
NBNO1 = 'NBNO' ('ELEM' (CHAN 'LIGNE' M_FISS) 1);
ILIN = 'EGA' NBNO1 2; IQUA = 'EGA' NBNO1 3;
IPLAN = ('EGA' &ELEM 'TRI3') 'OU' ('EGA' &ELEM 'QUA4') 'OU'
        ('EGA' &ELEM 'TRI6') 'OU' ('EGA' &ELEM 'QUA8');
ICOQU = (&DIME 'EGA' 3) 'ET' IPLAN;
****
'SI' (ICOQU 'ET' ('NON' ('EXIST' SUPTAB 'EPAISSEUR')));
   'MESS' 'ERREUR : L EPAISSEUR DE LA COQUE N EST PAS DONNEE';
   'QUITTER' CH_THETA;
'FINSI';
****
'SI' ('NON' ('EXIST' SUPTAB 'FISSURE'));
   'MESS' 'ERREUR : LA FISSURE DU PROBLEME N EST PAS DONNEE';
   'QUITTER' CH_THETA;
'SINON';
   FISSURE = SUPTAB.'FISSURE';
  'SI' ('NEG' ('TYPE' FISSURE) 'MAILLAGE');
     'MESS' 'ERREUR : LA FISSURE DOIT ETRE UN OBJET DE TYPE MAILLAGE';
     'QUITTER' CH_THETA;
  'FINSI';
   NB2 = 'NBNO' ('CHAN' (FISSURE 'ET' MAILLAGE) 'POI1');
  'SI' ('NEG' NB1 NB2);
     'MESS' 'ERREUR : IL Y A DES NOEUDS DOUBLES ENTRE';
     'MESS' '         LE MAILLAGE ET LA FISSURE';
     'QUITTER' CH_THETA;
  'FINSI';
   LMOTS = 'ELEM' FISSURE 'TYPE'; ILIGN = FAUX;
  'SI' ('EGA' ('DIME' LMOTS) 1);
     MOT1 = 'EXTR' LMOTS 1;
     ILIGN = ('EGA' MOT1 'SEG2') 'OU' ('EGA' MOT1 'SEG3');
  'FINSI';
  'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
    'SI' ILIGN;
      'MESS' 'ERREUR : EN 3D AVEC ELEMENTS MASSIFS LA';
      'MESS' '         FISSURE DOIT ETRE UNE SURFACE';
      'QUITTER' CH_THETA;
    'FINSI';
  'FINSI';
  'SI' ((&DIME 'EGA' 2) 'OU' ICOQU);
    'SI' ('NON' ILIGN);
      'MESS' 'ERREUR : EN 2D OU ELEMENTS EN COQUE MINCE';
      'MESS' '         LA FISSURE DOIT ETRE UNE LIGNE';
      'QUITTER' CH_THETA;
    'FINSI';
  'FINSI';
'FINSI';
****
'SI' ('NON' ('EXIST' SUPTAB 'FRONT_FISSURE'));
   'MESS' 'ERREUR : LE FRONT DE LA FISSURE N EST PAS DONNE';
   'QUITTER' CH_THETA;
'FINSI';
****
NB2 = 'NBNO' ('CHAN' (SUPTAB.'FRONT_FISSURE' 'ET' MAILLAGE) 'POI1');
'SI' ('NEG' NB1 NB2);
   'MESS' 'ERREUR : IL Y A DES NOEUDS DOUBLES ENTRE LE';
   'MESS' '         MAILLAGE ET LE FRONT DE LA FISSURE';
   'QUITTER' CH_THETA;
'FINSI';
IFOND = 'TYPE' SUPTAB.'FRONT_FISSURE';
'SI' ((&DIME 'EGA' 3) 'ET' ('NON' ICOQU));
  'SI' ('EGA' IFOND 'POINT   ');
    'MESS' 'ERREUR : EN 3D AVEC ELEMENTS MASSIFS LE FRONT';
    'MESS' '         DE LA FISSURE DOIT ETRE UNE LIGNE';
    'QUITTER' CH_THETA;
  'FINSI';
'FINSI';
'SI' ((&DIME 'EGA' 2) 'OU' ICOQU);
  'SI' ('NON' ('EGA' IFOND 'POINT   '));
    'MESS' 'ERREUR : EN 2D OU ELEMENTS EN COQUE MINCE LE';
    'MESS' '         FOND DE LA FISSURE DOIT ETRE UN POINT';
    'QUITTER' CH_THETA;
  'FINSI';
'FINSI';
NB1 = 'NBNO' ('CHAN' FISSURE 'POI1');
NB2 = 'NBNO' ('CHAN' (SUPTAB.'FRONT_FISSURE' 'ET' FISSURE) 'POI1');
'SI' ('NEG' NB1 NB2);
   'MESS' 'ERREUR : IL Y A DES NOEUDS DOUBLES ENTRE LE FRONT';
   'MESS' '         DE LA FISSURE ET LA FISSURE ELLE MEME';
   'QUITTER' CH_THETA;
'FINSI';
****
'SI' ('NON' ('EXIST' SUPTAB 'COUCHE'));
   'MESS' 'ERREUR : ON VEUT LE NOMBRE DE COUCHES D ELEMENTS';
   'MESS' '         AUTOUR DE LA FISSURE QUI SE DEPLACE';
   'MESS' '         POUR SIMULER LA PROPAGATION DE LA FISSURE';
   'QUITTER' CH_THETA;
'SINON';
   COUCHE = SUPTAB.'COUCHE' ;
'FINSI';
****
ICOUDE = FAUX;
ITUYAU = FAUX;
'SI' (('EXISTE' SUPTAB 'CHPOINT_TRANSFORMATION') 'OU'
      ('EXISTE' SUPTAB 'OPERATEUR'));
   ICOUDE = VRAI;
  'SI' ('NON' ('EXIST' SUPTAB 'CHPOINT_TRANSFORMATION'));
    'MESS' 'ERREUR : ON VEUT LE CHAMP/POINT QUI TRANSFORME';
    'MESS' '         LA COUDE EN UN TUYAUTERIE DROITE.';
    'QUITTER' CH_THETA;
  'FINSI';
 'SI' ('NON' ('EXIST' SUPTAB 'OPERATEUR'));
    'MESS' 'ERREUR : ON VEUT LE NOM DE L OPERATEUR A UTILISER';
    'MESS' '         POUR LA TRANSFORMATION DE LA COUDE. ';
    'QUITTER' CH_THETA;
  'SINON';
     OPER1 = 'MOT' SUPTAB.'OPERATEUR';
  'FINSI';
'FINSI';
****
'SI' ('NON' ('EXISTE' SUPTAB 'POINT_3'));
  'SI' (('EXISTE' SUPTAB 'POINT_1') 'OU'
        ('EXISTE' SUPTAB 'POINT_2') 'OU' ICOUDE);
    'SI' ('NEG' &DIME 3);
       'MESS' 'ERREUR : DONNEES IMCOMPATIBLES. CONSULTEZ LA NOTICE';
       'QUITTER' CH_THETA;
    'FINSI';
     ITRAN = FAUX; IROTA = VRAI;
    'SI' (('NON' ('EXIST' SUPTAB 'POINT_1')) 'OU'
          ('NON' ('EXIST' SUPTAB 'POINT_2')));
       'MESS' 'ERREUR : ON VEUT LES POINTS POUR CONSTITUER L AXE';
       'MESS' '         PERPENDICULAIRE A LA SECTION FISSUREE.';
       'QUITTER' CH_THETA;
    'SINON';
        POINT_1 = SUPTAB.'POINT_1';
        POINT_2 = SUPTAB.'POINT_2';
    'FINSI';
  'FINSI';
'FINSI';
****
'SI' ('EXISTE' SUPTAB 'POINT_3');
   'SI' (('NON' ('EXIST' SUPTAB 'POINT_1')) 'OU'
         ('NON' ('EXIST' SUPTAB 'POINT_2')));
      'MESS' 'ERREUR : ON VEUT LES POINTS POUR CONSTITUER L AXE';
      'MESS' '         PERPENDICULAIRE A LA SECTION FISSUREE.';
      'QUITTER' CH_THETA;
   'SINON';
     'SI' ('NEG' &DIME 3);
        'MESS' 'ERREUR : DONNEES IMCOMPATIBLES. CONSULTEZ LA NOTICE';
        'QUITTER' CH_THETA;
     'FINSI';
      ITUYAU = VRAI;
      PAXEZ1 = SUPTAB.'POINT_1';
      PAXEZ2 = SUPTAB.'POINT_2';
      PAXEZ3 = SUPTAB.'POINT_3';
   'FINSI';
'FINSI';
****
'SI' ('EXISTE' SUPTAB 'PCENTRE');
  'SI' ('NEG' &DIME 2);
     'MESS' 'ERREUR : DONNEES IMCOMPATIBLES. CONSULTEZ LA NOTICE';
     'QUITTER' CH_THETA;
  'FINSI';
   ITRAN = FAUX; IROTA = VRAI;
   PCENTRE = SUPTAB.'PCENTRE';
'FINSI';
*------------------------------------------------*
*--- QUELQUES MOTS POUR SIMPLIFIER L'ECRITURE ---*
*------------------------------------------------*
E = 'MOT' 'EXCO'; C = 'MOT' 'CHAI'; S = 'MOT' 'SCAL';
MU1 = 'MOT' 'UX'; MU2 = 'MOT' 'UY'; MU3 = 'MOT' 'UZ';
MF1 = 'MOT' 'FX'; MF2 = 'MOT' 'FY'; MF3 = 'MOT' 'FZ';
'SI' ('EGA' MOTAX &MODE) ;
   MU1 = 'MOT' 'UR'; MU2 = 'MOT' 'UZ'; MU3 = 'MOT' 'UT';
   MF1 = 'MOT' 'FR'; MF2 = 'MOT' 'FZ';
'FINSI';
TABUTIL = TABL;
******************************************
'SI' ((&DIME 'EGA' 3) 'ET' ('NON' ICOQU));
******************************************
   TABUTIL.'DIRECTION' = TABL;
   TMAIL = 'TABLE'; TMBOUGER = 'TABLE'; TVECTEUR = 'TABLE';
   TPFISS = 'TABLE'; TTETA = 'TABLE';
   FONDFISS = ORDO (SUPTAB.'FRONT_FISSURE') ;
   NP = 'NBNO' FONDFISS ;
   PINIT = FONDFISS 'POIN' 'INIT' ;
   PFINA = FONDFISS 'POIN' 'FINA' ;
*--------------------------------------------------*
* On veut savoir si une seule ou toutes les 2 levres
* de la fissure ont été modelisees
* Si 1 levre modelisee : XMULT=2 et ICOS1=FAUX
* Si 2 levres modelisees : XMULT=1 et ICOS1=VRAI
*--------------------------------------------------*
   PFISS = PINIT; CC = FONDFISS 'ELEM' 'APPU' 'LARG' PFISS;
   VCUB = MAILLAGE 'ELEM' 'APPUYE' 'LARG' PFISS;
   SURF1 = ('ENVE' VCUB) 'ELEM' 'APPUYE' 'LARG' PFISS;
   SURF1 = SURF1 'DIFF' (SURF1 'ELEM' 'APPU' 'STRI' FISSURE);
   PP2 = 'POINT' 2 CC;
  'SI' ('EGA' ('NBNO' SURF1) ('NBNO' (SURF1 'ET' PP2)));
     SURF2 = SURF1 'ELEM' 'APPU' 'LARG' PP2;
    'SI' ('NBEL' SURF2 '>' 2);
       SURF2 = SURF1 'ELEM' 'APPU' 'LARG' ('POINT' 1 FONDFISS);
    'FINSI';
     SURF1 = SURF1 'DIFF' SURF2;
  'FINSI';
   FISS1 = ('CONT' SURF1) 'ELEM' 'APPU' 'LARG' PFISS;
   FISS1 = 'ORDO' FISS1;
   P1 = 'POINT' FISS1 'INIT'; P2 = 'POINT' FISS1 'FINA';
   V1 = 'MOIN' PFISS P1; V2 = 'MOIN' PFISS P2;
   COS1 = ('PSCA' V1 V2) / (('NORM' V1)*('NORM' V2));
   ICOS1 = COS1 '>' ('COS' 120.);
  'SI' ICOS1;
     X1 Y1 Z1 = 'COOR' P1; X2 Y2 Z2 = 'COOR' P2;
     POINSF = ((X1 + X2)/2.) ((Y1 + Y2)/2.) ((Z1 + Z2)/2.);
  'SINON';
     POINSF = P1;
    'SI'  ('NEG' ('NBNO' FISSURE) ('NBNO' (FISSURE 'ET' POINSF)));
        POINSF = P2;
    'FINSI';
  'FINSI';
*
   XMULT = 2.;
*MC 06/07/98 : test sur le numéro du noeud plutôt que
*              sur la proximité de ceux-ci
  'SI' (('NEG' ('NOEU' P1) ('NOEU' PFISS)) 'ET'
        ('NEG' ('NOEU' P2) ('NOEU' PFISS)) 'ET' ICOS1);
     XMULT = 1.;
  'FINSI';

*---------------------------------------------------------*
* On determine le support du mouvement de la fissure : MAIL
* et le maillage qui se deplace : MBOUGER
*---------------------------------------------------------*
   MAILVOL = FONDFISS; MBOUGVOL = FONDFISS;
  'REPETER' MAILV (COUCHE + 1) ;
     MAILVOL = MAILLAGE 'ELEM' 'APPUYE' 'LARG' MAILVOL ;
    'SI' ('EGA' &MAILV COUCHE); MBOUGVOL = MAILVOL; 'FINSI';
  'FIN' MAILV ;
*
  'REPETER' BBCC0 2;
     'SI' ('EGA' &BBCC0 1); SURF1 = PINIT; N1 = 2; N2 = 1; 'FINSI';
     'SI' ('EGA' &BBCC0 2); SURF1 = PFINA; N1 = 1; N2 = 2; 'FINSI';
      CC = FONDFISS 'ELEM' 'APPU' 'LARG' SURF1;
     'REPETER' BSURF1 (COUCHE + 1);
        VCUB = MAILLAGE 'ELEM' 'APPUYE' 'LARG' SURF1 ;
        PP2 = 'POINT' N1 CC;
* MC 19/12/96 : Modif pour fissure non débouchante
       'SI' ('EGA' &BSURF1 1); SURF1P = PP2; 'FINSI';
        VCUB = 'INTE' VCUB (MAILLAGE 'ELEM' 'APPUYE' 'LARG' SURF1P);
        SURF1 = ('ENVE' VCUB) 'ELEM' 'APPUYE' 'LARG' SURF1 ;
        SURF1P = (('ENVE' VCUB) 'DIFF' SURF1)
                              'ELEM' 'APPUYE' 'LARG' SURF1P;
* Fin de modif
        SURF1 = SURF1 'DIFF' (SURF1 'ELEM' 'APPU' 'STRI' FISSURE);
       'SI' ('EGA' ('NBNO' SURF1) ('NBNO' (SURF1 'ET' PP2)));
         'SI' (&BSURF1 '>' 1);
            SURF1 = SURF1 'DIFF' SURF3;
         'FINSI';
          SURF2 = SURF1 'ELEM' 'APPU' 'LARG' PP2;
         'SI' (('NBEL' SURF2) '>' 2);
            SURF2 = SURF1 'ELEM' 'APPU' 'LARG' ('POINT' N2 CC);
         'FINSI';
          SURF1 = SURF1 'DIFF' SURF2;
          CC = 'DIFF' ('CONT' ('ELEM' SURF2 1)) CC;
          CC = 'ORDO' CC;
          CC = 'ELEM' CC 2;
         'SI' (&BSURF1 '>' 1); SURF3 = SURF2 'ET' SURF3; 'SINON';
            SURF3 = SURF2 ;
         'FINSI';
       'FINSI';
     'FIN' BSURF1;
     'SI' ('EGA' &BBCC0 1);
        SURINI = PINIT;
       'REPETER' BSURI1 (COUCHE + 1);
          SURINI = SURF1 'ELEM' 'APPU' LARG SURINI;
         'SI' ('EGA' &BSURI1 COUCHE); SURINIT1 = SURINI; 'FINSI';
       'FIN' BSURI1;
     'FINSI';
     'SI' ('EGA' &BBCC0 2);
        SURFIN = PFINA ;
       'REPETER' BSURI2 (COUCHE + 1);
          SURFIN = SURF1 'ELEM' 'APPU' LARG SURFIN;
         'SI' ('EGA' &BSURI2 COUCHE); SURFINA1 = SURFIN; 'FINSI';
       'FIN' BSURI2;
     'FINSI';
  'FIN' BBCC0;
*
  'SI' ('EGA' COUCHE 0); NN = 1; 'SINON'; NN = 2; 'FINSI';
  'REPETER' BBCC1 NN;
     TAB1 = TABLE; I = 0;
    'SI' (&BBCC1 'EGA' 1);
       TAB1.1 = SURINI; TAB1.NP = SURFIN; MAIL3D = MAILVOL;
    'FINSI';
    'SI' (&BBCC1 'EGA' 2);
       TAB1.1 = SURINIT1; TAB1.NP = SURFINA1; MAIL3D = MBOUGVOL;
    'FINSI';
     TRANCH1 = MAIL3D 'ELEM' 'APPU' 'LARG' TAB1.1;
     TRANCH2 = TRANCH1; TRANCHET = TRANCH1;
    'SI' (('NBEL' FONDFISS) '>' 1);
      'REPETER' BOURECU (('NBEL' FONDFISS) - 1) ;
         I = I + 1 ;
         TRANCH2 = (MAIL3D 'ELEM' 'APPU' 'LARG' TRANCHET)
                   'DIFF' TRANCHET;
         TRANCHET = TRANCHET 'ET' TRANCH2 ;
         ENVEBI = 'DIFF' ('ENVE' TRANCH2) ('ENVE' TRANCH1);
        'SI' ILIN ;
           TAB1.(I + 1) = 'DIFF' ENVEBI (('ENVE' TRANCH2)
                          'ET' ('ENVE' TRANCH1)) ;
        'SINON' ;
           TAB1.((2 * I) + 1) = 'DIFF' ENVEBI (('ENVE' TRANCH2)
                                'ET' ('ENVE' TRANCH1)) ;
           POINTRAN = TRANCH1 'CHANGE' 'POI1' ;
           POINBORD = (TAB1.((2 * I) - 1) 'ET'
                       TAB1.((2 * I) + 1)) 'CHANGE' 'POI1';
           TAB1.(2 * I) = POINTRAN 'DIFF' POINBORD;
        'FINSI' ;
         TRANCH1 = TRANCH2;
      'FIN' BOURECU ;
    'FINSI';
    'SI' (('NON' ILIN) 'ET' (NP '>' 2));
       POINTRAN = TRANCH2 'CHANGE' 'POI1';
       POINBORD = (TAB1.NP 'ET' TAB1.(NP - 2)) 'CHANGE' 'POI1';
       TAB1.(NP - 1) = POINTRAN 'DIFF' POINBORD ;
    'FINSI';
    'SI' (&BBCC1 'EGA' 1); TMAIL = TAB1; 'FINSI';
    'SI' (&BBCC1 'EGA' 2); TMBOUGER = TAB1; 'FINSI';
  'FIN' BBCC1;
*-------------------------------------------*
* Recuperation des points du front de fissure
*-------------------------------------------*
  FNUAGE = FONDFISS 'CHAN' 'POI1';
  I = 0;
  'REPETER' BPF NP;
     I = I + 1;
     TPFISS.I = (('CHAN' 'POI1' TMAIL.I) 'ET' FNUAGE) 'DIFF'
                (('CHAN' 'POI1' TMAIL.I) 'DIFF' FNUAGE);
     TPFISS.I = 'POIN' 1 TPFISS.I;
    'SI' ('EGA' COUCHE 0); TMBOUGER.I = TPFISS.I; 'FINSI';
  'FIN' BPF;
*--------------------------------------*
* Transformation du tuyau en plaque dans
* le cas d une fissure non traversante
*--------------------------------------*
'SI' ITUYAU;
   'DEPLACE' MAILLAGE 'COOR' 'CYLI' PAXEZ1 PAXEZ2 PAXEZ3;
'FINSI';
*--------------------------------------------------*
* Recuperation de deux points de SURINI et de SURFIN
*--------------------------------------------------*
   PI1 = ('DIFF' ('CHAN' 'POI1' ('CONT' SURINI))
         ('MANU' 'POI1' PINIT)) 'POIN' 1;
*
   PF1 = ('DIFF' ('CHAN' 'POI1' ('CONT' SURFIN))
         ('MANU' 'POI1' PFINA)) 'POIN' 1;
*----------------------------------------------------------*
* Recuperation des vecteurs normaux
* La norme de ces vecteurs est du meme ordre de grandeur que
* la mesure d un segment du front. Pour qu une translation avec
* un de ces vecteurs corresponde a une avance infinitesimale,
* on divise chaque vecteur par 100 fois la mesure d un segment
*----------------------------------------------------------*
   VNPF = (POINSF 'MOIN' TPFISS.1) 'PVEC' (POINSF 'MOIN' TPFISS.2);
   VNPF = VNPF / ('NORM' VNPF) ;
   VECT11 = (TPFISS.2 'MOINS' TPFISS.1) 'PVEC' VNPF;
   PI3 = PINIT 'PLUS' VNPF; PF3 = PFINA 'PLUS' VNPF;
   VPLAN1 = (PI1 'MOINS' PINIT) 'PVEC' (PINIT 'MOINS' PI3);
  'SI' ('EGA' ('PSCA' VPLAN1 VECT11) 0. 1.E-10);
     TVECTEUR.1 = VECT11 ;
  'SINON';
     P11 = TPFISS.1 'PLUS' VECT11;
     P12 = P11 'SYME' 'PLAN' PI1 PINIT PI3 ;
     VECT12 = P12 'MOIN' TPFISS.1;
     TVECTEUR.1 = VECT11 'PLUS' VECT12 ;
  'FINSI';
   TVECTEUR.1 = TVECTEUR.1 / 100. ;
   VECT21 = (TPFISS.NP 'MOINS' TPFISS.(NP - 1)) 'PVEC' VNPF ;
   VPLAN2 = (PF1 'MOINS' PFINA) 'PVEC' (PFINA 'MOINS' PF3);
  'SI' ('EGA' ('PSCA' VPLAN2 VECT21) 0. 1.E-10);
     TVECTEUR.NP = VECT21 ;
  'SINON';
     P21 = TPFISS.NP 'PLUS' VECT21;
     P22 = P21 'SYME' 'PLAN' PF1 PFINA PF3 ;
     VECT22 = P22 'MOIN' TPFISS.NP;
     TVECTEUR.NP = VECT21 'PLUS' VECT22 ;
  'FINSI';
   TVECTEUR.NP = TVECTEUR.NP / 100. ;
   I = 1 ;
  'SI' (NP > 2) ;
    'REPETER' BVECT (NP - 2) ;
       I = I + 1 ;
       VTFF1 = TPFISS.I 'MOINS' TPFISS.(I - 1) ;
       VNFF1 = VTFF1 'PVECT' VNPF ;
       VTFF2 = TPFISS.(I + 1) 'MOINS' TPFISS.I ;
       VNFF2 = VTFF2 'PVECT' VNPF ;
       TVECTEUR.I = .5 * (VNFF1 'PLUS' VNFF2) ;
       TVECTEUR.I = TVECTEUR.I / 100. ;
    'FIN' BVECT ;
  'FINSI' ;
*--------------------------------------
* Vecteur et maillage de support global
* en 3D avec des éléments massifs
*--------------------------------------
   PNOR1 = PROG;
  'REPETER' BNOR1 NP;
     PNOR1 = PNOR1 'ET' ('PROG' ('NORM' TVECTEUR.&BNOR1));
  'FIN' BNOR1;
   MINOR1 = 'MINI' PNOR1;
  'REPETER' BVGLO NP;
     N1 = MINOR1 / ('EXTR' PNOR1 &BVGLO) ;
     X1 = N1 * ('COOR' 1 (TVECTEUR.&BVGLO)) ;
     Y1 = N1 * ('COOR' 2 (TVECTEUR.&BVGLO)) ;
     Z1 = N1 * ('COOR' 3 (TVECTEUR.&BVGLO)) ;
    'SI' (&BVGLO 'EGA' 1);
       TVECTEUR.(NP + 1) = 'MANU' 'CHPO' (TMAIL.&BVGLO)
                         3 MU1 X1 MU2 Y1 MU3 Z1 'NATURE' 'DIFFUS';
    'SINON';
       TVECTEUR.(NP + 1) = TVECTEUR.(NP + 1) 'ET' ('MANU' 'CHPO'
          (TMAIL.&BVGLO) 3 MU1 X1 MU2 Y1 MU3 Z1 'NATURE' 'DIFFUS');
    'FINSI';
  'FIN' BVGLO;
*
   TPFISS.(NP + 1) = SUPTAB.'FRONT_FISSURE';
   TMBOUGER.(NP + 1) = SUPTAB.'FRONT_FISSURE';
  'SI' (COUCHE '>' 0);
    'REPETER' MBOUG COUCHE ;
       TMBOUGER.(NP + 1) = 'ELEM' MAILLAGE 'APPUYE'
                           'LARG' TMBOUGER.(NP + 1) ;
    'FIN' MBOUG ;
  'FINSI';
   TMAIL.(NP + 1) = 'ELEM' MAILLAGE 'APPU'
                    'LARG' TMBOUGER.(NP + 1) ;
*-----------------------------------------*
* Transformation d'une plaque en tuyau
* dans le cas d une fissure non traversante
*-----------------------------------------*
'SI' ITUYAU;
    'DEPLACE' MAILLAGE 'COOR' 'CART';
'FINSI';
********
'FINSI';
********

*********************************
'SI' (('EGA' &DIME 2) 'OU' ICOQU);
*********************************
*----------------------------------------------*
*-- On determine la direction de propagation --*
*-- et le support geometrique du champ THETA --*
*----------------------------------------------*
   PFISS = SUPTAB.'FRONT_FISSURE';
   FISS1 = FISSURE 'ELEM' 'APPU' 'LARG' PFISS;
   FISS1 = 'ORDO' FISS1;
   P1 = 'POINT' FISS1 'INIT'; P2 = 'POINT' FISS1 'FINA';
*MC 06/07/98 : test sur le numéro du noeud plutôt que
*              sur la proximité de ceux-ci
  'SI' (('NEG' ('NOEU' P1) ('NOEU' PFISS)) 'ET'
        ('NEG' ('NOEU' P2) ('NOEU' PFISS)));
     XMULT = 1.;
     MESU1 = 'MESU' ('DROI' 1 PFISS P1);
     MESU2 = 'MESU' ('DROI' 1 PFISS P2);
     XX1 = (('COOR' 1 PFISS) - ('COOR' 1 P1)) / MESU1;
     XX2 = (('COOR' 1 PFISS) - ('COOR' 1 P2)) / MESU2;
     YY1 = (('COOR' 2 PFISS) - ('COOR' 2 P1)) / MESU1;
     YY2 = (('COOR' 2 PFISS) - ('COOR' 2 P2)) / MESU2;
     XX1 = (XX1 + XX2) / 2.; YY1 = (YY1 + YY2) / 2.;
    'SI' ('EGA' &DIME 3);
       ZZ1 = (('COOR' 3 PFISS) - ('COOR' 3 P1)) / MESU1;
       ZZ2 = (('COOR' 3 PFISS) - ('COOR' 3 P2)) / MESU2;
       ZZ1 = (ZZ1 + ZZ2) / 2.;
    'FINSI';
  'SINON';
     XMULT = 2.;
*MC 06/07/98 : test sur le numéro du noeud plutôt que
*              sur la proximité de ceux-ci
    'SI' ('EGA' ('NOEU' P2) ('NOEU' PFISS)); P2 = P1; 'FINSI';
     MESU1 = 'MESU' ('DROI' 1 PFISS P2);
     XX1 = (('COOR' 1 PFISS) - ('COOR' 1 P2)) / MESU1;
     YY1 = (('COOR' 2 PFISS) - ('COOR' 2 P2)) / MESU1;
    'SI' ('EGA' &DIME 3);
       ZZ1 = (('COOR' 3 PFISS) - ('COOR' 3 P2)) / MESU1;
    'FINSI';
  'FINSI';
  'SI' ('EGA' &DIME 2); VECTEUR = (XX1 YY1); 'FINSI';
  'SI' ('EGA' &DIME 3); VECTEUR = (XX1 YY1 ZZ1); 'FINSI';
   NP = 0 ;
   MBOUGER = SUPTAB.'FRONT_FISSURE';
  'SI' (COUCHE '>' 0);
    'REPETER' MBOUG COUCHE ;
       MBOUGER = 'ELEM' MAILLAGE 'APPUYE' 'LARG' MBOUGER ;
    'FIN' MBOUG ;
  'FINSI';
   MAIL = 'ELEM' MAILLAGE 'APPU' 'LARG' MBOUGER ;
*******
'FINSI' ;
*******

*--------------------------------------------*
* Configuration initiale. Il ne faut pas la -*
*  placer avec la determination de VECTEUR --*
*--------------------------------------------*
CONF0 = 'FORM';
*-----------------------------------------------*
* Boucle sur les noeuds du front de la fissure -*
*-----------------------------------------------*
N = 0 ;
'REPETER' PROTETA (NP + 1);
N = N + 1 ;
'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
   MAIL = TMAIL.N ; PFISS = TPFISS.N;
   MBOUGER = TMBOUGER.N; VECTEUR = TVECTEUR.N;
'FINSI';
*-------------------------------------------------*
*----- Valeur initiale pour le vecteur THETA -----*
*-------------------------------------------------*
TETA = 'MANU' 'CHPO' MAIL 2 MU1 0. MU2 0. 'NATURE' 'DIFFUS' ;
'SI' ((&DIME 'EGA' 3)) ;
   TETA = TETA + ('MANU' 'CHPO' MAIL 1 MU3 0. 'NATURE' 'DIFFUS');
'FINSI' ;
*-------------------------------------------------------------*
* Donnees pour le calcul de l accroissement d aire de fissure *
*-------------------------------------------------------------*
XAIRE = 1.;
'SI' ICOQU; XAIRE = SUPTAB.'EPAISSEUR'; 'FINSI';
'SI' ('EGA' MOTAX &MODE);
   XAIRE = 2. * VALPI * ('COOR' 1 PFISS);
'FINSI';
* Si 3D, on recupere la partie du plan de fissure proche
* du point avance pour calculer l accroissement d aire
'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
   PLFISS = 'ELEM' FISSURE APPUY LARG MBOUGER;
   MODFIS = 'MODE' PLFISS 'MECANIQUE' 'ELASTIQUE';
   CHFIS1 = 'MANU' 'CHPO' FISSURE 1 'SCAL' 1.;
   CHFIS1 = 'CHAN' 'CHAM' CHFIS1 MODFIS 'STRESSES';
   XAIREI = 'INTG' CHFIS1 MODFIS;
* L aire doit correspondre a une seule levre de fissure
* Si les deux levres sont modelisees, on divise l aire par 2
  'SI' ICOS1; XAIREI = XAIREI / 2.; 'FINSI';
'FINSI';
*--------------------------------------------------------*
*---- THETA généré par la différence de coordonnées -----*
*--------------------------------------------------------*
'SI' (&DIME 'EGA' 2); XX0 YY0 = 'COOR' MAIL; 'FINSI';
'SI' (&DIME 'EGA' 3); XX0 YY0 ZZ0 = 'COOR' MAIL; 'FINSI';
*- Translation de la fissure avec une vecteur normalisée -*
'SI' ITRAN ;
  'SI' ITUYAU;
     'DEPLACE' MAILLAGE 'COOR' 'CYLI' PAXEZ1 PAXEZ2 PAXEZ3;
  'FINSI';
  'DEPLACE' 'PLUS' MBOUGER VECTEUR;
  'SI' ITUYAU;
    'DEPLACE' MAILLAGE 'COOR' 'CART' ;
  'FINSI';
  'SI' (&DIME 'EGA' 2); XX1 YY1 = 'COOR' MAIL; 'FINSI';
  'SI' (&DIME 'EGA' 3);
     XX1 YY1 ZZ1 = 'COOR' MAIL;
    'SI' ('NON' ICOQU);
       XAIREF = 'INTG' CHFIS1 MODFIS;
      'SI' ICOS1; XAIREF = XAIREF / 2.; 'FINSI';
    'FINSI';
  'FINSI';
  'SI' ITUYAU;
     'DEPLACE' MAILLAGE 'COOR' 'CYLI' PAXEZ1 PAXEZ2 PAXEZ3;
  'FINSI';
  'DEPLACE' 'MOIN' MBOUGER VECTEUR ;
  'SI' ITUYAU;
     'DEPLACE' MAILLAGE 'COOR' 'CART'  ;
  'FINSI';
   TETAT = ('NOMC' MU1 (XX1 - XX0)) +
           ('NOMC' MU2 (YY1 - YY0));
  'SI' (&DIME 'EGA' 3);
     TETAT = TETAT + ('NOMC' MU3 (ZZ1 - ZZ0));
    'SI' ('NON' ICOQU); XAIRE = XAIREF - XAIREI; 'FINSI';
  'FINSI' ;
   TETA = (TETAT * XMULT / XAIRE) + TETA ;
'FINSI' ;
*----- Rotation de la fissure selon le point ou l'axe donné
* Pour que la rotation effectuee corresponde a une avance
* infinitesimale, on choisit un angle de rotation de 0.01 degre
'SI' IROTA ;
   ANG1 = 1.D-2 ;
  'SI' ('EGA' &DIME 2);
    'DEPLACE' 'TOUR' MBOUGER ANG1 PCENTRE ;
     XX1 YY1 = 'COOR' MAIL ;
    'DEPLACE' 'TOUR' MBOUGER (0. - ANG1) PCENTRE ;
     TETAR = ('NOMC' MU1 (XX1 - XX0)) +
             ('NOMC' MU2 (YY1 - YY0)) ;
     X1 = 'EXTR' TETAR MU1 PFISS ;
     Y1 = 'EXTR' TETAR MU2 PFISS ;
     NOR1 = ('NORM' (X1 Y1)) + 1.D-20 ;
     TETAR = TETAR / NOR1 ;
  'FINSI';
  'SI' ('EGA' &DIME 3);
    'SI' ('NON' ICOUDE);
      'DEPLACE' 'TOUR' MBOUGER ANG1 POINT_1 POINT_2 ;
       XX1 YY1 ZZ1 = 'COOR' MAIL ;
      'SI' ('NON' ICOQU);
         XAIREF = 'INTG' CHFIS1 MODFIS;
        'SI' ICOS1; XAIREF = XAIREF / 2.; 'FINSI';
      'FINSI';
      'DEPLACE' 'TOUR' MBOUGER ANG1 POINT_2 POINT_1 ;
    'SINON';
      'DEPLACE' OPER1 MAILLAGE SUPTAB.'CHPOINT_TRANSFORMATION' ;
      'DEPLACE' 'TOUR' MBOUGER ANG1 POINT_1 POINT_2 ;
      'DEPLACE' OPER1 MAILLAGE (-1.*(SUPTAB.'CHPOINT_TRANSFORMATION'));
       XX1 YY1 ZZ1 = 'COOR' MAIL ;
      'SI' ('NON' ICOQU);
         XAIREF = 'INTG' CHFIS1 MODFIS;
        'SI' ICOS1; XAIREF = XAIREF / 2.; 'FINSI';
      'FINSI';
      'DEPLACE' OPER1 MAILLAGE (SUPTAB.'CHPOINT_TRANSFORMATION');
      'DEPLACE' 'TOUR' MBOUGER ANG1 POINT_2 POINT_1 ;
      'DEPLACE' OPER1 MAILLAGE (-1.*(SUPTAB.'CHPOINT_TRANSFORMATION'));
    'FINSI';
     TETAR = ('NOMC' MU1 (XX1 - XX0)) +
             ('NOMC' MU2 (YY1 - YY0)) +
             ('NOMC' MU3 (ZZ1 - ZZ0)) ;
    'SI' ('NON' ICOQU);
       XAIRE = XAIREF - XAIREI;
    'SINON';
       X1 = 'EXTR' TETAR MU1 PFISS ;
       Y1 = 'EXTR' TETAR MU2 PFISS ;
       Z1 = 'EXTR' TETAR MU3 PFISS ;
       NOR1 = ('NORM' (X1 Y1 Z1)) + 1.D-20 ;
       TETAR = TETAR / NOR1 ;
    'FINSI';
  'FINSI' ;
   TETA = (TETAR * XMULT / XAIRE) + TETA ;
'FINSI';
*--------------------------------------------*
* Objet util a garder dans la table TABUTIL -*
*--------------------------------------------*
'SI' (('EGA' &DIME 2) 'OU' ICOQU);
   TABUTIL.'DIRECTION' = VECTEUR;
'FINSI';
'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
  'SI' (N '<EG' NP);
     TTETA.(TPFISS.N) = TETA ;
     TABUTIL.'DIRECTION'.(TPFISS.N) = VECTEUR;
  'SINON';
     TTETA.'GLOBAL' = TETA ;
     TABUTIL.'DIRECTION'.'GLOBAL' = VECTEUR;
  'FINSI';
'FINSI';
'FIN' PROTETA;
*------------------------------------------------------*
* Fin de boucle sur les noeuds de front de la fissure -*
*------------------------------------------------------*
'SI' (('EGA' &DIME 3) 'ET' ('NON' ICOQU));
   TETA = TTETA;
'FINSI';
*-------------------------------------------------------------*
* La configuration peut etre modifiee par DEPL. La directive -*
* suivante nous permet de retrouver configuration initiale ---*
*-------------------------------------------------------------*
'FORM' CONF0;
*-------------------------------*
* Fin de la procedure CH_THETA -*
*-------------------------------*
* rendre compatible les chpoint
*mess ' type de teta '  ( 'TYPE' TETA);
'SI' ( 'EXIS' SUPTAB  'MODELE');
  MOO=SUPTAB . 'MODELE';
'SINON';
  MOO=SUPTAB .'SOLUTION_PASAPAS' .'MODELE';
'FINSI';
MOO = EXTR MOO 'FORM' 'MECANIQUE' ;
'SI' ( 'EGA' ('TYPE' TETA) 'CHPOINT  ');
teta='CFND' teta MOO;
'SINON';
  'REPE' BOO (NP - 1);
   IIP=TPFISS.&boo;
   TETA.IIP= 'CFND' TETA.IIP  MOO;
   'FIN' BOO;
   TETA.'GLOBAL'= 'CFND' TETA.'GLOBAL'  MOO;
'FINSI';

*------------------------------------------------------*
* Dans TABUTIL on ajoute les chpoint de DIRECTION     -*
*------------------------------------------------------*

* VECTEUR 1
si (EGA (TYPE TETA) 'CHPOINT  ');
  VECTEUR1 = TETA ;
sino;
  VECTEUR1 = TETA . 'GLOBAL';
fins;
VECTEUR1= REDU VECTEUR1 (SUPTAB.'FRONT_FISSURE');
* VECTEUR1 = VECTEUR1 / (NORM VECTEUR1);

* Recuperation des noms de composantes du deplacement dans le MODELE
  NCOMPDEP = EXTR SUPTAB.'MODELE' 'DEPL';
  NCOMPFOR = EXTR SUPTAB.'MODELE' 'FORC';

  NVECT1 = PSCA VECTEUR1 VECTEUR1 NCOMPDEP NCOMPDEP;

  VECTEUR1 = VECTEUR1 / (NVECT1**0.5);
TABUTIL . 'DIRECTION1' = VECTEUR1;

si(non ICOQU);

* VECTEUR 2
  F1 = PRES 'MASS' MOO SUPTAB.'LEVRE_SUPERIEURE' 1.;
  VECTEUR2 = REDU F1 (SUPTAB.'FRONT_FISSURE');
  VECTEUR2 = EXCO VECTEUR2 NCOMPFOR NCOMPDEP 'NOID';
*  VECTEUR2 = VECTEUR2 / (NORM VECTEUR2);

  NVECT2   = PSCA VECTEUR2 VECTEUR2 NCOMPDEP NCOMPDEP;
  VECTEUR2 = VECTEUR2 / (NVECT2**0.5);
  TABUTIL . 'DIRECTION2' = VECTEUR2;

* VECTEUR3 = VECTEUR1 pvec VECTEUR2
*   VECTEUR3 = ( ((exco VECTEUR1 'UY' 'UX') * (exco VECTEUR2 'UZ' 'UX'))
*           - ((exco VECTEUR1 'UZ' 'UX') * (exco VECTEUR2 'UY' 'UX')) )
*        et ( ((exco VECTEUR1 'UZ' 'UY') * (exco VECTEUR2 'UX' 'UY'))
*           - ((exco VECTEUR1 'UX' 'UY') * (exco VECTEUR2 'UZ' 'UY')) )
*        et ( ((exco VECTEUR1 'UX' 'UZ') * (exco VECTEUR2 'UY' 'UZ'))
*           - ((exco VECTEUR1 'UY' 'UZ') * (exco VECTEUR2 'UX' 'UZ')) );
  VECTEUR3 = ( * VECTEUR1 VECTEUR2
   (mots 'UY' 'UZ' 'UX') (mots 'UZ' 'UX' 'UY') (mots 'UX' 'UY' 'UZ') )
           - ( * VECTEUR1 VECTEUR2
   (mots 'UZ' 'UX' 'UY') (mots 'UY' 'UZ' 'UX') (mots 'UX' 'UY' 'UZ') );
  TABUTIL . 'DIRECTION3' = VECTEUR3;

fins;

'FINPROC' TETA TABUTIL;
$$$$



