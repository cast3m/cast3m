$$$$ VIDE     NOTICE  CB215821  15/05/04    21:15:08     8516
                                             DATE     15/05/04

    Operateur VIDE                         Voir aussi : ZERO,LECT,PROG
    --------------                                      SUIT,MOTS,MANU
                                                        TABL


Section : Langage Objets


FRAN===========================================================
    Objet :
    _______

    L'opérateur VIDE permet de créer un ou plusieurs objets vides de
    types/sous-types donnés



    Syntaxe :
    _________

    Deux possibilités pour récupérer les objets vides créés :


      1) Objets séparés :

        OBJ1,...,OBJn = VIDE [GROUPE1,...,GROUPEn]


      2) Objets indicés dans une table :

        TAB1 = VIDE ('TABULER' ( |LENTI1| ) ) [GROUPE1,...,GROUPEn]
                                 |LREEL1|
                                 |LMOTS1|


    Dans les deux cas, GROUPEi est de la forme :

                         MOTAi(/MOTBi)(*ENTIi)



   Commentaires :
   ______________

   1) La création d'objets vides peut être intéressante lorsqu'il s'agit
      de construire des objets par itérations successives.
      L'opérateur VIDE permet  d'initialiser l'objet global  et d'éviter
      ainsi  tout test  d'existence  avant  d'utiliser  l'opérateur  ET.
      Ceci  est  particulièrement  précieux  quand  le  premier  ET peut
      survenir alternativement en différents points du jeu de données.

   2) Si  l'option 'TABULER' est  utilisee, il est possible d'indiquer à
      quels indices sont placés  les objets qui sont créés en spécifiant
      une  liste LENTI1  (type LISTENTI)  ou  LREEL1  (type LISTREEL) ou
      LMOTS1 (type LISTMOTS).

      Si  la liste  est trop courte,  les indices  manquants  seront des
      entiers incrémentés suivant l'ordre de création des objets.

      /!\ ATTENTION : On  laisse à  l'utilisateur  le  soin de s'assurer
                      qu'aucun  indice  de la table ne sera écrasé. Cela
                      surviendra  automatiquement  si  la  liste fournie
                      comporte  des  doublons,  mais  peut aussi arriver
                      s'il s'agit d'un LISTENTI trop court.

   3) Les GROUPEi définissent  le type MOTAi, ainsi qu'éventuellement le
      sous-type  MOTBi  et/ou le  nombre  d'objets  à  créer. Le tableau
      ci-dessous précise quelles sont les valeurs autorisées :

        MOTAi      |   MOTBi
      +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
       'MAILLAGE'  |   N'importe quel type d'élément valide
                   |   (Par défaut : valeur retournée par VALE 'ELEM')
      -------------+---------------------------------------------------
       'CHPOINT '  |   Nature du champ : 'DISCRET' ou 'DIFFUS'
                   |   (Par défaut : 'INDETERMINE')
      -------------+---------------------------------------------------
       'MCHAML  '  |   AUCUN
      -------------+---------------------------------------------------
       'MMODEL  '  |   AUCUN
      -------------+---------------------------------------------------
       'RIGIDITE'  |   Le sous-type attribué à la matrice
                   |   (Par défaut : chaîne vide '        ')
      -------------+---------------------------------------------------
       'EVOLUTIO'  |   Le sous-type REEL ou COMPLEXE (courbes par paire)
                   |   (Par défaut : chaîne vide '        ')
      -------------+---------------------------------------------------
       'LISTENTI'  |   AUCUN
      -------------+---------------------------------------------------
       'LISTREEL'  |   AUCUN
      -------------+---------------------------------------------------
       'LISTMOTS'  |   AUCUN
      -------------+---------------------------------------------------
       'LISTCHPO'  |   AUCUN
      -------------+---------------------------------------------------
       'TABLE   '  |   Le sous-type attribué à la table
                   |   (Par défaut : la table n'a pas de sous-type)
      -------------+---------------------------------------------------
       'DEFORME '  |   AUCUN
      -------------+---------------------------------------------------
       'VECTEUR '  |   AUCUN
      -------------+---------------------------------------------------
       'CHARGEME'  |   AUCUN
      -------------+---------------------------------------------------
       'NUAGE'     |   AUCUN
      -------------+---------------------------------------------------



   Exemples :
   __________


   a) MAIL1 = VIDE 'MAILLAGE' ;
      MAIL2 = VIDE 'MAILLAGE'/'SEG2' ;
      MAIL3 = VIDE 'MAILLAGE'/'TRI3' ;

      MAIL1 est un maillage vide constitué de l'élément par défaut
      MAIL2 est un maillage vide de SEG2
      MAIL3 est un maillage vide de TRI3


   b) RIG1 RIG2 = VIDE 'RIGIDITE'/'RIGIDITE' 'RIGIDITE'/'MASSE' ;

      RIG1 est une matrice vide de sous-type 'RIGIDITE'
      RIG2 est une matrice vide de sous-type 'MASSE'


   c) LENTI1 LENTI2 LENTI3 = VIDE 'LISTENTI'*3 ;
      TAB1 = VIDE 'TABU' 'LISTENTI'*3 ;
      TAB2 = VIDE 'TABU' (MOTS 'UX' 'UY' 'UZ') 'LISTENTI'*3 ;

      LENTI1, LENTI2 et LENTI3 sont trois listes d'entiers vides.
      TAB1  contient  trois indices  1, 2 et 3  renvoyant  chacun  à une
      liste d'entiers vide.
      Idem dans TAB3, mais les indices sont 'UX','UY' et 'UZ'.


   d) MAIL1 MAIL2 = VIDE 'MAILLAGE'/'CUB8'*2 ;
      MAIL1 MAIL2 = VIDE 'MAILLAGE'*2/'CUB8' ;

      L'ordre est indifférent : MAIL1 et MAIL2 sont deux maillages vides
      de CUB8.

ANGL===========================================================
    Description :
    _____________

    The VIDE operator allows to create one or more empty objects of
    given types/subtypes



    Syntax :
    ________

    There are two ways to retrieve the empty objects :


      1) As separated objects :

        OBJ1,...,OBJn = VIDE [GROUP1,...,GROUPn]


      2) As objects listed in a table :

        TAB1 = VIDE ('TABULATE' ( |LENTI1| ) ) [GROUPE1,...,GROUPEn]
                                  |LREEL1|
                                  |LMOTS1|


    In both cases, GROUPi is a pattern of the following form :

                         MOTAi(/MOTBi)(*ENTIi)



   Comments :
   __________

   1) The creation of empty objects can be usefull whenever you have
      to build a main object in an iterative way. Indeed, the VIDE
      operator makes it possible to initialize this main object, thus
      avoiding any conditional test before calling the ET operator.
      This should be particularly appreciated when the first ET can
      occur alternatively at different locations.

   2) If the 'TABULATE' option is present, it is possible to specify
      the indexes to be used in a list of the LISTENTI or LISTREEL or
      LISTMOTS type.

      Should that list be too short, the missing indexes would be
      integers (ENTIER) reflecting the order of creation of the empty
      objects.

      /!\ WARNING : The user must personally check that no index is
                    going to be erased during the process. This will
                    always occur if the list he/she provided contains
                    duplicates. It may also happen if this is a
                    LISTENTI which is not long enough.

   3) The GROUPi patterns consist of a type MOTAi, and possibly a
      subtype MOTBi and/or the amount of objects to create. The table
      below gives the list of the allowed values :

        MOTAi      |   MOTBi
      +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
       'MAILLAGE'  |   Any valid element type
                   |   (Default: value returned by VALE 'ELEM')
      -------------+---------------------------------------------------
       'CHPOINT '  |   Object nature: 'DISCRET' or 'DIFFUS'
                   |   (Default: 'INDETERMINE')
      -------------+---------------------------------------------------
       'MCHAML  '  |   NONE
      -------------+---------------------------------------------------
       'MMODEL  '  |   NONE
      -------------+---------------------------------------------------
       'RIGIDITE'  |   The subtype attributed to the matrix
                   |   (Default: an empty string '        ')
      -------------+---------------------------------------------------
       'EVOLUTIO'  |   The subtype REEL or COMPLEXE (curves by pair)
                   |   (Default: an empty string '        ')
      -------------+---------------------------------------------------
       'LISTENTI'  |   NONE
      -------------+---------------------------------------------------
       'LISTREEL'  |   NONE
      -------------+---------------------------------------------------
       'LISTMOTS'  |   NONE
      -------------+---------------------------------------------------
       'LISTCHPO'  |   NONE
      -------------+---------------------------------------------------
       'TABLE   '  |   The subtype attributed to the table
                   |   (Default: table has no subtype)
      -------------+---------------------------------------------------
       'DEFORME '  |   NONE
      -------------+---------------------------------------------------
       'VECTEUR '  |   NONE
      -------------+---------------------------------------------------
       'CHARGEME'  |   NONE
      -------------+---------------------------------------------------
       'NUAGE'     |   AUCUN
      -------------+---------------------------------------------------


   Examples :
   __________


   a) MAIL1 = VIDE 'MAILLAGE' ;
      MAIL2 = VIDE 'MAILLAGE'/'SEG2' ;
      MAIL3 = VIDE 'MAILLAGE'/'TRI3' ;

      Here, MAIL1 is an empty mesh made of the default element. MAIL2
      is an empty mesh composed of segments while MAIL3 is an empty
      mesh composed of triangles.


   b) RIG1 RIG2 = VIDE 'RIGIDITE'/'RIGIDITE' 'RIGIDITE'/'MASSE' ;

      RIG1 is an empty matrix of subtype 'RIGIDITE', RIG2 is an empty
      matrix of subtype 'MASSE'.


   c) LENTI1 LENTI2 LENTI3 = VIDE 'LISTENTI'*3 ;
      TAB1 = VIDE 'TABU' 'LISTENTI'*3 ;
      TAB2 = VIDE 'TABU' (MOTS 'UX' 'UY' 'UZ') 'LISTENTI'*3 ;

      LENTI1, LENTI2 et LENTI3 are three empty lists of integers.
      TAB1 contains three elements 1, 2 and 3, each referencing a
      separate empty list of integers. In TAB3, the lists are rather
      indexed by 'UX', 'UY' and 'UZ'.


   d) MAIL1 MAIL2 = VIDE 'MAILLAGE'/'CUB8'*2 ;
      MAIL1 MAIL2 = VIDE 'MAILLAGE'*2/'CUB8' ;

      The order of special characters is indifferent : MAIL1 and MAIL2
      are empty meshes consituted by cubes.







