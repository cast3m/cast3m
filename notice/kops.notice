$$$$ KOPS     NOTICE  MAGN      17/02/24    21:15:18     9323
                                             DATE     17/02/24

     Operateur KOPS                          Voir aussi :
     --------------


     RES = KOPS CHP1 'MOTCLE' CHP2 ;

     ou

     RES = KOPS CHP1 'MOTCLE' TABD ;


Section : Mathematiques Autres

FRAN======================================================================

     Objet :

     Effectue des operations arithmetiques entre deux CHPOINTs
     ou un CHPOINT et un flottant.
     Calcule le gradient ou le rotationnel d'un CHPOINT
     Calcule le produit matrice vecteur entre un objet MATRIK et un
     CHPOINT
     Calcule le produit entre un objet MATRIK et un FLOTTANT

     RES , CHP1 CHP2  CHPOINT et/ou FLOTTANT
     TABD  objet MODEL 'NAVIER_STOKES'
     'MOTCLE' a choisir dans la liste suivante :

               '*'     multiplication  de deux CHPOINT
                       de type SCALAIRE ou VECTEUR composante par
                       composante
                       le resultat est un CHPOINT SCALAIRE ou
                       VECTEUR

               '/'  idem precedent pour la division

               '+'  idem precedent pour l'addition

               '-'  idem precedent pour la soustraction

               '|<' Borne inferieurement un CHPOINT par un flottant.
                    OBJ1 = KOPS OBJ2 '|<' OBJ3;
                         OBJ1,OBJ2 CHPOINT  OBJ3 FLOTTANT

               '>|' Borne superieurement un CHPOINT par un flottant.
                    OBJ1 = KOPS OBJ2 '>|' OBJ3;
                         OBJ1,OBJ2 CHPOINT  OBJ3 FLOTTANT

               'GRAD'  calcule le Gradient d'un CHPOINT scal sommet.
                       Le resultat est un CHPOINT vect centre.
                       Ne marche que pour les discretisations LINE,MACRO

               'GRADS' calcule le Gradient d'un CHPOINT scal sommet.
                       Le resultat est un CHPOINT vect sommet.
                       Marche pour toutes les discretisations LINE,MACRO
                       et QUAF.

               'ROT '  calcule le Rotationel d'un CHPOINT vect sommet
                       le deuxieme argument doit etre une table domaine
                       ex : rt2d= kops un 'ROT' $mt ;
                       Cf exemple 1 ci-dessous

               'CLIM' N (N is an INTEGER)
                       surcharge dans CHP1 les valeurs de CHP2
                       N=0 les noeuds correspondants sont mis a 0.
                       N=1  "     "         "         "   a 1.e30
                       N=2  "     "         "         "   a (CHP2*1.e30)
                       N=3  "     "         "         "   a  CHP2
                       Si l'entier N est precede du signe -, les composantes
                       de CHP2 doivent etre identiques a celles de CHP1
                       sinon CHP1 n'est pas surcharge.
                       Si l'entier N est positif, on teste sur les composantes
                       UX UY UZ

               'MULT'  realise le produit matrice vecteur entre un objet
                       MATRIK et un CHPOINT ou un FLOTTANT
                       ex : p1=kops ma1 'MULT' un ;
                       Cf exemple 2 ci-dessous : calcul de la pression
                       par une methode de penalisation.

               'RIMA'  permet le passage d'un objet matrik a un objet
                       rigidite et vice-versa

                        Example
                        -----------
                        rig1    = KOPS RIMA matrik1 ;
                        matrik2 = KOPS RIMA rig2 ;
                        rig1, rig2 objet de type rigidite
                        matrik2, matrik1 objet de type matrik

                        Si on veut forcer la création d'un objet RIGIDITE non
                        symétrique, on indique le mot-clé 'NSYM'
                        Example
                        -----------
                        rig1    = KOPS RIMA matrik1 'NSYM' ;

               'MATIDE' permet de creer un objet RIGIDITE ou MATRIK identite
                       mat1 = kops lmot1 geo1 ('MATRIK') ;
                       ou
                       lmot1 = liste de noms des inconnues (LISTMOTS)
                       geo1 = support geometrique des inconnues
                              (MAILLAGE)
                       mat1 = RIGIDITE ou MATRIK identite

               'MATDIAGO' permet de creer un objet RIGIDITE (ou MATRIK)
                          diagonal
                       mat1 = kops 'MATDIAGO' chpo1 ('MATRIK') ;
                       ou
                       chpo1 = valeurs des termes diagonaux (CHPOINT)
                       mat1 = RIGIDITE (ou MATRIK) diagonal
                       Pour les objets RIGIDITE, utilisez plutot
                       l'operateur 'MANU' 'RIGI'.

               'CHANINCO' mot clef obsolete. Voir l'operateur CHAN
                          mot clef 'INCO'.

               'NINCDUPR' change les noms d'inconnues duales d'une
                          matrice (ou d'un chpoint dual) afin qu'ils
                          soient identiques aux noms d'inconnues
                          primales
                          |mat2 | = 'KOPS' 'NINCDUPR' |mat1 | ;
                          |chpo2|                     |chpo1|
                          mati sont de type RIGIDITE ou MATRIK

               'NINCPRDU' change les noms d'inconnues duales d'une
                          matrice (ou d'un chpoint dual) afin qu'ils
                          correspondent aux noms d'inconnues primales
                          suivant la correspondance conventionnelle
                          de Castem
                          (ex: 'UX' <-> 'FX', 'T' <-> 'Q', etc...)
                          |mat2 | = 'KOPS' 'NINCPRDU' |mat1 | ;
                          |chpo2|                     |chpo1|
                          mati sont de type RIGIDITE ou MATRIK

               'TRANSPOS' transpose une matrice (type MATRIK ou RIGIDITE)
                          mat2 = 'KOPS' 'TRANSPOS' mat1 ;

               'EXTRNINC' mot clef obsolete. Voir l'operateur EXTR
                          mot clef 'COMP' et 'COMP' 'DUAL'

               'EXTRINCO' mot clef obsolete. Voir l'operateur EXTR

               'EXTRDIAG' mot clef obsolete. Voir l'operateur EXTR
                          mot clef 'DIAG'

               'SPAIDIAG' Renvoie un inverse approche diagonal (SPAI-D)
                          (type CHPOINT) d'une matrice (type MATRIK ou
                          RIGIDITE).
                          chp1 = 'KOPS' 'SPAIDIAG' mat1 ;

               'EXTRCOUP' cree une table contenant la partition des
                          blocs diagonaux que l'on peut faire a partir
                          de la matrice ma1. Chaque entree de la table
                          contient la liste des inconnues duales
                          constituant un bloc.
                          tab = 'KOPS' 'EXTRCOUP' ma1;

               'POINTEUR' renvoie le pointeur d'un objet (type ENTIER)
                          (voir aussi l'operateur 'MANU' 'OBJE')
                          enti = 'KOPS' 'POINTEUR' obj1 ;

               'MATRIK'   renvoie un champoint et une matrice
                          (type MATRIK) vide
                          chvid matvid = 'KOPS' 'MATRIK' ;

               'CMCT'     calcule un produit de matrices du type
                          complement de Schur C D Bt.
                          D est diagonale stockee dans un chpoint.
                          mat3 = 'KOPS' 'CMCT' mat1 mat2 (chpo) ;
                          mat1 : matrice C (type RIGIDITE ou MATRIK)
                          mat2 : matrice B (type RIGIDITE ou MATRIK)
                          chpo : matrice D optionnelle (type CHPOINT)
                          mat3 : matrice CDBt ou CBt
                                         (type RIGIDITE ou MATRIK)

               'RELA'     Transforme une matrice (type RIGIDITE) en
                          matrice de relations (contraintes type
                          RIGIDITE). On peut préciser un second membre
                          (type CHPOINT) afin de donner une valeur non
                          nulle à la relation.
                          mat2 (chp2) = 'KOPS' 'RELA' mat1 (chp1) ;

               'CONDENSE' A partir d'un systeme lineaire (A, b)
                          (type RIGIDITE, CHPOINT), on construit un
                          systeme reduit obtenu par elimination des
                          contraintes.
                          Ar br br1 = 'KOPS' 'CONDENSE' A b ;

               'EVAPORE'  A partir de la solution d'un systeme reduit
                          xr (type CHPOINT), on reconstruit la solution
                          du systeme avant reduction
                          x = 'KOPS' 'EVAPORE' xr A b br1 ;


    EXEMPLE DIVERS
    --------------



    Exemple 1 :
    -----------

    Calcul et trace de la fonction de courant d'un champ de vitesse
    (par resolution de l'equation laplacien(psi) + rot(un) = 0)
    un  : champ de vitesse
    $mt : table domaine


    sw = kops un 'ROT' $mt ;
    rk = EQEX $MT 'OPTI' 'EF' 'IMPL'
    ZONE  $mt OPER LAPN 1.    INCO 'PSI'
    ZONE  $mt OPER FIMP sw    INCO 'PSI'
    'CLIM' 'PSI' 'TIMP' (parois) 0.
    ;

    rk.'INCO'.'PSI'=kcht $mt scal sommet 0. ;
    exic rk ;
    psi=rk.'INCO'.'PSI' ;
    trace psi mt ;


    Exemple 2 :
    -----------

    Calcul de la pression par une methode de penalisation.

    KPRESS='CENTREP1' ;   en accord avec l'approximation de pression
    EPSS=1.e10;           et le EPSS dans le calcul de la vitesse

    r1=eqex $mt 'OPTI' EF IMPL KPRESS
    kmac (r1.'1KMAC') ;
    un= nomc (mots UX UY ) (mots 1UN 2UN ) un ;

    p1=kops (r1.'1KMAC'.'MATELM') 'MULT' un ;

    p11= kcht $mt SCAL KPRESS (nomc p1 'SCAL') ;
    pn=elno $mt p11 KPRESS ;
    trace pn $mt.maillage ;

ANGL======================================================================


     Object:

     Realizes arithmetical operations between two CHPOINT
     or a CHPOINT and a real.
     Computes the gradient or the curl of a CHPOINT
     Realizes the product matrix vector between a MATRIK object and a
     CHPOINT
     The operations are done term by term.

     Comments:


     RES , CHP1 CHP2  CHPOINT et/ou FLOTTANT
     TABD  object MODEL 'NAVIER_STOKES'
     'MOTCLE' choosen among the folowing list  :

               '*'     multiplication by two CHPOINT
                       type SCAL or VECT composante by
                       composante
                       the result is a CHPOINT SCAL or VECT

               '/'  same as before for the division

               '+'  same as before for addition

               '-'  same as before for substraction

               '|<' Bound a CHPOINT at a lower limit (FLOTTANT).
                    OBJ1 = KOPS OBJ2 '|<' OBJ3;
                         OBJ1,OBJ2 CHPOINT  OBJ3 FLOTTANT

               '>|' Bound a CHPOINT at a upper limit (FLOTTANT).
                    OBJ1 = KOPS OBJ2 '>|' OBJ3;
                         OBJ1,OBJ2 CHPOINT  OBJ3 FLOTTANT

               'GRAD'  computes the Gradient of a CHPOINT scal sommet.
                       The result is a CHPOINT vect centre.
                       Works only with LINE or MACRO discretization.

               'GRADS' computes the Gradient of a CHPOINT scal sommet.
                       The result is a CHPOINT vect sommet.
                       Works with all discretizations LINE,MACRO and
                       QUAF.

               'ROT '  computes the CURL of a CHPOINT vect sommet
                       the second argument must be a domain table
                       ex : rt2d= kops un 'ROT' $mt ;
                       Cf example 1

               'CLIM' N (N is an INTEGER)
                       changes in CHP1 the values by those of CHP2
                       N=0 the coresponding nodes are set to 0.
                       N=1  "       "         "    "   "  to 1.e30
                       N=2  "       "         "    "   "  to (CHP2*1.e30)
                       N=3  "       "         "    "   "  to  CHP2
                       If the integer N is preceeded with the '-' sign,
                       the componants of CHP2 must be identical to those
                       of CHP1 otherwise CHP1 remains unmodified.
                       If N is positive, we test on the componants names
                       UX UY UZ

               'MULT'  makes the matrix vector product between an object
                       MATRIK and a CHPOINT or a FLOTTANT
                       ex : p1=kops ma1 'MULT' un ;
                       Cf example 2  : computation of the pressure
                       by a penalisation method.

               'RIMA'  transforms a object matrik to a object rigidite
                       or
                       transforms a object rigidite to a object matrik
                        Exemple
                        -----------
                        rig1    = KOPS RIMA matrik1 ;
                        matrik2 = KOPS RIMA rig2 ;
                        rig1, rig2 object rigidite
                        matrik2, matrik1 object  matrik

                        To force the creation od a non-symetric RIGIDITE object
                        indicate 'NSYM' keyword
                        Example
                        -----------
                        rig1    = KOPS RIMA matrik1 'NSYM' ;

               'MATIDE' it creates an identity RIGIDITE (or MATRIK) :
                       mat1 = kops lmot1 geo1 ('MATRIK') ;
                       where
                       lmot1 = the unknowns names (LISTMOTS)
                       geo1 = the unknowns geometrical support
                              (MAILLAGE)
                       mat1 = identity RIGIDITE (or MATRIK)

               'MATDIAGO' creates a diagonal RIGIDITE (or MATRIK)
                       mat1 = kops 'MATDIAGO' chpo1 ('MATRIK') ;
                       where
                       chpo1 = values of diagonal terms (CHPOINT)
                       mat1 = diagonal RIGIDITE (or MATRIK)
                       For RIGIDITE type object, please use the
                       MANU RIGI operator.

               'CHANINCO' obsolete keyword. See the CHAN operator
                          with keyword 'INCO'

               'NINCDUPR' changes a matrix dual (or chpoint dual)
                          unknowns' names
                          to be the same as the primal unknowns' names
                          |mat2 | = 'KOPS' 'NINCDUPR' |mat1 | ;
                          |chpo2|                     |chpo1|
                          mati are RIGIDITE or MATRIK type objects.

               'NINCPRDU' changes a matrix dual (or chpoint dual)
                          unknowns' names to correspond to
                          the primal unknowns' names following
                          Castem's convention
                          (ex: 'UX' <-> 'FX', 'T' <-> 'Q',etc...)

                          |mat2 | = 'KOPS' 'NINCPRDU' |mat1 | ;
                          |chpo2|                     |chpo1|
                          mati are RIGIDITE or MATRIK type objects.

               'TRANSPOS' transposes a RIGIDITE (or MATRIK) object
                          mat2 = 'KOPS' 'TRANSPOS' mat1 ;

               'EXTRNINC' obsolete keyword. See the EXTR operator
                          with keywords 'COMP' and 'COMP' 'DUAL'.

               'EXTRINCO' obsolete keyword. See the EXTR operator.

               'EXTRDIAG' obsolete keyword. See the EXTR operator
                          with 'DIAG' keyword.

               'SPAIDIAG' Returns a diagonal approximate inverse (SPAI-D)
                          (CHPOINT type) of a matrix (MATRIK or RIGIDITE
                          type).
                          chp1 = 'KOPS' 'SPAIDIAG' mat1 ;

               'EXTRCOUP' Creates a table which contains the partition
                          in blok diagonal parts of the matrix ma1.
                          Each entry of the table contains the list
                          of the dual components which constitutes
                          a blok.
                          tab = 'KOPS' 'EXTRCOUP' ma1;

               'POINTEUR' returns the pointer to an object (ENTIER type)
                          (see also the operator 'MANU' 'OBJE')
                          enti = 'KOPS' 'POINTEUR' obj1 ;

               'MATRIK'   gives back a null CHPOINT and a null
                          MATRIK object
                          chvid matvid = 'KOPS' 'MATRIK' ;

               'CMCT'     computes a Schur complement-like matrix
                          product C D Bt. D is a diagonal matrix
                          store in a CHPOINT object.
                          mat3 = 'KOPS' 'CMCT' mat1 mat2 (chpo) ;
                          mat1 : C matrix (RIGIDITE or MATRIK type)
                          mat2 : B matrix (RIGIDITE or MATRIK type)
                          chpo : optional D matrix (CHPOINT type)
                          mat3 : CDBt or CBt matrix
                                      (RIGIDITE or MATRIK type)

               'RELA'     Transform a matrix (RIGIDITE type) into
                          a constraint matrix (RIGIDITE type). An optional
                          non nil value (CHPOINT type) can be given to
                          the constraint.
                          mat2 = 'KOPS' 'RELA' mat1 ;

               'CONDENSE' Given the linear system (A, b)
                          (RIGIDITE, CHPOINT type), builds a reduced
                          linear system (Ar, br) by constraint
                          elimination.
                          Ar br br1 = 'KOPS' 'CONDENSE' A b ;

               'EVAPORE'  Given the solution of a reduced linear system
                          xr (CHPOINT type), builds the solution of the
                          system before reduction
                          x = 'KOPS' 'EVAPORE' xr A b br1 ;


    Exemple 1 :
    -----------

    Computes and plots the stream function of a velocity field
    (we have to solve the problem laplacien(psi) + rot(un) = 0)
    un  : velocity field
    $mt : domain table


    sw = kops un 'ROT' $mt ;
    rk = EQEX $MT 'OPTI' 'EF' 'IMPL'
    ZONE  $mt OPER LAPN 1.    INCO 'PSI'
    ZONE  $mt OPER FIMP sw    INCO 'PSI'
    'CLIM' 'PSI' 'TIMP' (parois) 0.
    ;

    rk.'INCO'.'PSI'=kcht $mt scal sommet 0. ;
    exic rk ;
    psi=rk.'INCO'.'PSI' ;
    trace psi mt ;


    Exemple 2 :
    -----------

    Computes the pressure by penalisation method.

    KPRESS='CENTREP1' ;   according to the pressure approximation
    EPSS=1.e10;           and EPSS choosen.

    r1=eqex $mt 'OPTI' EF IMPL KPRESS
    kmac (r1.'1KMAC') ;
    un= nomc (mots UX UY ) (mots 1UN 2UN ) un ;

    p1=kops (r1.'1KMAC'.'MATELM') 'MULT' un ;

    p11= kcht $mt SCAL KPRESS (nomc p1 'SCAL') ;
    pn=elno $mt p11 KPRESS ;
    trace pn $mt.maillage ;


    Exemple 3 :
    -----------
      rig1    = KOPS RIMA matrik1 ;
      or
      matrik2 = KOPS RIMA rig2 geo2 <lmot2> ;

      rig1, rig2 objects of rigidite type
      matrik2, matrik1 object of matrik type
      geo2 maillage( type poi1) support de l'inconnue primale
      lmots liste des noms de l'inconnue primale
















