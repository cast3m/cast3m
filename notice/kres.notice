$$$$ KRES     NOTICE  GOUNAND   11/10/07    21:15:58     7149
                                             DATE     11/10/07

      Operateur KRES                         Voir aussi :
      --------------

       1)  KRES RVP CHPO1 'BETA' VAL1 VAL2 'PIMP' VAL3 VAL4 ;


       2)  CHPO3 = KRES MA1 'TYPI' TAB1 ;

       2bis)  CHPO3 = KRES MA1 (CHPO2) (MOTi VALi) ;



Section : Fluides Resolution

FRAN===================================================================
      ----------------------
      |  1ere possibilite  |
      ----------------------

ANGL==============================================================

      ----------------------
      |  1st possibility   |
      ----------------------

FRAN==========================================================
      Objet :
      _______

      Le foncteur KRES resout une equation de pression dans le
      cadre de la resolution semi-implicite des equations
      de Navier-Stokes dans CASTEM 2000.

      Commentaire :
      _____________

      RVP      : objet de type TABLE de sous-type EQPR

      CHPO1    : objet de type CHPOINT contenant la variable
                 PRESSION

      VALi     : objets de type REEL non documentes

ANGL===================================================================
      Description :
      _____________

      KRES functor solves a Poisson-type equation for the variable
      pressure. It is part of the semi-implicit algorithm for the
      solution of Navier-Stokes equations in CASTEM 2000.

      Contents :
      __________

      RVP      : TABLE EQPR type object

      CHPO1    : CHPOINT type object the content of which is
                 the pressure variable

      VALi     : undocumented REEL type objects

FRAN==========================================================
      ----------------------
      |  2eme possibilite  |
      ----------------------

ANGL==========================================================
      ----------------------
      |  2nd possibility   |
      ----------------------



FRAN==========================================================
      Objet :
      _______

      L'operateur KRES resout un systeme d'equations lineaires
      de type Ax=b par une methode directe ou iterative.

      Commentaire :
      _____________

      MA1      : objet de type RIGIDITE (ou MATRIK)
                 c'est la matrice A.

      TAB1     : TABLE de sous-type METHINV contenant les
                 informations optionnelles.

      CHPO2    : objet de type CHPOINT contenant le second membre
                 du systeme a resoudre.
                 C'est le "vecteur" b.

      CHPO3    : objet de type CHPOINT contenant en retour
                 (si la resolution a abouti) le "vecteur"
                 solution du systeme : x.

      Les informations sont :
      - soit stockees dans TAB1 : TAB1 . MOTi = VALi (syntaxe 2) ;
      - soit donnees sur ligne de commande (syntaxe 2bis).

      MOTi et VALi peuvent prendre les valeurs suivantes :

      - CLIM (type CHPOINT) :
         Conditions aux limites de Dirichlet

      - SMBR (type CHPOINT) :
         Second membre CHPO2

      - TYPINV (type ENTIER) :
         Methode d'inversion du systeme
         defaut ->  1  : resolution directe (Crout)
                    2  : Gradient Conjugue
                    3  : Bi-Gradient Conjugue Stabilise (BiCGSTAB)
                    4  : BiCGSTAB(l)
                    5  : GMRES(m) : restarted Generalized Minimal
                                    Residual
                    6  : CGS (Conjugate Gradient Squared)
                    7  : Algebraic Multigrid Notay FCG
                         (matrice symetrique)
                    8  : Algebraic Multigrid Notay GCR(m)
                         (matrice non symetrique)
                    9  : BiCG

      - MATASS (type MATRIK) :
         Matrice de meme structure que MA1 (eventuellement egale)
         servant a preconditionner l'assemblage.
         Par defaut : MA1

      - TYRENU (type MOT) :
         Methode de renumerotation des ddl :
         - 'RIEN'
         - 'SLOA' : algorithme de S.W. Sloan
         - 'GIPR' : algorithme de Gibbs-King
         - 'GIBA' : algorithme de Gibbs-Poole-Stockmeyer
         Par defaut : 'SLOA'

      - PCMLAG (type MOT) :
         Methode de prise en compte des multiplicateurs de Lagrange :
         - 'RIEN'
         - 'APR2', 'APR3', 'APR4', 'APR5'.
         Par defaut : 'APR2'

      - SCALING (type ENTIER) :
         Scaling de la matrice :
         - 0 : pas de scaling
         - 1 : scaling par les normes euclidiennes des lignes
               et des colonnes
         - 2 : scaling par la norme L1 des lignes et des colonnes
         Par defaut : 0

       - OUBMAT (type ENTIER) :
          Oubli des matrices elementaires :
          - x0 : non
          - x1 : oui
          - x2 : suppression
          Destruction de la matrice assemblee (et du preconditionneur
          eventuel) apres resolution :
          - 0x : non
          - 1x : oui, sauf le profil Morse
          - 2x : oui
          Par defaut : 00

      - IMPR (type ENTIER) :
         Niveau d'impression

      - LTIME (type LOGIQUE) :
         Si cet indice vaut VRAI, l'operateur sort un deuxieme resultat
         de type TABLE qui contient les temps CPU passes dans les grandes
         etapes de l'algorithme de resolution.

      - LDEPE (type LOGIQUE) :
         Si cet indice vaut VRAI (valeur par defaut) et que la matrice
         du systeme a resoudre est de type RIGIDITE, on effectue une
         elimination (si possible) des contraintes avant de resoudre.

      - CVGOK (type ENTIER) (syntaxe 2 uniquement) :
           Une fois la resolution achevee, contient un entier strictement
           positif si la méthode de résolution n'a pas convergé et un
           entier strictement négatif si une erreur empêchant toute
           résolution s'est produite.

      - indices specifiques aux methodes iteratives (2..9) :

        * XINIT (type CHPOINT) :
           Estimation de depart de l'inconnue.
           Par defaut : un chpoint nul.

        * MAPREC (type MATRIK) :
           Matrice de meme structure que MA1 (eventuellement egale)
           dont on utilise le preconditionneur.
           Par defaut : MA1

        * NITMAX (type ENTIER) :
           Nombre maximum de produits matrice-vecteur a effectuer.
           Par defaut : 2000.
        * CALRES (type ENTIER) :
           Façon de calculer le critere d'arret
           Par defaut : 0
           0 : ||b-Ax||_2 / ||b||_2
           1 : ||b-Ax||_2 / ||b-Ax0||_2
           (|| ||_2 : norme euclidienne)

        * RESID  (type REEL) :
           Valeur maximum du critere d'arret
           Par defaut : 1.D-10

        * GMRESTRT (type ENTIER) :
           Parametre m de redemarrage pour la methode GMRES(m)
           ou pour la methode GCR(m)
           Par defaut : 50

        * LBCG (type ENTIER) :
           Parametre l pour BiCGSTAB(l)
           Par defaut : 4

        * IMPINV (type ENTIER) :
           Niveau d'impression pour la partie resolution iterative

        * BCGSBTOL (type REEL) :
           'Breakdown tolerance' pour les methodes de type BiCG et CGS.
           Par defaut : 1.D-40

        * IDDOT (type ENTIER) :
           IDDOT=0, utilisation du produit scalaire normal.
           IDDOT=1, utilisation du produit scalaire compense.
           Par defaut : 0

        * IMVEC (type ENTIER) :
           IMVEC=0, pas de parallélisme pour les produits matrice-vecteur
           IMVEC=1, parallélisme stratégie 1, entrelace les lignes.
           IMVEC=2, parallélisme stratégie 2, groupe les lignes.
           Par defaut : 2

        * FCPRECT (type ENTIER) (syntaxe 2 uniquement) :
           Frequence de recalcul du preconditionneur en fonction
           de l'indice de boucle sur les pas de temps.
           (utilise par la procedure EXEC)
           Par defaut : 1

        * FCPRECI (type ENTIER) (syntaxe 2 uniquement) :
           Frequence de recalcul du preconditionneur en fonction
           de l'indice de boucle sur la boucle d'iterations utilisee
           pour resoudre les non-linearites.
           (utilise par la procedure EXEC)
           Par defaut : 1

        * CONVINV (type LISTREEL) (syntaxe 2 uniquement) :
           Une fois la resolution achevee, contient
           l'historique du critere d'arret en fonction du nombre
           d'iterations effectuees.

        * NMATVEC (type LISTENTI) (syntaxe 2 uniquement) :
           Une fois la resolution achevee, contient
           le nombre de produits matrice-vecteur effectues en
           fonction du nombre d'iterations.

      - indices specifiques aux preconditionnements :

        * PRECOND (type ENTIER) :
           Type de preconditionnement :
                     0 : pas de preconditionnement
                     1 : preconditionnement par la diagonale
                     2 : preconditionnement D-ILU
           defaut -> 3 : preconditionnement ILU(0) (Crout)
                     4 : preconditionnement MILU(0) (Crout modifie)
                     5 : preconditionnement ILUT (dual truncation)
                     6 : preconditionnement ILUT2 (une variante
                         remplissant mieux la memoire allouee)
                     7 : preconditionnement ILUTP (avec pivoting)
                     8 : preconditionnement ILUTP+0 (avec pivoting)
                         On garde les termes qui seraient dans ILU(0)
                     9 : preconditionnement ILU(0)-PV
                    10 : preconditionnement ILU(0)-PV filtre

        * MILURELX (type REEL) :
           Parametre de relaxation pour le preconditionnement
           MILU(0) compris entre 0. et 1.
           S'il est egal a 0, on se ramene a ILU(0)
           S'il est egal a 1, MILU(0) est dit non relaxe
           Par defaut : 1.D0

        * ILUTLFIL (type REEL) :
           Pour un preconditionnement de type ILUT :
           encombrement maximal du preconditionneur par rapport a la
           matrice MA1.
           Par defaut : 2.D0

        * ILUTDTOL (type REEL) (comprise entre 0.D0 et 1.D0) :
           Pour un preconditionnement de type ILUT :
           "drop tolerance" pour le preconditionneur, i.e. en-dessous de
           cette valeur relative, les termes de la factorisation
           incomplete seront oublies.
           Par defaut : -1.D0 (on garde tous les termes).

        * ILUTPPIV (type REEL) (compris entre 0.D0 et 1.D0) :
           Pour un preconditionnement ILUTP :
           0.D0 : on ne pivote pas
           1.D0 : on pivote tout le temps
           (recommandation : entre 0.1D0 et 0.01D0)
           Par defaut : 0.1D0

        * ILUPRELX (type REEL) :
           Parametre de filtre pour le preconditionnement
           ILU(0)-PV filtre compris entre 0. et +inf
           S'il est egal a 0, on se ramene a ILU(0) qd il n'y a pas de
           pivots negatifs.
           S'il est egal a +inf, ILU(0)-PV est dit non filtre
           Par defaut : 0.5D0

      Attention :
      ___________

      1) La methode du gradient conjugue fonctionne generalement
         pour les matrices A SYMETRIQUES, les autres methodes iteratives
         fonctionnent egalement pour les matrices A NON-SYMETRIQUES.

      2) Les methodes iteratives peuvent ne pas converger (en
         particulier si la matrice est mal conditionnee).

      3) Pour la methode GMRES(m), le residu b-Ax est toujours
         decroissant, mais peut eventuellement stagner.
         Plus m est grand, meilleure est la convergence, mais
         l'occupation memoire et le temps de calcul moyen
         par iteration croissent lineairement avec m.

      4) Les preconditionneurs sont utilises pour ameliorer le
         conditionnement du systeme a resoudre.

         TOUTEFOIS, les preconditionneurs (qui sont de type
         factorisation incomplete) ne sont pas garantis d'exister
         ni meme d'ameliorer le conditionnement (pivots nuls ou
         petits).

         Ceci, MEME SI la matrice A est factorisable.
ANGL==========================================================
      Purpose :
      _________

      The KRES operator solves a linear system of equations
      (given under the form Ax=b) by means of a direct or
      iterative (conjugate-gradient like) method.

      Description :
      _____________

      MA1      : RIGIDITE (or MATRIK) type object
                 This is the matrix A.

      TAB1     : TABLE METHINV type object holding optional information.

      CHPO2    : CHPOINT type object containing the right-hand
                 side of the system to be solved.
                 This is "vector" b.

      CHPO3    : CHPOINT type object containing the left-hand side
                 if the system was successfully solved.
                 This is "vector" x.

      Optional informations are :
      - either stored in TAB1 : TAB1 . MOTi = VALi (syntax 2) ;
      - given on the command line (syntax 2bis) ;

      MOTi and VALi can have the following values :

      - CLIM (CHPOINT type) :
         Dirichlet boundary conditions

      - SMBR (CHPOINT type) :
         Right hand side CHPO2

      - TYPINV (ENTIER type) :
         Solver type
         default -> 1 : direct solver (Crout)
                    2 : Conjugate Gradient
                    3 : Bi-Conjugate Gradient Stabilized (BiCGSTAB)
                    4  : BiCGSTAB(l)
                    5 : GMRES(m) : restarted Generalized Minimal
                                    Residual
                    6  : CGS (Conjugate Gradient Squared)
                    7  : Algebraic Multigrid Notay FCG
                         (for symetric matrices)
                    8  : Algebraic Multigrid Notay GCR(m)
                         (for non symetric matrices)
                    9  : BiCG

      - MATASS (MATRIK type) :
         Matrix with the same structure as MA1 (eventually equal).
         Used for preconditioning matrix assembly.

      - TYRENU (MOT type) :
         Renumbering algorithm for the dof :
         - 'RIEN'
         - 'SLOA' : S.W. Sloan's algorithm
         - 'GIPR' : Gibbs-King's algorithm
         - 'GIBA' : Gibbs-Poole-Stockmeyer's algorithm
         Default : 'SLOA'

      - PCMLAG (MOT type) :
         Algorithm used to number the Lagrange multipliers :
         - 'RIEN'
         - 'APR2', 'APR3', 'APR4', 'APR5'.
         Default : 'APR2'

      - SCALING (ENTIER type) :
         Scaling of the matrix :
         - 0 : no scaling
         - 1 : scaling with euclidean norm of rows and columns
         - 2 : scaling with L1 norm of rows and columns
         Default : 0

      - OUBMAT (ENTIER type) :
          Forget elementwise matrices :
          - x0 : no
          - x1 : yes
          - x2 : suppress
          Suppress the matrix in assembled form (and its preconditioner)
          after linear solve :
          - 0x : no
          - 1x : yes, with the exception of the matrix profile
          - 2x : yes
          Default : 00

      - IMPR (ENTIER type) :
         Echo level

      - LTIME (LOGIQUE type) :
         If this index is set to VRAI (TRUE), the KRES operator outputs
          a TABLE type object with the CPU time spent in the major
          steps of the solution algorithm.

      - LDEPE (type LOGIQUE) :
         If this index is set to VRAI (default value) and if the system
         matrix is of RIGIDITE type, the constraints are eliminated, if
         possible, before solving.

      - CVGOK (ENTIER type) (syntax 2 only) :
           This is an output value. It is strictly positive if a
           convergence problem occured and strictly negative if an error
           preventing a solution to be found occured.

      - indices specific to iterative methods (TYPINV=2..9) :

        * XINIT (CHPOINT type) :
           Starting guess for unknown x.
           Default : nil CHPOINT.

        * MAPREC (MATRIK type) :
           Matrix structured like MA1 (eventually equal).
           It is used as apreconditionner.
          Default : MA1

        * NITMAX (ENTIER type) :
           Maximum number of matrix-vector products.
           Default : 2000.

        * CALRES (ENTIER type) :
           Stopping criterium
           Default : 0
           0 : ||b-Ax||_2 / ||b||_2
           1 : ||b-Ax||_2 / ||b-Ax0||_2
           (|| ||_2 : euclidiean norm)

        * RESID (REEL type) :
           Maximum value for the stopping criterium
           Default : 1.D-10

        * GMRESTRT (ENTIER type) :
           Restart parameter m for the GMRES(m) method.
           Default : 50

        * LBCG (ENTIER type) :
           l-parameter in BiCGSTAB(l)
           Default : 4

        * IMPINV (ENTIER type) :
           Echo level for the iterative solver part

        * BCGSBTOL (REEL type) :
           'Breakdown tolerance' for Bi-CG type methods (including CGS).
           Default : 1.D-40

        * IDDOT (ENTIER type) :
           IDDOT=0, normal scalar products are used.
           IDDOT=1, compensated scalar products are used.
           Default : 0

        * IMVEC (ENTIER type) :
           IMVEC=0, no parallelism in matrix-vector products
           IMVEC=1, parallelism, strategy 1, interlace lines
           IMVEC=2, parallelism, strategy 2, group lines
           Default : 2

        * FCPRECT (ENTIER type) (syntax 2 only) :
           Update frequency of the preconditionning matrix in the
           time advancing loop (used in EXEC procedur).
           Default : 1

        * FCPRECI (ENTIER type) (syntax 2 only) :
           Update frequency of the preconditionning matrix in the
           loop used to resolve non linear terms.
           (used in EXEC procedur)
           Default : 1

        * CONVINV (type LISTREEL) (syntax 2 only) :
           This is an output value. It contains the successive
           values of the stopping criterium as a function of the
           number of iterations performed.

        * NMATVEC (type LISTENTI) (syntax 2 only) :
           This is an output value. It contains the successive
           values of the number of matrix-vector products performed
           as a function of the number of iterations.

      - indices specific to preconditioners :

        * PRECOND (ENTIER type) :
           Preconditioning matrix :
                     0 : no preconditioning
                     1 : Diagonal preconditioning (Jacobi)
                     2 : D-ILU preconditioning
          default -> 3 : ILU(0) preconditioning (Crout)
                     4 : MILU(0) preconditioning (modified Crout)
                     5 : ILUT preconditioning (ILU with dual truncation
                         strategy)
                     6 : ILUT2 preconditioning (a variation on the
                         previous which tries to fill all allocated
                         memory)
                     7 : ILUTP preconditioning (with pivoting)
                     8 : ILUTP+0 preconditioning (with pivoting)
                         All ILU(0) terms are kept.
                     9 : ILU(0)-PV preconditioning (Crout)
                    10 : Filtered ILU(0)-PV preconditioning (Crout)

        * MILURELX (REEL type) :
           Relaxation parameter for MILU(0) preconditioning.
           (0.< <1.)
           If equal to 0, we have ILU(0)
           If equal to 1, we have non-relaxed MILU(0)
           Default : 1.D0

        * ILUTLFIL (REEL type) :
           For ILUT-type preconditioning :
           ILUT level of fill (maximum relative memory size of the
           preconditioning matrix with respect to the original matrix)
           Default : 2.D0

        * ILUTDTOL (REEL type) (range 0.D0 - 1.D0) :
           For ILUT-type preconditioning :
           ILUT "drop tolerance", i.e. terms with relative values lower
           than ILUTDTOL in the factorization will be dropped.
           Default : -1.D0 (no dropping strategy applied).

        * ILUTPPIV (REEL type) (range : 0.D0 - 1.D0) :
           For an ILUTP preconditioning :
           0.D0 : no pivoting
           1.D0 : always pivot
           (recomendation : between 0.1D0 and 0.01D0)
           Default : 0.1D0

        * ILUPRELX (REEL type) :
           Filtering parameter for ILU(0)-PV preconditioning.
           (0.< <+inf)
           If equal to 0, we have ILU(0)
           If equal to 1, we have non-filtered ILU(0)-PV
           Default : 0.5D0

      Warning :
      _________

      1) Conjugate Gradient method generally works only for problems
         leading to a SYMMETRIC A matrix, other methods works for
         non symetric matrices.

      2) Iterative methods may fail to converge.
         (for example if the matrix is ill-conditioned)

      3) In the GMRES(m) method, the residual b-Ax is guaranteed
         to decrease, but may eventually stagnate.
         The higher the value of m, the better the convergence.
         But remember that the amount of storage and mean CPU
         time per iteration rise linearly with m.

      4) Preconditioning matrices are used to better conditioned the
         system of equations.

         HOWEVER, preconditioning matrices (of incomplete
         factorization type) may fail to exist or may not lead to
         better conditioned linear systems (zero or small pivots)

         EVEN if the full factorization of the system matrix
         exists.







