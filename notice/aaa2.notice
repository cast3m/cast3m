$$$$ *        NOTICE  CB215821  16/11/28    21:15:01     9202
                                             DATE     16/11/28

   Operateur *                               Voir aussi : +   -
   -----------                                            **  /

   RESU1 = ( MODL1) OBJET1 * OBJET2 ;

Section : Mathematiques Elementaires

FRAN==============================================================

   Objet :
   _______

   L'operateur * calcule le produit des objets OBJET1 et OBJET2.

   Operations possibles :
   ______________________
ANGL==============================================================

   Description :
   _____________

  The * operator calculates the product between OBJET1 and OBJET2.


   Possible operations :
   ______________________
==============================================================

---------------------------------------------------------------------
|     OBJET1        |      OBJET2           |       RESU1           |
---------------------------------------------------------------------
|     ENTIER        |      ENTIER           |      ENTIER           |
|     ENTIER        |     FLOTTANT          |     FLOTTANT          |
|     ENTIER        |      POINT            |      POINT            |
|     ENTIER        |     LISTREEL          |     LISTREEL          |
|     ENTIER        |     LISTENTI          |     LISTENTI          |
|     ENTIER        |     CHPOINT           |     CHPOINT           |
|     ENTIER        |     MCHAML            |     MCHAML            |
|     ENTIER        |     RIGIDITE          |     RIGIDITE          |
|     ENTIER        |     EVOLUTION         |     EVOLUTION         |
|     ENTIER        |     TABLE 'VECTEUR'   |     TABLE 'VECTEUR'   |
---------------------------------------------------------------------
|    FLOTTANT       |      ENTIER           |     FLOTTANT          |
|    FLOTTANT       |     FLOTTANT          |     FLOTTANT          |
|    FLOTTANT       |      POINT            |      POINT            |
|    FLOTTANT       |     LISTREEL          |     LISTREEL          |
|    FLOTTANT       |     LISTENTI          |     LISTENTI          |
|    FLOTTANT       |     CHPOINT           |     CHPOINT           |
|    FLOTTANT       |     MCHAML            |     MCHAML            |
|    FLOTTANT       |     RIGIDITE          |     RIGIDITE          |
|    FLOTTANT       |     EVOLUTION         |     EVOLUTION         |
|    FLOTTANT       |     TABLE 'VECTEUR'   |     TABLE 'VECTEUR'   |
---------------------------------------------------------------------
|     POINT         |      ENTIER           |      POINT            |
|     POINT         |     FLOTTANT          |      POINT            |
---------------------------------------------------------------------
|    LISTREEL       |      ENTIER           |     LISTREEL          |
|    LISTREEL       |     FLOTTANT          |     LISTREEL          |
|    LISTREEL       |     LISTREEL          |     LISTREEL          |
|    LISTREEL       |     LISTENTI          |     LISTREEL          |
---------------------------------------------------------------------
|    LISTENTI       |      ENTIER           |     LISTENTI          |
|    LISTENTI       |     FLOTTANT          |     LISTREEL          |
|    LISTENTI       |     LISTENTI          |     LISTENTI          |
|    LISTENTI       |     LISTREEL          |     LISTREEL          |
---------------------------------------------------------------------
|    EVOLUTION      |      ENTIER           |     EVOLUTION         |
|    EVOLUTION      |     FLOTTANT          |     EVOLUTION         |
|    EVOLUTION      |     MCHAML            |     MCHAML            |
|    EVOLUTION      |     CHPOINT           |     CHPOINT           |
|    EVOLUTION      |     EVOLUTION         |     EVOLUTION         |
---------------------------------------------------------------------
|    CHPOINT        |      ENTIER           |     CHPOINT           |
|    CHPOINT        |     FLOTTANT          |     CHPOINT           |
| CHPOINT (LISTMOT1)|  CHPOINT  (LISTMOT2)  |  CHPOINT  (LISTMOT3)  |
|    CHPOINT        |     RIGIDITE          |     CHPOINT           |
|    CHPOINT        |     EVOLUTION         |     CHPOINT           |
---------------------------------------------------------------------
|    MCHAML         |      ENTIER           |     MCHAML            |
|    MCHAML         |     FLOTTANT          |     MCHAML            |
|    MCHAML         |     EVOLUTION         |     MCHAML            |
| (MODL1) MCHAML    |     MCHAML            |     MCHAML            |
| MCHAML (LISTMOT1) |   MCHAML (LISTMOT2)   |    MCHAML (LISTMOT3)  |
---------------------------------------------------------------------
|    RIGIDITE       |     CHPOINT           |     CHPOINT           |
|    RIGIDITE       |      ENTIER           |     RIGIDITE          |
|    RIGIDITE       |     FLOTTANT          |     RIGIDITE          |
---------------------------------------------------------------------
|  TABLE 'VECTEUR'  |        ENTIER         |   TABLE 'VECTEUR'     |
|  TABLE 'VECTEUR'  |       FLOTTANT        |   TABLE 'VECTEUR'     |
---------------------------------------------------------------------

FRAN==============================================================

    Remarque 1 :
    ____________

  Lorsque l'operateur * calcule le produit de deux CHPOINT, on
utilise par defaut la regle de multiplication suivante : tout point
ayant dans un des CHPOINT une composante unique de nom "SCAL",
voit toutes les valeurs des composantes de l'autre CHPOINT
multipliees par la valeur du scalaire. Le CHPOINT RESU1 ne porte
que sur de tels points.

   Lorsque l'operateur * calcule le produit de deux CHPOINT, on peut
aussi utiliser la regle de multiplication suivante a condition de
fournir trois listes mot de longueur egale  qui constituent
la cle de l'operation :
La ieme composante du chpoint resultat aura pour nom le ieme mot
de la troisieme liste de mots et sera egale au produit
de la composante du 1er champoint reperee par le ieme mot de la
1ere liste de mots par la composante du 2nd champoint reperee par
le ieme mot de la 2nde liste de mots.

Ex :
      chp3          chp1           chp2
   composante    composante     composante
    resultat      argument1      argument2
      'FX'          'KX'           'UX'
      'FY'          'KYX'          'UX'

      lmot1 = 'MOTS' 'KX'  'KYX' ;
      lmot2 = 'MOTS' 'UX'  'UX' ;
      lmot3 = 'MOTS' 'FX'  'FY' ;
      chp3  =  chp1  '*'  chp2   lmot1 lmot2 lmot3 ;

Dans le cadre de cette option on peut specifier la nature du champ
resultat avec le mot cle 'NATURE'. Celui ci est alors suivi d'un des
trois mots suivant 'DIFFUS' 'DISCRET' 'INDETERMINE'.
On rappelle qu'un champ par point vaut zero la ou il n'est pas defini.


    Remarque 2 :
    ____________

    L'operateur * calcule le produit d'un objet de type TABLE
de sous-type 'VECTEUR' par un nombre (FLOTTANT ou ENTIER) VAL1.
Le resultat est de type TABLE et de sous-type 'VECTEUR'.

    Remarque 3 :
    ____________

    Lorsque l'operateur * calcule le produit de deux objets de type
EVOLUTION, les deux objets donnes, doivent avoir le Meme nombre de
courbes N1, et doivent etre de Meme type, c'est-a-dire soit reels,
soit complexes :

    a) Objets EVOLUTION reels:

    On effectue le produit terme a terme des deux courbes de Meme indice
pour les deux objets; les abscisses de ces courbes doivent etre des
progressions identiques; elles deviennent les abscisses des courbes du
nouvel objet EVOLUTION cree par l'operateur.

    b) Objets EVOLUTION complexes :

    Les abscisses doivent etre identiques; elles deviennent les
abscisses du nouvel objet EVOLUTION cree par l'operateur.
Chacun des deux objets peut etre, soit "PREE PIMA", soit "MODU PHAS".

L'objet EVOL3 a le meme type que EVOL1. On peut lui attribuer une
couleur COUL1 :

ANGL==============================================================

    Remark 1 :
    __________

    When the * operator calculates the product of two CHPOINT, the
 following multiplication rule is used : any point with a single
 component named "SCAL" in one of the CHPOINT will have all the
 values of the components of the other CHPOINT multiplied by the
 scalar value. The CHPOINT RESU1 only applies to such points.

 An alternate way is to provide 3 LISTMOT type objects. The rule for
combining the components is given by the 3 LISTMOT type objects whose
lengths are identical:
The I.th component name of the resulting CHPOINT is the I.th
word of the third LISTMOT and equal the product of the component of
the 1st CHPOINT whose name is the I.th word of the 1st LISTMOT by
the component of the second CHPOINT whose name is the I.th word of the
2nd LISTMOT.
For instance:
      chp3          chp1           chp2
   component      component      component
    result        argument 1      argument 2
      'FX'          'KX'           'UX'
      'FY'          'KYX'          'UX'

      lmot1 = 'MOTS' 'KX'  'KYX' ;
      lmot2 = 'MOTS' 'UX'  'UX' ;
      lmot3 = 'MOTS' 'FX'  'FY' ;
      chp3  =  chp1  '*'  chp2   lmot1 lmot2 lmot3 ;
It is possible to specify the NATURE of the result. To this extent
use the key words
                  'NATU'  |'INDETERMINE' |
                          |  'DIFFUS'    |
                          |  'DISCRET'   |

    Remark 2 :
    __________

    The * operator calculates the product of a TABLE type object
 of 'VECTEUR' subtype and a number (FLOTTANT or ENTIER) VAL1.
 The result is of TABLE type and 'VECTEUR' subtype.

    Remark 3 :
    __________

    When the * operator calculates the product of two EVOLUTION
 type objects, both the given objects must be of same type, i.e.
 they must be real or complex :

    a) Real EVOLUTION objects :

    The product of the two curves with an index common to both
 objects is performed term by term; the progressions of the
 abscissae of these curves must be identical; they become the
 abscissae of the curves of the EVOLUTION object newly created
 by the operator.

    b) Complex EVOLUTION objects :

    The abscissae must be identical; they become the abscissae of
 the EVOLUTION object newly created by the operator.
 Each of the two objects can be either "PREE PIMA", or "MODU PHAS".

 The EVOL3 object is of same type as EVOL1. A color COUL1 may be
 allocated to it.

==============================================================
                    EVOL3 = EVOL1 * EVOL2  ( COUL1 ) ;

FRAN==============================================================
    Remarque 4 :
    ____________

    Lorsque l'operateur * calcule le produit de deux objets, l'un de
type MCHAML (ou CHPOINT ) et l'autre, de type EVOLUTION, il
transforme toutes les valeurs du MCHAML (ou du CHPOINT )
OBJET1 a l'aide de la fonction representee par l'objet EVOLUTION, OBJET2

    Remarque 5 :
    ____________

    Lorsque l'operateur * calcule le produit de deux objets de
type MCHAML, ils doivent avoir les meme sous zones elementaires
Il y a cinq sortes de multiplications :

    - Un MCHAML quelconque par un MCHAML scalaire de sous zones
      identiques.

    - Un MCHAML par un autre MCHAML pour peu qu'ils aient les memes
      noms de composantes et les memes sous zones. La multiplication
      s'effectue composante par composante. Les composantes peuvent
      avoir un type FLOTTANT, LISTREEL ou EVOLUTIOn.

    - Un MCHAML par un autre MCHAML pour peu qu'ils aient les memes
      sous zones. L'utilisateur doit alors fournir trois listmots
      de longueur egale, et la regle de multiplication est identique
      au cas du CHPOINT (voir ci-dessus). De plus on peut fournir une
      progression de meme longueur que les listmots, dont les
      coefficients multiplient respectivement les composantes du
      champ resultat. Les composantes peuvent avoir un type FLOTTANT,
      LISTREEL ou EVOLUTIOn.

    - Un MCHAML de matrices de Hooke par un MCHAML de contraintes ou
      de deformations. Il faut dans ce cas donner aussi l'objet modele
      MODL1 (type MMODEL).

    - Un MCHAML de gradient par un MCHAML de gradient ou de gradient
      en flexion. Il faut dans ce cas donner aussi l'objet modele
      MODL1 (type MMODEL).

ANGL==============================================================
    Remark 4 :
    __________

    When the * operator calculates the product of two objects, the
 one of MCHAML (or CHPOINT ) type, and the other of EVOLUTION type,
 it transforms all the values of the OBJET1 MCHAML (or CHPOINT) by
 means of the function represented by the OBJET2 EVOLUTION object.

    Remark 5 :
    __________

    When the * operator calculates the product of two MCHAML type
 objects, the latter must have the same elementary subspaces.
  There are five types of multiplications :

    - Any MCHAML multiplied by a scalar MCHAML with identical
      subspaces.

    - One MCHAML by another MCHAML if, moreover, the name
      of their components and their subspaces are identical.
      The multiplication is performed component by component.
      The components type can be FLOTTANT, LISTREEL or EVOLUTIOn.

   -  One MCHAML by another MCHAML if their subspaces are identical.
      The user must specify three LISTMOTS of equal length, and the
      rule is the same as in the case of CHPOINT objects (see below).
      Moreover it is possible to specify a LISTREEL object as long as
      the LISTMOTS which coefficients will multiply the components of
      the final MCHAML. The component type can be FLOTTANT, LISTREEL
      or EVOLUTIOn.

    - A MCHAML of Hooke's matrices by a MCHAML of stresses or strains
      For this case, also provide the MODL1 model object (MMODEL type)

    - A MCHAML of gradiant by another MCHAML of gradiant or a flexural
      MCHAML of gradiant. For this case, also provide the MODL1
      model object (MMODEL type)

$$$$


