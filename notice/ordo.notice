$$$$ ORDO     NOTICE  CB215821  18/06/05    21:15:14     9830
                                             DATE     18/06/05

    Operateur ORDONNER                       Voir aussi : UNIQ, ORIE
    ------------------

Section : Mathematiques Autres
Section : Maillage Manipulation

FRAN=============================================================


    Objet :
    _______

    L'operateur ORDONNER range le contenu d'un objet ordonnable.



    Syntaxes :
    __________


    Tri d'un seul objet LISTENTI, LISTREEL ou LISTMOTS
    **************************************************

    LIS2 = ORDO LIS1 |('CROI')| ('ABSO') ('NOCA') ('UNIQ' (FLOT1)) ;
                     |('DECR')|



    Tri d'un ou plusieurs objets LISTENTI, LISTREEL et/ou LISTMOTS
    **************************************************************

    a) Tri CROIssant ou DECRoissant
       ----------------------------

    RES1 (.. RESN) = ORDO LIS1 (.. LISN) |('CROI')| ('ABSO') ('NOCA') ;
                                         |('DECR')|

    TAB2 = ORDO TAB1 OBJ1 |('CROI')| ('ABSO') ('NOCA') ;
                          |('DECR')|


    b) Tri minimisant un COUT
       ----------------------

    RES0 RES1 (.. RESN) = ORDO LIS1 (.. LISN) 'COUT' LISCOU |('HONG')| ;
                                                            | 'COMP' |


    Tri d'un objet EVOLUTION
    ************************

    EVOL2 = ORDO EVOL1 |('CROI')| ('ABSO') ;
                       |('DECR')|


    Tri d'un objet MAILLAGE
    ***********************

    MAIL2 = ORDO MAIL1 ;



    Commentaires :
    ______________


    1) Les actions sont differentes selon le type de l'objet a traiter :

     - LISTENTI ou LISTREEL : on ordonne les nombres
     - LISTMOTS : on range les mots par ordre alphabetique
     - EVOLUTION : on ordonne les abscisses de chaque courbe
     - MAILLAGE :
          o POI1 : on ordonne les points par distance croissante au
                   premier d'entre eux
          o SEG2, SEG3 : on ordonne les elements de maniere a decrire
                         une ligne continue d'une extremite a l'autre
          o autres : on ordonne par voisinnage des elements


    2) Dans le cas d'un objet LIS1 (type LISTENTI, LISTREEL ou LISTMOTS)
       il est possible de fournir d'autres listes LIS2, LIS3, ...LISN
       (de types quelconques parmi LISTENTI, LISTREEL et LISTMOTS) qui
       subiront les memes permutations que LIS1. Toutes les listes
       doivent avoir la meme longueur.


    3) Il est possible de regrouper les listes (type LISTENTI, LISTREEL
       ou LISTMOTS) dans un objet TAB1 de type TABLE. Le tri s'effectue
       alors sur celle d'indice OBJ1, et les autres listes subissent
       ensuite les memes permutations.


    4) Description des mots-cles disponibles :

       >>> 'CROI' & 'DECR'
            s'applique a : LISTENTI, LISTREEL, LISTMOTS et EVOLUTION
                           \__________________________/
                                     ou TABLE

            Il est possible de trier le contenu par ordre croissant
            (mot-cle 'CROI') ou decroissant (mot-cle 'DECR').


       >>> 'ABSO'
            s'applique a : LISTENTI, LISTREEL et EVOLUTION
                           \________________/
                                ou TABLE

            Le mot-cle 'ABSO' signifie que l'on ne tient compte que de
            la valeur absolue des nombres pour faire la mise en ordre.


       >>> 'NOCA'
            s'applique a : LISTMOTS (ou TABLE)

            Le mot-cle 'NOCA' indique que le tri est insensible a
            la casse des caracteres. En son absence, les majuscules
            precedent les minuscules dans l'ordre de tri.


       >>> 'UNIQ'
            s'applique a : LISTENTI, LISTREEL, LISTMOTS
                           \__________________________/
                            ou TABLE d'une seule liste

            (INVALIDE quand plusieurs listes sont triees simultenement)

            Le mot-cle 'UNIQ' permet de supprimer les eventuels doublons
            une fois le tri effectue. Si le mot 'NOCA' est present, deux
            mots seront consideres identiques meme si leur casse est
            differente, et seul l'un des deux sera conserve. Si un
            nombre FLOT1 (type FLOTTANT) est donne, deux reels seront
            consideres egaux si que leur difference (en valeur absolue)
            est inferieure a ce nombre.


       >>> 'COUT'
            s'applique a : LISTENTI, LISTREEL, LISTMOTS
                           \__________________________/
                                     ou TABLE

            Le mot-cle 'COUT' doit obligatoirement etre suivi d'un objet
            LISCOU de valeurs C_i_j traduisant le cout de l'association
            (i;j). Cet objet de type LISTENTI ou LISTREEL est donc de
            dimension n**2 avec n la dimension des autres listes de
            valeurs LIS1 (.. LISN).

            ORDO calculera alors la permutation j=perm(i) minimisant
            le cout total, soit la somme pour i=1..n des C_i_perm(i)
            (retournee dans RES0). Les listes RES1 (.. RESN) sont les
            images des LIS1 (.. LISN) soumises a cette permutation-ci.

            L'option 'COMP' (pour COMPLET) calcule les (n!) permutations
            possibles, ce qui peut etre tres long. L'option 'HONG'
            utilise la methode "Hongroise", beaucoup plus rapide.



ANGL=============================================================


    Description :
    _____________

    The ORDONNER operator sorts the content of an object.



    Syntaxes :
    __________


    Sorting only one object of type LISTENTI, LISTREEL or LISTMOTS
    **************************************************************

    LIS2 = ORDO LIS1 |('CROI')| ('ABSO') ('NOCA') ('UNIQ' (FLOT1)) ;
                     |('DECR')|



    Sorting one or more objects LISTENTI, LISTREEL and/or LISTMOTS
    **************************************************************

    a) Acending or Descending order
       ----------------------------

    RES1 (.. RESN) = ORDO LIS1 (...LISN) |('CROI')| ('ABSO') ('NOCA') ;
                                         |('DECR')|

    TAB2 = ORDO TAB1 OBJ1 |('CROI')| ('ABSO') ('NOCA') ;
                          |('DECR')|


    b) Ordering by minimizing a cost value
       -----------------------------------

    RES0 RES1 (.. RESN) = ORDO LIS1 (.. LISN) 'COUT' LISCOU |('HONG')| ;
                                                            | 'COMP' |


    Sorting an object of type EVOLUTION
    ***********************************

    EVOL2 = ORDO EVOL1 |('CROI')| ('ABSO') ;
                       |('DECR')|


    Sorting an object of type MAILLAGE
    **********************************

    MAIL2 = ORDO MAIL1 ;



    Notes :
    _______


    1) The operation depends on the type of the main input object :

     - LISTENTI or LISTREEL : numbers are sorted
     - LISTMOTS : words are sorted by lexical order
     - EVOLUTION : the X axis data of each curve is sorted
     - MAILLAGE :
          o POI1 : points are ordered by growing distance to the first
                   one of them
          o SEG2, SEG3 : elements are arranged in order to describe a
                         continuous line from one end to the other
          o others : the mesh is reordered by element vicinity


    2) In case of an object LIS1 (type LISTENTI, LISTREEL ou LISTMOTS),
       several other lists (of any type among LISTENTI, LISTREEL and
       LISTMOTS) can be provided, as long as they all contain as many
       items as LIS1. They will be permuted the same way as LIS1.


    3) It is possible to group lists (type LISTENTI, LISTREEL or
       LISTMOTS) in a TAB1 object (type TABLE). The list with the index
       OBJ1 is first sorted, then all the other lists are permuted the
       same way.


    4) Description of the available keywords :

       >>> 'CROI' & 'DECR'
            applies to : LISTENTI, LISTREEL, LISTMOTS and EVOLUTION
                         \__________________________/
                                   or TABLE

            It is possible to sort items in ASCENDING order (keyword
            'CROI') or in DESCENDING order (keyword 'DECR').


       >>> 'ABSO'
            applies to : LISTENTI, LISTREEL and EVOLUTION
                         \________________/
                              or TABLE

            The keyword 'ABSO' means the sorting algorithm only
            considers the absolute values when comparing two numbers.


       >>> 'NOCA'
            applies to : LISTMOTS (or TABLE)

            The keyword 'NOCA' makes the sorting case insensitive. When
            absent, uppercase letters appear before lowercase letters.


       >>> 'UNIQ'
            applies to : LISTENTI, LISTREEL, LISTMOTS
                         \__________________________/
                          or TABLE with only one list

              (INVALID whenever several lists are provided)

            The keyword 'UNIQ' removes duplicates once the lists are
            sorted. If the keyword 'NOCA' is also present, this
            elimination is case insensitive. If the real number FLOT1
            (type FLOTTANT) is given, two numbers are equal if their
            difference in absolue value is less than this number.


       >>> 'COUT'
            applies to : LISTENTI, LISTREEL, LISTMOTS
                         \__________________________/
                                   or TABLE

            The keyword 'COUT' must be followed by an object LISCOU
            whose values C_i_j reflect the cost of (i;j) association.
            This object of type LISTENTI or LISTREEL has n**2 values
            where n is the dimension of other lists LIS1 (.. LISN).

            ORDO will compute the permutation j=perm(i) minimizing the
            total cost, that is the sum for i=1..n of C_i_perm(i)
            (value returned in RES0). The other lists RES1 (.. RESN)
            are the images of LIS1 (.. LISN) after the application of
            the same permutation.

            The option 'COMP' (for COMPLETE) computes the (n!) possible
            permutations, which is a long task. The option 'HONG' uses
            the much more faster "Hungarian" method.

$$$$
