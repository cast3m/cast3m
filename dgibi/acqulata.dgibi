* fichier : acqulata.dgibi

************************************************************************
* Section : Entree-Sortie Entree-Sortie
************************************************************************

'OPTION' 'ECHO' 0 ;
************************************************************************
* NOM         : ACQULATA
* DESCRIPTION : Lecture de fichiers au format LATA v2.1 (Trio_U) en GIBI
*               On utilise ACQU BRUT et d'autres évolutions
*               (fiches 7922-7928)
*
*
*
* LANGAGE     : GIBIANE-CAST3M
* AUTEUR      : Stéphane GOUNAND (CEA/DEN/DM2S/SFME/LTMF)
*               mél : stephane.gounand@cea.fr
**********************************************************************
* VERSION    : v1, 13/01/2014, version initiale
* HISTORIQUE : v1, 13/01/2014, création
* HISTORIQUE :
* HISTORIQUE :
************************************************************************
*
*
interact = FAUX ;
graph    = FAUX ;
******************************************************************
*                    P R O C E D U R E S
*
*                       SPLITLIG
*
* On a une chaine de caractères LALIG comprenant des mots séparés
* par des espaces. On crée une table indexée par des entiers
* contenant chaque mot de la ligne :
*        tab . I = Ieme mot de LALIG
*
'DEBPROC' SPLITLIG ;
'ARGUMENT' lalig*'MOT' ;
*'LISTE' ('DIME' lalig) ;
*'LISTE' ('TYPE' lalig) ;
* Splitte la ligne dans une table
lesp = posi ' ' 'DANS' lalig 'TOUS' 'NOCA' ;
lesp = ('LECT' 0) 'ET' lesp 'ET' ('LECT' ('+' ('DIME' lalig) 1)) ;
tmot = 'TABLE' ;
itab = 0 ;
'REPETER' idx ('-' ('DIME' lesp) 1) ;
   ii = &idx ;
   ideb = 'EXTRAIRE' lesp ii ;
   ifin = 'EXTRAIRE' lesp ('+' ii 1) ;
   'SI' ('>' ifin ('+' ideb 1)) ;
      itab = '+' itab 1 ;
      tmot . itab = 'EXTRAIRE' lalig ('+' ideb 1) ('-' ifin 1) ;
   'FINSI' ;
'FIN' idx ;
'RESPRO' tmot ;
'FINPROC' ;
*
*                       VALARG
*
* On a une table crée par SPLITLIG. Elle peut contenir des chaines
* telles que : 'toto=30'. En entrée, on a la table, le mot 'toto' et
* le type de la donnée cherchée (ici ENTIER).
* En sortie, on a la valeur 30
*
*
'DEBPROC' VALARG ;
'ARGUMENT' tlig*'TABLE' ;
'ARGUMENT' motcher*'MOT' ;
'ARGUMENT' typcher*'MOT' ;
mot2 = 'CHAINE' motcher '=' ;
lon2 = 'DIME' mot2 ;
nlig = 'DIME' tlig ;
ok = faux ;
'REPETER' ilig nlig ;
* Sinon pb si l'indice de la table est un nom d'operateur
   ind = 'CHAINE' tlig . &ilig ;
*dbg   'MESSAGE' 'ind=' ind ;
   fi  = posi mot2 'DANS' ind 'NOCA' ;
*dbg   'MESSAGE' 'fi=' fi ;
   ok = 'EGA' fi 1 ;
   'SI' ok ;
      ideb = '+' lon2 1 ;
      ifin = 'DIME' ind ;
      valcher = 'EXTRAIRE' ind ideb ifin ;
      'QUITTER' ilig ;
   'FINSI' ;
'FIN' ilig ;
'SI' ('NON' ok) ;
   'ERREUR' ('CHAINE' motcher ' not found') ;
'FINSI' ;
*'MESSAGE' ('CHAINE' 'valcher=' valcher) ;
'SI' ('EGA' typcher 'ENTIER') ;
   valcher = 'ENTIER' valcher ;
'FINSI' ;
'SI' ('EGA' typcher 'FLOTTANT') ;
   valcher = 'FLOTTANT' valcher ;
'FINSI' ;
'SI' ('EGA' typcher 'MOT') ;
   valcher = 'CHAN' 'MINU' valcher ;
'FINSI' ;
'RESPRO' valcher ;
'FINPROC' ;
*
*                       MAKELEM
*
* Cette procédure génère les noeuds et les éléments en lisant un fichier
* fic est le nom de fichier
* nelem est le nombre d'éléments à lire
* nnoe  est le nombre de noeuds par élément
* Si nnoe=1, on génère la table des noeuds à partir des coordonnées
* données dans le fichier
* Si nnoe>1, on génère la table des simplexes à partir de leurs
* numéros de noeuds, il faut alors donner la table des noeuds
* tabnode comme argument supplémentaire à la procédure
*
'DEBPROC' MAKELEM ;
'ARGUMENT' fic*'MOT' ;
'ARGUMENT' nelem*'ENTIER' ;
'ARGUMENT' nnoe*'ENTIER' ;
*
dim = 'VALEUR' 'DIME' ;
'SI' ('OU' ('<' nnoe 1) ('>' nnoe ('+' dim 1))) ;
   'ERREUR' ('CHAINE' 'nnoe=' nnoe ' incorrect') ;
'FINSI' ;
'SI' ('NEG' nnoe 1) ;
   'ARGUMENT' tabnode*'TABLE' ;
'FINSI' ;
*
tab = 'TABLE' 'ESCLAVE' ;
'MESSAGE' ('CHAINE' 'Reading ' fic ) ;
*'OPTI' 'ACQU' fic ;
MONACQU globfic tfic fic ;
'ACQU' bid*'ENTIER' ;
*
'SI' ('EGA' nnoe 1) ;
   'REPETER' bcl nelem ;
      i = &bcl ;
      'ACQU' lcoor*'LISTREEL' dim ;
      tab . i = 'POIN' (EXTR lcoor 1) (EXTR lcoor 2) ;
   'FIN' bcl ;
'SINON' ;
   lmot = 'MOTS' 'SEG2' 'TRI3' 'TET4' ;
   'REPETER' bcl nelem ;
      i = &bcl ;
      acqu lnode*'LISTENTI' nnoe ;
      mpo = 'VIDE' 'MAILLAGE'/'POI1' ;
      'REPETER' inoe nnoe ;
         po = 'EXTRAIRE' lnode &inoe ;
         mpo = 'ET' mpo
                    ('MANU' 'POI1' (tabnode . po)) ;
      'FIN' inoe ;
      tyel = 'EXTRAIRE' lmot ('-' nnoe 1) ;
      tab . i = 'MANU' tyel mpo ;
   'FIN' bcl ;
'FINSI' ;
'RESPRO' tab ;
'FINPROC' ;
*
*                       MAKCHAM
*
* Génère les champs en lisant les fichiers correspondant
* Il faut donner en entrée une table contenant les temps à lire,
* les différents champs et les noms de fichiers.
* Celle-ci est modifiée en sortie et contient les valeurs des champs.
* Ce sont des champoints pour les champs définis aux noeuds
* et des champs par éléments pour les champs définis aux faces ou
* aux éléments.
*
*
'DEBPROC' MAKCHAM ;
'ARGUMENT' tabcham*'TABLE' ;
*
* Les champs
*
'SI' ('>' ntemp 0) ;
   'REPETER' itemp ntemp ;
      i = &itemp ;
      tabi = tabcham . i ;
      itabi = 'INDEX' tabi ;
      'REPETER' ntabi ('DIME' itabi) ;
         idx = itabi . &ntabi ;
         'SI' ('EGA' ('TYPE' (tabi . idx)) 'TABLE') ;
            tabin = tabi . idx ;
            fic = tabin . 'fic' ;
            'MESSAGE' ('CHAINE' 'Reading ' fic) ;
*            'OPTI' 'ACQU' fic ;
            MONACQU globfic tfic fic ;
            'ACQU' bid*'ENTIER' ;
            nat = tabin . 'nat' ;
            'SI' ('EGA' nat 'vector') ;
               ncomp = dim ;
            'SINON' ;
               ncomp = 1 ;
            'FINSI' ;
            tvcomp = 'TABLE' ;
            'REPETER' icomp ncomp ;
               tvcomp . &icomp = 'PROG' ;
            'FIN' icomp ;
            loc = tabin . 'loc' ;
            mod = tabcham . loc ;
            mmod = mod ;
            'SI' ('NEG' ('TYPE' mmod) 'MAILLAGE') ;
               mmod = 'EXTRAIRE' mmod 'MAIL' ;
            'FINSI' ;
*
            'REPETER' bcl ('NBEL' mmod) ;
               'ACQU' lcom*'LISTREEL' ncomp ;
               'REPETER' icomp ncomp ;
                  tvcomp . &icomp = 'ET' (tvcomp . &icomp)
                     ('PROG' ('EXTRAIRE' lcom &icomp)) ;
               'FIN' icomp ;
            'FIN' bcl ;
            'SI' ('EGA' loc 'som') ;
               'SI' ('EGA' ncomp 1) ;
                  chp = 'MANU' 'CHPO' mmod ncomp 'SCAL' (tvcomp . 1) ;
               'FINSI' ;
               'SI' ('EGA' ncomp 2) ;
                  chp = 'MANU' 'CHPO' mmod ncomp 'UX' (tvcomp . 1)
                                                 'UY' (tvcomp . 2) ;
               'FINSI' ;
               'SI' ('EGA' ncomp 3) ;
                  chp = 'MANU' 'CHPO' mmod ncomp 'UX' (tvcomp . 1)
                                                 'UY' (tvcomp . 2)
                                                 'UZ' (tvcomp . 3) ;
               'FINSI' ;
               tabin . 'chpoint' = chp ;
*               'LISTE' chp;
            'SINON' ;
               'SI' ('EGA' ncomp 1) ;
                  cha = 'MANU' 'CHML' mod 'REPA' 'SCAL' (tvcomp . 1)
                     'GRAVITE' ;
               'FINSI' ;
               'SI' ('EGA' ncomp 2) ;
                  cha = 'MANU' 'CHML' mod 'REPA' 'UX' (tvcomp . 1)
                                                 'UY' (tvcomp . 2)
                     'GRAVITE' ;
               'FINSI' ;
               'SI' ('EGA' ncomp 3) ;
                  cha = 'MANU' 'CHML' mod 'REPA' 'UX' (tvcomp . 1)
                                                 'UY' (tvcomp . 2)
                                                 'UZ' (tvcomp . 3)
                     'GRAVITE' ;
               'FINSI' ;
               tabin . 'chamelem' = cha ;
               tabin . 'chpoint' = 'KCHA' mod cha 'CHPO' 'QUAF' ;
*               'LISTE' cha ;
            'FINSI' ;
         'FINSI' ;
      'FIN' ntabi ;
   'FIN' itemp ;
'FINSI' ;
*
'RESPRO' tabcham ;
'FINPROC' ;
*
*                       SAUTLIG
*
* Saute n lignes dans un fichier en cours de lecture avec ACQU
*
'DEBPROC' SAUTLIG ;
'ARGUMENT' ilig*'ENTIER' ;
'ARGUMENT' jlig*'ENTIER' ;
'REPETER' bcl ;
   ilig = ilig '+' 1 ;
   'SI' ('<' ilig jlig) ;
      acqu bid*'MOT' ;
   'SINON' ;
      ilig = '-' ilig 1 ;
      'QUITTER' bcl ;
   'FINSI' ;
'FIN' bcl ;
'RESPRO' ilig ;
'FINPROC' ;
*
*                       MONACQU
*
*
* On se positionne dans le fichier fic juste après la ligne
* FICHIER fic2
* dont le numéro est dans tfic . fic2
* si multific = vrai (variable globale), MONACQU est equivalent a 'OPTI
* 'ACQU' ;
*
'DEBPROC' MONACQU ;
'ARGUMENT' fic*'MOT' ;
'ARGUMENT' tfic*'TABLE' ;
'ARGUMENT' fic2*'MOT' ;
*
'SI' multific ;
   'OPTI' 'ACQU' fic2 ;
'SINON' ;
*'MESSAGE' ('CHAINE' 'Reading ' fic) ;
   'OPTI' 'ACQU' fic ;
   nlig = tfic . fic2 ;
*'MESSAGE' 'nlig=' nlig ;
   'SI' ('>' nlig 0) ;
      'REPETER' bcl nlig ;
         bid = 'ACQU' 'BRUT' ;
      'FIN' bcl ;
   'FINSI' ;
'FINSI' ;
'FINPROC' ;
*
*
*                    Fin des P R O C E D U R E S
******************************************************************
*
* Début du jeu de données
*
* multific est un logique global qui dit si les fichiers .lata sont mis
* sequentiellement dans un seul fichier globfic (typiquement le .dgibi
* courant) ou si ils sont en fichiers separes dans le repertoire courant
*
multific = faux ;
*
* 1ere passe pour localiser les débuts de fichier dans globfic
* si multific = faux ;
* On fait une table tfic . 'nomfic' = i avec i ligne début
tfic = 'TABLE' ;
globfic = 'CHAINE' '../divers/acqulata.dgibi' ;
'SI' ('NON' multific) ;
   'OPTI' 'ACQU' globfic ;
*
   ilig = 0 ;
   'REPETER' bcl ;
      lalig = ACQU 'BRUT' ; ilig = '+' ilig 1 ;
*      'SI' ('NEG' tlig . 1 '*') ;
*       prem = 'CHAINE' IEME lalig 1 ;
*       mcle = 'CHANGER' 'MINU' (IEME lalig 1) ;
      tlig = SPLITLIG lalig ;
      'SI' ('>' ('DIME' tlig) 0) ;
* Eviter l'interprétation de tlig . 1
         'SI' ('NEG' tlig . 1 '*') ;
            mcle = 'CHANGER' 'MINU' tlig . 1 ;
            'SI' ('EGA' mcle 'fichier') ;
               tfic . (tlig . 2) = ilig ;
            'FINSI' ;
            'SI' ('EGA' mcle 'stop') ;
               'QUITTER' bcl ;
            'FINSI' ;
         'FINSI' ;
      'FINSI' ;
   'FIN' bcl ;
*
   'LISTE' tfic ;
'FINSI' ;
*
nomcas = 'stokes_2d' ;
*
* Traitement du fichier stokes_2d.lata
*
* 1 Lecture du nombre d'entrees CHAMP GEOM et TEMP. On s'arrete à
*   l'entrée FIN
*
fic = 'CHAINE' nomcas '.lata' ;
'MESSAGE' ('CHAINE' 'Reading ' fic ' pass 1') ;
*'OPTI' 'ACQU' fic ;
MONACQU globfic tfic fic ;
lkas = 'LECT' ;
ilig = 0 ;
tmot = 'TABLE' ;
tmot . 'CHAMP' = 1 ;
tmot . 'GEOM'  = 2 ;
tmot . 'TEMPS' = 3 ;
tmot . 'FIN'   = 4 ;
*
'REPETER' bcl ;
   acqu mot1*'MOT' ;
*   'LISTE' mot1 ;
   ilig = '+' ilig 1 ;
   'SI' ('EXISTE' tmot mot1) ;
      ikas = tmot . ('CHAINE' mot1) ;
   'SINON' ;
      ikas = 0 ;
   'FINSI' ;
   lkas = 'ET' lkas ('LECT' ikas) ;
   'SI' ('EGA' ikas 4) ;
         'QUITTER' bcl ;
   'FINSI' ;
'FIN' bcl ;
*
lgeom = posi 2 'DANS' lkas 'TOUS' ;
ltemp = posi 3 'DANS' lkas 'TOUS' ;
ifin  = posi 4 'DANS' lkas ;
ngeom = 'DIME' lgeom ;
ntemp = 'DIME' ltemp ;
'MESSAGE' ('CHAINE' 'Nombre de geometries              : ' ngeom) ;
'MESSAGE' ('CHAINE' 'Nombre de temps sauves            : ' ntemp) ;
'SI' ('>' ntemp 0) ;
   'SI' ('>' ntemp 1) ;
      ncham = '-' ('-' ('EXTRAIRE' ltemp 2) ('EXTRAIRE' ltemp 1)) 1 ;
   'SINON' ;
      ncham = '-' ('-' ifin ('EXTRAIRE' ltemp 1)) 1 ;
   'FINSI' ;
'FINSI' ;
'MESSAGE' ('CHAINE' 'Nombre de champs par temps sauves : ' ncham) ;
*
* On lit uniquement la première géométrie
*
'MESSAGE' ('CHAINE' 'Reading ' fic ' pass 2') ;
*'OPTI' 'ACQU' fic ;
MONACQU globfic tfic fic ;
ilig = 0 ;
igeom = 'EXTRAIRE' lgeom 1 ;
ilig = SAUTLIG ilig ('+' igeom 1) ;
* Les noeuds
lalig = ACQU 'BRUT' ; ilig = '+' ilig 1 ;
tlig = SPLITLIG lalig ;
ficnode = 'CHAINE' tlig . 3 ;
nnode   = VALARG tlig 'size' 'ENTIER' ;
dim     = VALARG tlig 'composantes' 'ENTIER' ;
'MESSAGE' ('CHAINE' 'Nom du fichier des noeuds : ' ficnode) ;
'MESSAGE' ('CHAINE' 'Nombre de noeuds          : ' nnode) ;
'MESSAGE' ('CHAINE' 'Dimension du probleme     : ' dim  ) ;
* Les éléments
lalig = ACQU 'BRUT' ; ilig = '+' ilig 1 ;
tlig = SPLITLIG lalig ;
ficelem = 'CHAINE' tlig . 3 ;
nelem   = VALARG tlig 'size' 'ENTIER' ;
nnoe    = VALARG tlig 'composantes' 'ENTIER' ;
'MESSAGE' ('CHAINE' 'Nom du fichier des éléments : ' ficelem) ;
'MESSAGE' ('CHAINE' 'Nombre déléments            : ' nelem) ;
'MESSAGE' ('CHAINE' 'Nombre de noeuds/elem       : ' nnoe) ;
* Les faces
igeom = 'EXTRAIRE' lgeom ngeom ;
ilig = SAUTLIG ilig ('+' igeom 3) ;
lalig = ACQU 'BRUT' ; ilig = '+' ilig 1 ;
tlig = SPLITLIG lalig ;
ficface = 'CHAINE' tlig . 3 ;
nface   = VALARG tlig 'size' 'ENTIER' ;
nnof    = VALARG tlig 'composantes' 'ENTIER' ;
'MESSAGE' ('CHAINE' 'Nom du fichier des faces : ' ficface) ;
'MESSAGE' ('CHAINE' 'Nombre de faces          : ' nface) ;
'MESSAGE' ('CHAINE' 'Nombre de noeuds/face    : ' nnof) ;
* Les champs aux différents instants
tabcham = 'TABLE' ;
ltem    = 'PROG' ;
'SI' ('>' ntemp 0) ;
   'REPETER' itemp ntemp ;
      i = &itemp ;
      ilig = SAUTLIG ilig ('EXTRAIRE' ltemp i) ;
      tabcham . i = 'TABLE' ; tabi = tabcham . i ;
      lalig = ACQU 'BRUT' ; ilig = '+' ilig 1 ;
      tlig = SPLITLIG lalig ;
      tem  = 'FLOTTANT' tlig . 2 ;
      tabi . 'INSTANT' = tem ;
      ltem = 'ET' ltem ('PROG' tem) ;
      'REPETER' icham ncham ;
         lalig = ACQU 'BRUT' ; ilig = '+' ilig 1 ;
         tlig = SPLITLIG lalig ;
         quoi = 'CHANGER' 'MINU' ('CHAINE' tlig  . 2) ;
         loc  = VALARG tlig 'localisation' 'MOT' ;
         nat  = VALARG tlig 'nature' 'MOT' ;
         nomcham = 'CHAINE' quoi loc ;
         tabi . nomcham = 'TABLE' ; tabin = tabi . nomcham ;
         tabin . 'quoi' = 'MOT' quoi ;
         tabin . 'loc' = 'MOT' loc ;
         tabin . 'nat' = 'MOT' nat ;
         tabin . 'fic' = 'CHAINE' tlig . 3 ;
*         'LISTE' tabin ;
      'FIN' icham ;
   'FIN' itemp ;
'FINSI' ;
*
* On a lu tous les noms de fichiers, maintenant, on peut créer les objets
*
'OPTI' 'DIME' dim ;
* les noeuds
tabnode = MAKELEM ficnode nnode 1 ;
pmt = 'ET' tabnode ;
* Les éléments
tabelem = MAKELEM ficelem nelem nnoe tabnode ;
mt = 'ET' tabelem ;
* Les faces
tabface = MAKELEM ficface nface nnof tabnode ;
fac = 'ET' tabface ;
*'TRACER' fac 'TITR' 'fac' ;
*
_mt  = 'CHANGER' mt 'QUAF' ;
_fac = 'CHANGER' fac 'QUAF' ;
'ELIMINATION' ('ET' _mt _fac) 1.D-6 ;
*
tabcham . 'ltemps' = ltem ;
tabcham . 'som' = pmt ;
tabcham . 'elem' = 'MODE' _mt 'NAVIER_STOKES' 'QUAF' ;
tabcham . 'faces' = 'MODE' _fac 'NAVIER_STOKES' 'QUAF' ;
* Lire les champs
tabcham = MAKCHAM tabcham ;
*fic = 'CHAINE' nomdir nomcas '.sauv' ;
*'MESSAGE' ('CHAINE' 'Saving ' fic) ;
*'OPTI' 'SAUVER' fic ;
*'SAUVER' tabcham ;
*
ntemps = 'DIME' (tabcham . 'ltemps') ;
tt = tabcham . ntemps ;
vit = tt . 'vitessefaces' . 'chpoint' ;
mvit = 'MAXIMUM' vit 'ABS' ;
prep1 = tt . 'pressionsom' . 'chpoint' ;
prep0 = tt . 'pressionelem' . 'chamelem' ;
mpre1 = 'MAXIMUM' prep1 'ABS' ;
mpre0 = 'MAXIMUM' prep0 'ABS' ;
'MESSAGE' ('CHAINE' 'mvit=' mvit) ;
'MESSAGE' ('CHAINE' 'mpre1=' mpre1) ;
'MESSAGE' ('CHAINE' 'mpre0=' mpre0) ;
*
'SI' graph ;
   vvit = 'VECT' vit 'DEPL' 'JAUN' ;
   tit = 'CHAINE' 'Vitesse ; mvit=' mvit ;
   'TRACER' vvit mt 'TITR' tit ;
   tit = 'CHAINE' 'Pression P1 ; mpre1=' mpre1 ;
   'TRACER' prep1 mt 'TITR' tit ;
   tit = 'CHAINE' 'Pression P0 ; mpre0=' mpre0 ;
   'TRACER' prep0 (tabcham . 'elem') 'TITR' tit ;
'FINSI' ;
* On fait quelques tests bateaux sur les résultats obtenus
y47 = coor 2 (tabnode . 47) ;
t1 = 'EGA' nnode 86 ;
t2 = 'EGA' nelem 138 ;
t3 = 'EGA' nface 223 ;
t4 = 'EGA' mvit 1.18928E-4 1.E-8 ;
t5 = 'EGA' mpre0 6.04218E-1 1.E-5 ;
t6 = 'EGA' mpre1 6.64172E-1 1.E-4 ;
t7 = 'EGA' y47 1.83565006e-1 1.e-9 ;
*
ok = t1 'ET' t2 'ET' t3 'ET' t4 'ET' t5 'ET' t6 'ET' t7 ;
*
'SI' ('NON' ok) ;
   'MESSAGE' ('CHAINE' 'Il y a eu des erreurs') ;
   'ERREUR' 5 ;
'SINON' ;
   'MESSAGE' ('CHAINE' 'Tout sest bien passe !') ;
'FINSI' ;
*
'SI' interact ;
   'OPTION' 'ECHO' 1 ;
   'OPTION' 'DONN' 5 ;
'FINSI' ;
*
* End of dgibi file ACQULATA
*
'FIN' ;
'COMM' fichier : acqulatb.dgibi
'COMM' Jeu de données contenant les données à lire pour le test ;
'COMM' acqulata.dgibi ;
'FIN' ;
FICHIER stokes_2d.lata
LATA_V2.1 Trio_U Version1.6 or later
stokes_2d
Trio_U verbosity=0
Format ASCII,INT32,F_INDEXING,C_ORDERING,F_MARKERS_SINGLE,REAL32
GEOM mt type_elem=TRIANGLE
CHAMP SOMMETS stokes_2d.lata.mt.0.0 geometrie=mt size=86 composantes=2
CHAMP ELEMENTS stokes_2d.lata.mt.0.0.elem geometrie=mt size=138 composantes=3 format=INT32
GEOM mt_boundaries_bas type_elem=SEGMENT
CHAMP SOMMETS stokes_2d.lata.mt_boundaries_bas.0.0 geometrie=mt_boundaries_bas size=9 composantes=2
CHAMP ELEMENTS stokes_2d.lata.mt_boundaries_bas.0.0.elem geometrie=mt_boundaries_bas size=8 composantes=2 format=INT32
GEOM mt_boundaries_dro type_elem=SEGMENT
CHAMP SOMMETS stokes_2d.lata.mt_boundaries_dro.0.0 geometrie=mt_boundaries_dro size=9 composantes=2
CHAMP ELEMENTS stokes_2d.lata.mt_boundaries_dro.0.0.elem geometrie=mt_boundaries_dro size=8 composantes=2 format=INT32
GEOM mt_boundaries_hau type_elem=SEGMENT
CHAMP SOMMETS stokes_2d.lata.mt_boundaries_hau.0.0 geometrie=mt_boundaries_hau size=9 composantes=2
CHAMP ELEMENTS stokes_2d.lata.mt_boundaries_hau.0.0.elem geometrie=mt_boundaries_hau size=8 composantes=2 format=INT32
GEOM mt_boundaries_gau type_elem=SEGMENT
CHAMP SOMMETS stokes_2d.lata.mt_boundaries_gau.0.0 geometrie=mt_boundaries_gau size=9 composantes=2
CHAMP ELEMENTS stokes_2d.lata.mt_boundaries_gau.0.0.elem geometrie=mt_boundaries_gau size=8 composantes=2 format=INT32
Champ FACES stokes_2d.lata.FACES.FACES.mt.-1.000000 geometrie=mt localisation=FACES size=223 composantes=2 reference=SOMMETS format=int32
Champ ELEM_FACES stokes_2d.lata.ELEM_FACES.ELEMENTS.mt.-1.000000 geometrie=mt localisation=ELEMENTS size=138 composantes=3 reference=FACES format=int32
TEMPS 9.34173851e+02
Champ VITESSE stokes_2d.lata.VITESSE.FACES.mt.934.1738514257 geometrie=mt localisation=FACES size=223 nature=vector noms_compo=VITESSE_FACES_mt0,VITESSE_FACES_mt1 composantes=2
Champ PRESSION stokes_2d.lata.PRESSION.ELEM.mt.934.1738514257 geometrie=mt localisation=ELEM size=138 nature=scalar noms_compo=PRESSION_ELEM_mt0 composantes=1
Champ PRESSION stokes_2d.lata.PRESSION.SOM.mt.934.1738514257 geometrie=mt localisation=SOM size=86 nature=scalar noms_compo=PRESSION_SOM_mt0 composantes=1
FIN
FICHIER stokes_2d.lata.mt.0.0
688
-3.36569995e-01 -3.99607986e-01
-2.09496006e-01 -3.93750012e-01
-8.44961032e-02 -3.93750012e-01
4.05039005e-02 -3.93750012e-01
1.65503994e-01 -3.93750012e-01
2.90511012e-01 -3.97635013e-01
3.99673015e-01 -3.36504996e-01
3.93750012e-01 -2.11587995e-01
3.93750012e-01 -8.65878016e-02
3.93750012e-01 3.84121984e-02
3.93750012e-01 1.63412005e-01
3.97435009e-01 2.88432002e-01
3.37718010e-01 3.98460001e-01
2.12770000e-01 3.93750012e-01
8.77697021e-02 3.93750012e-01
-3.72303016e-02 3.93750012e-01
-1.62230000e-01 3.93750012e-01
-2.87256002e-01 3.97323012e-01
-3.97771001e-01 3.38405997e-01
-3.93750012e-01 2.13443995e-01
-3.93750012e-01 8.84440988e-02
-3.93750012e-01 -3.65559012e-02
-3.93750012e-01 -1.61556005e-01
-3.97258013e-01 -2.86585987e-01
-2.86653996e-01 -2.47981995e-01
-1.60116002e-01 -2.87517011e-01
-3.51165012e-02 -2.87499994e-01
8.98834988e-02 -2.87505001e-01
2.14872003e-01 -2.90872991e-01
2.87521005e-01 -1.78398997e-01
2.87499994e-01 -5.33992983e-02
2.87503004e-01 7.16006979e-02
2.89615005e-01 1.96636006e-01
1.84123993e-01 2.87514001e-01
5.91242015e-02 2.87499994e-01
-6.58757985e-02 2.87501991e-01
-1.90920994e-01 2.89256990e-01
-2.87510991e-01 1.86274007e-01
-2.87499994e-01 6.12739995e-02
-2.87501991e-01 -6.37260005e-02
-1.92490995e-01 -1.31871000e-01
-7.62329027e-02 -1.81713998e-01
4.87665012e-02 -1.81260005e-01
1.79536000e-01 -1.62880003e-01
1.81251004e-01 -3.78859006e-02
1.83366999e-01 8.74273032e-02
8.97262990e-02 1.83565006e-01
-3.52565981e-02 1.81253999e-01
-1.67331994e-01 1.71257004e-01
-1.81250006e-01 4.66692001e-02
-9.72220972e-02 -5.58242016e-02
2.30117999e-02 -7.57189021e-02
8.30911025e-02 3.49082984e-02
-3.48061994e-02 7.65336007e-02
-3.75000000e-01 -5.00000000e-01
5.00000000e-01 -3.75000000e-01
3.75000000e-01 5.00000000e-01
-5.00000000e-01 3.75000000e-01
-2.50000000e-01 -5.00000000e-01
-1.25000000e-01 -5.00000000e-01
0.00000000e+00 -5.00000000e-01
1.25000000e-01 -5.00000000e-01
2.50000000e-01 -5.00000000e-01
5.00000000e-01 -2.50000000e-01
5.00000000e-01 -1.25000000e-01
5.00000000e-01 0.00000000e+00
5.00000000e-01 1.25000000e-01
5.00000000e-01 2.50000000e-01
2.50000000e-01 5.00000000e-01
1.25000000e-01 5.00000000e-01
0.00000000e+00 5.00000000e-01
-1.25000000e-01 5.00000000e-01
-2.50000000e-01 5.00000000e-01
-5.00000000e-01 2.50000000e-01
-5.00000000e-01 1.25000000e-01
-5.00000000e-01 0.00000000e+00
-5.00000000e-01 -1.25000000e-01
-5.00000000e-01 -2.50000000e-01
-5.00000000e-01 -3.75000000e-01
3.75000000e-01 -5.00000000e-01
5.00000000e-01 3.75000000e-01
-3.75000000e-01 5.00000000e-01
-5.00000000e-01 -5.00000000e-01
5.00000000e-01 -5.00000000e-01
5.00000000e-01 5.00000000e-01
-5.00000000e-01 5.00000000e-01
688
FICHIER stokes_2d.lata.mt.0.0.elem
1656
1 55 59
2 1 59
2 59 60
3 2 60
3 60 61
4 3 61
4 61 62
5 4 62
5 62 63
6 5 63
6 63 80
7 6 80
7 56 64
8 7 64
8 64 65
9 8 65
9 65 66
10 9 66
10 66 67
11 10 67
11 67 68
12 11 68
12 68 81
13 12 81
13 57 69
14 13 69
14 69 70
15 14 70
15 70 71
16 15 71
16 71 72
17 16 72
17 72 73
18 17 73
18 73 82
19 18 82
19 58 74
20 19 74
20 74 75
21 20 75
21 75 76
22 21 76
22 76 77
23 22 77
23 77 78
24 23 78
24 78 79
1 24 79
25 1 2
26 25 2
26 2 3
27 26 3
27 3 4
28 27 4
28 4 5
29 28 5
29 5 6
29 6 7
30 29 7
30 7 8
30 8 9
31 30 9
31 9 10
32 31 10
32 10 11
33 32 11
33 11 12
33 12 13
34 33 13
34 13 14
34 14 15
35 34 15
35 15 16
36 35 16
36 16 17
37 36 17
37 17 18
37 18 19
38 37 19
38 19 20
38 20 21
39 38 21
39 21 22
40 39 22
40 22 23
25 40 23
25 23 24
25 24 1
41 25 26
42 41 26
42 26 27
43 42 27
43 27 28
44 43 28
44 28 29
44 29 30
44 30 31
45 44 31
45 31 32
46 45 32
46 32 33
46 33 34
47 46 34
47 34 35
48 47 35
48 35 36
49 48 36
49 36 37
49 37 38
49 38 39
50 49 39
50 39 40
41 50 40
41 40 25
51 41 42
52 51 42
52 42 43
52 43 44
52 44 45
53 52 45
53 45 46
53 46 47
54 53 47
54 47 48
54 48 49
54 49 50
51 54 50
51 50 41
52 53 54
51 52 54
55 1 83
1 79 83
56 7 84
7 80 84
57 13 85
13 81 85
58 19 86
19 82 86
1656
FICHIER stokes_2d.lata.FACES.FACES.mt.-1.000000
1784
83 55
55 59
59 60
60 61
61 62
62 63
63 80
80 84
84 56
56 64
64 65
65 66
66 67
67 68
68 81
81 85
85 57
57 69
69 70
70 71
71 72
72 73
73 82
82 86
86 58
58 74
74 75
75 76
76 77
77 78
78 79
79 83
59 1
1 55
59 2
60 2
60 3
61 3
61 4
62 4
62 5
63 5
63 6
80 6
80 7
64 7
7 56
64 8
65 8
65 9
66 9
66 10
67 10
67 11
68 11
68 12
81 12
81 13
69 13
13 57
69 14
70 14
70 15
71 15
71 16
72 16
72 17
73 17
73 18
82 18
82 19
74 19
19 58
74 20
75 20
75 21
76 21
76 22
77 22
77 23
78 23
78 24
79 24
79 1
1 83
7 84
13 85
19 86
2 1
3 2
4 3
5 4
6 5
7 6
8 7
9 8
10 9
11 10
12 11
13 12
14 13
15 14
16 15
17 16
18 17
19 18
20 19
21 20
22 21
23 22
24 23
1 24
2 25
25 1
2 26
26 25
3 26
3 27
27 26
4 27
4 28
28 27
5 28
5 29
29 28
6 29
7 29
7 30
30 29
8 30
9 30
9 31
31 30
10 31
10 32
32 31
11 32
11 33
33 32
12 33
13 33
13 34
34 33
14 34
15 34
15 35
35 34
16 35
16 36
36 35
17 36
17 37
37 36
18 37
19 37
19 38
38 37
20 38
21 38
21 39
39 38
22 39
22 40
40 39
23 40
23 25
25 40
24 25
26 41
41 25
26 42
42 41
27 42
27 43
43 42
28 43
28 44
44 43
29 44
30 44
31 44
31 45
45 44
32 45
32 46
46 45
33 46
34 46
34 47
47 46
35 47
35 48
48 47
36 48
36 49
49 48
37 49
38 49
39 49
39 50
50 49
40 50
40 41
41 50
42 51
51 41
42 52
52 51
43 52
44 52
45 52
45 53
53 52
46 53
47 53
47 54
54 53
48 54
49 54
50 54
50 51
51 54
54 52
1784
FICHIER stokes_2d.lata.VITESSE.FACES.mt.934.1738514257
1784
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
0.00000000e+00 0.00000000e+00
5.64451038e-05 1.68571967e-06
5.78987347e-05 4.33680869e-19
-6.63299943e-05 5.85021480e-05
-2.85250571e-05 -7.55816291e-05
-3.21261286e-05 6.15365861e-05
5.14024669e-06 -7.63588396e-05
6.83896951e-06 5.94626617e-05
4.44066500e-05 -7.57435628e-05
4.68854014e-05 5.85810194e-05
8.31459038e-05 -7.36773800e-05
5.86572678e-05 6.90863453e-05
6.71707312e-05 -4.34404174e-05
-4.70954110e-05 1.06472689e-04
5.26100594e-05 -5.75700615e-05
4.23516474e-20 -1.02932063e-04
-9.64775973e-06 4.38313100e-06
2.69525535e-05 2.28601002e-05
-1.30611461e-05 3.83028710e-05
6.52762765e-06 3.89005727e-05
-1.01584801e-05 2.87102994e-05
4.50737076e-07 2.54050647e-05
-7.09463029e-06 1.19699453e-05
-2.64484157e-07 9.18952082e-06
-5.25754285e-06 -2.00597583e-06
2.17068464e-06 -2.14389888e-06
3.64905503e-07 5.02568639e-07
-2.74711033e-06 2.15261457e-06
-8.87517501e-07 -1.69406589e-21
-4.59809917e-06 -8.18962860e-07
-5.11295730e-06 9.70646511e-07
-2.90035814e-06 -1.84498242e-06
-3.49428137e-06 1.50158417e-06
-4.96202858e-07 -2.64205050e-06
-1.27239184e-06 2.06032837e-06
1.34933043e-06 -2.88013325e-06
1.45501735e-06 1.09374639e-06
2.45694127e-06 -1.35883863e-06
-7.05400609e-08 3.53459041e-06
-7.72052090e-07 -2.13607336e-06
-2.35005427e-06 -2.77687695e-06
0.00000000e+00 -7.44587737e-07
5.14428757e-06 4.13887756e-06
-8.86188545e-09 5.90142645e-06
6.48981222e-06 1.89252351e-05
1.82872816e-06 2.26803531e-05
4.03643116e-06 3.35697114e-05
3.53284213e-06 3.78992554e-05
-9.55049018e-06 2.40851950e-05
-1.84853945e-06 1.92605366e-05
-2.66475017e-05 -3.77184115e-05
1.46427165e-05 -3.46067754e-05
-8.25814197e-07 -3.54417680e-05
2.20321635e-05 -2.20321635e-05
-3.91433059e-05 -3.91433059e-05
-3.41588361e-07 3.41588361e-07
-2.88520937e-07 -2.88520937e-07
-1.99842634e-05 1.18927826e-04
-2.05516644e-05 -2.80901022e-05
-1.38869871e-06 -3.37923484e-05
2.65934068e-05 -3.43250722e-05
2.89267773e-05 -5.67381358e-06
-5.81289496e-05 9.14158445e-05
8.35754836e-05 -3.04175387e-06
2.77827949e-05 2.25117092e-05
-7.26170492e-06 3.01798718e-05
-1.32877967e-05 1.99041951e-05
-1.09947578e-05 8.82604309e-06
-9.13523479e-07 1.00211410e-05
-7.85920565e-06 2.64848313e-06
-7.14832322e-06 -1.74866977e-06
-3.28082933e-06 -2.28093268e-06
5.00691840e-07 -1.63961147e-06
6.14385442e-07 -4.35891224e-07
1.82804490e-06 4.40408667e-06
5.50984350e-06 3.83181487e-06
1.29619057e-05 1.62583310e-05
1.17303180e-05 2.27251712e-05
-1.20352915e-05 1.69786872e-05
-5.69152326e-05 -1.59625270e-05
-1.92891912e-06 -1.22655047e-05
3.06795046e-05 5.43309616e-05
-3.52772877e-05 2.43727500e-05
1.19751930e-05 -3.45151493e-05
8.04207957e-06 4.24354403e-05
-4.81588950e-06 -3.05936084e-07
1.13236383e-05 -4.60491538e-05
-5.20807271e-06 -3.20949694e-05
5.29012425e-07 -1.06218122e-05
1.69039668e-05 -4.92731524e-05
-5.94713629e-06 -3.98083102e-05
3.31748492e-06 -5.47541094e-06
1.31736269e-05 -2.49757886e-05
-1.22054389e-05 -2.08718975e-05
-1.09548978e-06 2.78737007e-05
-3.62652863e-05 9.29583621e-05
5.09524361e-05 4.76012538e-05
2.56691101e-06 3.32859418e-05
8.66356640e-06 2.52750542e-05
2.05269262e-05 1.30305825e-05
-8.75566820e-06 8.14637860e-06
8.60135060e-06 8.33508602e-06
-4.75866500e-06 9.84261806e-06
-1.72260716e-05 7.97141911e-06
-9.65949584e-06 3.13171768e-06
-9.89848013e-06 9.67002779e-06
-1.44679798e-05 6.12103577e-06
-1.41812234e-05 2.99262933e-06
-6.75500314e-06 8.75288606e-06
-3.10293944e-06 9.13979329e-06
-9.06121750e-06 9.57595944e-07
-4.48417495e-06 4.68286908e-06
-7.59793375e-06 -7.93368315e-07
-7.15464284e-06 -2.52143263e-06
-4.73322507e-06 -3.37042002e-06
-8.94534878e-06 -4.77439926e-06
-3.81678774e-06 -2.96759026e-06
-7.93887011e-07 -3.84966552e-06
-4.20693050e-06 -5.73914122e-06
2.26246470e-07 -2.10745861e-06
2.51734696e-06 -2.09846371e-06
8.55491010e-07 -4.02876549e-06
3.90859668e-06 -1.57198122e-06
3.36266226e-06 2.34320919e-06
5.20379399e-06 6.28713224e-06
6.86487192e-06 -1.32470643e-06
1.11109784e-05 4.50934886e-06
9.95924347e-06 1.27099179e-06
9.85631868e-06 2.98706118e-06
1.13956776e-05 -3.97901459e-07
8.30000226e-06 -6.50625509e-07
2.08917004e-06 -4.40429585e-06
3.75932655e-06 -8.45527939e-06
-1.29675445e-05 -1.65073072e-06
-2.93101184e-05 1.00489879e-05
-1.38533069e-05 2.80306131e-06
-2.76079372e-05 4.10237226e-05
1.42634453e-05 5.49775132e-06
-3.07917180e-05 -3.03362708e-06
8.87841088e-06 -2.63283637e-05
2.77633308e-06 -7.63998469e-06
2.27749570e-06 -2.68707008e-05
6.54792211e-06 -2.82095098e-05
-9.75219245e-06 -3.14423596e-05
-5.86807710e-06 -3.13900637e-05
-9.16016518e-07 -1.01615888e-05
-1.56248243e-05 -2.29270336e-05
-1.30529143e-05 -5.15961619e-06
-1.60802083e-05 4.87129228e-06
5.64107768e-06 -1.67902613e-06
-1.44487685e-05 -5.33707635e-06
-4.73408122e-08 -7.91388084e-06
-6.86683006e-06 -3.15841544e-06
-1.68341048e-05 -3.76142361e-06
-8.70975055e-06 -8.07305787e-06
-1.12844382e-05 -1.04483013e-06
-5.16253476e-06 2.51719871e-06
-7.16295426e-06 -6.98459826e-06
-4.88643036e-06 -5.12424549e-06
-4.81791130e-06 -5.92037986e-06
-8.57807436e-07 -9.04576518e-06
-8.28939483e-06 -1.17111258e-05
2.15420800e-06 -5.99863324e-06
4.38298821e-06 -8.12480903e-06
2.22296444e-06 -9.58833152e-06
8.20544392e-06 -5.79533116e-06
7.02594389e-06 -9.06071534e-07
5.34566971e-06 -6.98942040e-06
5.68918904e-06 -5.46365482e-06
5.98716360e-06 -1.32552132e-05
-3.01576779e-06 -1.22377260e-05
9.90005174e-06 6.81864663e-07
9.06059358e-06 -7.92634910e-06
8.31598027e-06 -1.13089600e-05
-6.55182248e-06 -2.15978725e-05
2.53922917e-06 -3.19855644e-05
-5.21005177e-06 -2.10453145e-05
5.67616496e-07 -2.10529324e-05
-9.79485412e-06 -1.49468724e-05
-7.63332173e-06 -2.20534730e-05
-1.09896200e-05 -1.29924620e-05
-1.33590447e-06 -2.11953284e-05
-9.47830358e-06 -1.49462257e-05
5.83996034e-08 -6.43018484e-06
-3.00159968e-07 -1.44335309e-05
-2.89066293e-06 -1.35172340e-05
3.12827115e-06 -1.51205286e-05
-3.29785308e-07 -7.06718129e-06
-7.66938967e-07 -1.31186162e-05
8.68354346e-06 -8.83737357e-06
6.66540700e-06 -1.86400757e-05
1.04691514e-06 -1.29328655e-05
1784
FICHIER stokes_2d.lata.PRESSION.ELEM.mt.934.1738514257
552
-5.99139631e-01
-5.47004104e-01
-6.03572369e-01
-5.45936227e-01
-6.04081035e-01
-5.45986116e-01
-6.04211092e-01
-5.46260536e-01
-6.04217529e-01
-5.47555268e-01
-6.01319075e-01
-5.06553292e-01
-3.39900225e-01
-2.40970954e-01
-1.22114480e-01
-3.87083553e-02
5.56520894e-02
1.17607288e-01
1.84310347e-01
2.24770337e-01
2.64925420e-01
2.86322117e-01
3.04595917e-01
3.11612040e-01
3.17127168e-01
3.16718400e-01
3.17251772e-01
3.16599399e-01
3.17267448e-01
3.16665292e-01
3.17299545e-01
3.16659003e-01
3.17203104e-01
3.16585124e-01
3.17212015e-01
3.15778971e-01
3.07206094e-01
2.96042174e-01
2.72296578e-01
2.45319530e-01
1.97738245e-01
1.50893539e-01
7.56537244e-02
7.62390252e-03
-9.57978889e-02
-1.83149263e-01
-3.08093071e-01
-3.99581045e-01
-3.90254974e-01
-3.17593992e-01
-4.12647337e-01
-3.42540294e-01
-4.12628174e-01
-3.42534781e-01
-4.12762582e-01
-3.44803751e-01
-4.17127371e-01
-3.78119677e-01
-2.42134988e-01
-1.97680518e-01
-6.30796924e-02
1.15293330e-02
9.92927924e-02
1.53118581e-01
2.13035196e-01
2.46549264e-01
2.80402362e-01
3.01589400e-01
3.01627278e-01
3.12132001e-01
3.11854422e-01
3.07505339e-01
3.11785698e-01
3.07476819e-01
3.11803430e-01
3.07750225e-01
3.12016606e-01
3.10326844e-01
2.96882957e-01
2.90071636e-01
2.56761104e-01
2.27066785e-01
1.70325235e-01
1.21445313e-01
3.55646722e-02
-6.20996132e-02
-1.79503396e-01
-3.21232021e-01
-1.62234545e-01
-1.26122549e-01
-2.12457821e-01
-1.52207091e-01
-2.12184712e-01
-1.41977564e-01
-2.03835756e-01
-1.42532632e-01
-2.29226965e-02
3.93703878e-02
1.28172770e-01
1.72365561e-01
2.31328890e-01
2.68400699e-01
2.66411543e-01
2.92106956e-01
2.80534387e-01
2.91796803e-01
2.78888315e-01
2.90957093e-01
2.79864967e-01
2.43989676e-01
2.13851511e-01
1.49142459e-01
8.05249661e-02
-4.72135209e-02
-1.10204769e-02
1.39418729e-02
-4.34387960e-02
-3.41820419e-02
2.99094040e-02
1.07615151e-01
1.61427543e-01
2.19702378e-01
2.17011452e-01
2.47918114e-01
2.45770648e-01
2.17441782e-01
1.55987501e-01
8.34867135e-02
1.45610064e-01
1.15004972e-01
-5.85565925e-01
-5.21195948e-01
-4.80142355e-01
-5.43598771e-01
3.16964328e-01
3.16504240e-01
3.15243512e-01
3.16317350e-01
552
FICHIER stokes_2d.lata.PRESSION.SOM.mt.934.1738514257
344
-4.92454946e-01
-4.83753651e-01
-4.84730214e-01
-4.84833777e-01
-4.85233456e-01
-4.92019176e-01
-3.70071083e-01
-1.42778039e-01
4.03232202e-02
1.74942061e-01
2.60796458e-01
3.04286420e-01
3.17045629e-01
3.15913022e-01
3.15955609e-01
3.16015601e-01
3.16020668e-01
3.16470146e-01
3.12065184e-01
2.83040583e-01
2.15123251e-01
1.00312658e-01
-6.35624453e-02
-2.73971945e-01
-1.99893072e-01
-2.71364897e-01
-2.72370785e-01
-2.72020668e-01
-2.78283864e-01
-8.71665850e-02
8.18117931e-02
2.02789709e-01
2.77574390e-01
3.05167258e-01
3.03198546e-01
3.03337842e-01
3.04341555e-01
2.72032976e-01
1.94748119e-01
7.07991496e-02
-1.69180613e-02
-9.21960846e-02
-9.18424204e-02
-6.32373989e-02
9.90597457e-02
2.15775236e-01
2.70933181e-01
2.68570423e-01
2.64290512e-01
1.83113754e-01
7.96519890e-02
5.49625419e-02
1.72167256e-01
2.06415758e-01
-6.51090980e-01
-4.58565354e-01
3.16408068e-01
3.17018986e-01
-6.62435412e-01
-6.64106250e-01
-6.63447380e-01
-6.64172053e-01
-6.62856817e-01
-2.12909758e-01
-1.14709269e-02
1.39689863e-01
2.40506724e-01
2.95839518e-01
3.18033695e-01
3.18123490e-01
3.18277419e-01
3.18174481e-01
3.17903250e-01
2.95516789e-01
2.40550235e-01
1.39963984e-01
-1.08641321e-02
-2.12445766e-01
-4.36998814e-01
-6.56308174e-01
3.15448880e-01
3.17729294e-01
-6.21712744e-01
-5.84099531e-01
3.18894595e-01
3.17592591e-01
344
STOP















