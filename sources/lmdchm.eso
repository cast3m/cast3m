C LMDCHM    SOURCE    CB215821  19/03/18    21:15:28     10161
      SUBROUTINE LMDCHM(fid, MTABLE, SLSCHA, SLSFUS, IPDT, ISOR)
C***********************************************************************
C NOM         : lmdchm.eso
C DESCRIPTION : Sortie d'un MCHAML au format .med
C***********************************************************************
C HISTORIQUE :  23/10/2017 : RPAREDES : Creation
C HISTORIQUE :
C***********************************************************************
C Prière de PRENDRE LE TEMPS DE COMPLÉTER LES COMMENTAIRES
C en cas de modification de ce sous-programme afin de faciliter
C la maintenance !
C***********************************************************************
C APPELÉ PAR : opérateur (LIRE 'MED') lirmed.eso
C***********************************************************************
C ENTRÉES :
C             fid     : Id du fichier
C             MTABLE  : Table avec la geometrie
C             SLSCHA  : Segment avec l'information des champs
C             SLSFUS  : Segment avec la liste de champs à créer
C             IPDT    : Pas de Tps
C SORTIES : ISOR : Pointeur vers le MCHAML
C***********************************************************************

      IMPLICIT INTEGER(i-n)
      IMPLICIT REAL*8(a-h,o-z)

-INC CCMED
-INC CCOPTIO
-INC SMELEME
-INC SMCOORD
-INC SMLMOTS
-INC CCGEOME
-INC SMTABLE
-INC SMCHAML

C ***** Déclaration des paramètres
      INTEGER*4  fid

C ***** Déclaration des variables
C Définition des entiers *4
      INTEGER*4 numdt
      INTEGER*4 numit
      INTEGER*4 cret
      INTEGER*4 etype
      INTEGER*4 gtype
      INTEGER*4 swm
      INTEGER*4 cs
      INTEGER*4 stm
      INTEGER*4 psize4
      INTEGER*4 nc4
      INTEGER*4 nval4
      INTEGER*4 nip
      INTEGER*4 lmesh
      INTEGER*4 type4

C-----Chaines de Caractere de longueur MED_SNAME_SIZE=16
      CHARACTER*(MED_SNAME_SIZE) dtunit1

C-----Chaines de Caractere de longueur MED_NAME_SIZE=64
      CHARACTER*(MED_NAME_SIZE) lname
      CHARACTER*(MED_NAME_SIZE) fname
      CHARACTER*(MED_NAME_SIZE) pname
      CHARACTER*(MED_NAME_SIZE) mname
      CHARACTER*(MED_NAME_SIZE) VID64
      PARAMETER(VID64='
     &               ')

C
      CHARACTER*8   charre, typobj
      CHARACTER*64  nommai, cha64a, cha64b
      LOGICAL       login, logre

      EXTERNAL LONG

C ***** Déclaration des segments
C----- SEG SLSCHA
C         ncham  : nombre de champs (CHPOINT ou MCHAML)
C         LISCHA : liste des noms de champs
C         LISMAI : liste des noms de maillages
C         LSCHIN : liste de SEG CHAINF (information)
C         LSPARA : liste de SEG CHAPAR (parametres)
      SEGMENT SLSCHA
        CHARACTER*(MED_NAME_SIZE) LISCHA(ncham), LISMAI(ncham)
        INTEGER                   LSCHIN(ncham), LSPARA(ncham)
      ENDSEGMENT

      SEGMENT SLSFUS
        INTEGER      CHAFUS(nbfus)
      ENDSEGMENT

      SEGMENT CHAINF
C         nc     :   nombre de séquences de calcul dans le champ
C         ncomp  :   nombre de composantes
C         INUMDT :   liste de numéros de pas de tps
C         INUMIT :   liste de numéros d'iteration
C         ISCHPR :   liste de SEG CHAPRO (profil)
C         XDT    :   liste de pas de tps
C         CNAME  :   liste de noms des composants
C         CUNIT  :   liste d'unités des composants
        INTEGER      INUMDT(nc), INUMIT(nc), ISCHPR(nc)
        REAL*8       XDT(nc)
        CHARACTER*(MED_SNAME_SIZE) CNAME(ncomp), CUNIT(ncomp)
      ENDSEGMENT

C----- SEG CHAPAR
C         ncpars : nombre de paramètres par champ
C         CHAPAR : nom du paramètre
C         CPARVL : valeur du paramètre
      SEGMENT CHAPAR
        CHARACTER*(MED_SNAME_SIZE) CPARNM(ncpars)
        INTEGER                    CPARVL(ncpars)
      ENDSEGMENT

C----- SEG CHAPRO
C         nprof  : nombre de profils
C         CTYPE  : type de champ
C         CPRONA : nom du profil
C         CETYPE : entity type
C         CGTYPE : geometry type
      SEGMENT CHAPRO
        CHARACTER*8               CTYPE(nprof)
        CHARACTER*(MED_NAME_SIZE) CPRONA(nprof)
        INTEGER    CETYPE(nprof), CGTYPE(nprof)
      ENDSEGMENT

      SEGMENT MCNAM4
        CHARACTER*4 CNAME4(ncomp)
      ENDSEGMENT

      SEGMENT SCHAVL
        REAL*8 CHAVAL(n, n2)
      ENDSEGMENT
      POINTEUR SCHAV1.SCHAVL


C     Permutation des noeuds MED <-> Cast3M
      SEGMENT IPERM(NBNN-1)

C***********************************************************************
C      Ecriture du MCHAML
C***********************************************************************

C-----Initialisation
      lname  = VID64
      nbfus  = SLSFUS.CHAFUS(/1)
      MCHELM = 0
      ifoch1 = IFOUR
      infch1 = 2
      infch3 = 0
      infch5 = 0
      IPERM  = 0

      swm    = MED_NO_INTERLACE
      cs     = MED_ALL_CONSTITUENT

      DO ia=1,nbfus
        icha   = SLSFUS.CHAFUS(ia)
        fname  = SLSCHA.LISCHA(icha)
        nommai = SLSCHA.LISMAI(icha)
        CHAINF = SLSCHA.LSCHIN(icha)
        CHAPAR = SLSCHA.LSPARA(icha)
        CHAPRO = CHAINF.ISCHPR(IPDT)
        numdt  = CHAINF.INUMDT(IPDT)
        numit  = CHAINF.INUMIT(IPDT)
        IF (CHAPAR .LE. 0) THEN
          ncpars = 0
        ELSE
          ncpars = CHAPAR.CPARVL(/1)
        ENDIF
        n2     = CHAINF.CNAME(/2)

C-------Recherche de paramètres
        IF (ncpars .GT. 0) THEN
          CALL PLACE(CHAPAR.CPARNM, ncpars, ipar, 'IFOCHE')
          IF (ipar.GT.0) THEN
            ifoch1 = CHAPAR.CPARVL(ipar)
          ENDIF
          CALL PLACE(CHAPAR.CPARNM, ncpars, ipar, 'INFCHE1')
          IF (ipar.GT.0) THEN
            infch1 = CHAPAR.CPARVL(ipar)
          ENDIF
          CALL PLACE(CHAPAR.CPARNM, ncpars, ipar, 'INFCHE3')
          IF (ipar.GT.0) THEN
            infch3 = CHAPAR.CPARVL(ipar)
          ENDIF
          CALL PLACE(CHAPAR.CPARNM, ncpars, ipar, 'INFCHE5')
          IF (ipar.GT.0) THEN
            infch5 = CHAPAR.CPARVL(ipar)
          ENDIF
        ENDIF

C-------Définition initiale du MCHAML
        n1 = CHAPRO.CETYPE(/1)
        n3 = 6
        l1 = 64
        SEGINI MCHEL1
        MCHEL1.TITCHE ='SCALAIRE'
        MCHEL1.IFOCHE = ifoch1

        DO ib=1,n1
C---------Définition de IMACHE
          pname = CHAPRO.CPRONA(ib)
          etype = CHAPRO.CETYPE(ib)
          gtype = CHAPRO.CGTYPE(ib)

          IF (pname .NE. ' ') THEN
            cha64a = pname
          ELSE
            cha64a = nommai
          ENDIF

          typobj = ' '
          CALL ACCTAB(MTABLE,'MOT' ,ival  ,xval  ,cha64a,login,iobin,
     &                       typobj,ivalre,xvalre,charre,logre,iobre)
          IF ((iobre .LE. 0) .OR. (typobj .NE. 'MAILLAGE')) THEN
            CALL ERREUR(21)
            RETURN
          ENDIF

C         Constituant 'MED' en attendant de pouvoir le relire
          MCHEL1.CONCHE(ib) = 'MED'
          IF (pname .NE. ' ') THEN
            MCHEL1.IMACHE(ib) = iobre
          ELSE
            IPT1 = iobre
            SEGACT IPT1
            itype  = MEDEL(IPT1.ITYPEL)
            nbsous = IPT1.LISOUS(/1)
            IF (itype .EQ. gtype) THEN
              MCHEL1.IMACHE(ib) = IPT1
              nbnode = IPT1.NUM(/1)
              nbelem = IPT1.NUM(/2)
            ELSE
              IF (nbsous .GT. 0) THEN
                isea1 = 0
                DO ic=1,nbsous
                  IPT2 = IPT1.LISOUS(ic)
                  SEGACT IPT2
                  itype2 = MEDEL(IPT2.ITYPEL)
                  IF (itype2 .EQ. gtype) THEN
                    isea1 = 1
                    nbnode = IPT2.NUM(/1)
                    nbelem = IPT2.NUM(/2)
                    MCHEL1.IMACHE(ib) = IPT2
                    GOTO 10
                  ENDIF
                ENDDO
 10             CONTINUE
                IF (isea1 .EQ. 0) THEN
                  CALL ERREUR(21)
                  RETURN
                ENDIF
              ELSE
                CALL ERREUR(21)
                RETURN
              ENDIF
            ENDIF
          ENDIF

C         Information sur le champ de nom "fname"
          CALL mfdfin (fid, fname, mname, lmesh, type4,
     &                 CHAINF.CNAME, CHAINF.CUNIT, dtunit1, nc4, cret)
          IF(cret .NE. 0) THEN
            moterr    ='mfdfin'
            interr(1) = cret
            CALL ERREUR(873)
            RETURN
          ENDIF

C---------Restitution des valeurs
          IF (pname .NE. ' ') THEN
C-----------Taille du profil
            CALL mpfpsn(fid, pname, psize4, cret)
            IF(cret .NE. 0) THEN
              moterr   ='mpfpsn'
              interr(1)= cret
              CALL ERREUR(873)
              RETURN
            ENDIF

C-----------Nombre de valeurs
            IF     (etype .EQ. MED_NODE_ELEMENT) THEN
              infch6 = 1
            ELSEIF (etype .EQ. MED_CELL        ) THEN
              infch6 = 2
            ENDIF
            stm    = MED_COMPACT_STMODE
            CALL mfdnpn(fid, fname, numdt, numit, etype, gtype,
     &                  pname, stm, psize4, lname, nip, nval4, cret)

            IF(cret .NE. 0) THEN
              moterr    ='mfdnpn'
              interr(1) = cret
              CALL ERREUR(873)
              RETURN
            ENDIF

            n      = nip*nval4
            n1el   = nval4
            n1ptel = nip
            n2el   = 0
            n2ptel = 0
            SEGINI SCHAVL,SCHAV1
            CALL mfdrpr(fid, fname, numdt, numit, etype, gtype,
     &                    stm, pname, swm, cs, SCHAV1.CHAVAL, cret)
            IF(cret .NE. 0) THEN
              moterr    ='mfdrpr'
              interr(1) = cret
              CALL ERREUR(873)
              RETURN
            ENDIF

          ELSE
C-----------Nombre de valeurs
            IF (etype .EQ. MED_NODE_ELEMENT) THEN
              infch6 = 1
              n      = nbnode*nbelem
              n1ptel = nbnode
            ELSEIF (etype .EQ. MED_CELL    ) THEN
              infch6 = 2
              n      = nbelem
              n1ptel = 1
            ENDIF

            CALL mfdnva(fid,fname,numdt,numit,etype,gtype,nval4,cret)
            IF(cret .NE. 0) THEN
              moterr    ='mfdnva'
              interr(1) = cret
              CALL ERREUR(873)
              RETURN
            ENDIF

            n1el   = nbelem
            n2el   = 0
            n2ptel = 0
            SEGINI SCHAVL,SCHAV1
            CALL mfdrvr(fid, fname, numdt, numit, etype, gtype,
     &                    swm, cs, SCHAV1.CHAVAL, cret)
            IF(cret .NE. 0) THEN
              moterr    ='mfdrvr'
              interr(1) = cret
              CALL ERREUR(873)
              RETURN
            ENDIF
          ENDIF

C         Conversion des types MED en REAL*8 suivant les cas
          ITAIL=n*n2
C         On envoie le meme tableau plusieurs fois pour le recuperer
C         dans MTCONV selon plusieurs types (INTEGER*4, etc.)
          CALL MTCONV(type4,SCHAV1.CHAVAL,SCHAV1.CHAVAL,
     &                SCHAV1.CHAVAL,SCHAV1.CHAVAL,SCHAVL.CHAVAL,ITAIL)
          IF (IERR.NE.0) RETURN

C---------Définition de INFCHE
          MCHEL1.INFCHE(ib, 1) = infch1
          MCHEL1.INFCHE(ib, 3) = infch3
          MCHEL1.INFCHE(ib, 5) = infch5
          MCHEL1.INFCHE(ib, 6) = infch6

C---------Définition de MCHAML
          SEGINI,MCHAML
          DO ic=1,n2
            MCHAML.NOMCHE(ic) = CHAINF.CNAME(ic)(1:8)
            IF(MCHAML.NOMCHE(ic) .EQ. '        ')THEN
              MCHAML.NOMCHE(ic)='SCAL    '
            ENDIF
            MCHAML.TYPCHE(ic) = 'REAL*8'

            IF(infch6 .EQ. 1)THEN
C             Cas MCHAML aux NOEUDS
              IPT1 = MCHEL1.IMACHE(ib)
              SEGACT,IPT1
              CALL MEDPER(IPT1.ITYPEL, n1ptel, IPERM)
            ELSE
C             Cas MCHAML aux GRAVITE
              IPERM= 0
            ENDIF

            SEGINI,MELVAL
            icc = 1
            IF(IPERM .EQ. 0)THEN
              DO il=1,n1el
                DO im=1,n1ptel
                  MELVAL.VELCHE(im,il) = SCHAVL.CHAVAL(icc, ic)
                  icc = icc + 1
                ENDDO
              ENDDO

            ELSE
              do il=1,n1el
                MELVAL.VELCHE(1,il) = SCHAVL.CHAVAL(icc, ic)
                icc = icc + 1
                do im = 1,n1ptel-1
                  MELVAL.VELCHE(IPERM(im),il) = SCHAVL.CHAVAL(icc, ic)
                  icc = icc + 1
                enddo
              enddo
            ENDIF

            SEGACT MELVAL*NOMOD
            MCHAML.IELVAL(ic) = MELVAL
          ENDDO

          SEGSUP SCHAVL
          SEGACT MCHAML*NOMOD
          MCHEL1.ICHAML(ib) = MCHAML
        ENDDO
        SEGACT MCHEL1*NOMOD

C-------Fusion des champs
        IF (MCHELM .EQ. 0) THEN
          MCHELM = MCHEL1
        ELSE
          CALL FUSCHL(MCHELM, MCHEL1, IRECHE)
          IF (IERR .NE. 0) RETURN
          MCHELM = IRECHE
        ENDIF
      ENDDO

      ISOR = MCHELM

      END

