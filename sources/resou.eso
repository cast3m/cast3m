C RESOU     SOURCE    PV        18/08/30    21:15:07     9896
      SUBROUTINE RESOU
      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8 (A-H,O-Z)
C
C **** CET OPERATEUR SERT A RESOUDRE UN SYSTEME D EQUATIONS LINEAIRES
C ****   CHPOINT = RESOU RIGIDITE CHPOINT
C
C
-INC SMRIGID
-INC SMTEXTE
-INC CCOPTIO
-INC SMTABLE
-INC SMCHPOI
-INC SMELEME
-INC SMLCHPO
      PARAMETER(ZERO=0.D0)
      SEGMENT IDEMEM(0)
      segment ideme0(idemem(/1))
      segment ideme1(idemem(/1))
      segment idnote(0)
C
      CHARACTER*4 LISM(8)
      CHARACTER*(8) ITCHPO,CHARRE1
      CHARACTER*72 CHARRE
      REAL*8 XVA
      LOGICAL ILOG,ILUG,casfimp
      DATA LISM/'NOID','NOUN','ENSE','GRAD','CHOL','STAB','NOEL','NOST'/
      DATA ITCHPO/'CHPOINT '/
      DATA ILOG/.FALSE./
C
C-------------------------------------------------------
c     LECTURE ET INITIALISATION

c     LECTURE DES OPTIONS
      XVA=REAL(0.D0)
      IOB=0

      iunil=0
      noel=0
      IMTVID=0
      NOUNIL=0
      NOID=0
      NOEN=1
      IGRADJ = 0
      ICHSKI = 0
      INSYM  = 0
      KIKI=0
      KSYMET = 0
      IPSHPO = 0
      ISTAB=0
  5   CONTINUE
      CALL LIRMOT(LISM,8,KIKI,0)
      IF (KIKI.EQ.1) NOID=1
      IF (KIKI.EQ.2) NOUNIL=1
      IF (KIKI.EQ.3) NOEN=0
*      IF (KIKI.EQ.4) IGRADJ = 1
*      IF (KIKI.EQ.5) ICHSKI = 1
*      IF (KIKI.EQ.4.OR.KIKI.EQ.5) KSYMET = 1
      IF (KIKI.eQ.6) ISTAB=1
      IF (KIKI.eQ.7) NOEL=1
      IF (KIKI.eQ.8) ISTAB=0
      IF (KIKI.NE.0) GOTO 5
      IF(NUCROU.EQ.0) THEN
          ICHSKI=1
      ELSEIF(NUCROU.EQ.1) THEN
          IGRADJ=1
          KSYMET=1
      ENDIF
*      WRITE(6,*) ' nucrou', nucrou
*      IF ( IGRADJ + ICHSKI .EQ. 0 ) ICHSKI = 1

c     LECTURE DE LA RIGIDITE
      CALL LIROBJ('RIGIDITE',IPOIRI,1,IRETOU)
      IF(IERR.NE.0) GO TO 5000
      IPRIGO=IPOIRI
C
c     LECTURE DE LA PRECISION
      PREC=REAL(1.D-18)
      CALL LIRREE(PREC,0,IRETOU)
      IF(IERR.NE.0) GO TO 5000

C     REMPLISSAGE DU 2ND MEMBRE IDEMEM(**) A PARTIR DE ...
c     ... 'CHPOINT'
      SEGINI IDEMEM
   1  CONTINUE
      CALL LIROBJ(ITCHPO,ISECO,0,IRETOU)
      IF(IRETOU.NE.0) THEN
         IDEMEM(**)=ISECO
         GO TO 1
      ENDIF

c     ... 'TABLE DE SOUS-TYPE LIAISONS_STATIQUES'
      CALL LIRTAB('LIAISONS_STATIQUES',ITBAS,0,IRET)

c     ... 'LISTCHPO'
      CALL LIROBJ('LISTCHPO',ISECO,0,IRETOU)
      IF(IRETOU.NE.0) THEN
         mlchpo=ISECO
         segact mlchpo
         n1 = ichpoi(/1)
         do iu = 1 , n1
           idemem(**) = ichpoi(iu)
         enddo
         segdes mlchpo
         segini mlchpo
         ipshpo = mlchpo
      ENDIF
      IF (IERR.NE.0) RETURN

      IF (ITBAS.NE.0 .AND. IIMPI.EQ.333) THEN
      WRITE(IOIMP,*) 'on a lu la table des conditions aux limites'
      ENDIF
      if (itbas.ne.0) then
         mtab1 = itbas
         segact mtab1
         ima = mtab1.mlotab - 1
         segini idnote
         im = 0
         segdes mtab1
      else
         goto 90
      endif
*     boucle en cas de résolutions successives avec table
 80   continue
         im = im + 1
         itmod = 0
         ichp0 = 0
         if (im.gt.ima) then
           if (idemem(/1).gt.0) goto 90
*          pas de champs de force
           call erreur(1)
           return
         endif
         CALL ACCTAB(ITBAS,'ENTIER',IM,0.d0,' ',.true.,IP0,
     &                   'TABLE',I1,X1,CHARRE,.true.,ITMOD)
         if (ierr.ne.0) return
c        table itmod trouvee --> on recupere la force
         if (itmod.gt.0) then
           CALL ACCTAB(ITMOD,'MOT',0,0.d0,'FORCE',.true.,IP0,
     &                     'CHPOINT',I1,X1,CHARRE,.true.,ICHP0)
           if (ierr.ne.0) return
           if (ichp0.gt.0) then
             idemem(**) = ichp0
             idnote(**) = im
           else
             call erreur(1)
             return
           endif
c          on cree le point repere ici
           CALL CREPO1 (ZERO, ZERO, ZERO, IPOIN)
           CALL ECCTAB(ITMOD,'MOT',0,0.0D0,'POINT_REPERE',.TRUE.,0,
     &          'POINT',0,0.0D0,' ',.TRUE.,IPOIN)
         endif
      goto 80
      IF (IERR.NE.0) RETURN

C-------------------------------------------------------
c     DEBUT DU TRAVAIL

 90   continue
*  verification pas de blocage en double
      call verlag(ipoiri)
      if (ierr.ne.0) return
*        y a t il des matrices de relations non unilaterales
      ipoir0 = ipoiri
      mrigid=ipoiri
C      call prrigi(ipoiri,1)
      segact mrigid
      nrige= irigel(/1)
      idepe=0
      nbr = irigel(/2)
      do 1000 irig = 1,nbr
       meleme=irigel(1,irig)
       segact meleme
       if ((irigel(6,irig).eq.0.or.nounil.eq.1).and.itypel.eq.22)
     >    idepe=idepe+1
       if (irigel(6,irig).ne.0) iunil=1
       segdes meleme
1000  continue
*      idepe=0
      lagdua=0

      if(idepe.ne.0) then
C  on va separer les raideurs
*     write (6,*) ' nounil jrcond vaut ',nounil,jrcond
      if (jrcond.eq.0) then
       call separm(mrigid,ri1,ri2,nounil,lagdua,noel)
*      if (lagdua.ne.0) call ecmail(lagdua)
*       write(6,*) ' resou apres separm -- ri2'
*       call prrigi(ri2,1)
*       write(6,*) ' resou apres separm -- ri1'
*       call prrigi ( ri1,1)
*       write(6,*) ' fin impression ri1'
       segact mrigid*mod
       jrelim=ri1
       jrgard=ri2
       imlag=lagdua
       call fusrig(ri1,ri2,ipoir0)
       jrtot=ipoir0
      else
       ri1=jrelim
       ri2=jrgard
       ipoir0=jrtot
       lagdua=imlag
       ipt1=lagdua
       if (ipt1.ne.0) segact ipt1
      endif
      iri1s=ri1
      iri2s=ri2
C
1010  continue
C
*    mrigid matrice complete
*    ri1    dependance
*    ri2    les autres matrices
*    ri6    matrice de transfert
*    ri3    matrice reduite
*    ri5    matrice de transfert transposee
C
C   on va proceder  a la condensation rigidite puis forces
       if(jrcond.eq.0) then

         CALL DEPEN3(RI1,RI6)
*         write (6,*) ' resou apres depen3 --- ri6 '
*         call prrigi(ri6,1)
         call scnd2 (ri2,ri6,ri3)
*         write (6,*) ' resou  apres scnd2--- ri3 '
*         call prrigi(ri3,1)
         segact ri3
         if(ierr.ne.0) then
         segsup ri1,ri2,ri6,idemem
         return
         endif

         segact mrigid*mod
         jrcond=ri3
         JRDEPP=RI6
C     dualisation  de la (les) matrice(s) de dependance
         call dual00(ri6,ri5)
*         write(6,*) ' apres dual0  -- ri5'
*         call prrigi( ri5,1)
         jrdepd=ri5
         ipoiri = ri3
       else
         ipoiri= jrcond
         RI6   = JRDEPP
         ri5   = jrdepd
       endif
*  test si ri3 est vide
         ri3=jrcond
         segact ri3
*        write (6,*) ' dans resou ri3.irigel(/2) ',ri3.irigel(/2)
         if (ri3.irigel(/2).eq.0) imtvid=1
C
      segdes ri1,ri2,mrigid
C   maintenant  les seconds membres
C        write(6,*) ' ipoiri jrdepp jrdepd',ipoiri,ri6,ri5
C         call prrigi(ri3)

      segact idemem*mod
      segini ideme0,ideme1

C        call prrigi(ri5)
* en cas de contacts on ne dualise pas . Ce sera fait dans unilater
      ifrot=0
      MRIGID=IPOIRI
      SEGACT MRIGID*MOD
      DO  I=1,IRIGEL(/2)
       IF(IRIGEL(6,I).ne.0) ifrot=1
      enddo
      if (nounil.eq.1) ifrot=0
*     if (ifrot.eq.0) write (6,*) ' resou non unilateral '
*     if (ifrot.eq.1) write (6,*) ' resou unilateral pas de dualisation'
      if (lagdua.ne.0) then
      ipt8=lagdua
      if (ierr.ne.0) return
      segact ipt8
*     call ecmail(lagdua,0)
      endif
      do 1050 ig=1,idemem(/1)
      ichp2= idemem(ig)
      ideme0(ig)=ichp2
*  transferer les valeurs imposees des relations sur les inconnues (à éliminer)
*      write (6,*) ' valeurs imposees ichp2'
*      call ecchpo(ichp2,0)
      call transr(ichp2,ri1,ichp3)
*     call prrigi(ri1)
*      write (6,*) ' apres transfert ichp3'
*      call ecchpo(ichp3,0)
      ideme1(ig)=ichp3
      call mucpri(ichp3,ri2,ichp4)
*      write (6,*) ' apres mucpri ichp4 '
*      call ecchpo(ichp4,0)
*  ri2 est deja dualise. Il faut donc dedualiser ichp4
      call dbbcd(ichp4,lagdua)
*      write (6,*) ' apres dbbcd ichp4 '
*      call ecchpo(ichp4,0)
      call adchpo(ichp2,ichp4,ichp1,1.D0,-1.0D0)
      call dtchpo(ichp4)
*      write (6,*) ' apres  adchpo ichp1'
*      call ecchpo(ichp1,0)
      call mucpri(ichp1,ri5,ichp2)
*      write (6,*) ' impression de ri5 '
*      call prrigi(ri5,1)
*      write (6,*) ' apres mucpri ichp2'
*      call ecchpo(ichp2,0)
         mchpo1=ichp1
C         segact mchpo1
C         write(6,*) 'reso mchpo1 jattri(1)',mchpo1.jattri(1)
C         segdes mchpo1
C
      mchpo2= ichp1
      segact mchpo2*mod
      mchpo2.jattri(1)=2
      mchpo2= ichp2
      segact mchpo2*mod
      mchpo2.jattri(1)=2
C         write(6,*) 'reso mchpo2 jattri(1)',mchpo2.jattri(1)
      segdes mchpo2
C
      call fuchpo (ichp1,ichp2,ichp3)
*     call dtchpo(ichp1)
      call dtchpo(ichp2)
      idemem(ig)=ichp3
*  vecteur a resoudre
*     write (6,*) ' le vecteur '
*     call ecchpo(ichp3,0)
*  dualisation des mult de lagrange
      if (lagdua.ne.0.and.ifrot.eq.0) call dbbch(ichp3,lagdua)
*  matrice
*     write (6,*) ' la matrice '
*     call prrigi(ipoiri)
1050  continue
      noid = 1
         endif
1060  continue
C-------------------------------------------------------

*
* Si au moins une des matrices n'est pas symétrique, on passera
* par le solveur non-symétrique LDMT.
*
      MRIGID=IPOIRI
      SEGACT MRIGID*MOD
      NRG = IRIGEL(/1)
      NBR = IRIGEL(/2)
C ... Ceci peut arriver si par exemple on extrait la partie
C     symétrique d'une matrice purement antisymétrique ...
*     IF(NBR.EQ.0) THEN
*        SEGDES MRIGID
*        CALL ERREUR(727)
*        RETURN
*     ENDIF
C ... Mais avant on va tester si la normalisation des variables
C     primales et duales a été demandée - ceci entraîne la perte
C     de la symétrie ...
      IF(NORINC.GT.0  .AND. NORIND.GT.0) THEN
         IF(KSYMET.EQ.1) THEN
            CALL ERREUR(19)
            SEGDES,MRIGID
            RETURN
         ENDIF
         INSYM = 1
         IGRADJ = 0
         ICHSKI = 0
         GOTO 15
      ENDIF

      IF (NRG.GE.7) THEN
C    ... On teste si la matrice contient des matrices non symétriques ...
C    ... Si OUI, ce n'est pas la peine de faire les autres tests ...
         DO  9 IN = 1,NBR
            IANTI=IRIGEL(7,IN)
            IF(IANTI.GT.0) THEN
C          ... On vérifie si l'utilisateur n'a pas demandé explicitement
C              la résolution par Choleski ou gradient conjugué,
C              si OUI on râle puis on s'en va !!! ...
               IF(KSYMET.EQ.1) THEN
                  CALL ERREUR(19)
                  SEGDES,MRIGID
                  RETURN
               ENDIF
               IF(NORINC.NE.0.AND.NORIND.EQ.0) THEN
                  CALL ERREUR(760)
                  SEGDES,MRIGID
                  RETURN
               ENDIF
               INSYM = 1
               IGRADJ = 0
               ICHSKI = 0
               GOTO 15
            ENDIF
  9      CONTINUE


      ENDIF

 15   CONTINUE
C
C  ****  ON S'ASSURE QU'IL N'Y A PAS D'APPUIS UNILATERAUX
C
      if (iunil.eq.0) goto 30
      IF(IRIGEL(/1).LT.6) GO TO 30
      IF (NOUNIL.EQ.1) GOTO 30
   21 CONTINUE
C
C  **** EXISTENCE DES APPUIS UNILATERAUX
C  **** SI ON EST DEJA PASSE DANS LES APPUIS UNILATERAUX
C       ISUPEQ POINTE SUR UNE TABLE CONTENANT LES DONNEES A PASSER
C       A LA PROCEDURE UNILATER
C
      ISUPLO=ISUPEQ
      IF (ISUPLO.NE.0) GOTO 27
      NNOR=0
      DO 22 I=1,IRIGEL(/2)
      IF(IRIGEL(6,I).EQ.0) NNOR=NNOR+1
  22  CONTINUE
      IF(NNOR.EQ.0)  THEN
                       CALL ERREUR(312)
                       RETURN
                     ENDIF
      NRIGE=IRIGEL(/1)
      NRIGEL=NNOR
      SEGINI RI1
      NRIGEL=IRIGEL(/2)-NNOR
      SEGINI RI2
      II1=0
      II2=0
      DO 23 I=1,IRIGEL(/2)
      IF(IRIGEL(6,I).NE.0) THEN
                                RI3=RI2
                                II2=II2+1
                                II=II2
                           ELSE
                                RI3=RI1
                                II1=II1+1
                                II=II1
                           ENDIF
      DO 24 J=1,NRIGE
      RI3.IRIGEL(J,II) = IRIGEL(J,I)
   24 CONTINUE
      RI3.COERIG(II)=COERIG(I)
   23 CONTINUE
*  RI1 raideur sans condition unilaterale
*  RI2 conditions unilaterales
      CALL CRTABL(MTABLE)
      ISUPEQ=MTABLE
* il faut aussi mettre isupeq dans la raideur initiale
      MRIGID=IPRIGO
      SEGACT MRIGID*MOD
      ISUPEQ=MTABLE
      if (idepe.ne.0) then
*  il faut extraire de la matrice initiale (ipoir0) les conditions unilaterales
      mrigid=iri2s
      segact mrigid
      nrigel=0
      do 40 i=1,irigel(/2)
       if (irigel(6,i).eq.0) nrigel=nrigel+1
  40  continue
      if (nrigel.eq.0) call erreur(312)
      if (ierr.ne.0) return
      nrige=irigel(/1)
      segini ri4
      ii1=0
      nrigel=irigel(/2)-nrigel
      segini ri5
      ii2=0
      do 41 i=1,irigel(/2)
       if (irigel(6,i).ne.0) goto 42
       ii1=ii1+1
       do j=1,nrige
        ri4.irigel(j,ii1)=irigel(j,i)
       enddo
       ri4.coerig(ii1)=coerig(i)
       goto 41
  42  continue
       ii2=ii2+1
       do j=1,nrige
        ri5.irigel(j,ii2)=irigel(j,i)
       enddo
       ri5.coerig(ii2)=coerig(i)
  41  continue
      segdes mrigid,ri4
      endif
      CALL ECCTAB(MTABLE,'ENTIER  ',1,XVA,' ',ILOG,IOB,
     $                   'RIGIDITE',IOB,XVA,' ',ILOG,RI1)
      CALL ECCTAB(MTABLE,'ENTIER  ',2,XVA,' ',ILOG,IOB,
     $                   'RIGIDITE',IOB,XVA,' ',ILOG,RI2)
      CALL ECCTAB(MTABLE,'ENTIER  ',3,XVA,' ',ILOG,IOB,
     $                   'LOGIQUE ',IOB,XVA,' ',ILOG,IOB)
        if(idepe.ne.0) then
      CALL ECCTAB(MTABLE,'ENTIER  ',8,XVA,' ',ILOG,IOB,
     $                   'RIGIDITE',IOB,XVA,' ',ILOG,iri1s)
      CALL ECCTAB(MTABLE,'ENTIER  ',9,XVA,' ',ILOG,IOB,
     $                   'RIGIDITE',IOB,XVA,' ',ILOG,ri4  )
      CALL ECCTAB(MTABLE,'ENTIER  ',12,XVA,' ',ILOG,IOB,
     $                   'RIGIDITE',IOB,XVA,' ',ILOG,ri5  )
        endif
        if (lagdua.ne.0)
     > CALL ECCTAB(MTABLE,'ENTIER  ',13,XVA,' ',ILOG,IOB,
     $                   'MAILLAGE',IOB,XVA,' ',ILOG,lagdua)
      ISUPLO=MTABLE
      SEGDES RI1,RI2,MTABLE
  27  CONTINUE
      MTABLE=ISUPLO
      SEGACT MTABLE
      IF(INSYM.EQ.1) THEN
         ILUG=.TRUE.
      ELSE
         ILUG=.FALSE.
      ENDIF
      CALL ECCTAB(MTABLE,'MOT     ',4,XVA,'NSYM',ILOG,IOB,
     $                   'LOGIQUE ',IOB,XVA,' ',ILUG,IOB)
      if(idepe.ne.0) then
        ichp3=ideme0(1)
*      call copie2(ich,ichp3)
        CALL ECCTAB(MTABLE,'ENTIER  ',10,XVA,' ',ILOG,IOB,
     $                   'CHPOINT ',IOB,XVA,' ',ILOG,ichp3)
        ichp3=ideme1(1)
*      call copie2(ich,ichp3)
        CALL ECCTAB(MTABLE,'ENTIER  ',11,XVA,' ',ILOG,IOB,
     $                   'CHPOINT ',IOB,XVA,' ',ILOG,ichp3)
      endif
      SEGDES MRIGID
      DO 26 I=IDEMEM(/1),1,-1
         ISECO=IDEMEM(I)
         CALL ECROBJ (ITCHPO,ISECO )
  26  CONTINUE
      SEGSUP IDEMEM
      CALL ECROBJ ('TABLE   ',ISUPLO)
      SEGINI MTEXTE
      LTT=8
      MTEXT(1:LTT) ='UNILATER'
      NCART=8
      SEGDES MTEXTE
      CALL ECROBJ('TEXTE',MTEXTE)
      mrigid=iprigo
      segdes mrigid
      RETURN

C ... On arrive ici dans le cas où il n'y a pas d'appuis unilatéraux ...
   30 CONTINUE
* il se peut que le dernier chp soit du frottement
* on l'enleve car il ne sert a rien si on n'appele pas unilater
        if (idemem(/1).gt.1.and.idepe.ne.0) then
         mchpoi=ideme0(idemem(/1))
         segact MCHPOI
         if (mtypoi.eq.'LX  ') idemem(/1)=idemem(/1)-1
        endif
*  frottement
      SEGDES IDEMEM
*      write(6,*) ' ichski, igradj,insym ',ichski, igradj,insym
*     write (6,*) ' imtvid ',imtvid
      if (imtvid.eq.1) then
*  matrice vide
        nsoupo=0
        nat=0
        segact idemem*mod
        do i=1,idemem(/1)
         segini mchpoi
         idemem(i)=mchpoi
        enddo
        if (noen.eq.0) then
          call ecrent(0)
          nbelem=0
          nbnn=1
          nbsous=0
          nbref=0
          segini ipt8
          ipt8.itypel=1
          call ecrobj('MAILLAGE',ipt8)
        endif
      else
*       write(6,*) ' appel resou1 --  idemem(1)'
*       segact idemem
*       idesec= idemem(1)
*       call ecchpo(idesec,0)
*       write(6,*) ' appel resou1 -- ipoiri'
*       call prrigi ( ipoiri,1)
*       write(6,*) ' ichski  insym  ', ichski, insym
       IF(ICHSKI.EQ.1) CALL RESOU1(IPOIRI,IDEMEM,NOID,NOEN,PREC,ISTAB)
       IF(IGRADJ.EQ.1) CALL GRACO0(IPOIRI,IDEMEM,NOID,NOEN)
       IF(INSYM .EQ.1) CALL LDMT  (IPOIRI,IDEMEM,NOID,NOEN,PREC)
       IF(IERR.NE.0) GO TO 5001
      endif
C
C-------------------------------------------------------
C     LA SOLUTION EST CALCULEE --> ON LA MET EN FORME

      SEGACT IDEMEM
      N=IDEMEM(/1)
c-----boucle sur les solutions
      DO 3 I=1,N
         IRET=IDEMEM(N+1-I)
*
         MCHPOI= IRET
C-----------------------
      if(idepe.ne.0) then
* reintroduction des inconnues supprimees
       call mucpri(mchpoi,ri6,ichp3)
*       write (6,*) ' resou - mchpoi '
*       call ecchpo(mchpoi,0)
*       write (6,*) ' resou - ichp3'
*       call ecchpo(ichp3 ,0)
*       write (6,*) ' resou - ri6'
*       call prrigi(ri6,1)
       call adchpo(mchpoi,ichp3,ichp2,1.D0,1.D0)
       mchpo1=ideme1(N+1-I)
*      write (6,*) ' resou - iret '
       call adchpo(ichp2,mchpo1,iret,1.D0,1D0)
*      call ecchpo(mchpoi)
*      call ecchpo(iret)
       call dtchpo(mchpoi)
       call dtchpo(ichp3)
       call dtchpo(ichp2)
       mchpo1=iret
       segact mchpo1*mod
       mchpo1.jattri(1)=1
C -------------     deplacements  complets   puis KU
       call mucpri(mchpo1,ri2  ,ichp5)
*      write (6,*) ' apres mucpri '
*      call ecchpo(ichp5,0)
       mchpo4=ichp5
       segact mchpo4*mod
       mchpo4.jattri(1)=1
       segdes mchpo4
       ichp6= ideme0(N+1-I)
C -------      write(6,*) ' ---------   KU - F   '
*      write (6,*) ' avant adchpo  ichp5 '
*      call ecchpo(ichp5)
       call adchpo(ichp5,ichp6,IRET,1D0,-1D0)
       call dtchpo(ichp5)
*      write (6,*) ' apres adchpo '
*      call ecchpo(iret)
       call remplx(ri1,iret,ichp7)
       if (noen.eq.0) then
         call lirobj('MAILLAGE',ipt8,1,iretou)
         if (ierr.ne.0) return
         segact ipt8
         call lirent(nben,1,iretou)
       endif
*
*  on n'appelle plus verlx car je ne vois pas pourquoi on voudrait que les multiplicateurs de lagrange non éliminés soient nuls
*
**     call verlx(ri2,iret,mchpo1,noen,ipt8)
       if (noen.eq.0) then
         call ecrobj('MAILLAGE',ipt8)
         nben=ipt8.num(/2)
         call ecrent(nben)
       endif
       call dtchpo(iret)
*       write (6,*) ' apres remplx ichp7 '
*       call ecchpo(ichp7,0)
       call fuchpo(ichp7,mchpo1,iret)
       mchpoi=iret
*  supression des multiplicateurs dédoublés
       if (lagdua.ne.0) then
        call dbbcf(mchpoi,lagdua)
        ipt1=lagdua
        segdes ipt1
       endif
      endif
*     write (6,*) ' mchpoi en fi de resou '
      segact mchpoi
*     call ecchpo(mchpoi,0)
*     les champs de points qui sortent sont de nature diffuse
         SEGACT MCHPOI
         NAT = MAX(1,JATTRI(/1))
         NSOUPO=IPCHP(/1)
         SEGADJ MCHPOI
         JATTRI(1)=1
         SEGDES MCHPOI
         IRET = MCHPOI
*
*     cas table de liaisons statiques
      if (itbas.ne.0) then
           il = n + 1 - i
           ilo = idnote(il)
         CALL ACCTAB(ITBAS,'ENTIER',ILO,0.d0,' ',.true.,IP0,
     &                   'TABLE',I1,X1,CHARRE,.true.,ITMOD)
           if (ierr.ne.0) return
c          CALL CREPO1 (ZERO, ZERO, ZERO, IPOIN)
c          CALL ECCTAB(ITMOD,'MOT',0,0.0D0,'POINT_REPERE',.TRUE.,0,
c      &        'POINT',0,0.0D0,' ',.TRUE.,IPOIN)

         CALL ECCTAB(ITMOD,'MOT',0,0.D0,'DEFORMEE',
     &        .TRUE.,0,'CHPOINT',0,0.D0,' ',.TRUE.,MCHPOI)

      else if (ipshpo.gt.0)  then
         mlchpo = ipshpo
         ichpoi(N+1-I) = iret
      else
         CALL ECROBJ (ITCHPO,IRET)
      endif

   3  CONTINUE
c-----fin de boucle sur les solutions


C-------------------------------------------------------
c     MENAGE AVANT DE QUITTER

 5001 CONTINUE
      if (itbas.ne.0) then
         segdes mtab1
         segsup idnote
         CALL ECROBJ ('TABLE   ',itbas)
      endif

      if (ipshpo.gt.0) then
        mlchpo = ipshpo
        segdes mlchpo
        CALL ECROBJ ('LISTCHPO ',ipshpo)
      endif
      SEGSUP IDEMEM
C
 5000 CONTINUE
      RETURN
      END


















