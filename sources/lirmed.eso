C LIRMED    SOURCE    CB215821  19/03/18    21:15:23     10161
C***********************************************************************
C NOM         : lirmed.eso
C DESCRIPTION : Sortie d'un maillage au format .med
C***********************************************************************
C HISTORIQUE :  21/12/2010 : CHAT     : création de la subroutine
C HISTORIQUE :  04/11/2013 : CB215821 : PASSAGE AU FORMAT 3.0 DE MED
C HISTORIQUE :  05/01/2017 : CB215821 : GESTION DES ERREURS DE LECTURE
C HISTORIQUE :  23/10/2017 : RPAREDES : LECTURE CHPOINT,MCHAML,PASAPAS
C HISTORIQUE :  09/10/2018 : BERTHINC : SOUCIS SI TASSPO dans PARAVIS
C HISTORIQUE :
C HISTORIQUE :
C HISTORIQUE :
C***********************************************************************
C Prière de PRENDRE LE TEMPS DE COMPLÉTER LES COMMENTAIRES
C en cas de modification de ce sous-programme afin de faciliter
C la maintenance !
C***********************************************************************
C APPELÉ PAR : opérateur LIRE (lirefi.eso)
C***********************************************************************
C ENTRÉES : aucune
C SORTIES : aucune
C***********************************************************************
C SYNTAXE (GIBIANE) :
C
C    TAB1 = LIRE 'MED' 'fichier.med'
C
C***********************************************************************
      SUBROUTINE LIRMED
      IMPLICIT INTEGER(i-n)
      IMPLICIT REAL*8(a-h,o-z)

C **********************************************************************
C MODIFICATION CLEMENT BERTHINIER MED_3.X.X
C on met l'include spécifique du format MED
C concaténation de med_parameter.hf77 et med.hf77
C **********************************************************************
-INC CCMED
-INC CCOPTIO
-INC SMELEME
-INC SMCOORD
-INC SMLMOTS
-INC CCGEOME
-INC SMTABLE
-INC SMCHPOI
-INC SMCHAML

C Définition des entiers *4
      INTEGER*4 fid
      INTEGER*4 access
      INTEGER*4 cret
      INTEGER*4 sdim
      INTEGER*4 mdim
      INTEGER*4 naxis

      INTEGER*4 major
      INTEGER*4 minor
      INTEGER*4 rel
      INTEGER*4 mtype
      INTEGER*4 stype
      INTEGER*4 atype
      INTEGER*4 etype
      INTEGER*4 gtype
      INTEGER*4 datype
      INTEGER*4 chgt
      INTEGER*4 tsf
      INTEGER*4 swm
      INTEGER*4 psize
      INTEGER*4 cs
      INTEGER*4 ptype

      INTEGER*4 numdt
      INTEGER*4 numit
      INTEGER*4 nstep
      INTEGER*4 fnum
      INTEGER*4 cmode
      INTEGER*4 n, ncha4, nc4, ncomp4, nprof, nval, ntprof, npara4, dval
      INTEGER*4 type
      INTEGER*4 it,it1

C Définition des reels *8
      REAL*8    dt

C-----Chaines de Caractere de longueur MED_SNAME_SIZE=16
      CHARACTER*(MED_SNAME_SIZE) dtunit

C-----Chaines de Caractere de longueur MED_NAME_SIZE=64
      CHARACTER*(MED_NAME_SIZE) name
      CHARACTER*(MED_NAME_SIZE) fam
      CHARACTER*(MED_NAME_SIZE) fname
      CHARACTER*(MED_NAME_SIZE) mname
      CHARACTER*(MED_NAME_SIZE) dname

C-----Chaines de Caractere de longueur MED_LNAME_SIZE=80
      CHARACTER*(MED_LNAME_SIZE) char80

C-----Chaines de Caractere de longueur MED_COMMENT_SIZE=200
      CHARACTER*(MED_COMMENT_SIZE) desc
C ***** FIN

C ***** Déclaration des variable
      CHARACTER*8   cha8a, cha8b, charre, typobj
      CHARACTER*64  cha64a, cha64b
      LOGICAL       ltelq, login, logre
      CHARACTER*72  medres
      EXTERNAL LONG

C ***** Déclaration des segments
      SEGMENT SANAME
        CHARACTER*(MED_SNAME_SIZE) ANAME(IDIM)
      ENDSEGMENT
      SEGMENT SAUNIT
        CHARACTER*(MED_SNAME_SIZE) AUNIT(IDIM)
      ENDSEGMENT

C-----Contiendra les MAILLAGES SIMPLES au sens de Cast3M
C       ntypel ==> Type d'élément au sens de Cast3M
C       IPOMAI ==> pointeur MAILLAGE SIMPLE
C       INUMLI ==> pointeur vers le tableau des numéros de famille de chaque éléments
      SEGMENT MAITOT
        INTEGER IPOMAI(ntypel)
        INTEGER INUMLI(ntypel)
      ENDSEGMENT

      SEGMENT NUMLI8
        INTEGER NUMLIS(nbelem)
      ENDSEGMENT

C-----Contiendra les numéros des familles des noeuds
      SEGMENT SFANOE
        INTEGER NFANOE(nbpta)
      ENDSEGMENT

C-----SEGMENT contenant les informations sur les familles
C       infam  ==> Indice de la famille
C       IFAMNU ==> Numéro de la famille
C       PFAMGR ==> Pointeur vers le SEGMENT SFAMGR : nom des groupes dans la famille
C       CFANOM ==> Nom de la famille
C       PFAMAI ==> Pointeur vers MELEME de la famille en question
      SEGMENT SFAMI
        INTEGER                   IFAMNU(infam)
        INTEGER                   PFAMGR(infam)
        CHARACTER*(MED_NAME_SIZE) CFANOM(infam)
        INTEGER                   PFAMAI(infam)
      ENDSEGMENT

C-----SEGMENT contenant les noms des groupes
      SEGMENT SFAMGR
        CHARACTER*(MED_LNAME_SIZE) CFGRN(ngroup)
      ENDSEGMENT

C-----SEGMENT contenant les groupes de noms dIFférents (Casse y compris)
C       CGRNOM  ==> Nom des groupes dIFférents
      SEGMENT SGRTOT
        CHARACTER*(MED_NAME_SIZE) CGRNOM(ngrdif)
      ENDSEGMENT

      SEGMENT ICOOR
        REAL*8 XCOO(isdim,nbpta)
      ENDSEGMENT

      SEGMENT SINT4
        INTEGER INT4(itaill)
      ENDSEGMENT

C----- SEG SLSCHA
C         ncham  : nombre de champs (CHPOINT ou MCHAML)
C         LISCHA : liste des noms de champs
C         LISMAI : liste des noms de maillages
C         LSCHIN : liste de SEG CHAINF (information)
C         LSPARA : liste de SEG CHAPAR (parametres)
      SEGMENT SLSCHA
        CHARACTER*(MED_NAME_SIZE) LISCHA(ncham), LISMAI(ncham)
        INTEGER      LSCHIN(ncham), LSPARA(ncham)
      ENDSEGMENT

C----- SEG SLSSOR
C         nbsor  : nombre de champs à sortir
C         CHATYP : type de champ (CHPOINT, MCHAML ou TABLE)
C         CHANOM : nom du champ
C         CHALIS : liste de champs dans un segment SLSFUS(CHPOINT ou MCHAML)
C                  ou SLSSOR(TABLE)
      SEGMENT SLSSOR
        CHARACTER*8               CHATYP(nbsor)
        CHARACTER*(MED_NAME_SIZE) CHANOM(nbsor)
        INTEGER                   CHALIS(nbsor)
      ENDSEGMENT
      POINTEUR SLSSO1.SLSSOR

      SEGMENT SLSFUS
        INTEGER      CHAFUS(nbfus)
      ENDSEGMENT

      SEGMENT CHAINF
C         nc     :   nombre de séquences de calcul dans le champ
C         ncomp  :   nombre de composantes
C         INUMDT :   liste de numéros de pas de tps
C         INUMIT :   liste de numéros d'iteration
C         ISCHPR :   liste de SEG CHAPRO (profil)
C         XDT    :   liste de pas de tps
C         CNAME  :   liste de noms des composants
C         CUNIT  :   liste d'unités des composants
        INTEGER      INUMDT(nc), INUMIT(nc), ISCHPR(nc)
        REAL*8       XDT(nc)
        CHARACTER*(MED_SNAME_SIZE) CNAME(ncomp), CUNIT(ncomp)
      ENDSEGMENT

C----- SEG CHAPAR
C         ncpars : nombre de paramètres par champ
C         CHAPAR : nom du paramètre
C         CPARVL : valeur du paramètre
      SEGMENT CHAPAR
        CHARACTER*(MED_SNAME_SIZE) CPARNM(ncpars)
        INTEGER                    CPARVL(ncpars)
      ENDSEGMENT

C----- SEG CHAPRO
C         nprof  : nombre de profils
C         CTYPE  : type de champ
C         CPRONA : nom du profil
C         CETYPE : entity type
C         CGTYPE : geometry type
      SEGMENT CHAPRO
        CHARACTER*8               CTYPE(nprof)
        CHARACTER*(MED_NAME_SIZE) CPRONA(nprof)
        INTEGER    CETYPE(nprof), CGTYPE(nprof)
      ENDSEGMENT

C----- SEG LISPRO
C         ntprof : nombre total de profils
C         DPNAME : nom du profil
C         LNAME  : localisation du profil
      SEGMENT LISPRO
        CHARACTER*(MED_NAME_SIZE) DPNAME(ntprof), LNAME(ntprof)
      ENDSEGMENT

C***********************************************************************
C Initialisations
C***********************************************************************
      SANAME = 0
      SAUNIT = 0
      MAITOT = 0
      NUMLI8 = 0
      SFANOE = 0
      SFAMI  = 0
      SFAMGR = 0
      SGRTOT = 0
      ICOOR  = 0
      SINT4  = 0
      SLSCHA = 0
      SLSSOR = 0
      SLSFUS = 0
      CHAINF = 0
      CHAPAR = 0
      LISPRO = 0
      CHAPRO = 0
      FDUMMY = 0.D0

C***********************************************************************
C Debut de la lecture
C***********************************************************************
      ltelq = .TRUE.

      CALL LIRCHA(medres, 1, iretou)
      IF (ierr .NE. 0) THEN
        RETURN
      ENDIF

      CALL LIROBJ('MLMOTS', MLMOT1, 0, iretou)
      IF (iretou .NE. 0) THEN
        CALL LIROBJ('MLMOTS', MLMOT2, 1, iretou)
        IF (ierr .NE. 0) THEN
          RETURN
        ENDIF

        SEGACT MLMOT1, MLMOT2
        IF (MLMOT1.MOTS(/2) .NE. MLMOT2.MOTS(/2)) THEN
          CALL ERREUR(19)
          RETURN
        ENDIF
      ENDIF
C-----Creation de la TABLE de resultats
      m = 0
      SEGINI MTABLE
      ncompg = 0
      ngrdif = 10
      SEGINI SGRTOT

C *** Ouverture d'un fichier MED 3.0
      iloh   = LONG(medres)
      name   = medres(1:iloh)
      access = MED_ACC_RDONLY
      cret   = 0

      CALL MFIOPE(fid, name, access, cret)
      IF (cret .NE. 0) THEN
        moterr = 'mfiope'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

C *** Vérification de la compatibilité d'un fichier avec HDF et MED.
      CALL MFICOM (name, hdfok, medok, cret)
      IF(cret .NE. 0) THEN
        moterr = 'mficom'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

C *** Lecture du numéro de version de la bibliothèque MED utilisée pour créer le fichier.
      CALL MFINVR (fid, major, minor, rel, cret)
      IF(cret .NE. 0) THEN
        moterr = 'mfinvr'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

C *** On ne sait pas lire du MED anterieur a 3
      IF(major .LT. 3)THEN
        interr(1)=major
        interr(2)=minor
        interr(3)=rel
        CALL ERREUR(1087)
        RETURN
      ENDIF

C *** Lecture du nombre de maillages dans un fichier MED 3.0
      CALL MMHNMH(fid, n, cret)
c      write(6,*) 'Nombre de maillage lu dans le med' , n
      IF(cret .NE. 0) THEN
        moterr = 'mmhnmh'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

      nbmail = n

      DO 666 i=1,nbmail
C-------Lecture du nombre d'axes du repère des coorDOnnées du maillage
        it = i
c        write(6,*) 'Traitement du maillage ', it ,' / ' , nbmail
        CALL MMHNAX(fid, it, naxis, cret)
        IF(cret .NE. 0) THEN
          moterr = 'mmhnax'
          interr(1)  = cret
          CALL ERREUR(873)
          RETURN
        ENDIF

        imdim  = naxis

C-------Changement de la dimension de l'espace en cas de necessité
C-------J'utilise le GIBIANE pour le faire : "OPTI DIME imdim;"
        IF (IDIM .LT. imdim) THEN
          CALL ECRENT(imdim)
          CALL ECRCHA('DIME')
          CALL OPTION(1)

          IF (ierr .NE. 0) THEN
            WRITE(IOIMP,*)'ERREUR de changement de dimension'
            CALL ERREUR(219)
          ENDIF

          WRITE(IOIMP,*) ' '
          WRITE(IOIMP,*) 'Passage en DIMEnsion ',imdim
          WRITE(IOIMP,*) ' '
        ENDIF


C-------Initialisation des SEGMENTs pour les Unités des Axes (Non renseignés dans notre cas)
        SEGINI SANAME
        SEGINI SAUNIT

        CALL MMHMII(fid, it, name, sdim, mdim, mtype, desc, dtunit,
     &               stype, nstep, atype, ANAME, AUNIT, cret)
        IF(cret .NE. 0) THEN
          moterr = 'mmhmii'
          interr(1)  = cret
          CALL ERREUR(873)
          RETURN
        ENDIF

        isdim  = sdim
        itypem = mtype

        SEGSUP SANAME
        SEGSUP SAUNIT

C ***** Lecture du nombre d'entités (Noeuds ici) dans un maillage MED 3.0
c        write(6,*) 'Lecture du nombre d entites (Noeuds ici) '
      numdt  = MED_NO_DT
      numit  = MED_NO_IT
      etype  = MED_NODE
      gtype  = 0
      datype = MED_COORDINATE
      cmode  = MED_NODAL
      chgt   = MED_FALSE
      tsf    = MED_FALSE

      CALL MMHNME(fid, name, numdt, numit, etype, gtype, datype,
     &             cmode, chgt, tsf, n, cret)
      IF(cret .NE. 0) THEN
        moterr = 'mmhnme'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

      nbpta = n
      SEGINI ICOOR

C ***** Lecture des coordonnées des noeuds MED 3.0
c      write(6,*) 'Lecture des coordonnees des noeuds'
      numdt = MED_NO_DT
      numit = MED_NO_IT
      swm   = MED_FULL_INTERLACE

      CALL MMHCOR(fid, name, numdt, numit, swm, ICOOR.XCOO, cret)
      IF(cret .NE. 0) THEN
        moterr = 'mmhcor'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

C-----Les coordonnées des noeuds lus sont placées dans le tableau XCOOR
C-----du SEGMENTs MCOORD (SMCOORD.INC)
      SEGACT,MCOORD*MOD
      nbnoin = XCOOR(/1)/(IDIM+1)
      ndec   = XCOOR(/1)
      NBPTS  = nbpta + nbnoin

C-----Mise à jour du SEGMENT MCOORD
      SEGADJ MCOORD
      DO nbn=1,nbpta
        DO ind=1,isdim
          XCOOR(ndec+ind+(nbn-1)*(IDIM+1)) = ICOOR.XCOO(ind,nbn)
        ENDDO
      ENDDO
      SEGSUP ICOOR
      SEGDES MCOORD
      SEGACT MCOORD

      ntypel = MED_GTABLE
      SEGINI MAITOT

C ***** Lecture des numéros de famille des noeuds pour générer les POI1
c      write(6,*) 'Lecture des numeros de famille des noeuds'
      SEGINI SFANOE

      nbelem = nbpta
      SEGINI NUMLI8

      numdt  = MED_NO_DT
      numit  = MED_NO_IT
      etype  = MED_NODE
      gtype  = 0
      itaill = NUMLI8.NUMLIS(/1)

      SEGINI,SINT4
      CALL MHFNR4(fid, name, numdt, numit, etype, gtype,
     &              NUMLI8.NUMLIS, SINT4.INT4, cret, itaill)
      SEGSUP,SINT4
      IF(cret.GT.0) THEN
        moterr = 'mhfnr4'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

C-----Création du MAILLAGE SIMPLE de POI1
c      write(6,*) 'Creation du MAILLAGE SIMPLE de POI1'
      nbnn   = 1
      nbelem = nbpta
      nbsous = 0
      nbref  = 0
      SEGINI IPT1
      IPT1.ITYPEL = 1
      DO indel=1,nbelem
        IPT1.ICOLOR(indel) = idcoul
C-------La connectivité lue est décalée si des noeuds existaient avant
        IPT1.NUM(nbnn,indel) = indel+nbnoin
      ENDDO

      nbtype=1
C-----Sauvegarde du pointeur vers le MELEME simple
      MAITOT.IPOMAI(nbtype) = IPT1
C-----Sauvegarde du pointeur vers le tableau des numéros de famille de chaque noeud de ce MAILLAGE SIMPLE de POI1
      MAITOT.INUMLI(nbtype) = NUMLI8

C-----Boucle sur tous les types d'éléments autre que POI1 (déjà traités)
      DO itypem=1,MED_GTABLE

C ***** Lecture du nombre d'entités (Eléments ici) en balayant tous les
C ***** MAILLAGES SIMPLES d'un maillage MED 3.0
c      write(6,*) 'Lecture du nombre d entités', itypem
        numdt   = MED_NO_DT
        numit   = MED_NO_IT
        etype   = MED_CELL
        gtype   = MEDGTB(itypem)
        datype  = MED_CONNECTIVITY
        cmode   = MED_NODAL
        chgt    = MED_FALSE
        tsf     = MED_FALSE
        CALL MMHNME(fid  , name, numdt, numit, etype, gtype, datype,
     &              cmode, chgt, tsf  , n, cret)
        IF(cret .NE. 0) THEN
          moterr = 'mmhnme'
          interr(1)  = cret
          CALL ERREUR(873)
          RETURN
        ENDIF

        IF(n .NE. 0) THEN
          nbtype=nbtype+1

          nbnn   = NBNNE(MDICLA(MEDGTB(itypem)))
          nbelem = n
          nbsous = 0
          nbref  = 0
          SEGINI IPT1

          IPT1.ITYPEL = MDICLA(MEDGTB(itypem))
          DO indel=1,nbelem
            IPT1.ICOLOR(indel) = idcoul
          ENDDO

C ***** Lecture des connectivités des éléments
c          write(6,*) 'Lecture des connectivités des éléments'
          numdt = MED_NO_DT
          numit = MED_NO_IT
          etype = MED_CELL
          gtype = MEDGTB(itypem)
          cmode = MED_NODAL
          swm   = MED_FULL_INTERLACE
          itaill= nbnn*nbelem
          SEGINI SINT4
          CALL MHCYR4(fid, name, numdt, numit, etype, gtype,
     &                   cmode, swm,IPT1.NUM,SINT4.INT4,cret,itaill)
          SEGSUP,SINT4
          IF(cret .NE. 0) THEN
            moterr = 'mhcyr4'
            interr(1)  = cret
            CALL ERREUR(873)
            RETURN
          ENDIF

C---------La connectivité lue est décalée si des noeuds existaient avant
          IF(nbnoin .NE. 0) THEN
            DO jou=1,nbelem
              DO iou=1,nbnn
                IPT1.NUM(iou,jou) = IPT1.NUM(iou,jou)+nbnoin
              ENDDO
            ENDDO
          ENDIF

C---------Passage de la connectivité MED 3.0 à Cast3M
          CALL MEDTRA(IPT1, 2)

C---------Sauvegarde du pointeur vers le MELEME simple
          MAITOT.IPOMAI(nbtype)=IPT1

C ***** Lecture des numéros de famille des types d'éléments : type MEDGTB(itypem)
          SEGINI NUMLI8
          numdt  = MED_NO_DT
          numit  = MED_NO_IT
          etype  = MED_CELL
          gtype  = MEDGTB(itypem)
          itaill = NUMLI8.NUMLIS(/1)
          SEGINI SINT4
          CALL mhfnr4 (fid, name, numdt, numit, etype, gtype,
     &                 NUMLI8.NUMLIS, SINT4.INT4, cret, itaill)
          IF(cret .NE. 0) THEN
            moterr = 'mhfnr4'
            interr(1)  = cret
            CALL ERREUR(873)
            RETURN
          ENDIF
          SEGSUP,SINT4

C---------Sauvegarde du pointeur vers le tableau des numéros de famille de chaque éléments de ce MAILLAGE SIMPLE
          MAITOT.INUMLI(nbtype) = NUMLI8
        ENDIF
      ENDDO


C-----Le SEGMENT contenant toutes les infos des maillages est ajusté
      ntypel = nbtype
      SEGADJ MAITOT

C ***** Création d'un MAILLAGE COMPLEXE contenant tous les MELEME SIMPLES
      nbref  = 0
      nbsous = nbtype-1
      nbelem = 0
      nbnn   = 0

      SEGINI IPT1
      DO indsou=1,nbtype-1
        IPT2 = MAITOT.IPOMAI(indsou+1)
        IPT1.lisous(indsou) = IPT2
      ENDDO
      SEGDES IPT1


C-----Ecriture dans la table du MAILLAGE complet des FAMILLES => Partition
c      write(6,*) 'Ecriture dans la table du maillage ' ,name
      CALL ECCTAB(MTABLE,'MOT     ',0   ,FDUMMY,name,.FALSE.,0   ,
     &                   'MAILLAGE',0   ,FDUMMY,'    ',.FALSE.,IPT1)

C ***** Lecture du nombre de famille dans un maillage
      CALL MFANFA(fid, name, n, cret)
c      write(6,*) 'Lecture du nombre de famille dans un maillage ' ,n
      IF(cret .NE. 0) THEN
        moterr = 'mfanfa'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

      infam = n
      SEGINI SFAMI


      DO ifam=1,infam
c      write(6,*) 'Famille ' ,ifam, ' / ' , infam
C ***** Lecture du nombre de groupe dans une famille
        it1   = ifam

        CALL MFANFG(fid, name, it1, n, cret)
c      write(6,*) 'Lecture du nombre de groupe dans une famille ',name,n
        IF(cret .NE. 0) THEN
          moterr = 'mfanfg'
          interr(1)  = cret
          CALL ERREUR(873)
          RETURN
        ENDIF
        ngroup = n

        SEGINI SFAMGR

C ***** Lecture des informations sur une famille
        ind  = ifam

        CALL MFAFAI(fid, name, ind, fam, fnum, SFAMGR.CFGRN, cret)
c         write(6,*) ' Lecture des informations sur une famille '
c         write(6,*) 'ind =' ,ind
c         write(6,*) 'fam=' , fam
c         write(6,*) 'fnum' , fnum
c         write(6,*) 'sfamgr',  SFAMGR.CFGRN
        IF(cret .NE. 0) THEN
          moterr = 'mfafai'
          interr(1)  = cret
C          CALL ERREUR(873)
C          RETURN
        ENDIF

        SFAMI.IFAMNU(ifam) = fnum
        SFAMI.PFAMGR(ifam) = SFAMGR
        SFAMI.CFANOM(ifam) = fam


C-------Construction à la volée de la liste des groupes différents
        IF (ngroup .GT. 0) THEN
C---------Cas ou le nombre de groupe n'est pas nul
          IF (ncompg .EQ. 0) THEN
C-----------Cas où la liste est vierge ==> Ajout de tous les noms
            ncompg = ncompg + ngroup

C-----------Ajustement intermédiaire (éventuel) du SEGMENT SGRTOT
            IF (ncompg.GT.ngrdif) THEN
              ngrdif = ncompg * 2 + 10
              SEGADJ SGRTOT
            ENDIF

            DO igroup=1,ngroup
              SGRTOT.CGRNOM(igroup) = SFAMGR.CFGRN(igroup)
            ENDDO
          ELSE
C-----------Cas où des noms de groupes existent déjà ==> Comparaison aux noms existants
            DO igroup=1,ngroup
              iverif = 0
              DO IGEXIS=1,ncompg
                IF(SFAMGR.CFGRN(igroup).EQ.SGRTOT.CGRNOM(IGEXIS))THEN
                  iverif = 1
                ENDIF
              ENDDO

              IF(iverif .EQ. 0) THEN
C---------------Ajout du groupe s'il n'existe pas déjà
                ncompg = ncompg + 1

C---------------Ajustement intermédiaire (éventuel) du SEGMENT SGRTOT
                IF (ncompg .GT. ngrdif) THEN
                  ngrdif = ngrdif * 2
                  SEGADJ SGRTOT
                ENDIF
                SGRTOT.CGRNOM(ncompg) = SFAMGR.CFGRN(igroup)
              ENDIF
            ENDDO
          ENDIF
        ENDIF
      ENDDO

C-----Ajustement final (éventuel) du SEGMENT SGRTOT
      IF (ncompg .NE. ngrdif) THEN
        ngrdif = ncompg
        SEGADJ SGRTOT
      ENDIF

C ***** Reconstitution des dépendances des maillages dans Cast3M
C-----creation des maillages des familles (POI1 compris)
      nbref  = 0
      nbsous = 0
      IPT3   = 0

C-----Boucle sur les familles lues
      DO ifam=1,infam
        inufam = SFAMI.IFAMNU(ifam)
        IPT3   = 0

C-------Boucle sur les types d'éléments
        DO itype=1,nbtype
C---------Chargement du numéro de famille de la ifam ième famille
          NUMLI8 = MAITOT.INUMLI(itype)
          nbelem = 0

          DO ielem=1,NUMLI8.NUMLIS(/1)
C-----------Calcule le nombre d'élément du type itype appartenant à la famille ifam
            IF (NUMLI8.NUMLIS(ielem) .EQ. inufam) THEN
              nbelem = nbelem+1
            ENDIF
          ENDDO


          IF(nbelem .GT. 0) THEN
C-----------Cas où un maillage d'éléments de type itype est a créer pour la famille ifam
C-----------Chargement du maillage complet du type d'élément itype
            IPT1 = MAITOT.IPOMAI(itype)
            nbnn = IPT1.num(/1)

C-----------Création du nouveau maillage composé de la partition des éléments de IPT1 appartenant à la famille ifam
            SEGINI IPT2
            iel = 0
            IPT2.itypel = IPT1.itypel
            DO ielem=1,NUMLI8.NUMLIS(/1)
              IF(NUMLI8.NUMLIS(ielem) .EQ. inufam) THEN
                iel = iel+1
                DO iconn=1,nbnn
                  IPT2.num(iconn,iel)=IPT1.num(iconn,ielem)
                ENDDO
                IPT2.icolor(iel) = idcoul
              ENDIF
            ENDDO

C-----------Création du MELEME COMPLEXE s'il y a lieu
            IF (IPT3 .EQ. 0) THEN
              IPT3=IPT2
            ELSE
C-------------Fusion des maillages IPT3 et IPT2 dans IPT4
              CALL FUSE(IPT3, IPT2, IPT4, ltelq)
              IPT3 = IPT4
            ENDIF
          ENDIF
        ENDDO

        SFAMI.PFAMAI(ifam) = IPT3
      ENDDO
 666  CONTINUE

C-----creation des maillages des groupes : OBJETS NOMMES DANS CAST3M
      DO igroup=1,ngrdif
        char80 = SGRTOT.CGRNOM(igroup)
        IPT3   =  0
        DO 115 ifam=1,infam
          SFAMGR = SFAMI.PFAMGR(ifam)
          DO inomgr=1,SFAMGR.CFGRN(/2)
            IF (char80 .EQ. SFAMGR.CFGRN(inomgr)) THEN
              IF(IPT3 .EQ. 0)THEN
                IPT3 = SFAMI.PFAMAI(ifam)
              ELSE
                IPT2 = SFAMI.PFAMAI(ifam)
C---------------Fusion des maillages IPT3 et IPT2 dans IPT4
                CALL FUSE(IPT3, IPT2, IPT4, ltelq)
                IPT3 = IPT4
              ENDIF
              GOTO 115
            ENDIF
          ENDDO
  115   CONTINUE


C-----Ecriture dans la table du TYPE IMO(2:9)
        IF (char80 .NE. ' ') THEN
          CALL ECCTAB(MTABLE,'MOT     ',0   ,FDUMMY,char80,.FALSE.,0   ,
     &                       'MAILLAGE',0   ,FDUMMY,'    ',.FALSE.,IPT3)
        ENDIF
      ENDDO


C***********************************************************************
C     Ménage dans les SEGMENTS
C***********************************************************************
      IF(MLMOT1 .NE. 0) THEN
        SEGDES MLMOT1,MLMOT2
      ENDIF

      SEGSUP MAITOT

      DO iou=1,infam
        SFAMGR = SFAMI.PFAMGR(iou)
        SEGSUP SFAMGR

        IPT1 = SFAMI.PFAMAI(iou)
        IF(IPT1 .GT. 0) THEN
          SEGDES IPT1
        ENDIF
      ENDDO
      SEGSUP SFAMI
      SEGSUP SGRTOT
      SEGSUP SFANOE
      SEGSUP NUMLI8

C***********************************************************************
C      Lecture des champs
C***********************************************************************
C ***** Nombre de champs a lire
      SLSCHA = 0
      CALL mfdnfd(fid, ncha4, cret)
      IF(cret .NE. 0) THEN
        moterr = 'mfdnfd'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

      ncham=ncha4

      IF (ncham .EQ. 0) GOTO 999
      SEGINI SLSCHA
      DO incham=1,ncham
C-------Nombre de composantes d'un champ
        it=incham
        CALL mfdnfc(fid, it, ncomp4, cret)
        IF(cret .NE. 0) THEN
          moterr    ='mfdnfc'
          interr(1) = cret
          CALL ERREUR(873)
          RETURN
        ENDIF

C-------Information sur le champ
        nc=1
        ncomp=ncomp4
        SEGINI,CHAINF
        CALL mfdfdi(fid, it, fname, mname, lmesh, type, CHAINF.CNAME,
     &              CHAINF.CUNIT, dtunit, nc4, cret)
        IF(cret .NE. 0) THEN
          moterr    ='mfdfdi'
          interr(1) = cret
          CALL ERREUR(873)
          RETURN
        ENDIF
        nc=nc4
        IF     (nc .GT. 1) THEN
          SEGADJ,CHAINF
        ELSEIF (nc .EQ. 0) THEN
          WRITE(IOIMP,*) '   ERREUR nc=0'
          CALL ERREUR(21)
          RETURN
        ENDIF

C       Certains fichiers MED ont des CHAMPS sans composantes nommees !
        DO icomp=1,ncomp
          IF(CHAINF.CNAME(icomp) .EQ. '                ') THEN
            CHAINF.CNAME='SCAL'
          ENDIF
        ENDDO

        DO iinc=1,nc
C---------Lecture des informations caractérisant une séquence de calcul
          it1=iinc
          CALL mfdcsi(fid, fname, it1, numdt, numit, dt, cret)
          IF(cret .NE. 0) THEN
            moterr    ='mfdcsi'
            interr(1) = cret
            CALL ERREUR(873)
            RETURN
          ENDIF
          CHAINF.INUMDT(iinc) = numdt
          CHAINF.INUMIT(iinc) = numit
          CHAINF.XDT(iinc)    = dt
        ENDDO

        SLSCHA.LISCHA(incham) = fname
c        write(IOIMP,*) 'ecriture de ', mname, 'dans LISMAI', incham
        SLSCHA.LISMAI(incham) = mname
        SLSCHA.LSCHIN(incham) = CHAINF
        SLSCHA.LSPARA(incham) = 0
      ENDDO

C ***** Recherche des paramètres numériques
      numdt = MED_NO_DT
      numit = MED_NO_IT
      CALL mprnpr(fid, npara4, cret)
      IF(cret .NE. 0) THEN
        moterr    ='mprnpr'
        interr(1) = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

      nparam=npara4
      DO iparam=1,nparam
        it1 = iparam
        CALL mprpri(fid, it1, dname, ptype, desc, dtunit, nstep, cret)
        IF (cret .NE. 0) THEN
          moterr    ='mprpri'
          interr(1) = cret
          CALL ERREUR(873)
          RETURN
        ENDIF

C-------On regarde si ça correspond à un champ existant
        CALL MEDNML(-1, 1, dname, cha64a, isca)
        CALL MEDNML(-2, 1, dname, cha64b, iscb)
        IF (isca .GT. 0 .AND. iscb .GT. 0) THEN
          CALL PLACE(SLSCHA.LISCHA, ncham, iamo, cha64b)

          IF (iamo .GT. 0) THEN
            CALL mprivr(fid, dname, numdt, numit, dval, cret)
            IF (cret .NE. 0) THEN
              moterr    ='mprivr'
              interr(1) = cret
              CALL ERREUR(873)
              RETURN
            ENDIF
            CHAPAR = SLSCHA.LSPARA(iamo)
            IF (CHAPAR .EQ. 0) THEN
              ncpars = 1
              SEGINI CHAPAR
            ELSE
              ncpars = CHAPAR.CPARVL(/1) + 1
              SEGADJ CHAPAR
            ENDIF
            CHAPAR.CPARNM(ncpars) = cha64a(1:isca)
            CHAPAR.CPARVL(ncpars) = dval
            SLSCHA.LSPARA(iamo)   = CHAPAR
          ENDIF
        ENDIF
      ENDDO

C ***** Recherche des profils et mise en place des champs à sortir
C-----Initialisation
      nbsor = 0
      nbso  = 0
      SEGINI SLSSOR

C-----Nombre de profils
      CALL mpfnpf(fid, ntprof, cret)
      IF(cret .NE. 0) THEN
        moterr    ='mpfnpf'
        interr(1) = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

      IF (ntprof .EQ. 0) ntprof = MED_GTABLE*MED_ETABLE

C-----Boucle sur tous les pas de tps de chaque champ. On suppose qu'un
C-----champ peut être défini soit sur profil soit sur le maillage total
      SEGINI LISPRO
      DO ia=1,ncham
        fname  = SLSCHA.LISCHA(ia)
        CHAINF = SLSCHA.LSCHIN(ia)
        ndt    = CHAINF.INUMDT(/1)
        cha8a   = ' '

        DO 300 idt=1,ndt
          numdt = CHAINF.INUMDT(idt)
          numit = CHAINF.INUMIT(idt)
          ip    = 0
          nprof = ntprof*MED_GTABLE*MED_ETABLE
          SEGINI CHAPRO

C---------Avec profil
C---------CHPOINT
          etype  = MED_NODE
          gtype  = MED_NONE

          CALL mfdnpf(fid, fname, numdt, numit, etype, gtype,
     &    LISPRO.DPNAME, LISPRO.LNAME, nprof, cret)
          IF(cret .NE. 0) THEN
            moterr    ='mfdnpf'
            interr(1) = cret
            CALL ERREUR(873)
            RETURN
          ENDIF
          IF (nprof .GT. 0) THEN
            DO ib=1,nprof
              ip = ip + 1
              CHAPRO.CTYPE(ip)  ='CHPOINT'
              CHAPRO.CPRONA(ip) = LISPRO.DPNAME(ib)
              CHAPRO.CETYPE(ip) = etype
              CHAPRO.CGTYPE(ip) = gtype
            ENDDO
            IF (cha8a .EQ. ' ') THEN
              cha8a = 'CHPOINT'
            ELSE
              IF (cha8a .NE. 'CHPOINT') THEN
                WRITE(IOIMP,*) '   ERREUR On voulait CHPOINT mais on a'
     & ,cha8a
                CALL ERREUR(21)
                RETURN
              ENDIF
            ENDIF
            nprof = ip
            SEGADJ CHAPRO
            CHAINF.ISCHPR(idt) = CHAPRO
            GOTO 300
          ENDIF

C---------MCHAML
          isea = 0
          DO ib=1,MED_GTABLE
            DO ic=1,MED_ETABLE
              etype  = MEDETB(ic)
              gtype  = MEDGTB(ib)
              CALL mfdnpf(fid, fname, numdt, numit, etype, gtype,
     &        LISPRO.DPNAME, LISPRO.LNAME, nprof, cret)
              IF(cret .NE. 0) THEN
                moterr    ='mfdnpf'
                interr(1) = cret
                CALL ERREUR(873)
                RETURN
              ENDIF
              IF (nprof.GT.0) THEN
                DO ie=1,nprof
                  ip = ip + 1
                  CHAPRO.CTYPE(ip)  = 'MCHAML'
                  CHAPRO.CPRONA(ip) = LISPRO.DPNAME(ie)
                  CHAPRO.CETYPE(ip) = etype
                  CHAPRO.CGTYPE(ip) = gtype
                ENDDO
                isea = 1
              ENDIF
            ENDDO
          ENDDO
          IF (isea .EQ. 1) THEN
            IF (cha8a .EQ. ' ') THEN
              cha8a = 'MCHAML'
            ELSE
              IF (cha8a .NE. 'MCHAML') THEN
                WRITE(IOIMP,*) '   ERREUR On voulait MCHAML mais on a'
     & ,cha8a
                CALL ERREUR(21)
                RETURN
              ENDIF
            ENDIF
            nprof = ip
            SEGADJ CHAPRO
            CHAINF.ISCHPR(idt) = CHAPRO
            GOTO 300
          ENDIF

C---------Sans profil
C---------CHPOINT
          etype  = MED_NODE
          gtype  = MED_NONE
          CALL mfdnva(fid, fname, numdt, numit, etype, gtype, n, cret)
          IF(cret .NE. 0) THEN
            moterr    ='mfdnva'
            interr(1) = cret
            CALL ERREUR(873)
            RETURN
          ENDIF
          IF (n.GT.0) THEN
            CHAPRO.CTYPE(1)  = 'CHPOINT'
            CHAPRO.CPRONA(1) = ' '
            CHAPRO.CETYPE(1) = etype
            CHAPRO.CGTYPE(1) = gtype
            IF (cha8a .EQ. ' ') THEN
              cha8a = 'CHPOINT'
            ELSE
              IF (cha8a .NE. 'CHPOINT') THEN
                WRITE(IOIMP,*) '   ERREUR On voulait CHPOINT mais on a'
     & ,cha8a
                CALL ERREUR(21)
                RETURN
              ENDIF
            ENDIF
            nprof = 1
            SEGADJ CHAPRO
            CHAINF.ISCHPR(idt) = CHAPRO
            GOTO 300
          ENDIF

C---------MCHAML
          isea = 0
          DO ib=1,MED_GTABLE
            DO ic=1,MED_ETABLE
              etype  = MEDETB(ic)
              gtype  = MEDGTB(ib)
              CALL mfdnva(fid,fname,numdt,numit,etype,gtype,n,cret)
              IF(cret .NE. 0) THEN
                moterr    ='mfdnpf'
                interr(1) = cret
                CALL ERREUR(873)
                RETURN
              ENDIF
              IF (n .GT. 0) THEN
                ip = ip + 1
                CHAPRO.CTYPE(ip)  = 'MCHAML'
                CHAPRO.CPRONA(ip) = ' '
                CHAPRO.CETYPE(ip) = etype
                CHAPRO.CGTYPE(ip) = gtype
                isea = 1
              ENDIF
            ENDDO
          ENDDO
          IF (isea .EQ. 1) THEN
            IF (cha8a .EQ. ' ') THEN
              cha8a = 'MCHAML'
            ELSE
              IF (cha8a .NE. 'MCHAML') THEN
                WRITE(IOIMP,*) '   ERREUR On voulait MCHAML mais on a',
     &                          cha8a
                CALL ERREUR(21)
                RETURN
              ENDIF
            ENDIF
            nprof = ip
            SEGADJ CHAPRO
            CHAINF.ISCHPR(idt) = CHAPRO
            GOTO 300
          ENDIF

C---------Champ non conforme
          IF (ip .EQ. 0) THEN
            PRINT *,'SUBROUTINE LIRMED : Champ non conforme'
            CALL ERREUR(21)
            RETURN
          ENDIF
  300   CONTINUE

C-------Sortie d'un champ
        IF (ndt .EQ. 1) THEN
          isea = 0
C---------On cherche une syntaxe de sortie
          CALL MEDNML(2, 2, fname, cha64a, isca)
          IF (isca .EQ. 0) THEN
            cha64a = fname
          ENDIF
C---------On cherche une syntaxe de fusion
          IF (nbso .EQ. 0) THEN
            nbso = nbso + 1
            IF (nbso .GT. nbsor) THEN
              nbsor = nbsor + 20
              SEGADJ SLSSOR
            ENDIF
          ELSE
            CALL PLACE(SLSSOR.CHANOM, nbso, iamo, cha64a)
            IF (iamo .EQ. 0) THEN
              nbso = nbso + 1
              IF (nbso .GT. nbsor) THEN
                nbsor = nbsor + 20
                SEGADJ SLSSOR
              ENDIF
            ELSE
              cha8b = SLSSOR.CHATYP(iamo)
              IF (cha8b .NE. cha8a) THEN
                WRITE(IOIMP,*) '   ERREUR cha8b different de cha8a'
                WRITE(IOIMP,*) '         ', cha8a, cha8b
                CALL ERREUR(21)
                RETURN
              ENDIF
              nbso = iamo
              isea = 1
            ENDIF
          ENDIF
C---------On rempli l'information
          IF (isea .EQ. 0) THEN
            nbfus = 1
            SEGINI SLSFUS
            SLSFUS.CHAFUS(nbfus) = ia
            SLSSOR.CHATYP(nbso)  = cha8a
            SLSSOR.CHANOM(nbso)  = cha64a
            SLSSOR.CHALIS(nbso)  = SLSFUS
          ELSE
            SLSFUS = SLSSOR.CHALIS(nbso)
            nbfus  = SLSFUS.CHAFUS(/1) + 1
            SEGADJ SLSFUS
            SLSFUS.CHAFUS(nbfus) = ia
          ENDIF
C-------Sortie d'une TABLE
        ELSE
          isea1 = 0
          isea2 = 0
C---------On cherche une syntaxe de sortie
          CALL MEDNML(2, 2, fname, cha64a, isca)
          IF (isca .EQ. 0) THEN
            cha64a = fname
          ENDIF
          CALL MEDNML(3, 3, fname, cha64b, iscb)
          IF (iscb .EQ. 0) THEN
            cha64b = fname
          ENDIF
C---------On cherche une syntaxe de fusion
          IF (nbso .EQ. 0) THEN
            nbso = nbso + 1
            IF (nbso .GT. nbsor) THEN
              nbsor = nbsor + 20
              SEGADJ SLSSOR
            ENDIF
          ELSE
            CALL PLACE(SLSSOR.CHANOM, nbso, iamo, cha64a)
            IF (iamo .EQ. 0) THEN
              nbso = nbso + 1
              IF (nbso .GT. nbsor) THEN
                nbsor = nbsor + 20
                SEGADJ SLSSOR
              ENDIF
            ELSE
              cha8b = SLSSOR.CHATYP(iamo)
              IF (cha8b .NE. 'TABLE') THEN
                WRITE(IOIMP,*) '   ERREUR On voulait TABLE mais on a'
     & ,cha8b
                CALL ERREUR(21)
                RETURN
              ENDIF
              nbso  = iamo
              isea1 = 1
            ENDIF
          ENDIF
C---------On rempli l'information
          nbso1  = nbso
          nbsor1 = nbsor

          IF (isea1 .EQ. 0) THEN
            nbsor = 1
            SEGINI SLSSO1
            nbfus = 1
            SEGINI SLSFUS
            SLSFUS.CHAFUS(nbfus) = ia
            SLSSO1.CHATYP(nbsor) = cha8a
            SLSSO1.CHANOM(nbsor) = cha64b
            SLSSO1.CHALIS(nbsor) = SLSFUS
            SLSSOR.CHATYP(nbso1) = 'TABLE'
            SLSSOR.CHANOM(nbso1) = cha64a
            SLSSOR.CHALIS(nbso1) = SLSSO1
          ELSE
            SLSSO1 = SLSSOR.CHALIS(nbso1)
            nbsor  = SLSSO1.CHALIS(/1)
            CALL PLACE(SLSSO1.CHANOM, nbsor, iamo, cha64b)
            IF (iamo .EQ. 0) THEN
              nbsor = nbsor + 1
              SEGADJ SLSSO1
            ELSE
              cha8b = SLSSO1.CHATYP(iamo)
              IF (cha8b .NE. cha8a) THEN
                WRITE(IOIMP,*) '   ERREUR cha8b different de cha8a'
                WRITE(IOIMP,*) '         ', cha8a, cha8b
                CALL ERREUR(21)
                RETURN
              ENDIF
              nbsor = iamo
              isea2 = 1
            ENDIF

            IF (isea2 .EQ. 0) THEN
              nbfus = 1
              SEGINI SLSFUS
              SLSFUS.CHAFUS(nbfus) = ia
              SLSSO1.CHATYP(nbsor) = cha8a
              SLSSO1.CHANOM(nbsor) = cha64b
              SLSSO1.CHALIS(nbsor) = SLSFUS
            ELSE
              SLSFUS = SLSSO1.CHALIS(nbsor)
              nbfus  = SLSFUS.CHAFUS(/1) + 1
              SEGADJ SLSFUS
              SLSFUS.CHAFUS(nbfus) = ia
            ENDIF
          ENDIF

          nbso  = nbso1
          nbsor = nbsor1
        ENDIF

      ENDDO
      SEGSUP LISPRO

C***********************************************************************
C      Ecriture des champs
C***********************************************************************
      DO ia=1,nbso
        cha8a  = SLSSOR.CHATYP(ia)
        cha64a = SLSSOR.CHANOM(ia)
c        WRITE(IOIMP,*) ia, ' nom ', cha64a, ' type ',cha8a
        isor   = 0

        IF (cha8a .EQ. 'CHPOINT') THEN
          SLSFUS = SLSSOR.CHALIS(ia)
          CALL LMDCHP(fid, MTABLE, nbnoin, SLSCHA, SLSFUS, 1, isor)
          IF (IERR.NE.0) RETURN
        ELSEIF (cha8a .EQ. 'MCHAML') THEN
          SLSFUS = SLSSOR.CHALIS(ia)
          CALL LMDCHM(fid, MTABLE, SLSCHA, SLSFUS, 1, isor)
          IF (IERR.NE.0) RETURN
        ELSEIF (cha8a .EQ. 'TABLE') THEN
          SLSSO1 = SLSSOR.CHALIS(ia)
          CALL LMDTAB(fid, MTABLE, nbnoin, SLSCHA, SLSSO1, isor)
          IF (IERR.NE.0) RETURN
        ENDIF

        CALL ECCTAB(MTABLE,'MOT',IVALIN,XVALIN,cha64a,LOGIN,IOBIN,
     &                     cha8a,IVALRE,XVALRE,CHARRE,LOGRE,isor)

      ENDDO

C***********************************************************************
C     Ecriture de la TABLE Résultat
C***********************************************************************
  999   CONTINUE
      SEGDES,MTABLE
      CALL ECROBJ('TABLE   ',MTABLE)

C***********************************************************************
C     Fermeture du fichier .med
C***********************************************************************
      CALL MFICLO(fid, cret)
      IF(cret .NE. 0) THEN
        moterr = 'mficlo'
        interr(1)  = cret
        CALL ERREUR(873)
        RETURN
      ENDIF

C***********************************************************************
C     Nettoyage
C***********************************************************************
      IF (SLSCHA .GT. 0) SEGSUP,SLSCHA
      IF (SLSSOR .GT. 0) SEGSUP,SLSSOR

      END

