C LDMT3     SOURCE    PV        19/03/07    21:15:01     10149
      SUBROUTINE LDMT3(MMATRX,PREC)
      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)
C  TANT QUE OOOVAL(1,4) NE MARCHE PAS SUR CRAY
      PARAMETER (LPCRAY=10000)
      INTEGER OOOVAL,OOOLEN
      dimension ittime(4)
      POINTEUR LIG2.LIGN, LIG3.LIGN
      POINTEUR L.LLIGN,   M.LLIGN
      POINTEUR LL.MILIGN, MM.MILIGN, LILIGN.MILIGN
      POINTEUR LLL.LIGN,   MMM.LIGN
      SEGMENT ITEMP
         REAL*8 P(INC)
      ENDSEGMENT
C      POINTEUR R.ITEMP,W.ITEMP
C
C  ****  MISE SOUS FORME A=L D Mt  DE LA MATRICE MMATRX
C
-INC CCOPTIO
-INC CCREEL
-INC SMMATRI

-INC CCASSIS
-INC CCHOLE
      SEGMENT KIVPO(IIMAX)
      SEGMENT KIVLO(IIMAX)
      SEGMENT ITMASM(NBLIG)
      SEGMENT ITMASL(NBLIGI)
      SEGMENT IMASQ(LMASQ)
      SEGMENT IMASQI(LMASQI)
      external chole3i
      SAVE IPASV
      DATA IPASV/0/
C     character*8 zen
C     equivalence (zen,izen)
**    write (6,*) ' prec ',prec

      call timespv(ittime)
      kcour=(ittime(1)+ittime(2))/10
      kcourp=kcour
      kcouri=kcour
      kdiff=0
      kcour=0
      perf=0.d0
      perfp=-1
      nbchan=1
      nbopit=0
      iposm=0
C     zen='CPU'//char(0)
C     le=4
      lolig=0
      nvaor=0
      nvaori=0
      nbthro=nbthrs
      ithrd=0
      if (nbthro.gt.1) then
       ithrd=1
       call threadii
      endif
      nbthr=nbthro
      do ith=1,nbthro
       nbop(ith)=0
      enddo

C  nouvelle methode de gestion de l'espace memoire necessitee par la parallelisation
C  memoire vive totale
      MACTIT=OOOVAL(1,1)
C  un bloc de memoire fera au plus macti/2
      nvstrm=0
      MMATRI=MMATRX
      SEGACT,MMATRI*MOD
      PRCHLV=PREC
      LL    =IILIGN
      MM    =IILIGS
      SEGACT,    MM*MOD,LL*MOD
      INO=MM.ILIGN(/1)
      MDIAG=IDIAG
      SEGACT,MDIAG*MOD
      NBLIG=INO
      NBLIGI=INO
      SEGINI ITMASM,ITMASL
      precc=prec
      INC=DIAG(/1)
      nvstrm=inc
C      INCC=INC
      MIMIK=IIMIK
      MINCPO=IINCPO
      SEGACT,MINCPO,MIMIK
      IPLUMI=IMIK(/2)*2 +4
      IL2=0
      IIMAX=IJMAX+IPLUMI
      SEGINI KIVPO,KIVLO
      INEG=0
      NBLAG=0
      NENSLX=0
      NVSTOC=0
      NVSTOR=0
      NVSTIC=0
      NVSTIR=0
      diagmax=xpetit/xzprec
      diagmin=xgrand
      do i=1,diag(/1)
       if (ll.ittr(i).eq.0) diagmax=max(diagmax,abs(diag(i)))
       if (ll.ittr(i).eq.0.and.abs(diag(i)).gt.xpetit/xzprec)
     >   diagmin=min(diagmin,abs(diag(i)))
      enddo
**     write (6,*) ' chole diagmin diagmax ',diagmin,diagmax,diag(/1)
      if (diagmax.le.xpetit/xzprec) then
         do i=1,diag(/1)
           diagmax=max(diagmax,abs(diag(i)))
           if (abs(diag(i)).gt.xpetit/xzprec)
     >       diagmin=min(diagmin,abs(diag(i)))
         enddo
      endif
      diagmin=min(diagmin,diagmax)
**     write (6,*) ' chole diagmin diagmax ',diagmin,diagmax,diag(/1)
*  ngmaxy vient de option
*  ngmaxx est la valeur autoajustee
*  ngmaxz est la valeur utilisee dans les tests (grande si il y a du debordement)
      ngmaxx=ngmaxy*2
      NGMAXZ=NGMAXX

C
C  **** DEBUT DE LA TRIANGULARISATION. ON PREND NOEUD A NOEUD,
C  **** DECOMPACTAGE PUIS TRAVAIL SUR LES LIGNES DU NOEUDS
C
C  ****  LA LONGUEUR DE LA PLUS GRANDE LIGNE EST DONNEE PAR IMAX
C
  1   CONTINUE
      IVALMA=IJMAX+IPLUMI
      IL1=IL2+1
      IVALMI=IJMAX+IPLUMI
      IMINM=IL1
      IMINL=IL1

      mactic=0
      DO 2 I=IL1,INO

      M    = MM.ILIGN(I)
      SEGACT /ERR=3/M
      NA=M.IMMMM(/1)
      NBPAR=NA+1
      NVALL=M.NJMAX
      NVALLL=NVALL
      lolig=nvall/na+1
      if (lolig.gt.6000.and.lolig.gt.2*loligp.and.
     >  mactic.gt.NGMAXZ*nbthro/2    .and.
     >  i-il1.ge.nbthro) goto 3
        loligp=lolig
      mmm=0
      lll=0
      imasq=0
      imasqi=0
      SEGINI /ERR=3/MMM

      L    = LL.ILIGN(I)
      SEGACT /ERR=3/L
      NA=L.IMMMM(/1)
      NBPAR=NA+1
      NVALL= L.NJMAX
      NVILL=NVALL
      lolig=nvall/na+1
      if (lolig.gt.6000.and.lolig.gt.2*loligp.and.
     >  mactic.gt.NGMAXZ*nbthro/2    .and.
     >  i-il1+1.ge.nbthro) goto 3
        loligp=lolig
      lll=0
      SEGINI /ERR=3/LLL
C  recuperer la longueur du segment
      mactic=mactic+ooolen(MMM)+ooolen(LLL)
      if ((mactic.gt.mactit/2.or.mactic.gt.mactit-nvstrm*12)
     >  .AND.I.GT.IL1) THEN
         SEGSUP LLL ,MMM
         GOTO 3
      endif
      NVSTOC=NVSTOC + NVALLL
      IVALMA=IVALMA + NVALLL
      NVSTIC=NVSTIC + NVALL
      IVALMI=IVALMI + NVALL
      NVALL=NVALLL

      nvaor = nvaor + M.XXVA(/1)
      nvaori= nvaori+ L.XXVA(/1)
C
C  ****  DECOMPACTAGE
C
      LMASQ=NVALL/MASDIM+2
      LMASQI=NVALLL/MASDIM+2
      IMASQ=0
      SEGINI /ERR=3/ IMASQ
C      WRITE(6,*)'Apres SEGINI, IMASQ(/1)=',IMASQ(/1),IMASQ
      IMASQI = 0
      SEGINI /ERR=3/ IMASQI

      IPA=1
      NA=M.IMMMM(/1)
      DO 121 JPA=1,NA
        MMM.IVPO(JPA)=IPA
        KPA = M.IPPO(JPA+1)-M.IPPO(JPA)
        IPP = M.IPPO(JPA)
        MMM.IPPVV(JPA)=IPA-1
        LPA  = M.LDEB(JPA)
        LPA1 = LPA-IPA

        DO 122 MPA=1,KPA
          LLO  = M.LINC(MPA+IPP)
          IPLA = LLO -LPA1
          MMM.VAL(IPLA)=M.XXVA(MPA+IPP)
              IMASQ(IPLA/MASDIM+1)=1
          if (ipla-ipa+1.ge.1) IMASQ((IPLA-ipa+1)/MASDIM+1)=1
122     CONTINUE

        IPA=IPA+M.IMMMM(JPA)-LPA + 1
Cpv        MMM.IMMM(JPA)=MM.IPNO(LPA)
        MMM.IMMM(JPA)=LPA
        IF(IMINM  .GT.MM.IPNO(LPA )) IMINM  = MM.IPNO(LPA)

121   CONTINUE

* indexation de imasq
        ipln=lmasq/na
        iplp=lmasq/na
        do 123 ipl=lmasq/na,1,-1
          if (imasq(ipl).gt.0) then
            imasq(ipl)=iplp*masdim
            ipln=ipl-1
          else
            imasq(ipl)=-ipln*masdim
            iplp=ipl-1
          endif
 123    continue
**      write (6,*) ' imasq ',lmasq/na
**      write (6,*) (imasq(ipl),ipl=1,lmasq/na)

      IPI=1
      NA=L.IMMMM(/1)
      DO 1210 JPA=1,NA
        LLL.IVPO(JPA)=IPI
        KPI =L.IPPO(JPA+1)-L.IPPO(JPA)
        IPPI=L.IPPO(JPA)
        LLL.IPPVV(JPA)=IPI-1
        LPAI =L.LDEB(JPA)
        LPA1I=LPAI-IPI

        DO 1220 MPA=1,KPI
          LLO=L.LINC(MPA+IPPI)
          IPLA=LLO-LPA1I
          LLL.VAL(IPLA)=L.XXVA(MPA+IPPI)
              IMASQI(IPLA/MASDIM+1)=1
          if (ipla-ipi+1.ge.1) IMASQI((IPLA-ipi+1)/MASDIM+1)=1
1220    CONTINUE

        IPI=IPI+L.IMMMM(JPA)-LPAI+ 1
Cpv        LLL.IMMM(JPA)=LL.IPNO(LPAI)
           LLL.IMMM(JPA)=LPAI
        IF(IMINL.GT.LL.IPNO(LPAI)) IMINL= LL.IPNO(LPAI)
1210   CONTINUE
C*** **** ****
* indexation de imasq
        ipln=lmasq/na
        iplp=lmasq/na
        do 1230 ipl=lmasq/na,1,-1
          if (imasqi(ipl).gt.0) then
            imasqi(ipl)=iplp*masdim
            ipln=ipl-1
          else
            imasqi(ipl)=-ipln*masdim
            iplp=ipl-1
          endif
 1230    continue
**      write (6,*) ' imasqi ',lmasq/na
**      write (6,*) (imasqi(ipl),ipl=1,lmasq/na)

      ITMASM(I)=IMASQ
      NA=M.IMMMM(/1)
      if (NA.gt.0) then
        MMM.IPREL=M.IMMMM(1)
        MMM.IDERL=M.IMMMM(NA)
        mm.lcara(2,i)=mmm.iprel
        mm.lcara(3,i)=mmm.iderl
      endif
      MMM.IPPVV(NA+1)=IPA-1

      ITMASL(I)=IMASQI
      NA=L.IMMMM(/1)
      if (NA.gt.0) then
        LLL.IPREL=L.IMMMM(1)
        LLL.IDERL=L.IMMMM(NA)
        ll.lcara(2,i)=lll.iprel
        ll.lcara(3,i)=lll.iderl
      endif
      LLL.IPPVV(NA+1)=IPI-1

      SEGSUP L,M
      LL.ILIGN(I)=LLL
      MM.ILIGN(I)=MMM
      nbths=nbthr
C*    write (6,*) 'longueur ligne ',nvall
C nb de ligne multiple du nb de threads
C blocage ligne lecture-ecriture pour minimiser le cache
      if (mod(i+1-il1,nbths).eq.0
     >  .and.mactic.gt.NGMAXZ*nbthro.OR.I+1-il1.gt.1000)  then
         il2=i
         GOTO 4
      endif


    2 CONTINUE
      IL2=INO
      GO TO 4
    3 IL2=I-1
      if (imasq.eq.0.or.imasqi.eq.0.or.lll.eq.0.or.mmm.eq.0) then
        if (imasq.ne.0) segsup imasq
        if (imasqi.ne.0) segsup imasqi
        if (lll.eq.0) segsup lll
        if (mmm.ne.0) segsup mmm
      endif
    4 CONTINUE
      nbthro=nbthrs
      if (mactic.le.50000) nbthro=1
      nbthr=nbthro
C      WRITE(IOIMP,*) 'Mactic = ', mactic, nbthr
C
      IF(IL2.GE.IL1) GO TO 40
C
C ****  APPEL AUX ERREURS  MESSAGE PAS ASSEZ DE PLACE MEMOIRE
C
C      ITYP=48
      CALL ERREUR(48)
      if (ithrd.eq.1) call threadis
      RETURN
   40 CONTINUE
      IM=INC
      DO 352 IH=IL2,IL1,-1
        MMM=MM.ILIGN(IH)
        IL=INC
        DO 354 JH=1,MMM.IMMM(/1)
          IM=MIN(IM,MMM.IMMM(JH))
          IL=MIN(IL,MMM.IMMM(JH))
  354   CONTINUE

        MMM.IML=IL
        MMM.IMM=MM.ipno(IM)
  352 CONTINUE
C  353 CONTINUE
      MMM=MM.ILIGN(IL1)
      IL11=MMM.IPREL

      IM=INC
      DO 3520 IH=IL2,IL1,-1
        LLL=LL.ILIGN(IH)
        IL=INC
        DO 3540 JH=1,LLL.IMMM(/1)
          IM=MIN(IM,LLL.IMMM(JH))
          IL=MIN(IL,LLL.IMMM(JH))
 3540   CONTINUE

        LLL.IML=IL
        LLL.IMM=LL.ipno(IM)
 3520 CONTINUE
C 3530 CONTINUE
      LLL=LL.ILIGN(IL1)
      IL22=LLL.IPREL
C
C  ****  BOUCLE  *5*  TRAVAILLE SUR LE NOEUD I QUI EST EN LECTURE
C
C      lig1=MM.ilign(IMINM)
C      lig2=LL.ilign(IMINL)

      ipos=0
      iper=IMINM
      ider=IMINM-1
      iderac=IMINM-1
       if (ngmaxz.lt.ngmaxx*4) ngmaxz=ngmaxx*2
      macsec=0
      isec=0


      IMINA=MIN(IMINM,IMINL)
      IMIN = IMINA
      DO 5 I=IMINA,IL2
        IMASQ =ITMASM(I)
        IMASQI=ITMASL(I)
        LIG1=MM.ILIGN(I)
        LIG2=LL.ILIGN(I)
        IF(I.LT.IL1)  GO TO 7
C
C       ******* LE NOEUD I EST EN MEMOIRE IL EST TRIANGULE JUSQU'A
C       ******* IPREL  IL FAUT CONTINUER TOUTE LES LIGNES PUIS CALCULER
C       ******* LE TERME DIAGONAL
C

C       on s'occupe d'abord de la partie superieur
        LIGN=LIG1
        NAA= IMMM(/1)

        DO 156 KHG=1,NAA
        LIGN=LIG1
        II=IPREL-1+KHG
        IMMM(KHG)=0
        NN1=IPPVV(KHG+1)
        NNM1=IPPVV(KHG)
        NNM1S=NNM1
        N=NN1-NNM1
        DIAG(II)=VAL(NN1)
        IF(N.EQ.1)  GO TO 8
        NMI=N-II
        IDEP=MAX(IL11,2-NMI)
        KIDEP=IDEP+NMI
        KI1=N-1
        KQ=-NMI
C        WRITE(IOIMP,*)'Avant CHOLI1, Imasq(/1)=',Imasq(/1)
*        WRITE(IOIMP,*)'Avant CHOLI1-1 ',val(nn1)
        diagref=0.d0
        VAL(NN1)=VAL(NN1)+
     #  CHOLI1(LL.ILIGN,LIG2,LIG1.VAL(1+IPPVV(KHG)),DIAG(1-NMI),
     #   LL.IPNO(1-NMI),LIG1.IPPVV(1),KHG,LIG1.IVPO(1),KIDEP,KI1,
     #   KQ,IMASQ(1),1+IPPVV(KHG),PREC,1,nbop(1),diagref)
         imasq(nn1/masdim+1)=1
         imasq(n/masdim+1)=1
   8    CONTINUE

        LIGN=LIG2
        II=IPREL-1+KHG
        IMMM(KHG)=0
        NN2=IPPVV(KHG+1)
        NNM1=IPPVV(KHG)
        N=NN2-NNM1
        IF(N.EQ.1)  GO TO 88
        NMI=N-II
        IDEP=MAX(IL22,2-NMI)
        KIDEP=IDEP+NMI
        KI1=N-1
        KQ=-NMI
*        WRITE(IOIMP,*)'Avant CHOLI1-2 ',val(nn2)
        VAL(NN2)=VAL(NN2)+
     #  CHOLI1(MM.ILIGN,LIG1,LIG2.VAL(1+IPPVV(KHG)),DIAG(1-NMI),
     #   MM.IPNO(1-NMI),LIG2.IPPVV(1),KHG,LIG2.IVPO(1),KIDEP,KI1,
     #   KQ,IMASQI(1),1+IPPVV(KHG),PREC,2,nbop(1),diagref)
         IMASQI(nn2/masdim+1)=1
         IMASQI(n/masdim+1)=1
  88    CONTINUE
        LIGN=LIG1
        diagref=max(abs(diag(ii)),diagmin)
        diagcmp=diagref*1d-10
        IF(LL.ITTR(II).EQ.0.AND.
     &   ABS(LIG2.VAL(NN2)).GT.diagcmp)  GO TO 12
        IF(LL.ITTR(II).NE.0.AND.
     &   ABS(LIG2.VAL(NN2)).GT.diagcmp)  GO TO 12
C       il faut mettre une valeur plus grande sur les LX car on a un probleme de conditionnement
C       sur le calcul des reactions en cas de 2 relations presque identique
C
C       **** ON VIENT DE DETECTER UN MODE D'ENSEMBLE
C       **** ON AJOUTE A LA STRUCTURE UN RESSORT EGAL A CELUI QUI EXISTAIT
C       **** AU PREALABLE SUR CETTE INCONNUE.
C
**         write (6,*) ' ldmt3 mode d ensemble ittr ligne ',
**   >      ll.ittr(ii),ii,diag(ii),val(nn2)
C       on garde le signe car il fau un moins sur les ML

        if(LL.ittr(ii).NE.0) then
         LIG2.VAL(NN2)=LIG2.VAL(NN2)-4.D0*diagref
         NENSLX=NENSLX+1
        else
         LIG2.VAL(NN2)=diagref
        endif
        NENS=NENS+1
        LIG2.IMMM(KHG)=NENS
        LIG1.IMMM(KHG)=NENS
   12   CONTINUE


        DIAG(II)=LIG2.VAL(NN2)
        IF(DIAG(II).NE.0.D0)  GO TO 41

        KQ1=1+NNM1S
        KQN=N+NNM1S
        DO 16 LFG=KQ1,KQN
          IF(LIG1.VAL(LFG).NE.0.D0)  GO TO 17
   16   CONTINUE

        KQ1=1+NNM1
        KQN=N+NNM1
        DO 160 LFG=KQ1,KQN
          IF(LIG2.VAL(LFG).NE.0.D0)  GO TO 170
  160   CONTINUE

        DIAG(II)=1.D0
        if (LL.ittr(ii).ne.0) diag(ii)=-1.D0
        LIG2.VAL(NN2)=DIAG(II)
        GO TO 41
   17   CONTINUE
C       write (6,*) ' ldmt3 apres 17 ',val(lfg)
        diag(ii)=LIG1.VAL(LFG)
        goto 171
  170  CONTINUE
        diag(ii)=LIG2.VAL(LFG)
  171  continue
        if (LL.ittr(ii).ne.0) diag(ii)=-abs(diag(ii))
***     LIG2.val(nn2)=diag(ii)
        GOTO 41
C
C       ****  ENVOI ERREUR MATRICE SINGUIERE
C
C        ITYP=49
        INTERR(1)=I
        CALL ERREUR(49)
        if (ithrd.eq.1) call threadis
        RETURN
C
C       ****  ON COMPTE LE NOMBRE DE TERMES DIAGONAUX NEGATIFS
C             ET LE NOMBRE DE MULTIPLICATEUR DE LAGRANGE
C
   41   IF(DIAG(II).LT.0.D0)  INEG=INEG+1
        IF(LL.ITTR(II).NE.0) NBLAG=NBLAG+1
        LIG1.VAL(NN1)=DIAG(ii)
  156   CONTINUE
C
C       RECOMPACTAGE DE LIGN (DEJA ENTIEREMENT TRAITEE)
C       d'abord la triangulaire superieure
C
        NA=LIG1.IMMM(/1)
        NBPAR=NA+1
        if (na.gt.0)
     >  CALL COMPAC(LIG1.VAL(1),NBPAR,KIVPO(1),KIVLO(1),
     #      NVALL,LIG1.IPPVV(1),IZROSF,NA,PREC,imasq(1),
     #      LIG1.IPREL,LIG1.IDERL)
          segsup IMASQ
          IMASQ=ITMASM(I)

C       on recree lig1 car la compacter en place emiette la memoire
       lig3=lig1
       segini /err=1431/ lig3
 1431  continue
       do it=1,nvall
        lig3.val(it)=lig1.val(it)
       enddo
       do it=1,na
        lig3.immm(it)=lig1.immm(it)
        lig3.ippvv(it)=lig1.ippvv(it)
       enddo
        lig3.ippvv(na+1)=lig1.ippvv(na+1)
        lig3.iml=lig1.iml
        lig3.iprel=lig1.iprel
        lig3.iderl=lig1.iderl
        mm.lcara(1,i)=lig3.iml
        mm.lcara(2,i)=lig3.iprel
        mm.lcara(3,i)=lig3.iderl
        if (lig3.ne.lig1) then
          segsup lig1
        else
          segadj lig3
        endif
        lig1=lig3
        mm.ilign(i)=lig3
        NVSTOR=NVSTOR+NVALL
        nvstrm=max(nvstrm,nvall)
        DO 143 LHG=1,NBPAR
         LIG1.IVPO(2*LHG-1)=KIVPO(LHG)
         LIG1.IVPO(2*LHG)  =KIVLO(LHG)
 143    CONTINUE
C
C       RECOMPACTAGE DE LIGN (DEJA ENTIEREMENT TRAITEE)
C       puis la triangulaire inférieure
C
        NA=LIG2.IMMM(/1)
        NBPAR=NA+1
        if (na.gt.0)
     >  CALL COMPAC(LIG2.VAL(1),NBPAR,KIVPO(1),KIVLO(1),
     #      NVILL,LIG2.IPPVV(1),IZROSF,NA,PREC,imasqi(1),
     #      LIG2.IPREL,LIG2.IDERL)
          segsup IMASQI
          IMASQI=ITMASL(I)

        NVALL=NVILL
C       on recree lig2 car la compacter en place emiette la memoire
C        WRITE(IOIMP,*) 'Valeur de LIG2', LIG2
       lig3=lig2
       segini /err=1432/ lig3
 1432  continue
       do it=1,nvall
        lig3.val(it)=lig2.val(it)
       enddo
       do it=1,na
        lig3.immm(it)=lig2.immm(it)
        lig3.ippvv(it)=lig2.ippvv(it)
       enddo
        lig3.ippvv(na+1)=lig2.ippvv(na+1)
        lig3.iml=lig2.iml
        lig3.iprel=lig2.iprel
        lig3.iderl=lig2.iderl
        ll.lcara(1,i)=lig3.iml
        ll.lcara(2,i)=lig3.iprel
        ll.lcara(3,i)=lig3.iderl
        if (lig3.ne.lig2) then
          segsup lig2
        else
          segadj lig3
        endif
        lig2=lig3
        ll.ilign(i)=lig2
        NVSTIR=NVSTIR+NVILL
        nvstrm=max(nvstrm,nvIll)
        DO 1430 LHG=1,NBPAR
          LIG2.IVPO(2*LHG-1)=KIVPO(LHG)
          LIG2.IVPO(2*LHG)  =KIVLO(LHG)
1430    CONTINUE





      IF (I.GT.1) THEN
       LIG1=MM.ILIGN(I-1)
       LIG2=LL.ILIGN(I-1)
       SEGDES LIG1,LIG2
       IDERAC=MIN(IDERAC,I-2)
      ENDIF

C
C       ****  ON TRIANGULARISE LES AUTRES LIGNES
C

        IL1=IL1+1
        IF (IL1.GT.IL2) GOTO 5
        LIG1=MM.ILIGN(I)
        LIGN=MM.ILIGN(IL1)
        IL11=IPREL
        LIG2=LL.ILIGN(I)
        LIGN=LL.ILIGN(IL1)
        IL22=IPREL
        GOTO 7
C  72    CONTINUE
  71    CONTINUE
      if (iper.gt.ider) then
        call erreur(48)
        return
      endif


        IF (I.LT.IL1-10) THEN
          NGMAXZ= INT((OOOVAL(1,1)/NBTHS)*0.95)
C**       WRITE (6,*) ' PASSAGE AU  GRAND NGMAX ',I,IL1,IL2,NGMAXZ
        ENDIF
        IF (ISEC.NE.0) IDER=ISEC
        MACSEC=0
        ISEC=0
C        SOIT PARCE QU'ON A FINI, SOIT PARCE QU'ON MANQUE DE MEMOIRE
C        IL FAUT EXECUTER LES LIGNES ACTIVEES PUIS LES DESACTIVER
C        LANCER LES CHOLE3 ET ATTENDRE QU'ILS SOIENT FINIS
        IF (IPOS.NE.0) THEN
C         WRITE (6,*) ' LANCEMENT THREAD ',IPER,IDER,IL1,IL2
          IF (IPER.GT.IDER) THEN
            WRITE (6,*) ' ERREUR INTERNE CHOLE '
            CALL ERREUR(5)
          ENDIF
C          WRITE (6,*) ' NBTHR-2 ',NBTHR


          NBTHR=MIN(NBTHR,IL2-IL1+1)
C          WRITE (6,*) ' NBTHR-3 ',NBTHR
          IF (NBTHR.GE.1) THEN
            MILIGN=MM
            LILIGN=LL
C            Write(6,*) 'ldmt3.eso On passe LL dans LILIGN : ', LILIGN
            ITMASQ=ITMASM
            DO ITH=2,NBTHR
              CALL THREADID(ITH,CHOLE3I)
            ENDDO
            CALL CHOLE3I(1)
            DO ITH=2,NBTHR
              CALL THREADIF(ITH)
            ENDDO

            MILIGN=LL
            LILIGN=MM
C            Write(6,*) 'ldmt3.eso On passe MM dans LILIGN : ', LILIGN
            ITMASQ=ITMASL
            DO ITH=2,NBTHR
              CALL THREADID(ITH,CHOLE3I)
            ENDDO
            CALL CHOLE3I(1)
            DO ITH=2,NBTHR
              CALL THREADIF(ITH)
            ENDDO

          ELSE
            MILIGN=MM
            LILIGN=LL
            ITMASQ=ITMASM
            DO ITH=1,NBTHR
              CALL CHOLE3I(ITH)
            ENDDO

            MILIGN=LL
            LILIGN=MM
            ITMASQ=ITMASL
            DO ITH=1,NBTHR
              CALL CHOLE3I(ITH)
            ENDDO
          ENDIF
        ENDIF
*  test ctrlC
      if (ierr.ne.0) goto 9999

        IPOSM=MAX(IPOSM,IPOS)
        IPOS=0
        IDERF=IDER-1
        IF (IDER.NE.IL1-1) IDERF=IDER
        DO IL=IDERF,IPER,-1
          LIGN=MM.ILIGN(IL)
          SEGDES LIGN
          LIGN=LL.ILIGN(IL)
          SEGDES LIGN
C         WRITE (6,*) ' DESACTIVATION LIGNE & COLONNE ',IL
        ENDDO
        IDERAC=MIN(IDERAC,IPER-1)
        IPER=IDER+1
C       WRITE (6,*) ' IPER IDER IL1 ',IPER,IDER,IL1
        IF (IPER.NE.IL1) GOTO 7
        GOTO 5
    7   CONTINUE


C       BLOCAGE SECONDAIRE SUR LES LIGNES EN LECTURE POUR MINIMISER LE CACHE
**    if (isec.le.iper+nbthrs) then
**      if (macsec.gt.ngmaxz*nbthrs*2) then
**       isec=i-1
C  on continue a activer pour voir si on doit passer en mode lent
**       goto 72
**      endif
**    endif
C*      IF (I.GT.IDERAC) SEGACT/ERR=71/LIG1
        SEGACT/ERR=71/LIG1
        SEGACT/ERR=71/LIG2
C        macsec=macsec+ooolen(lig1)+ooolen(lig2)
        IPOS=IPOS+1
        IDER=I
        IF (I.GT.IDERAC) IDERAC=I
        IF (I.EQ.IL1-1)   GOTO 71
    5 CONTINUE

      DO 11 I=IL1,IL2
        LLL=LL.ILIGN(I)
        MMM=MM.ILIGN(I)
C        Write(6,*)'     SEGDES de LLL, MMM : ',LLL,MMM
        SEGDES,LLL,MMM
   11 CONTINUE
      nbopt=0
      do ith=1,nbthro
       nbopt=nbopt+nbop(ith)
       nbop(ith)=0
      enddo
      nbopin=nbopt
      nbopit=nbopit+nbopin
      call timespv(ittime)
      kcourp=kcour
      kcour=(ittime(1)+ittime(2))/10
      kdiff=kcour-kcourp
**      write (6,*) ' nb operation temps ',nbopin,kdiff
      if (kdiff.gt.5) then
       perf=nbopin/kdiff
**     write (6,*) 'perf ngmaxy il1 il2',perf,ngmaxy,il1i,il2
       if (perf.lt.perfp*0.90 .and.nbchan.ne.1  ) then
         nbchan=1
         ngmaxx=ngmaxx*0.90
         perfp=perf
       elseif (nbchan.eq.0) then
         nbchan=-1
        ngmaxx=ngmaxx*1.10
        perfp=max(perf,perfp)
       else
        nbchan=0
       endif
**    nbchan=0
       ngmaxx=max(10000,min(100000000,ngmaxx))
       ngmaxz=ngmaxx
       endif

      iderac=min(iderac,il1-1)
      macsec=0
      isec=0
      IF(IL2.LT.INO)  GO TO 1
C     ON MET A JOUR LE NOMBRE DE TERMES DIAGONAUX NEGATIF
C     ON ENLEVE LE NOMBRE DE MULTIPLICATEUR DE LAGRANGE
C       INEG=INEG-NBLAG
C     on ne compte pas 2 fois les multiplicateurs qui vont etre
C     elimines lors de la resolution car mode d'ensemble
      INEG=INEG-(NBLAG-NENSLX)
      if (iimpi.ne.0.and.NENSLX.gt.0) WRITE(IOIMP,4820) NENSLX
 4820 FORMAT(I12,' MODES D ENSEMBLE PORTANT SUR DES MULTIPLICATEURS',
     1' DE LAGRANGE DETECTES')

      IF (IIMPI.EQ.1) WRITE(IOIMP,4821) NVSTOC+NVSTIC
 4821 FORMAT( ' NOMBRE DE VALEURS  DANS LE PROFIL',I12)
      IF (IIMPI.EQ.1) WRITE(IOIMP,4822) NVSTOR+NVSTIR
 4822 FORMAT( ' NOMBRE DE VALEURS STOCKEES DANS LE PROFIL',I12)
      IF (IIMPI.EQ.1) WRITE(IOIMP,4823) NVaor+NVaori
 4823 FORMAT( ' NOMBRE DE VALEURS initiales',I12)
      INTERR(1)=NVSTOR+NVSTIR
      reaerr(1)=nvstor/inc**(4./3)
      reaerr(2)=2*nbopit/1D6/max(1,(kcour-kcouri))
      IF (IPASV.EQ.0) CALL ERREUR(-278)
      IPASV=1
      SEGDES,MINCPO
      SEGDES,MIMIK
      SEGDES,MMATRI
      SEGDES,LL,MM
      SEGDES,MDIAG
      MMATRX=MMATRI
      SEGSUP KIVPO,KIVLO,ITMASM,ITMASL
 9999 continue
      if (ithrd.eq.1) call threadis
      RETURN
      END





























