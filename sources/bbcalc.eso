C BBCALC    SOURCE    FD218221  17/04/27    21:15:01     9428

      SUBROUTINE BBCALC(XE,MELE,NBNO,IDIM,NBPGAU,POIGAU,
     1                  QSIGAU,ETAGAU,DZEGAU,
     2                  NST,LRE,IFOU,A,BB,
     3                  NN,SHPTOT,SHP,XDPGE,YDPGE)

c=======================================================================
c   calcul des composantes de la matrice b-barre-dlatation
c           - en 2d: elements ict3,icq4,ict6
c           - en 3d: elements ....
c   calcul des coefficients de modification de la matrice b-barre-dilatation
c           - en 2d: elements icq8
c           - en 3d: elements ....
c                    coefficients {a}={a1,a2,a3}
c=======================================================================
c   input
c     xe = coordonnees de l'element
c     mele = numero de l'element dans nomtp
c     nbno = nombre de noeuds
c     idim = dimension espace
c     nbpgau = nombre de points de gauss pour la rigidite
c     poigau = poids des points de gauss
c     qsigau,etagau,dzegau = coordonnees des points de gauss
c     nst = nombre de composantes de contraintes
c     lre = nombre de colonnes de la matrice b
c     ifou = ifour dans ccoptio
c     nn = numero du mode de fourier
c     xdpge,ydpge = coordonnees du point autour duquel se fait
c                   le mouvement de la section
c
c   output
c      tableau des coefficients de modification: a(4,*)
c      tableau des composantes bbarre-dilatation: bb(3,*)
c=======================================================================

      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8 (A-H,O-Z)

      PARAMETER (XZer=0., XUn=1., X1s2=0.5, X1s4 = 0.25,
     &           X2s3 = 0.666666666666666666666666666666666666666667,
     &           X1s3 = 0.333333333333333333333333333333333333333333,
     &           X1s6 = 0.166666666666666666666666666666666666666667)

      DIMENSION XE(3,*), POIGAU(*),QSIGAU(*),ETAGAU(*),DZEGAU(*),
     &          SHP(6,*),SHPTOT(6,NBNO,*),
     &          A(4,*),BB(3,*)

      DIMENSION P(4,4),
     &          XNUM1(8),XNUM2(8),XNUM3(8)

*W      write(*,*) 'Entree dans le sousprogramme BBCALC'
*W      write(*,*) 'Element :',MELE
*W      write(*,*) 'Nombre de points Gauss : ', nbpgau

      IF ( MELE.LT.69 .OR. MELE.GT.78 ) GOTO 999
C=======================================================================
C= Elements incompressibles implementes :
C=======================================================================
C= NOM  :   ICT3, ICQ4, ICT6, ICQ8, ICC8, ICT4, ICP6, IC20, IC10, IC15
C= MELE :    69 ,  70 ,  71 ,  72 ,  73 ,  74 ,  75 ,  76 ,  77 ,  78
C= Actuellement MELE = 74,75,77,78 elements non traites
C=======================================================================
      CALL ZERO(BB,3,60)
      GOTO ( 10, 20, 30, 40, 50,666,666, 60,666,666 ) , (MELE-68)
      GOTO 999

  3   FORMAT (4(A,I1,A,I1,A,F10.4,2X))
  4   FORMAT (3(A,I1,A,I1,A,F10.4,2X))

C=======================================================================
C========== Elements MASSIFS INCOMPRESSIBLES BIDIMENSIONNELS ===========
C=======================================================================

*-----------------------------------------------------------------------
*----------------------------- Element ICT3 ----------------------------
*-----------------------------------------------------------------------
 10   CONTINUE
*      write(*,*) 'Element ICT3',IFOU
*      write(*,*) 'Ecriture de la matrice xe[ ]'
*      write(*,3) (('xe(',i,',',j,')=',xe(i,j),i=1,2),j=1,3)
      IFR = IFOU+4
      GOTO (666,101,101,103,666,999),IFR
      GOTO 999

*--------contraintes planes ou déformations planes (ifour=-2,-1)
 101  CONTINUE
*--------donnee des composantes de bb-dil
      r_z = - XE(1,1)*XE(2,3) - XE(1,2)*XE(2,1) + XE(1,2)*XE(2,3)
     &      + XE(1,1)*XE(2,2) + XE(1,3)*XE(2,1) - XE(1,3)*XE(2,2)
*      AIRE = X1s2 * r_z
      r_z = XUn / r_z
      BB(1,1) = (XE(2,2)-XE(2,3)) * r_z
      BB(2,2) = (XE(1,3)-XE(1,2)) * r_z
      BB(1,3) = (XE(2,3)-XE(2,1)) * r_z
      BB(2,4) = (XE(1,1)-XE(1,3)) * r_z
      BB(1,5) = (XE(2,1)-XE(2,2)) * r_z
      BB(2,6) = (XE(1,2)-XE(1,1)) * r_z
*      write (*,*) 'calcul de aire pour bbdil'
*      write (*,*) 'aire = ',AIRE
*      write (*,*) 'ecriture de la matrice bb'
*      write (*,3) (('bb(',i,',',j,')=',bb(i,j),i=1,3),j=1,2*nbno)
      GOTO 666
*--------axisymétrique (ifour=0)
 103  CONTINUE
*--------donnee des composantes de bb-dil
      r_z = - XE(1,1)*XE(2,3) - XE(1,2)*XE(2,1) + XE(1,2)*XE(2,3)
     &      + XE(1,1)*XE(2,2) + XE(1,3)*XE(2,1) - XE(1,3)*XE(2,2)
*      AIRE = X1s6 * r_z * (XE(1,1)+XE(1,2)+XE(1,3))
      r_z = XUn / r_z
      BB(1,1) = r_z * (XE(2,2)-XE(2,3))
      BB(2,2) = r_z * (XE(1,3)-XE(1,2))
      BB(1,3) = r_z * (XE(2,3)-XE(2,1))
      BB(2,4) = r_z * (XE(1,1)-XE(1,3))
      BB(1,5) = r_z * (XE(2,1)-XE(2,2))
      BB(2,6) = r_z * (XE(1,2)-XE(1,1))
*-- Integration analytique des termes BB(3,1),BB(3,3),BB(3,5)
      BB(3,1) = XUn / (XE(1,1)+XE(1,2)+XE(1,3))
      BB(3,3) = BB(3,1)
      BB(3,5) = BB(3,1)
*      write(*,*) 'calcul de aire pour bbdil'
*      write(*,*) 'aire = ',AIRE
*      write(*,*) 'ecriture de la matrice bb'
*      write(*,4) (('bb(',i,',',j,')=',bb(i,j),i=1,3),j=1,2*nbno)
      GOTO 666

*-----------------------------------------------------------------------
*----------------------------- Element ICQ4 ----------------------------
*-----------------------------------------------------------------------
 20   CONTINUE
*      write(*,*) 'Element ICQ4',IFOU
*      write(*,*) 'Ecriture de la matrice xe[ ]'
*      write(*,3) (('xe(',i,',',j,')=',xe(i,j),i=1,2),j=1,4)
      IFR = IFOU+4
      GOTO (666,201,201,203,666,999),IFR
      GOTO 999
*--------contraintes planes ou déformations planes (ifour=-2,-1)
 201  CONTINUE
*--------donnée des composantes de bb-dil
      r_z = - XE(1,4)*XE(2,3) - XE(1,2)*XE(2,1) + XE(1,1)*XE(2,2)
     &      - XE(1,1)*XE(2,4) - XE(1,3)*XE(2,2) + XE(1,2)*XE(2,3)
     &      + XE(1,3)*XE(2,4) + XE(1,4)*XE(2,1)
*      AIRE = X1s2 * r_z
      r_z = XUn / r_z
      BB(1,1) = r_z * (XE(2,2)-XE(2,4))
      BB(2,2) = r_z * (XE(1,4)-XE(1,2))
      BB(1,3) = r_z * (XE(2,3)-XE(2,1))
      BB(2,4) = r_z * (XE(1,1)-XE(1,3))
      BB(1,5) = r_z * (XE(2,4)-XE(2,2))
      BB(2,6) = r_z * (XE(1,2)-XE(1,4))
      BB(1,7) = r_z * (XE(2,1)-XE(2,3))
      BB(2,8) = r_z * (XE(1,3)-XE(1,1))
*      write (*,*) 'calcul de aire pour bbdil'
*      write (*,*) 'aire = ',aire
*      write (*,*) 'ecriture de la matrice bb'
*      write (*,4) (('bb(',i,',',j,')=',bb(i,j),i=1,3),j=1,2*nbno)
      GOTO 666
*
*--------axisymétriques(ifour=0)
 203  CONTINUE
      r_z =  XE(1,1)*( XE(1,1)*XE(2,2)-XE(1,1)*XE(2,4)-XE(1,4)*XE(2,4)
     &                +XE(1,4)*XE(2,1)-XE(1,2)*XE(2,1)+XE(1,2)*XE(2,2))
     &     + XE(1,2)*(-XE(1,2)*XE(2,1)+XE(1,2)*XE(2,3)+XE(1,3)*XE(2,3)
     &                -XE(1,3)*XE(2,2))
     &     + XE(1,3)*( XE(1,3)*XE(2,4)+XE(1,4)*XE(2,4)-XE(1,4)*XE(2,3)
     &                -XE(1,3)*XE(2,2))
     &     + XE(1,4)*XE(1,4)*(XE(2,1)-XE(2,3))
*      AIRE = x1s6 * r_z
      r_z = xUn / r_z
      BB(1,1) = ( XE(2,2)*(XE(1,2)+XE(1,1))-XE(2,4)*(XE(1,1)+XE(1,4))
     &           +X1s2*( XE(1,3)*(XE(2,2)-XE(2,4))
     &                  +XE(1,4)*(XE(2,2)+XE(2,3))
     &                  -XE(1,2)*(XE(2,3)+XE(2,4))) ) * r_z
      BB(2,2) = ( XE(1,4)*(XE(1,1)+XE(1,4))
     &           -XE(1,2)*(XE(1,1)+XE(1,2)) ) * r_z
      BB(1,3) = ( XE(2,3)*(XE(1,2)+XE(1,3))-XE(2,1)*(XE(1,2)+XE(1,1))
     &           +X1s2*( XE(1,4)*(XE(2,3)-XE(2,1))
     &                  +XE(1,1)*(XE(2,3)+XE(2,4))
     &                  -XE(1,3)*(XE(2,4)+XE(2,1))) ) * r_z
      BB(2,4) = ( XE(1,1)*(XE(1,2)+XE(1,1))
     &           -XE(1,3)*(XE(1,3)+XE(1,2)) ) * r_z
      BB(1,5) = ( XE(2,4)*(XE(1,3)+XE(1,4))-XE(2,2)*(XE(1,3)+XE(1,2))
     &           +X1s2*( XE(1,1)*(XE(2,4)-XE(2,2))
     &                  +XE(1,2)*(XE(2,4)+XE(2,1))
     &                  -XE(1,4)*(XE(2,1)+XE(2,2))) ) * r_z
      BB(2,6) = ( XE(1,2)*(XE(1,2)+XE(1,3))
     &           -XE(1,4)*(XE(1,4)+XE(1,3)) ) * r_z
      BB(1,7) = ( XE(2,1)*(XE(1,4)+XE(1,1))-XE(2,3)*(XE(1,4)+XE(1,3))
     &           +X1s2*( XE(1,2)*(XE(2,1)-XE(2,3))
     &                  +XE(1,3)*(XE(2,1)+XE(2,2))
     &                  -XE(1,1)*(XE(2,2)+XE(2,3))) ) * r_z
      BB(2,8) = ( XE(1,3)*(XE(1,3)+XE(1,4))
     &           -XE(1,1)*(XE(1,1)+XE(1,4)) ) * r_z
*- Integration analytique des termes BB(3,1),BB(3,3),BB(3,5),BB(3,7)
      BB(3,1) = ( XE(1,1)*(XE(2,2)-XE(2,4))+XE(2,1)*(XE(1,4)-XE(1,2))
     &           +X1s2*( XE(1,2)*(XE(2,3)+XE(2,4))
     &                  +XE(1,3)*(XE(2,4)-XE(2,2))
     &                  -XE(1,4)*(XE(2,3)+XE(2,2))) ) * r_z
      BB(3,3) = ( XE(1,2)*(XE(2,3)-XE(2,1))+XE(2,2)*(XE(1,1)-XE(1,3))
     &           +X1s2*( XE(1,3)*(XE(2,1)+XE(2,4))
     &                  +XE(1,4)*(XE(2,1)-XE(2,3))
     &                  -XE(1,1)*(XE(2,3)+XE(2,4))) ) * r_z
      BB(3,5) = ( XE(1,3)*(XE(2,4)-XE(2,2))+XE(2,3)*(XE(1,2)-XE(1,4))
     &           +X1s2*( XE(1,4)*(XE(2,1)+XE(2,2))
     &                  +XE(1,1)*(XE(2,2)-XE(2,4))
     &                  -XE(1,2)*(XE(2,4)+XE(2,1))) ) * r_z
      BB(3,7) = ( XE(1,4)*(XE(2,1)-XE(2,3))+XE(2,4)*(XE(1,3)-XE(1,1))
     &           +X1s2*( XE(1,1)*(XE(2,2)+XE(2,3))
     &                  +XE(1,2)*(XE(2,3)-XE(2,1))
     &                  -XE(1,3)*(XE(2,1)+XE(2,2))) ) * r_z
*      write (*,*) 'calcul de aire pour bbdil'
*      write (*,*) 'aire = ',aire
*      write (*,*) 'ecriture de la matrice bb'
*      write (*,4) (('bb(',i,',',j,')=',bb(i,j),i=1,3),j=1,2*nbno)
      GOTO 666

*-----------------------------------------------------------------------
*----------------------------- Element ICT6 ----------------------------
*-----------------------------------------------------------------------
 30   CONTINUE
*      write(*,*) 'Element ICT6',IFOU
*      write (*,*) 'ecriture de la matrice xe[ ]'
*      write (*,3) (('xe(',i,',',j,')=',xe(i,j),i=1,2),j=1,6)
      IFR = IFOU+4
      GOTO (666,301,301,303,666,999),IFR
      GOTO 999
*
*--------contraintes planes ou déformations planes(ifour=-2,-1)
 301  CONTINUE
*--------donnée des composantes de bb-dil
      r_z =  (  XE(1,1)*(XE(2,2)-XE(2,6)) + XE(1,2)*(XE(2,3)-XE(2,1))
     &        + XE(1,3)*(XE(2,4)-XE(2,2)) + XE(1,4)*(XE(2,5)-XE(2,3))
     &        + XE(1,5)*(XE(2,6)-XE(2,4)) + XE(1,6)*(XE(2,1)-XE(2,5)) )
     &     + X1s4 * (  XE(1,1)*(XE(2,5)-XE(2,3))
     &               + XE(1,3)*(XE(2,1)-XE(2,5))
     &               + XE(1,5)*(XE(2,3)-XE(2,1)) )
      AIRE = X2s3 * r_z
      r_z = xUn / r_z
      BB(1, 1) = ( (XE(2,2)-XE(2,6)) + X1s4 * (XE(2,5)-XE(2,3)) ) * r_z
      BB(2, 2) = ( (XE(1,6)-XE(1,2)) + X1s4 * (XE(1,3)-XE(1,5)) ) * r_z
      BB(1, 3) = (XE(2,3)-XE(2,1)) * r_z
      BB(2, 4) = (XE(1,1)-XE(1,3)) * r_z
      BB(1, 5) = ( (XE(2,4)-XE(2,2)) + X1s4 * (XE(2,1)-XE(2,5)) ) * r_z
      BB(2, 6) = ( (XE(1,2)-XE(1,4)) + X1s4 * (XE(1,5)-XE(1,1)) ) * r_z
      BB(1, 7) = (XE(2,5)-XE(2,3)) * r_z
      BB(2, 8) = (XE(1,3)-XE(1,5)) * r_z
      BB(1, 9) = ( (XE(2,6)-XE(2,4)) + X1s4 * (XE(2,3)-XE(2,1)) ) * r_z
      BB(2,10) = ( (XE(1,4)-XE(1,6)) + X1s4 * (XE(1,1)-XE(1,3)) ) * r_z
      BB(1,11) = (XE(2,1)-XE(2,5)) * r_z
      BB(2,12) = (XE(1,5)-XE(1,1)) * r_z

*      write (*,*) 'calcul de aire pour bbdil'
*      write (*,*) 'aire = ',aire
*      write (*,*) 'ecriture de la matrice bb'
*      write (*,4) (('bb(',i,',',j,')=',bb(i,j),i=1,3),j=1,2*nbno)
      GOTO 666
*
*--------axisymétriques (ifour=0)
 303  CONTINUE
*--------donnée des composantes de bb-dil
*-----intégration numérique des composantes bb-dil------
      AIRE = XZer
      DO i = 1,NBNO
        XNUM1(i) = XZer
        XNUM2(i) = XZer
        XNUM3(i) = XZer
      ENDDO
      DO 3031 IGAU = 1,NBPGAU
        DO i = 1,NBNO
          SHP(1,i) = SHPTOT(1,i,IGAU)
          SHP(2,i) = SHPTOT(2,i,IGAU)
          SHP(3,i) = SHPTOT(3,i,IGAU)
        ENDDO
        CALL DISTRR(XE,SHP,NBNO,RR)
        CALL DISTR2(XE,SHP,NBNO,RR2)
        CALL DISTR3(XE,SHP,NBNO,RR3)
        CALL DISTZ2(XE,SHP,NBNO,ZZ2)
        CALL DISTZ3(XE,SHP,NBNO,ZZ3)
        CALL JACOBI(XE,SHP,2,NBNO,DJAC)
        r_z  = POIGAU(IGAU) * RR
        r_zz2 = r_z * ZZ2
        r_zz3 = r_z * ZZ3
        r_rr2 = r_z * RR2
        r_rr3 = r_z * RR3
        r_z  = POIGAU(IGAU) * DJAC
        AIRE = AIRE + (r_z * RR)
        DO i = 1,NBNO
          XNUM1(i) = XNUM1(i) + (  SHPTOT(2,i,IGAU)*r_zz3
     &                           - SHPTOT(3,i,IGAU)*r_zz2 )
          XNUM2(i) = XNUM2(i) + (  SHPTOT(3,i,IGAU)*r_rr2
     &                           - SHPTOT(2,i,IGAU)*r_rr3 )
          XNUM3(i) = XNUM3(i) + (  SHPTOT(1,i,IGAU)*r_z )
        ENDDO
 3031 CONTINUE
      r_z = XUn / AIRE
      DO i = 1,NBNO
         k = 2*i
         BB(1,k-1) = XNUM1(i) * r_z
         BB(2,k)   = XNUM2(i) * r_z
         BB(3,k-1) = XNUM3(i) * r_z
      ENDDO
*      write (*,*) 'calcul de aire pour bbdil'
*      write (*,*) 'aire = ',aire
*      write (*,*) 'ecriture de la matrice bb'
*      write (*,4) (('bb(',i,',',j,')=',bb(i,j),i=1,3),j=1,2*nbno)
      GOTO 666

*-----------------------------------------------------------------------
*----------------------------- Element ICQ8 ----------------------------
*-----------------------------------------------------------------------
 40   CONTINUE
*      write(*,*) 'Element ICQ8',IFOU
*      write (*,*) 'Ecriture de la matrice xe[ ]'
*      write (*,3) (('xe(',i,',',j,')=',xe(i,j),i=1,2),j=1,6)

      IFR = IFOU+4
      GOTO (666,401,401,403,666,999),IFR
      GOTO 666

*--------contraintes planes ou déformations planes (ifour=-2,-1)
 401  CONTINUE
*--------donnée de la matrice symétrique p(3,3) (1 fois par élément)
      P(1,1) =  X2s3 * ( XE(1,1)*(XE(2,2)-XE(2,8))
     1                 + XE(1,2)*(XE(2,3)-XE(2,1))
     1         +XE(1,3)*(XE(2,4)-XE(2,2))+XE(1,4)*(XE(2,5)-XE(2,3))
     2         +XE(1,5)*(XE(2,6)-XE(2,4))+XE(1,6)*(XE(2,7)-XE(2,5))
     3         +XE(1,7)*(XE(2,8)-XE(2,6))+XE(1,8)*(XE(2,1)-XE(2,7)) )
     4        + X1s6 * ( (XE(1,1)-XE(1,5))*(XE(2,7)-XE(2,3))
     5                  +(XE(1,3)-XE(1,7))*(XE(2,1)-XE(2,5)) )
      P(1,2) = 5.D0/9.D0*(-XE(2,2)*(XE(1,1)+XE(1,3))
     1         +XE(1,2)*(XE(2,1)+XE(2,3))+XE(1,6)*(-XE(2,5)-XE(2,7))
     1         +XE(2,6)*(XE(1,5)+XE(1,7)))
     2         +4.D0/9.D0*(XE(1,8)*(XE(2,7)+XE(2,2)-XE(2,6)-XE(2,1))
     2         +XE(2,8)*(-XE(1,7)-XE(1,2)+XE(1,6)+XE(1,1))
     2         +XE(1,4)*(XE(2,2)-XE(2,6)+XE(2,5)-XE(2,3))
     2         +XE(2,4)*(-XE(1,2)+XE(1,6)-XE(1,5)+XE(1,3)))
     3         +7.D0/45.D0*(XE(1,2)*(XE(2,5)+XE(2,7))
     3         -XE(2,2)*(XE(1,5)+XE(1,7))-XE(1,6)*(XE(2,1)+XE(2,3))
     3         +XE(2,6)*(XE(1,1)+XE(1,3)))
     4         +8.D0/15.D0*(XE(1,6)*XE(2,2)-XE(1,2)*XE(2,6))
     5         +7.D0/90.D0*(XE(1,7)*XE(2,1)-XE(1,3)*XE(2,5)
     5         +XE(1,5)*XE(2,3)-XE(1,1)*XE(2,7))
     6         +1.D0/30.D0*(-XE(1,7)*XE(2,3)+XE(1,3)*XE(2,7)
     6         -XE(1,5)*XE(2,1)+XE(1,1)*XE(2,5))
      P(1,3) = 5.D0/9.D0*(-XE(1,8)*(XE(2,7)+XE(2,1))
     1         +XE(2,8)*(XE(1,7)+XE(1,1))
     1         +XE(1,4)*(XE(2,3)+XE(2,5))
     1         -XE(2,4)*(XE(1,3)+XE(1,5)))
     2        +4.D0/9.D0*((XE(1,8)-XE(1,4))*(XE(2,2)+XE(2,6))
     2         +(-XE(2,8)+XE(2,4))*(XE(1,2)+XE(1,6))
     2         +XE(1,2)*(XE(2,1)-XE(2,3))+XE(2,2)*(-XE(1,1)+XE(1,3))
     2         +XE(1,6)*(XE(2,7)-XE(2,5))+XE(2,6)*(-XE(1,7)+XE(1,5)))
     3         +7.D0/45.D0*(-XE(1,8)*(XE(2,3)+XE(2,5))
     3         +XE(2,8)*(XE(1,3)+XE(1,5))
     3         +XE(1,4)*(XE(2,1)+XE(2,7))
     3         -XE(2,4)*(XE(1,1)+XE(1,7)))
     4         +1.D0/30.D0*(-XE(1,7)*XE(2,3)+XE(1,3)*XE(2,7)
     4         +XE(1,5)*XE(2,1)-XE(1,1)*XE(2,5))
     5         +7.D0/90.D0*(XE(1,7)*XE(2,5)-XE(1,3)*XE(2,1)
     5         -XE(1,5)*XE(2,7)+XE(1,1)*XE(2,3))
     6         +8.D0/15.D0*(XE(1,8)*XE(2,4)-XE(1,4)*XE(2,8))
      P(1,4) = XZer

      P(2,1) = P(1,2)
      P(2,2) = 16.D0/45.D0*(XE(2,6)*(XE(1,5)-XE(1,7))
     1         +XE(1,6)*(XE(2,7)-XE(2,5))+XE(1,2)*(XE(2,3)-XE(2,1))
     1         +XE(2,2)*(XE(1,1)-XE(1,3)))
     2         +14.D0/45.D0*(XE(2,4)*(XE(1,3)-XE(1,5))
     2         +XE(1,4)*(XE(2,5)-XE(2,3))+XE(1,8)*(XE(2,1)-XE(2,7))
     2         +XE(2,8)*(XE(1,7)-XE(1,1)))
     3         +8.D0/45.D0*(XE(1,4)*(XE(2,2)-XE(2,6))
     3         +XE(1,8)*(XE(2,6)-XE(2,2))+XE(1,2)*(XE(2,8)-XE(2,4))
     3         +XE(1,6)*(XE(2,4)-XE(2,8)))
     4         +2.D0/45.D0*(XE(2,2)*(XE(1,5)-XE(1,7))
     4         +XE(1,2)*(XE(2,7)-XE(2,5)) +XE(1,6)*(XE(2,3)-XE(2,1))
     4         +XE(2,6)*(XE(1,1)-XE(1,3)))
     5         +4.D0/45.D0*(XE(2,4)*(XE(1,1)-XE(1,7))
     5         +XE(1,4)*(XE(2,7)-XE(2,1)) +XE(1,8)*(XE(2,3)-XE(2,5))
     5         +XE(2,8)*(XE(1,5)-XE(1,3)))
     6         +17.D0/90.D0*(XE(1,7)*XE(2,5)+XE(1,3)*XE(2,1)
     6         -XE(1,5)*XE(2,7)-XE(1,1)*XE(2,3))
     7         +1.D0/90.D0*(-XE(1,7)*XE(2,1)-XE(1,3)*XE(2,5)
     7         +XE(1,5)*XE(2,3)+XE(1,1)*XE(2,7))
      P(2,3) = 1.D0/3.D0*(XE(1,5)*(XE(2,6)-XE(2,4))
     1         +XE(1,8)*(XE(2,7)+XE(2,1))+XE(1,7)*(XE(2,6)-XE(2,8))
     1         -XE(1,2)*(XE(2,1)+XE(2,3))+XE(1,1)*(XE(2,2)-XE(2,8))
     1         +XE(1,4)*(XE(2,5)+XE(2,3))-XE(1,6)*(XE(2,7)+XE(2,5))
     1         +XE(1,3)*(XE(2,2)-XE(2,4)))
     2         +4.D0/9.D0*(-XE(1,4)*(XE(2,2)+XE(2,6))
     2         -XE(1,8)*(XE(2,6)+XE(2,2))+XE(1,2)*(XE(2,8)+XE(2,4))
     2         +XE(1,6)*(XE(2,4)+XE(2,8)))
     3         +1.D0/9.D0*(XE(1,7)*(XE(2,2)-XE(2,4))
     3         +XE(1,8)*(XE(2,3)+XE(2,5))
     3         +XE(1,5)*(XE(2,2)-XE(2,8))+XE(1,3)*(XE(2,6)-XE(2,8))
     3         -XE(1,2)*(XE(2,5)+XE(2,7))+XE(1,1)*(XE(2,6)-XE(2,4))
     3         +XE(1,4)*(XE(2,1)+XE(2,7))-XE(1,6)*(XE(2,1)+XE(2,3)))
      P(2,4) = XZer

      P(3,1) = P(1,3)
      P(3,2) = P(2,3)
      P(3,3) =  14.D0/45.D0*(XE(1,6)*(XE(2,7)-XE(2,5))
     1         +XE(2,6)*(XE(1,5)-XE(1,7))+XE(1,2)*(XE(2,3)-XE(2,1))
     1         +XE(2,2)*(XE(1,1)-XE(1,3)))
     2         +16.D0/45.D0*(XE(1,8)*(XE(2,1)-XE(2,7))
     2         +XE(2,8)*(XE(1,7)-XE(1,1))+XE(1,4)*(XE(2,5)-XE(2,3))
     2         +XE(2,4)*(XE(1,3)-XE(1,5)))
     3         +8.D0/45.D0*(XE(1,4)*(XE(2,2)-XE(2,6))
     3         +XE(1,8)*(XE(2,6)-XE(2,2))+XE(1,2)*(XE(2,8)-XE(2,4))
     3         +XE(1,6)*(XE(2,4)-XE(2,8)))
     4         +2.D0/45.D0*(XE(2,4)*(XE(1,7)-XE(1,1))
     4         +XE(1,8)*(XE(2,5)-XE(2,3))+XE(2,8)*(-XE(1,5)+XE(1,3))
     4         +XE(1,4)*(XE(2,1)-XE(2,7)))
     5         +4.D0/45.D0*(XE(2,2)*(XE(1,7)-XE(1,5))
     5         +XE(1,2)*(XE(2,5)-XE(2,7))+XE(1,6)*(XE(2,1)-XE(2,3))
     5         +XE(2,6)*(XE(1,3)-XE(1,1)))
     6         +1.D0/90.D0*(-XE(1,5)*XE(2,7)+XE(1,3)*XE(2,1)
     6         +XE(1,7)*XE(2,5)-XE(1,1)*XE(2,3))
     7         +17.D0/90.D0*(-XE(1,7)*XE(2,1)-XE(1,3)*XE(2,5)
     7         +XE(1,5)*XE(2,3)+XE(1,1)*XE(2,7))
      P(3,4) = XZer

      P(4,1) = XZer
      P(4,2) = XZer
      P(4,3) = XZer
      P(4,4) = XZer

*      write (*,*) 'ecriture de la matrice p[ ]'
*      write (*,4) (('p(',i,',',j,')=',p(i,j),i=1,3),j=1,3)

*-----------------donnée des vecteurs {t}={t1,t2,t3}--------------------
      A(1,1) = 2.D0/3.D0*(XE(2,2)-XE(2,8))
     1        +1.D0/6.D0*(XE(2,7)-XE(2,3))
      A(2,1) = 1.D0/9.D0*(4.D0*XE(2,8)-5.D0*XE(2,2))
     1        +7.D0/90.D0*(-XE(2,7)+2.D0*XE(2,6))
     1        +1.D0/30.D0*XE(2,5)
      A(3,1) = 1.D0/9.D0*(-4.D0*XE(2,2)+5.D0*XE(2,8))
     1        +7.D0/90.D0*(XE(2,3)-2.D0*XE(2,4))
     1        -1.D0/30.D0*XE(2,5)

      A(1,2) = 2.D0/3.D0*(XE(1,8)-XE(1,2))
     1        +1.D0/6.D0*(XE(1,3)-XE(1,7))
      A(2,2) = 1.D0/9.D0*(-4.D0*XE(1,8)+5.D0*XE(1,2))
     1        +7.D0/90.D0*(XE(1,7)-2.D0*XE(1,6))
     1        -1.D0/30.D0*XE(1,5)
      A(3,2) = 1.D0/9.D0*(4.D0*XE(1,2)-5.D0*XE(1,8))
     1        +7.D0/90.D0*(-XE(1,3)+2.D0*XE(1,4))
     1        +1.D0/30.D0*XE(1,5)

      A(1,3) = 2.D0/3.D0*(-XE(2,1)+XE(2,3))
      A(2,3) = 5.D0/9.D0*(XE(2,1)+XE(2,3))
     1        +7.D0/45.D0*(XE(2,5)+XE(2,7))
     1        -4.D0/9.D0*(XE(2,4)+XE(2,8))
     1        -8.D0/15.D0*XE(2,6)
      A(3,3) = 4.D0/9.D0*(XE(2,1)-XE(2,3)+XE(2,4)-XE(2,8))

      A(1,4) = 2.D0/3.D0*(-XE(1,3)+XE(1,1))
      A(2,4) = -5.D0/9.D0*(XE(1,1)+XE(1,3))
     1        -7.D0/45.D0*(XE(1,5)+XE(1,7))
     1        +4.D0/9.D0*(XE(1,4)+XE(1,8))
     1        +8.D0/15.D0*XE(1,6)
      A(3,4) = 4.D0/9.D0*(-XE(1,1)+XE(1,3)-XE(1,4)+XE(1,8))

      A(1,5) = 2.D0/3.D0*(XE(2,4)-XE(2,2))
     1         +1.D0/6.D0*(-XE(2,5)+XE(2,1))
      A(2,5) = 1.D0/9.D0*(4.D0*XE(2,4)-5.D0*XE(2,2))
     1        +7.D0/90.D0*(-XE(2,5)+2.D0*XE(2,6))
     1        +1.D0/30.D0*XE(2,7)
      A(3,5) = 1.D0/9.D0*(4.D0*XE(2,2)-5.D0*XE(2,4))
     1        +7.D0/90.D0*(-XE(2,1)+2.D0*XE(2,8))
     1        +1.D0/30.D0*XE(2,7)

      A(1,6) = 2.D0/3.D0*(-XE(1,4)+XE(1,2))
     1         +1.D0/6.D0*(XE(1,5)-XE(1,1))
      A(2,6) = 1.D0/9.D0*(-4.D0*XE(1,4)+5.D0*XE(1,2))
     1        +7.D0/90.D0*(XE(1,5)-2.D0*XE(1,6))
     1        -1.D0/30.D0*XE(1,7)
      A(3,6) = 1.D0/9.D0*(-4.D0*XE(1,2)+5.D0*XE(1,4))
     1        +7.D0/90.D0*(XE(1,1)-2.D0*XE(1,8))
     1        -1.D0/30.D0*XE(1,7)

      A(1,7) = 2.D0/3.D0*(-XE(2,3)+XE(2,5))
      A(2,7) = 4.D0/9.D0*(XE(2,5)-XE(2,3)+XE(2,2)-XE(2,6))
      A(3,7) = 5.D0/9.D0*(XE(2,3)+XE(2,5))
     1        +7.D0/45.D0*(XE(2,1)+XE(2,7))
     1        -4.D0/9.D0*(XE(2,2)+XE(2,6))
     1        -8.D0/15.D0*XE(2,8)

      A(1,8) = 2.D0/3.D0*(XE(1,3)-XE(1,5))
      A(2,8) = 4.D0/9.D0*(-XE(1,5)+XE(1,3)-XE(1,2)+XE(1,6))
      A(3,8) = -5.D0/9.D0*(XE(1,3)+XE(1,5))
     1        -7.D0/45.D0*(XE(1,1)+XE(1,7))
     1        +4.D0/9.D0*(XE(1,2)+XE(1,6))
     1        +8.D0/15.D0*XE(1,8)

      A(1,9) = 2.D0/3.D0*(-XE(2,4)+XE(2,6))
     1         +1.D0/6.D0*(XE(2,3)-XE(2,7))
      A(2,9) = 1.D0/9.D0*(-4.D0*XE(2,4)+5.D0*XE(2,6))
     1        +7.D0/90.D0*(XE(2,3)-2.D0*XE(2,2))
     1        -1.D0/30.D0*XE(2,1)
      A(3,9) = 1.D0/9.D0*(4.D0*XE(2,6)-5.D0*XE(2,4))
     1        +7.D0/90.D0*(-XE(2,7)+2.D0*XE(2,8))
     1        +1.D0/30.D0*XE(2,1)

      A(1,10) = 2.D0/3.D0*(XE(1,4)-XE(1,6))
     1         +1.D0/6.D0*(-XE(1,3)+XE(1,7))
      A(2,10) = 1.D0/9.D0*(4.D0*XE(1,4)-5.D0*XE(1,6))
     1        +7.D0/90.D0*(-XE(1,3)+2.D0*XE(1,2))
     1        +1.D0/30.D0*XE(1,1)
      A(3,10) = 1.D0/9.D0*(-4.D0*XE(1,6)+5.D0*XE(1,4))
     1        +7.D0/90.D0*(XE(1,7)-2.D0*XE(1,8))
     1        -1.D0/30.D0*XE(1,1)

      A(1,11) = 2.D0/3.D0*(-XE(2,5)+XE(2,7))
      A(2,11) = -5.D0/9.D0*(XE(2,7)+XE(2,5))
     1        -7.D0/45.D0*(XE(2,1)+XE(2,3))
     1        +4.D0/9.D0*(XE(2,4)+XE(2,8))
     1        +8.D0/15.D0*XE(2,2)
      A(3,11) = 4.D0/9.D0*(XE(2,4)-XE(2,5)-XE(2,8)+XE(2,7))

      A(1,12) = 2.D0/3.D0*(XE(1,5)-XE(1,7))
      A(2,12) = 5.D0/9.D0*(XE(1,7)+XE(1,5))
     1        +7.D0/45.D0*(XE(1,1)+XE(1,3))
     1        -4.D0/9.D0*(XE(1,4)+XE(1,8))
     1        -8.D0/15.D0*XE(1,2)
      A(3,12) = 4.D0/9.D0*(-XE(1,4)+XE(1,5)+XE(1,8)-XE(1,7))

      A(1,13) = 2.D0/3.D0*(-XE(2,6)+XE(2,8))
     1         +1.D0/6.D0*(XE(2,5)-XE(2,1))
      A(2,13) = 1.D0/9.D0*(-4.D0*XE(2,8)+5.D0*XE(2,6))
     1        +7.D0/90.D0*(XE(2,1)-2.D0*XE(2,2))
     1        -1.D0/30.D0*XE(2,3)
      A(3,13) = 1.D0/9.D0*(-4.D0*XE(2,6)+5.D0*XE(2,8))
     1        +7.D0/90.D0*(XE(2,5)-2.D0*XE(2,4))
     1        -1.D0/30.D0*XE(2,3)

      A(1,14) = 2.D0/3.D0*(XE(1,6)-XE(1,8))
     1         +1.D0/6.D0*(-XE(1,5)+XE(1,1))
      A(2,14) = 1.D0/9.D0*(4.D0*XE(1,8)-5.D0*XE(1,6))
     1        +7.D0/90.D0*(-XE(1,1)+2.D0*XE(1,2))
     1        +1.D0/30.D0*XE(1,3)
      A(3,14) = 1.D0/9.D0*(4.D0*XE(1,6)-5.D0*XE(1,8))
     1        +7.D0/90.D0*(-XE(1,5)+2.D0*XE(1,4))
     1        +1.D0/30.D0*XE(1,3)

      A(1,15) = 2.D0/3.D0*(-XE(2,7)+XE(2,1))
      A(2,15) = 4.D0/9.D0*(-XE(2,6)+XE(2,7)+XE(2,2)-XE(2,1))
      A(3,15) = -5.D0/9.D0*(XE(2,1)+XE(2,7))
     1        -7.D0/45.D0*(XE(2,3)+XE(2,5))
     1        +4.D0/9.D0*(XE(2,2)+XE(2,6))
     1        +8.D0/15.D0*XE(2,4)

      A(1,16) = 2.D0/3.D0*(XE(1,7)-XE(1,1))
      A(2,16) = 4.D0/9.D0*(XE(1,6)-XE(1,7)-XE(1,2)+XE(1,1))
      A(3,16) = 5.D0/9.D0*(XE(1,1)+XE(1,7))
     1        +7.D0/45.D0*(XE(1,3)+XE(1,5))
     1        -4.D0/9.D0*(XE(1,2)+XE(1,6))
     1        -8.D0/15.D0*XE(1,4)

*      write (*,*) 'ecriture de la matrice t[ ]'
*      write (*,4) (('t(',i,',',j,')=',a(i,j),i=1,3),j=1,16)
*--------------résolution matricielle de [p]{a}={t}---------------------
*      write (*,*) 'Appel a GAUSSJ'
      N = 3
      NP = 4
      M = 16
      MP = 60
      CALL GAUSSJ(P,N,NP,A,M,MP)
      GOTO 666

*--------axisymétriques (ifour=0)
 403  CONTINUE
*--------donnée de la matrice symétrique p(3,3) (1 fois par élément)
      CALL ZERO(P,4,4)
      DO IGAU = 1,NBPGAU
        DO I = 1,NBNO
          SHP(1,I) = SHPTOT(1,I,IGAU)
          SHP(2,I) = SHPTOT(2,I,IGAU)
          SHP(3,I) = SHPTOT(3,I,IGAU)
        ENDDO
        CALL DISTRR(XE,SHP,NBNO,RR)
        CALL JACOBI(XE,SHP,2,NBNO,DJAC)
        r_z = POIGAU(IGAU)*RR*DJAC
        P(1,1) = P(1,1) + r_z
        P(2,1) = P(2,1) + (r_z * QSIGAU(IGAU))
        P(3,1) = P(3,1) + (r_z * ETAGAU(IGAU))
        P(2,2) = P(2,2) + (r_z * QSIGAU(IGAU) * QSIGAU(IGAU))
        P(3,2) = P(3,2) + (r_z * QSIGAU(IGAU) * ETAGAU(IGAU))
        P(3,3) = P(3,3) + (r_z * ETAGAU(IGAU) * ETAGAU(IGAU))
      ENDDO
      P(1,2) = P(2,1)
      P(1,3) = P(3,1)
      P(2,3) = P(3,2)
*      write (*,*) 'ecriture de la matrice p[ ]'
*      write (*,4) (('p(',i,',',j,')=',p(i,j),i=1,3),j=1,3)
*-----------calcul des vecteurs {t}={t1,t2,t3}--intégration numérique---
      CALL ZERO(A,4,24)
      DO 4031 IGAU = 1,NBPGAU
        DO I = 1,NBNO
          SHP(1,I) = SHPTOT(1,I,IGAU)
          SHP(2,I) = SHPTOT(2,I,IGAU)
          SHP(3,I) = SHPTOT(3,I,IGAU)
        ENDDO
        CALL DISTRR(XE,SHP,NBNO,RR)
        CALL DISTR2(XE,SHP,NBNO,RR2)
        CALL DISTR3(XE,SHP,NBNO,RR3)
        CALL DISTZ2(XE,SHP,NBNO,ZZ2)
        CALL DISTZ3(XE,SHP,NBNO,ZZ3)
        CALL JACOBI(XE,SHP,2,NBNO,DJAC)
        K = 0
        DO I = 1,NBNO
          K = K+1
          r_z =  POIGAU(IGAU)*RR
     &          *(SHPTOT(2,I,IGAU)*ZZ3-SHPTOT(3,I,IGAU)*ZZ2)
          A(1,K) = A(1,K) + r_z
          A(2,K) = A(2,K) + r_z * QSIGAU(IGAU)
          A(3,K) = A(3,K) + r_z * ETAGAU(IGAU)
          K = K+1
          r_z = POIGAU(IGAU)*RR
     &          *(-SHPTOT(2,I,IGAU)*RR3+SHPTOT(3,I,IGAU)*RR2)
          A(1,K) = A(1,K) + r_z
          A(2,K) = A(2,K) + r_z * QSIGAU(IGAU)
          A(3,K) = A(3,K) + r_z * ETAGAU(IGAU)
          K = K+1
          r_z = POIGAU(IGAU)*SHPTOT(1,I,IGAU)*DJAC
          A(1,K) = A(1,K) + r_z
          A(2,K) = A(2,K) + r_z * QSIGAU(IGAU)
          A(3,K) = A(3,K) + r_z * ETAGAU(IGAU)
        ENDDO
 4031 CONTINUE
*      write(*,*) 'Ecriture de la matrice t[ ]'
*      write(*,4) (('t(',i,',',j,')=',a(i,j),i=1,3),j=1,24)
*------------résolution matricielle de [p]{a}={t}-----------------
      N = 3
      NP = 4
      M = 24
      MP = 60
*      write (*,*) 'appel a GAUSSJ'
      CALL GAUSSJ(P,N,NP,A,M,MP)
*      write(*,*) 'Ecriture de la matrice a[ ]'
*      write(*,4) (('a(',i,',',j,')=',a(i,j),i=1,3),j=1,24)
      GOTO 666

C=======================================================================
C========== Elements MASSIFS INCOMPRESSIBLES TRIDIMENSIONNELS ==========
C=======================================================================

*-----------------------------------------------------------------------
*----------------------------- Element ICC8 ----------------------------
*-----------------------------------------------------------------------
 50   CONTINUE
*      write(*,*) 'Element ICC8',IFOU
*      write(*,*) 'Ecriture de la matrice xe[ ]'
*      write(*,3) (('xe(',i,',',j,')=',xe(i,j),i=1,3),j=1,8)
      IF (IFOU.NE.2) GOTO 999
      GOTO 666

*-----------------------------------------------------------------------
*----------------------------- Element IC20 ----------------------------
*-----------------------------------------------------------------------
 60   CONTINUE
*      write(*,*) 'Element IC20',IFOU
*      write(*,*) 'Ecriture de la matrice xe[ ]'
*      write(*,3) (('xe(',i,',',j,')=',xe(i,j),i=1,3),j=1,20)
      IF (IFOU.NE.2) GOTO 999
      GOTO 666

C=======================================================================
C======================= ERREUR : Cas non prevus =======================
C=======================================================================
 999  CONTINUE
      CALL ERREUR(5)

 666  CONTINUE
*      write (*,*) 'Sortie de BBCALC'

      RETURN
      END



