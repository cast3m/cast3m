C VECTE     SOURCE    BP208322  17/01/23    21:15:03     9284
C
C-------------------------------------------------------------------------
C
C    Opérateur VECTEUR
C    -----------------
C
C    VEC1 = VECT | CHPO1 (FLOT1) (|    'DEPL'  |  'FORC'   |)  (COUL1) ;
C                |               (|         LMOT1          |)
C                |               (| MOT1 MOT2 (MOT3 si 3D) |)
C                |
C                | CHAM1 (CHAM2) MOD1 (FLOT1) (MOCOMP1) (LISMO1) ;
c                |
c                | CHAM1         MOD1 (FLOT1)   LCOMP1  (LISMO1);
C
C    Objet :
C    _______
C
C    L'opérateur VECT construit un objet de type VECTEUR à partir :
C       - des composantes d'un champ de vecteurs,
C       - d'un champ par éléments de contraintes principales,
C       - d'un champ par éléments de variables internes.
C
C-------------------------------------------------------------------------
C
C     VERIFICATION DE L'EXISTENCE D UN VECTEUR
C       VERSION OU ON NE LIT PAS DE MELEME
C
C-------------------------------------------------------------------------
C
C    PM, 20/03/2007 : prise en compte de la couleur COUL1
C    BP, 04/05/2012 : ajout syntaxe 3 (appel a vecte4)
C
C-------------------------------------------------------------------------
      SUBROUTINE VECTE
      IMPLICIT INTEGER(I-N)
-INC CCOPTIO
-INC CCGEOME
-INC SMCHPOI
-INC SMVECTE
-INC SMELEME
-INC SMCHAML
-INC CCREEL
-INC SMCOORD
-INC SMLMOTS
      CHARACTER*4 MOTVEC(2)
      CHARACTER*4 NV(3),NU(3),NOC
      CHARACTER*(4) CMOT
      REAL*8      AMP,xmin,xmax,ymin,ymax,zmin,zmax,vmin,vmax
      LOGICAL     LSUPR
      DATA        MOTVEC/ 'DEPL','FORC'/
      DATA        NU/'UX  ','UY  ','UZ  '/

      MELEME=0

      CALL LIROBJ('CHPOINT ',MCHPOI,0,IRETOU)
      IF(IERR.NE.0) RETURN

*
*     Cas du CHAMELEM
*     --------------
*
      IF (IRETOU.EQ.0) THEN
*        Lecture d'un CHAMELEM obligatoirement
*        de CONTRAINTES PRINCIPALES ou de VARIABLES INTERNES
         CALL LIROBJ('MCHAML',MCHA1,1,IRET)
         IF (IERR.NE.0) RETURN

         MCHELM = MCHA1
         SEGACT MCHELM
         ICAS = 0
         IF (TITCHE.EQ.'CONTRAINTES PRINCIPALES') ICAS = 1
         IF (TITCHE.EQ.'VARINTER' .OR.
     &       TITCHE.EQ.'VARIABLES INTERNES')      ICAS = 2
c          write(*,*) 'ICAS=',ICAS
         IF (ICAS.EQ.0) THEN
c          Lecture obligatoire des composantes a afficher
           LMOT0 = 0
           CALL LIROBJ('LISTMOTS',LMOT0,1,IRET)
           if (IRET.ne.0) then
            ICAS = 3
           else
            write(IOIMP,*)'LES COMPOSANTES SONT OBLIGATOIRES POUR LES',
     &            'CHAMPS DE TYPE AUTRES QUE CONTRAINTES PRINCIPALES',
     &            'ou VARIABLES INTERNES'
*           L'objet de type %m1:8 n'a pas le bon sous-type
            MOTERR(1:8) = 'CHAMELEM'
            CALL ERREUR(302)
            SEGDES MCHELM
            RETURN
           endif
         ENDIF
         SEGDES MCHELM

*        Lecture éventuelle d'un CHAMELEM de caractéristiques
         MCHA2 = 0
         CALL LIROBJ('MCHAML',MCHA2,0,IRET)
c          write(*,*) '2eme mchaml =',MCHA2
         IF (IERR.NE.0) RETURN
         IF (MCHA2.NE.0) THEN
            MCHELM = MCHA2
            SEGACT MCHELM
c          write(*,*) '2eme mchaml TITCHE=',TITCHE
            IF (TITCHE.NE.'CARACTERISTIQUES') THEN
*              Il manque un champ par élément de sous-type %m1:16
c          write(*,*) 'erreur dans vecte'
               MOTERR(1:16) = 'CARACTERISTIQUES'
               CALL ERREUR(565)
               SEGDES MCHELM
               RETURN
            ENDIF
            SEGDES MCHELM
         ENDIF

cbp 3       CONTINUE
*        Lecture du modèle
         CALL LIROBJ('MMODEL',MOD1,1,IRET)
         IF (IERR.NE.0) RETURN
         IPIN=MCHA1
         CALL REDUAF(IPIN,MOD1,MCHA1,0,IR,KER)
         IF(IR   .NE. 1) CALL ERREUR(KER)
         IF(IERR .NE. 0) RETURN
cbp         MCHA2=0
         IF (MCHA2 .NE. 0) THEN
           IPIN=MCHA2
           CALL REDUAF(IPIN,MOD1,MCHA2,0,IR,KER)
           IF(IR   .NE. 1) CALL ERREUR(KER)
           IF(IERR .NE. 0) RETURN
         ENDIF

*        Lecture du coefficient d'amplification optionnel
         AMP=1.D0
         CALL LIRREE(AMP,0,IRETOU)

*        Lecture éventuelle de la composante à conserver
         IF (ICAS.EQ.1) THEN
            CMOT = '    '
            CALL LIRCHA(CMOT,0,IRETOU)
         ENDIF

*        Lecture de la liste des couleurs à employer pour chaque composante
         LMOT1 = 0
         CALL LIROBJ('LISTMOTS',LMOT1,0,IRET)
         IF (IERR.NE.0) RETURN

*        Création des vecteurs suivant les cas
         IF (ICAS.EQ.1)
     &   CALL VECTE2(MCHA1,MCHA2,MOD1,AMP,CMOT,LMOT1,MVECTE)
         IF (ICAS.EQ.2)
     &   CALL VECTE3(MCHA1,MCHA2,MOD1,AMP,LMOT1,MVECTE)
         IF (ICAS.EQ.3)
     &   CALL VECTE4(MCHA1,MCHA2,MOD1,AMP,LMOT0,LMOT1,MVECTE)
         IF (IERR.NE.0) RETURN

         CALL ECROBJ ('VECTEUR ',MVECTE)
         RETURN
      ENDIF
*
*     Cas du CHPOINT
*     --------------
*
*--   Détermination de MLMOT1, listmots des composantes à prendre en compte
*     On essaie de lire les mot clés 'DEPL' 'FORC'
      CALL LIRMOT(MOTVEC,2,IMOT,0)
      IF (IMOT.NE.0) THEN
         CALL IDCOMP(MOTVEC(IMOT),MLMOT1)
         IF (IERR.NE.0) RETURN
         IRETOU=1
         LSUPR=.TRUE.
      ELSE
*        sinon on cherche un listmots de composantes
         CALL LIROBJ('LISTMOTS',MLMOT1,0,IRETOU)
         LSUPR=.FALSE.
      ENDIF

      IF (IRETOU.NE.0) THEN
         SEGACT MLMOT1

*        Vérification du nombre de composantes
         NM=MLMOT1.MOTS(/2)
         IF (NM.LT.IDIM) THEN
*           routine %m1:8 : On voulait un %m9:16 à %i1 composantes au lieu de %i2 .
            MOTERR(1:8)='VECTE   '
            MOTERR(9:16)='LISTMOTS'
            INTERR(1)=IDIM
            INTERR(2)=NM
            CALL ERREUR(699)
            RETURN
         ENDIF

*        Stockage dans la table NV
         DO K=1,IDIM
            NV(K)=MLMOT1.MOTS(K)
         ENDDO

         IF (LSUPR) THEN
            SEGSUP MLMOT1
         ELSE
            SEGDES MLMOT1
         ENDIF
      ELSE
*        Si pas de listmots (implicite ou explicite),
*        on lit autant de mots que la dimension
         KOK=0
         DO 9 K=1,IDIM
            CALL LIRCHA(CMOT,0,IRETOU)
            IF (IRETOU.NE.0) THEN
               KOK=K
               NV(K)=CMOT
            ENDIF
 9       CONTINUE

         IF (KOK.GT.0 .AND. KOK.LT.IDIM) THEN
*           Si le nombre de composantes est insuffisant, c'est qu'elles
*           n'étaient en fait pas données. On réécrit les mots lus
*           abusivement pour usage ultérieur
            DO K=1,KOK
               CMOT=NV(K)
               CALL ECRCHA(CMOT)
            ENDDO
         ENDIF
      ENDIF

*     Et enfin, si aucune spécification, on prend les composantes par
*     défaut dans la table NU.
      IF (IRETOU.EQ.0) THEN
         DO 8 L=1,IDIM
            NV(L)=NU(L)
   8     CONTINUE
      ENDIF
      IF (IERR.NE.0) RETURN

*--   Lecture de la couleur (valeur par défaut sinon)
      CALL LIRMOT(NCOUL,NBCOUL,ICOUL,0)
      IF (ICOUL.EQ.0) ICOUL=IDCOUL+1
      ICOUL=ICOUL-1

C  VERIFICATION QU'IL Y A NV(K) PARMI LES INCONNUES DU CHPOINT
C      SEGACT MCHPOI
C      NSOUPO=IPCHP(/1)
C      IRAT=1
C      IF (NSOUPO.EQ.0) GOTO 13
C      DO 10 ISOUPO=1,NSOUPO
C      MSOUPO=IPCHP(ISOUPO)
C      SEGACT MSOUPO
C      NCV=NOCOMP(/2)
C      DO 11 I=1,NCV
C      NOC=NOCOMP(I)
C      DO 12 J=1,IDIM
C      IF (NOC.EQ.NV(J)) IRAT=0
C  12  CONTINUE
C  11  CONTINUE
C      SEGDES MSOUPO
C  10  CONTINUE
C      MOTERR(1:4)=NV(1)
C      MOTERR(5:12)=MTYPOI
C      SEGDES MCHPOI
C      IF (IRAT.EQ.1) THEN
C*        La composante %m1:4 n'existe pas pour le champ %m5:8
C         CALL ERREUR(77)
C      ENDIF
C  13  CONTINUE
      AMP=-xgrand
      CALL LIRREE(AMP,0,IRETOU)
      NVEC=1
      ID=IDIM
      SEGINI MVECTE
      IGEOV(NVEC)=MELEME
      ICHPO(NVEC)=MCHPOI
      AMPF(NVEC)=AMP
      NOCOUL(NVEC)=ICOUL
      DO 14 ID=1,IDIM
       NOCOVE(NVEC,ID)=NV(ID)
  14  CONTINUE
* Amplification automatique on calcul le coeff
      if (iretou.eq.0) then
       idimp1 = idim+1
       xmin=xgrand
       ymin=xgrand
       zmin=xgrand
       vmax=-xgrand
       xmax=-xgrand
       ymax=-xgrand
       zmax=-xgrand
       segact mchpoi
       do 50 i=1,ipchp(/1)
        msoupo=ipchp(i)
        segact msoupo
        meleme=igeoc
        mpoval=ipoval
        segact meleme,mpoval
        if (idim.eq.3) then
          do j=1,num(/2)
            ip=idimp1*(num(1,j)-1)
            xmin=min(xcoor(ip+1),xmin)
            xmax=max(xcoor(ip+1),xmax)
            ymin=min(xcoor(ip+2),ymin)
            ymax=max(xcoor(ip+2),ymax)
            zmin=min(xcoor(ip+3),zmin)
            zmax=max(xcoor(ip+3),zmax)
          enddo
        else if (idim.eq.2) then
          do j=1,num(/2)
            ip=idimp1*(num(1,j)-1)
            xmin=min(xcoor(ip+1),xmin)
            xmax=max(xcoor(ip+1),xmax)
            ymin=min(xcoor(ip+2),ymin)
            ymax=max(xcoor(ip+2),ymax)
          enddo
        else
**      else if (idim.eq.1) then
          do j=1,num(/2)
            ip=idimp1*(num(1,j)-1)
            xmin=min(xcoor(ip+1),xmin)
            xmax=max(xcoor(ip+1),xmax)
          enddo
        endif
        do 62 ic=1,vpocha(/2)
         do 63 iv=1,idim
          if (nv(iv).ne.nocomp(ic)) goto 63
          do 64 j=1,vpocha(/1)
           vmax=max(vmax,abs(vpocha(j,ic)))
  64      continue
  63     continue
  62    continue
        segdes meleme,mpoval,msoupo
  50   continue
       segdes mchpoi
*       if (vmax.le.0.) vmax=1.
       if (vmax.le.xpetit) vmax=1.d0
       ampf(nvec)=max(ampf(nvec),(xmax-xmin)/(vmax*10))
       if (idim.ge.2) then
         ampf(nvec)=max(ampf(nvec),(ymax-ymin)/(vmax*10))
         if (idim.ge.3)
     &     ampf(nvec)=max(ampf(nvec),(zmax-zmin)/(vmax*10))
       endif
      endif
      SEGDES MVECTE
      CALL ECROBJ ('VECTEUR ',MVECTE)
      RETURN
      END








