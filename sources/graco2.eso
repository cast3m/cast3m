C GRACO2    SOURCE    PV        18/11/19    21:15:07     9995
      SUBROUTINE GRACO2(MMATRX)
      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)
C  TANT QUE OOOVAL(1,4) NE MARCHE PAS SUR CRAY
C
C COPIE DE CHOLE POUR FAIRE UN CHOLEVSKI INCOMPLET DE PLUS ON GARDE LA
C MATRICE ASSEMBLEE ( SEMGENT LLIGN)
C
      PARAMETER (LPCRAY=10000)
      INTEGER OOOVAL,OOOLEN
      dimension ittime(4)
C
C  ****  MISE SOUS FORME A=Lt D L  DE LA MATRICE MMATRX
C        SEULES LES VALEURS INITIALEMENT NON NULLES SONT CALCULEES
C
-INC CCOPTIO
-INC SMMATRI
-INC CCASSIS
-INC CCHOLE
      SEGMENT KIVPO(IIMAX)
      SEGMENT KIVLO(IIMAX)
      SEGMENT ITMASQ(NBLIG)
      SEGMENT IMASQ(LMASQ)

      external graco5i
      SAVE IPASV
      DATA IPASV/0/
C     character*8 zen
C     equivalence (zen,izen)
      call timespv(ittime)
      kcour=(ittime(1)+ittime(2))/10
      kcourp=kcour
      kcouri=kcour
      kdiff=0
      kcour=0
      perf=0
      perfp=-1
      nbchan=1
      nbopit=0
      iposm=0
C     zen='CPU'//char(0)
C     le=4
      lolig=0
      nvaor=0
      nbthro=nbthrs
      ithrd=0
      if (nbthro.gt.1) then
       ithrd=1
       call threadii
      endif
      nbthr=nbthro
      do ith=1,nbthro
       nbop(ith)=0
      enddo
C* en fait la parallelisation n'apporte rien car la matrice est trop creuse
C*    nbthr=1
      MACTIT=OOOVAL(1,1)
      prec=1D-30
      nvstrm=0
      MMATRI=MMATRX
      SEGACT,MMATRI*MOD
      MILIG1=IILIGN
      IASLIG= IILIGN
      SEGINI,MILIGN=MILIG1
      IILIGN = MILIGN
      INO=ILIGN(/1)
      MDIA1=IDIAG
      IASDIA=IDIAG
      SEGINI,MDIAG=MDIA1
C------------------------
      IDIAG = MDIAG
C-------------------------
      NBLIG=INO
      SEGINI ITMASQ
C* comme la matrice est beaucoup plus creuse qu'en direct, on prend un masdim plus petit
      precc=prec
      INC=DIAG(/1)
      INCC=INC
      MIMIK=IIMIK
      MINCPO=IINCPO
      SEGACT,MINCPO,MIMIK
      IPLUMI=IMIK(/2)*2 +4
      IL2=0
      LTRK=MAX(LPCRAY+1,OOOVAL(1,4))
      IIMAX=((((IJMAX+IPLUMI) +LTRK)/LTRK)+1)*LTRK
      SEGINI KIVPO,KIVLO
      INEG=0
      NBLAG=0
      NENSLX=0
      NVSTOC=0
      NVSTOR=0
C
C  ngmaxy vient de option
C  ngmaxx est la valeur autoajustee
C  ngmaxz est la valeur utilisee dans les tests (grande si il y a du debordement)
      ngmaxx=ngmaxy
      NGMAXZ=NGMAXX
C
C
C  **** DEBUT DE LA TRIANGULARISATION. ON PREND NOEUD A NOEUD,
C  **** DECOMPACTAGE PUIS TRAVAIL SUR LES LIGNES DU NOEUDS
C
C  ****  LA LONGUEUR DE LA PLUS GRANDE LIGNE EST DONNEE PAR IMAX
C
  1   CONTINUE
      IVALMA=IJMAX+IPLUMI
      IL1=IL2+1
      IMIN=IL1


      mactic=0
      DO 2 I=IL1,INO

      LLIGN=    ILIGN(I)
      SEGACT /ERR=3/LLIGN


      NA=  IMMMM(/1)
C*    write (6,*) ' chole ligne noeud inconnues ',i,ipno(i),na
      NBPAR=NA+1
      NVALL=  NJMAX
      lolig=nvall/na+1
      if (lolig.gt.6000.and.lolig.gt.2*loligp.and.
     >  mactic.gt.NGMAXZ*nbthro/2    .and.
     >  i-il1.ge.nbthro) goto 3
        loligp=lolig

      SEGINI /ERR=3/ LIGN






C  recuperer la longueur du segment
      mactic=mactic+ooolen(lign)
C*    if ((mactic.gt.mactit/2.or.mactic.gt.mactit-nvstrm*12)
C*   >  .AND.I.GT.IL1) THEN
C*       SEGSUP LIGN
C*       GOTO 3
C*    endif
      NVSTOC=NVSTOC + NVALL
      IVALMA=IVALMA + NVALL


      nvaor = nvaor + xxva(/1)
C
C  ****  DECOMPACTAGE
C
      LMASQ=NVALL/MASDIM+2
      SEGINI IMASQ
      IPA=1
      valmi=1.D50
      valma=1.D-50
      DO 121 JPA=1,NA
      IVPO(JPA)=IPA
      KPA=IPPO(JPA+1)-IPPO(JPA)
      IPP=IPPO(JPA)
      IPPVV(JPA)=IPA-1
      LPA=LDEB(JPA)
      LPA1=LPA-IPA
      DO 122 MPA=1,KPA
      LL=LINC(MPA+IPP)
      IPLA=LL-LPA1
      VAL(IPLA)=XXVA(MPA+IPP)
        IMASQ(IPLA/MASDIM+1)=1

      XVAL1 = abs(val(ipla))
      valma=max(valma,XVAL1)
      if (val(ipla).ne.0.D0) valmi=min(valmi,XVAL1)
122   CONTINUE
C  REDUCTION EVENTUELLE DE LA LIGNE A SA PARTIE SIGNIFICATIVE
C   >  1E-50*DIAGONALE
C*** ***
      VALREF=ABS(VAL(IPA+IMMMM(JPA)-LPA))*1D-50
      ITROP=0
      IPAHAU=IPA+IMMMM(JPA)-LPA
C*    DO 123 ILD=IPA,IPAHAU-1
C*     IF (ABS(VAL(ILD)).GT.VALREF) GOTO 124
C*     ITROP=ITROP+1
C*23  CONTINUE
C124  CONTINUE
C*    ITROP=0
C*    IF (ITROP.NE.0) THEN
C*     LPA=LPA+ITROP
C*     JILD=IPAHAU-ITROP
C*     DO 125 ILD=IPA,JILD
C*     VAL(ILD)=VAL(ILD+ITROP)
C125   CONTINUE
C*     DO 126 ILD=JILD+1,JILD+ITROP
C*     VAL(ILD)=0.D0
C126   CONTINUE
C*     NVALL=NVALL-ITROP
C*     NVSTOC=NVSTOC-ITROP
C*     IVALMA=IVALMA-ITROP
C*    ENDIF
      IPA=IPA+IMMMM(JPA)-LPA+1
      IMMM(JPA)=IPNO(LPA)
      IF(IMIN.GT.IPNO(LPA)) IMIN=IPNO(LPA)
 121  CONTINUE
C     if (valmi.le.1d-20) then
C      write (6,*) ' valmi valma diag ',valmi,valma,val(val(/1))
C     endif
      IF (NVALL.NE.VAL(/1))SEGADJ LIGN
C*** **** ****
C*    LMASQ=NVALL/MASDIM+1
C*    SEGINI IMASQ
C*    DO ILD=1,VAL(/1)
C*      IF (ABS(VAL(ILD)).GT.VALREF) IMASQ(ILD/MASDIM+1)=1
C*    ENDDO
      ITMASQ(I)=IMASQ

      if (na.gt.0) then
          IPREL=  IMMMM(1)
          IDERL=  IMMMM(NA)
      endif
      IPPVV(NA+1)=IPA-1
C     SEGSUP LLIGN
C     SEGDES LLIGN
      ILIGN(I)=LIGN
      IF(IIMPI.EQ.1525)  THEN
       WRITE( IOIMP,4987)   I
 4987  FORMAT (' NOEUD NUMERO ',I5)
       LL=VAL(/1)
       WRITE(IOIMP, 4926)(VAL(MPA),MPA=1,LL)
4926  FORMAT(' VAL ' , 10E11.4)
      ENDIF
      nbths=nbthr
      if (mod(i+1-il1,nbths).eq.0
     >  .and.mactic.gt.NGMAXZ*nbthro.OR.I+1-il1.gt.1000)  then
         il2=i
         GOTO 4
      endif
    2 CONTINUE
      IL2=INO
      GO TO 4
    3 IL2=I-1
    4 CONTINUE
      nbthro=nbthrs
      if (mactic.le.50000) nbthro=1
      nbthr=nbthro

      IF(IL2.GE.IL1) GO TO 40
C
C ****  APPEL AUX ERREURS  MESSAGE PAS ASSEZ DE PLACE MEMOIRE
C
      ITYP=48
      CALL ERREUR(48)
      if (ithrd.eq.1) call threadis
      RETURN
   40 CONTINUE
      IM=INC




      DO 352 IH=IL2 ,IL1,-1
      LIGN=   ILIGN(IH  )
      IL=INC
      DO 354 JH=1,    IMMM(/1)
      IM=MIN(IM,    IMMM(JH))
      IL=MIN(IL,    IMMM(JH))
 354  CONTINUE
      IML=IL
      IMM=ipno(IM)
  352 CONTINUE
C  353 CONTINUE
      LIGN=ILIGN(IL1)
      IL11=IPREL
C
C  ****  BOUCLE  *5*  TRAVAILLE SUR LE NOEUD I QUI EST EN LECTURE
C
C     if (ngmaxz.eq.ngmaxy) write (6,*) 'resolution in core ',il1,il2
C     if (ngmaxz.ne.ngmaxy) write (6,*) 'resolution out of core ',
C    >      il1,il2
      ipos=0
      iper=imin
      ider=imin-1
      ngmaxz=ngmaxx
      macsec=0
      isec=0

      DO 5 I=IMIN,IL2
      if (ierr.ne.0) return
      LIG1=ILIGN(I)
      IMASQ=ITMASQ(I)
      IF(I.LT.IL1)  GO TO 7
C
C  ******* LE NOEUD I EST EN MEMOIRE IL EST TRIANGULE JUSQU'A
C  ******* IPREL  IL FAUT CONTINUER TOUTE LES LIGNES PUIS CALCULER
C  ******* LE TERME DIAGONAL
C
      LIGN=LIG1
      DO 156 KHG=1,IMMM(/1)
      II=IPREL-1+KHG
      IMMM(KHG)=0
      NN=IPPVV(KHG+1)
      NNM1=IPPVV(KHG)
      N=NN-NNM1
      DIAG(II)=VAL(NN)
      IF(N.EQ.1)  GO TO 8
      NMI=N-II
      IDEP=MAX(IL11,2-NMI)
      KIDEP=IDEP+NMI
      KI1=N-1
      KQ=-NMI
      VAL(NN)=VAL(NN)+
     # GRACO3(ILIGN,LIGN,VAL(1+IPPVV(KHG)),DIAG(1-NMI),IPNO(1-NMI),
     # IPPVV(1),KHG,IVPO(1),KIDEP,KI1,KQ,IMASQ(1),1+IPPVV(KHG),
     # PREC,ittr(1),nc)
       imasq(nn/masdim+1)=1
       imasq(n/masdim+1)=1
   8  CONTINUE
      if (diag(ii).ne.0.d0) then
       if (val(nn).lt.abs(diag(ii))*0.5) val(nn)=diag(ii)
      endif

      IF(ITTR(II).EQ.0.AND.
     & ABS(VAL(NN)).GT.ABS(DIAG(II))*1.E-10)  GO TO 12
      IF(ITTR(II).NE.0.AND.
     & ABS(VAL(NN)).GT.ABS(DIAG(II))*1.E-6)  GO TO 12
C
C  **** ON VIENT DE DETECTER UN MODE D'ENSEMBLE
C  **** ON AJOUTE A LA STRUCTURE UN RESSORT EGAL A CELUI QUI EXISTAIT
C  **** AU PREALABLE SUR CETTE INCONNUE.
C
      VAL(NN)=DIAG(II)*1d-4
      NENS=NENS+1
      IMMM(KHG)=NENS
      if(ittr(ii).NE.0) NENSLX=NENSLX+1
   12 CONTINUE
       IMASQ(NN/MASDIM+1)=1
      DIAG(II)=VAL(NN)
      IF(DIAG(II).NE.0.d0)  GO TO 41
      KQ1=1+NNM1
      KQN=N+NNM1
      DO 16 LFG=KQ1,KQN
      if (imasq(lfg/masdim+1).le.0) goto 16
      IF(VAL(LFG).NE.0.d0)  GO TO 17
   16 CONTINUE
      DIAG(II)=1.D0
      if (ittr(ii).ne.0) diag(ii)=-1d0
      VAL(NN)=DIAG(II)
      GO TO 41
   17 CONTINUE
C
C  ****  ENVOI ERREUR MATRICE SINGUIERE
C
      ITYP=49
      INTERR(1)=I
      CALL ERREUR(49)
      if (ithrd.eq.1) call threadis
      RETURN
C
C  ****  ON COMPTE LE NOMBRE DE TERMES DIAGONAUX NEGATIFS
C        ET LE NOMBRE DE MULTIPLICATEUR DE LAGRANGE
C
   41 IF(DIAG(II).LT.0.D0)  INEG=INEG+1
      IF(ITTR(II).NE.0) NBLAG=NBLAG+1
  156 CONTINUE
      NA=IMMM(/1)
C
C  RECOMPACTAGE DE LIGN (DEJA ENTIEREMENT TRAITEE)
C
      izro=2
      CALL COMPAC(VAL(1),NBPAR,KIVPO(1),KIVLO(1),
     #    NVALL,IPPVV(1),izro ,NA ,1D-30,imasq(1),iprel,iderl)
C on recree lign car la compacter en place emiette la memoire
       segadj lign
       segini,lig1=lign
       segsup lign
       lign=lig1
       ilign(i)=lign

      NVSTOR=NVSTOR+NVALL
      nvstrm=max(nvstrm,nvall)
      DO 143 LHG=1,NBPAR
       IVPO(2*LHG-1)=KIVPO(LHG)
       IVPO(2*LHG)=KIVLO(LHG)
 143  CONTINUE
      segsup imasq
      imasq=itmasq(i)
      if (i.gt.1) then
       lig1=ilign(i-1)
       segdes lig1
       iderac=min(iderac,i-2)
      endif
C*    WRITE (6,*) ' NOEU ',I,' DIAG INVERSE ',VAL(VAL(/1))
C*    WRITE (6,*) ' LIGNE APRES COMPACTION VAL '
C*    WRITE (6,*) (VAL(IK),IK=1,VAL(/1))
C*    WRITE (6,*) 'KIVPO '
C*    WRITE (6,*) (KIVPO(IK),IK=1,NBPAR)
C*    WRITE (6,*) 'KIVLO '
C*    WRITE (6,*) (KIVLO(IK),IK=1,NBPAR)

C  ****  ON TRIANGULARISE LES AUTRES LIGNES
C
      il1=il1+1
      if (il1.gt.il2) goto 5
      LIG1=ILIGN(I)
      lign=ilign(il1)
      IL11=IPREL
      goto 7
C  72  continue
  71  continue
      if (i.ne.il1-1) then
        ngmaxz= (oooval(1,1)/nbths)*0.66667
C**     write (6,*) ' passage au  grand ngmax ',i,il1,il2,ngmaxz
      endif
      if (isec.ne.0) ider=isec
      macsec=0
      isec=0
C      soit parce qu'on a fini, soit parce qu'on manque de memoire
C      il faut executer les lignes activees puis les desactiver
C      lancer les chole3 et attendre qu'ils soient finis
      if (ipos.ne.0) then
C      write (6,*) ' lancement thread ',iper,ider,il1,il2
       if (iper.gt.ider) then
        write (6,*) ' erreur interne chole '
        write (6,*) ' noeud ',i,' sur ',ino
        write (6,*) ' nombre de termes actuels ',nvstor
        call erreur(5)
       endif
       if (nbthr.gt.1) then
       do ith=2,nbthr
        call threadid(ith,graco5i)
       enddo
        call graco5i(1)
       do ith=2,nbthr
        call threadif(ith)
       enddo
       else
       do ith=1,nbthr
        call graco5i(ith)
       enddo
       endif
      endif

C  test ctrlC
      if (ierr.ne.0) goto 9999
      iposm=max(iposm,ipos)
      ipos=0
      iderf=ider-1
      if (ider.ne.il1-1) iderf=ider
      do il=iderf,iper,-1
        lign=ilign(il)
        segdes lign
C       write (6,*) ' desactivation ligne ',il
      enddo
       iderac=min(iderac,iper-1)
      iper=ider+1
C     write (6,*) ' iper ider il1 ',iper,ider,il1
      if (iper.ne.il1) goto 7

      goto 5
    7 CONTINUE
C  blocage secondaire sur les lignes en lecture pour minimiser le cache
      if (isec.le.iper+nbthrs) then
        if (macsec.gt.ngmaxz*nbthrs*2) then
         isec=i-1
C  on continue a activer pour voir si on doit passer en mode lent
**       goto 72
        endif
      endif
C*    if (i.gt.iderac) SEGACT/err=71/LIG1
      SEGACT/err=71/LIG1
C      macsec=macsec+ooolen(lig1)
      ipos=ipos+1
      ider=i
      if (i.gt.iderac) iderac=i
      if (i.eq.il1-1)   goto 71
    5 CONTINUE
C     write (6,*) ' il1 il2 apres 5 ',il1,il2
C      DO 11 I=IL1,IL2
C        LIGN=   ILIGN(I)
        SEGDES,LIGN


C   11 CONTINUE
      nbopt=0
      do ith=1,nbthro
       nbopt=nbopt+nbop(ith)
       nbop(ith)=0
      enddo
      nbopin=nbopt
      nbopit=nbopit+nbopin
      call timespv(ittime)
      kcourp=kcour
      kcour=(ittime(1)+ittime(2))/10
      kdiff=kcour-kcourp
C*      write (6,*) ' nb operation temps ',nbopin,kdiff
      if (kdiff.gt.5) then
       perf=nbopin/kdiff
C*     write (6,*) 'perf ngmaxy il1 il2',perf,ngmaxy,il1i,il2
       if (perf.lt.perfp*0.90 .and.nbchan.ne.1  ) then
         nbchan=1
         ngmaxx=ngmaxx*0.90
         perfp=perf
       elseif (nbchan.eq.0) then
         nbchan=-1
        ngmaxx=ngmaxx*1.10
        perfp=max(perf,perfp)
       else
        nbchan=0
       endif
C*    nbchan=0
       ngmaxx=max(10000,min(100000000,ngmaxx))
       ngmaxz=ngmaxx
       endif

      iderac=min(iderac,il1-1)
      macsec=0
      isec=0
      IF(IL2.LT.INO)  GO TO 1
C  ON MET A JOUR LE NOMBRE DE TERMES DIAGONAUX NEGATIF
C   ON ENLEVE LE NOMBRE DE MULTIPLICATEUR DE LAGRANGE
C       INEG=INEG-NBLAG
C     on ne compte pas 2 fois les multiplicateurs qui vont etre
C     elimines lors de la resolution car mode d'ensemble
      INEG=INEG-(NBLAG-NENSLX)
      if (iimpi.ne.0.and.NENSLX.gt.0) WRITE(IOIMP,4820) NENSLX
 4820 FORMAT(I12,' MODES D ENSEMBLE PORTANT SUR DES MULTIPLICATEURS',
     1' DE LAGRANGE DETECTES')

      IF(IIMPI.EQ.1) WRITE(IOIMP,4821) NVSTOC
 4821 FORMAT( ' NOMBRE DE VALEURS  DANS LE PROFIL',I12)
      IF(IIMPI.EQ.1) WRITE(IOIMP,4822) NVSTOR
 4822 FORMAT( ' NOMBRE DE VALEURS STOCKEES DANS LE PROFIL',I12)
      INTERR(1)=NVSTOR
      reaerr(1)=nvstor/inc**(4./3)
      reaerr(2)=2*nbopit/1D3/max(1,(kcour-kcouri))
      IF (IPASV.EQ.0) CALL ERREUR(-278)
      IPASV=1
      SEGDES,MINCPO
      SEGDES,MIMIK
      SEGDES,MMATRI
      SEGDES,MILIGN
      SEGDES,MDIAG
      MMATRX=MMATRI
      SEGSUP KIVPO,KIVLO,ITMASQ
 9999 continue
      if (ithrd.eq.1) call threadis
      RETURN
      END



































