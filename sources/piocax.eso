C PIOCAX    SOURCE    PV        18/11/20    21:15:04     1001
      SUBROUTINE PIOCAX(NBNN,IDIM,TAB1,NCOELE,NBPTEL,IPMINT,XE1,XE2,
     1           TABA,MRACC,SH1,TAB,MWRK6,LHOOK,
     2           IFOU,KCAS,KERRE)
C=======================================================================
C
C    TRANSFORME LES CONTRAINTES DE PIOLA KIRCHHOFF EN CONTRAINTES DE
C                             CAUCHY
C  ENTREE
C -------
C   NBNN             = NOMBRE DE POINTS PAR ELEMENTS
C   IDIM             = DIMENSION DE L ESPACE SUPPORT
C
C   TAB1(NBPTEL,NCOELE) =TABLEAU DES CONTRAINTES DE PIOLA KIRCHHOFF
C
C   NCOELE           = NOMBRE DE COMPOSTS TABLEAU DES CONTRAINTES
C
C   NBPTEL           = NOMBRE DE POINTS DE GAUSS
C   IPMINT           = POINTEUR DES FONCTIONS DE FORME
C   TABA             = pointeur tableau avec ddl de saut
c   MRACC            = pointeur tableau de raccourci pour les
C                      enrichissements elementaires
C
C   KCAS = 1 SI CONTRAINTES, 2 SI DEFORMATIONS
C
C TABLEAUX DE TRAVAIL
C--------------------
C   XE1(3,NBNN)    = COORDONNEES CORRESPONDANT A LA CONFIGURATION DEPART
C
C   XE2(3,NBNN)    = COORDONNEES CORRESPONDANT A LA CONFIGURATION ACTUEL
C
C   SH1(6,NBNN)    = FONCTIONS DE FORME EN UN POINT DE GAUSS
C
C  SORTIES
C---------
C   TAB(NBPTEL,NCOELE) =TABLEAU DES CONTRAINTES DE CAUCHY
C
C
C     AOUT 85
C     MODIF PEGON FEV 90  CAS BIDIM
C     PASSAGE AUX NOUVEAUX CHAMELEMS PAR P.DOWLATYARI 12/4/91
C
C=======================================================================
      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)
C
-INC CCREEL
-INC SMLREEL
-INC SMINTE
*
      SEGMENT MWRK6
       INTEGER ITRES1(NBPTEL)
       REAL*8 PRODDI(NBPTEL,LHOO2),PRODDO(NBPTEL,LHOO2)
       REAL*8 DDHOOK(LHOOK,LHOOK),DDHOMU(LHOOK,LHOOK)
       REAL*8 VEC(LHOOK),VEC2(LHOOK)
      ENDSEGMENT
*

      DIMENSION TAB1(NBPTEL,*)
      DIMENSION TAB(NBPTEL,*)
      DIMENSION XE1(3,*),XE2(3,*),SH1(6,*)
*as xfem 2010_01_13
      PARAMETER (NBNNMAX=20)
      SEGMENT MRACC
        INTEGER TLREEL(NBNN)
      ENDSEGMENT
*     ddl de saut enrichissement
      SEGMENT TABA
        REAL*8 TABA1(IDIM,NBNN),TABA2(IDIM,NBNN)
      ENDSEGMENT

*     phi et H aux nnoeuds ; phi et H au point de Gauss courant
      DIMENSION xphi1(NBNNMAX),xh1(NBNNMAX),TABPHG(2),tabdh(nbnnMAX)
*fin as xfem 2010_01_13
C
C     TABLEAUX DE TRAVAIL DIMENSIONNES ICI
C
      DIMENSION XJAC(3,3),FAC(6)
C
C     TABLEAUX INDIQUANT LA CORRESPONDANCE ENTRE INDICES I,J ET NUMERO
C     DE LA COMPOSANTE DE CONTRAINTES OU DE DEFORMATIONS
C
      DIMENSION IN(6),JN(6),ITAB(3,3)
C
      DATA FAC/1.D0,1.D0,1.D0,0.5D0,0.5D0,0.5D0/
      DATA IN/1,2,3,1,1,2/
      DATA JN/1,2,3,2,3,3/
C
      DATA ITAB(1,1),ITAB(1,2),ITAB(1,3)/1,4,5/
      DATA ITAB(2,1),ITAB(2,2),ITAB(2,3)/4,2,6/
      DATA ITAB(3,1),ITAB(3,2),ITAB(3,3)/5,6,3/
C
      KERRE=0

      MINTE = IPMINT
      NBSH = SHPTOT(/2)

      IDIM1=IDIM+1
C
C     MISE A ZERO DES CONTRAINTES OU DES DEFORMATIONS
C
      DO 50 IB=1,NCOELE
        DO 50 IA=1,NBPTEL
          TAB(IA,IB)=0.D0
  50  CONTINUE
C
C     BOUCLE SUR LES POINTS DE GAUSS
C
      DO 130 IC=1,NBPTEL

        tabphg(2)=0.D0
*as xfem 2010_01_13
*    Initialisation de SH1(Ni, Ni,x, Ni,y)
        do i3=1,nbnn
          xh1(i3)=0.D0
          do i4=1,IDIM1
            SH1(i4,i3)=SHPTOT(i4,i3,IC)
          enddo
        enddo
*      Calcul de H et phi aux noeuds et au point de Gauss IC
        do 131 i1=1,nbnn
          mlree1=tlreel(i1)
          if(mlree1.eq.0) goto 131
          tabphg(1)=0.D0
          do i2=1,nbnn
            xphi1(i2)=mlree1.PROG(i2)
            if (abs(xphi1(i2)).lt.1.d-7) then
               xh1(i2)=0.D0
            else
               xh1(i2)=sign(1.d0,xphi1(i2))
            endif
            tabphg(1)=tabphg(1)+SH1(1,i2)*xphi1(i2)
          enddo
           if (abs(tabphg(1)).lt.1.d-7) then
              tabphg(2)=0.D0
            else
              tabphg(2)=sign(1.d0,tabphg(1))
            endif

 131    continue
*    Calcul des H(x)-H(xi) :
        do i3=1,nbnn
         tabdh(i3)=tabphg(2)-xh1(i3)
        enddo
*   Calcul de SH1 :
       call jacobix(XE1,TABA1,TABDH,SH1,IDIM,NBNN,DJac)
C
C       CALCUL DE LA MATRICE  F
C
        CALL ZERO(XJAC,3,3)
        DO 140 ID=1,NBNN
        DO 140 IE=1,IDIM
*         r_z = XE2(IE,ID)
          r_z = XE2(IE,ID)+(tabdh(ID)*TABA2(IE,ID))
        DO 140 IF=1,IDIM
          XJAC(IE,IF)=XJAC(IE,IF) + SH1(IF+1,ID)*r_z
  140   CONTINUE
*fin as xfem 2010_01_13
        IF(IDIM.EQ.2) THEN
           XJAC(3,3)=1.D0
           IF(IFOU.EQ.0) THEN
C
CCCCCCCCCCCCC CAS AXISYMETRIQUE
C
             R1=0.
             R2=0.
             DO 150 ID=1,NBNN
               R1=R1+SH1(1,ID)*XE1(1,ID)
               R2=R2+SH1(1,ID)*XE2(1,ID)
 150         CONTINUE
             if (r1.lt.-xpetit/xzprec.or.r1.gt.xpetit/xzprec)then
               XJAC(3,3)=R2/R1
             else
               xjac(3,3)=xgrand*xzprec
             endif
           ENDIF
        ENDIF
C
C
        GO TO (500,600,700),KCAS
C
C         KCAS=1   CAS DES CONTRAINTES
C         ----------------------------
C
  500   CONTINUE
C
C
CCCCCCCCCCCC  CALCUL DE DETERMINANT DE F
C
        IF(IDIM.EQ.2) THEN
          DETF=XJAC(1,1)*XJAC(2,2)-XJAC(1,2)*XJAC(2,1)
          DETF = DETF * XJAC (3,3)
        ENDIF
        IF(IDIM.EQ.3) THEN
          DETF=XJAC(1,1)*(XJAC(2,2)*XJAC(3,3)-XJAC(3,2)*XJAC(2,3))
          DETF=DETF-XJAC(2,1)*(XJAC(1,2)*XJAC(3,3)-XJAC(3,2)*XJAC(1,3))
          DETF=DETF+XJAC(3,1)*(XJAC(1,2)*XJAC(2,3)-XJAC(1,3)*XJAC(2,2))
        ENDIF
        if (detf.lt.-xpetit/xzprec.or.detf.gt.xpetit/xzprec)then
          DETF=1./(DETF)
        else
          DETF=XGRAND*xzprec
        endif
C
C     CALCUL DES CONTRAINTES DE CAUCHY
C
        DO 160 ID=1,NCOELE
         IND=IN(ID)
         JND=JN(ID)
         DO 170 IE=1,IDIM
         DO 170 IF=1,IDIM
           ICO=ITAB(IE,IF)
           TAB(IC,ID)=TAB1(IC,ICO)*XJAC(IND,IE)*XJAC(JND,IF)*DETF
     1             +TAB(IC,ID)
 170     CONTINUE
 160    CONTINUE
C
C PEGON  :  ON NE FAIT PAS LA TRANSFORMATION SUR LA 3-EME COMPOSANTE
C
       IF(IDIM.EQ.2) THEN
         TAB(IC,3)=TAB1(IC,3)*XJAC(3,3)*XJAC(3,3)*DETF
       ENDIF
       GO TO 130
C
C         KCAS=2   CAS DES DEFORMATIONS
C         -----------------------------
C
  600   CONTINUE
C
C
CCCCCCCCCCCC  CALCUL DE L'INVERSE DE F
C
          CALL INVMA1(XJAC,3,3,KERRE)
          IF(KERRE.NE.0) THEN
             WRITE(6,77881) ((XJAC(MI,MJ),MJ=1,3),MI=1,3)
77881        FORMAT(2X,' MATRICE SINGULIERE' /(3(1X,1PE12.5)/))
             RETURN
          ENDIF
C
C     CALCUL DES DEFORMATIONS
C
        DO 260 ID=1,NCOELE
         IND=IN(ID)
         JND=JN(ID)
         DO 270 IE=1,IDIM
         DO 270 IF=1,IDIM
           ICO=ITAB(IE,IF)
           TAB(IC,ID)=TAB(IC,ID) +
     1      FAC(ICO)*TAB1(IC,ICO)*XJAC(IE,IND)*XJAC(IF,JND)/FAC(ID)
 270     CONTINUE
 260    CONTINUE
C
C PEGON  :  ON NE FAIT PAS LA TRANSFORMATION SUR LA 3-EME COMPOSANTE
C
       IF(IDIM.EQ.2) THEN
         TAB(IC,3)=TAB1(IC,3)*XJAC(3,3)*XJAC(3,3)
       ENDIF
C
       GO TO 130
C
C         KCAS=3   CAS DE LA MATRICE DE HOOKE
C         -----------------------------------
C
  700   CONTINUE
C
CCCCCCCCCCCC  CALCUL DE L'INVERSE DU DETERMINANT DE F
C
        IF (IDIM.EQ.3) THEN
          DETF=XJAC(1,1)*(XJAC(2,2)*XJAC(3,3)-XJAC(3,2)*XJAC(2,3))
          DETF=DETF-XJAC(2,1)*(XJAC(1,2)*XJAC(3,3)-XJAC(3,2)*XJAC(1,3))
          DETF=DETF+XJAC(3,1)*(XJAC(1,2)*XJAC(2,3)-XJAC(1,3)*XJAC(2,2))
        ELSE IF (IDIM.EQ.2) THEN
          DETF = ( XJAC(1,1)*XJAC(2,2)-XJAC(1,2)*XJAC(2,1) ) * XJAC(3,3)
        ELSE IF (IDIM.EQ.1) THEN
          DETF = XJAC(1,1) * XJAC(2,2) * XJAC(3,3)
        ENDIF
        if (detf.lt.-xpetit/xzprec.or.detf.gt.xpetit/xzprec)then
          DETF=1./(DETF)
        else
          DETF=XGRAND*xzprec
        endif
C
      IJ=1
      DO 710 JJ=1,LHOOK
        DO 710 II=1,LHOOK
          DDHOOK(II,JJ)=PRODDI(IC,IJ)
          IJ=IJ+1
  710 CONTINUE
*
        CALL ZERO(DDHOMU,LHOOK,LHOOK)
        KEY=2
C
       DO 720 LC=1,LHOOK

        CALL ZERO (VEC,LHOOK,1)
        DO 760 ID=1,LHOOK
         IND=IN(ID)
         JND=JN(ID)
         DO 770 IE=1,IDIM
         DO 770 IF=1,IDIM
           ICO=ITAB(IE,IF)
           IF(ICO.EQ.LC) THEN
             VEC(ID)=VEC(ID)+
     &         FAC(ICO)*XJAC(IE,IND)*XJAC(IF,JND)/FAC(ID)
           ENDIF
 770     CONTINUE
 760    CONTINUE
C
C ON NE FAIT PAS LA TRANSFORMATION SUR LA 3-EME COMPOSANTE
C
       IF (IDIM.EQ.2) THEN
         IF(LC.EQ.3)  VEC(3)=XJAC(3,3)*XJAC(3,3)
*
       ELSE IF (IDIM.EQ.1) THEN
         IF(LC.EQ.2) VEC(2)=XJAC(2,2)*XJAC(2,2)
         IF(LC.EQ.3) VEC(3)=XJAC(3,3)*XJAC(3,3)
       ENDIF
C
       CALL MATVE1(DDHOOK,VEC,LHOOK,LHOOK,VEC2,KEY)
C
        DO 761 ID=1,LHOOK
         IND=IN(ID)
         JND=JN(ID)
         DO 771 IE=1,IDIM
         DO 771 IF=1,IDIM
           ICO=ITAB(IE,IF)
           DDHOMU(ID,LC)=VEC2(ICO)*XJAC(IND,IE)*XJAC(JND,IF)*DETF
     1             +DDHOMU(ID,LC)
 771     CONTINUE
 761    CONTINUE
C
C ON NE FAIT PAS LA TRANSFORMATION SUR LA 3-EME COMPOSANTE
C
       IF (IDIM.EQ.2) THEN
         DDHOMU(3,LC)=VEC2(3)*XJAC(3,3)*XJAC(3,3)*DETF
       ELSE IF (IDIM.EQ.1) THEN
         DDHOMU(2,LC)=VEC2(2)*XJAC(2,2)*XJAC(2,2)*DETF
         DDHOMU(3,LC)=VEC2(3)*XJAC(3,3)*XJAC(3,3)*DETF
       ENDIF

  720 CONTINUE
C
      IJ=1
      DO 780 JJ=1,LHOOK
        DO 780 II=1,LHOOK
          PRODDO(IC,IJ)=DDHOMU(II,JJ)
          IJ=IJ+1
  780 CONTINUE
*
*
 130  CONTINUE
      RETURN
      END





