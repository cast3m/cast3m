C CHOLE     SOURCE    PV        19/02/04    21:15:04     10103
      SUBROUTINE CHOLE(MMATRX,PREC,istab)
      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)
C  TANT QUE OOOVAL(1,4) NE MARCHE PAS SUR CRAY
      PARAMETER (LPCRAY=10000)
      INTEGER OOOVAL,OOOLEN
      dimension ittime(4)

      POINTEUR LILIGN.MILIGN





C
C  ****  MISE SOUS FORME A=Lt D L  DE LA MATRICE MMATRX
C
-INC CCOPTIO
-INC CCREEL
-INC SMMATRI

-INC CCASSIS
-INC CCHOLE
      SEGMENT KIVPO(IIMAX)
      SEGMENT KIVLO(IIMAX)
      SEGMENT ITMASQ(NBLIG)
      SEGMENT IMASQ(LMASQ)

      external chole3i
      SAVE IPASV
      DATA IPASV/0/
C     character*8 zen
C     equivalence (zen,izen)
      if (istab.ne.0.and.istab.ne.1) call erreur(5)
      call timespv(ittime)
      kcour=(ittime(1)+ittime(2))/10
      kcourp=kcour
      kcouri=kcour
      kdiff=0
      kcour=0
      perf=0.d0
      perfp=-1
      nbchan=1
      nbopit=0
      iposm=0
C     zen='CPU'//char(0)
C     le=4
      lolig=0
      nvaor=0
      nbthro=nbthrs
      ithrd=0
      if (nbthro.gt.1) then
       ithrd=1
       call threadii
      endif
      nbthr=nbthro
      do ith=1,nbthro
       nbop(ith)=0
      enddo
      stmult=1d-5

C  nouvelle methode de gestion de l'espace memoire necessitee par la parallelisation
C  memoire vive totale
      MACTIT=OOOVAL(1,1)
C  un bloc de memoire fera au plus macti/2
      nvstrm=0
      MMATRI=MMATRX
      SEGACT,MMATRI*MOD
      PRCHLV=PREC
      MILIGN=IILIGN

      SEGACT,MILIGN*MOD
      INO=ILIGN(/1)
      MDIAG=IDIAG
      SEGACT,MDIAG*MOD
      NBLIG=INO
      SEGINI ITMASQ
      precc=prec
      INC=DIAG(/1)
      nvstrm=inc
      INCC=INC
      MIMIK=IIMIK
      MINCPO=IINCPO
      SEGACT,MINCPO,MIMIK
      IPLUMI=IMIK(/2)*2 +4
      IL2=0
      IIMAX=IJMAX+IPLUMI
      SEGINI KIVPO,KIVLO
      INEG=0
      NBLAG=0
      NENSLX=0
      NVSTOC=0
      NVSTOR=0
      diagmax=XPETIT/XZPREC
      diagmin=xgrand
      do i=1,diag(/1)
       if (ittr(i).eq.0) diagmax=max(diagmax,abs(diag(i)))
       if (ittr(i).eq.0.and.abs(diag(i)).gt.xpetit/xzprec)
     >   diagmin=min(diagmin,abs(diag(i)))
      enddo
      if (diagmax.le.xpetit/xzprec) then
         do i=1,diag(/1)
           diagmax=max(diagmax,abs(diag(i)))
           if (abs(diag(i)).gt.xpetit/xzprec)
     >       diagmin=min(diagmin,abs(diag(i)))
         enddo
      endif
      diagmin=min(diagmin,diagmax)
**     write (6,*) ' chole diagmin diagmax ',diagmin,diagmax,diag(/1)

C
C  ngmaxy vient de option
C  ngmaxx est la valeur autoajustee
C  ngmaxz est la valeur utilisee dans les tests (grande si il y a du debordement)
      ngmaxx=ngmaxy
      NGMAXZ=NGMAXX
C
C
C  **** DEBUT DE LA TRIANGULARISATION. ON PREND NOEUD A NOEUD,
C  **** DECOMPACTAGE PUIS TRAVAIL SUR LES LIGNES DU NOEUDS
C
C  ****  LA LONGUEUR DE LA PLUS GRANDE LIGNE EST DONNEE PAR IMAX
C
C SP  indicateurs pour impression message "stabilisation RESO..."
      isr=0
      isrl=0

  1   CONTINUE
      IVALMA=IJMAX+IPLUMI
      IL1=IL2+1
      IMIN=IL1


      mactic=0
      DO 2 I=IL1,INO

      LLIGN=    ILIGN(I)
      SEGACT /ERR=3/LLIGN


      NA=  IMMMM(/1)
C*    write (6,*) ' chole ligne noeud inconnues ',i,ipno(i),na
      NBPAR=NA+1
      NVALL=  NJMAX
      lolig=nvall/na+1
      if (lolig.gt.2048.and.lolig.gt.3*loligp/2.and.
     >  mactic.gt.NGMAXZ*nbthrs/2    .and.
     >  i-il1.ge.nbthro  ) goto 3
        loligp=lolig
      LIGN=0
      SEGINI /ERR=3/ LIGN






C  recuperer la longueur du segment
      mactic=mactic+ooolen(lign)
C*    if ((mactic.gt.mactit/2.or.mactic.gt.mactit-nvstrm*12)
C*   >  .AND.I.GT.IL1) THEN
C*       SEGSUP LIGN
C*       GOTO 3
C*    endif
      NVSTOC=NVSTOC + NVALL
      IVALMA=IVALMA + NVALL


      nvaor = nvaor + xxva(/1)
C
C  ****  DECOMPACTAGE
C
      LMASQ=NVALL/MASDIM+2
      imasq=0
      SEGINI /ERR=3/ IMASQ

      IPA=1
      DO 121 JPA=1,NA
            IVPO(JPA)=IPA
        KPA =   IPPO(JPA+1)-  IPPO(JPA)
        IPP =   IPPO(JPA)
            IPPVV(JPA)=IPA-1
        LPA  =   LDEB(JPA)
        LPA1 = LPA-IPA

        DO 122 MPA=1,KPA
          LL   =   LINC(MPA+IPP)
          IPLA = LL -LPA1
              VAL(IPLA)=  XXVA(MPA+IPP)
              IMASQ(IPLA/MASDIM+1)=1
          if (ipla-ipa+1.ge.1) IMASQ((IPLA-ipa+1)/MASDIM+1)=1
122     CONTINUE









        IPA=IPA+  IMMMM(JPA)-LPA + 1
Cpv         IMMM(JPA)=   IPNO(LPA)
        IMMM(JPA)=LPA
        IF(IMIN  .GT.   IPNO(LPA )) IMIN  =    IPNO(LPA)



121   CONTINUE

* indexation de imasq
        ipln=lmasq/na
        iplp=lmasq/na
        do 123 ipl=lmasq/na,1,-1
          if (imasq(ipl).gt.0) then
            imasq(ipl)=iplp*masdim
            ipln=ipl-1
          else
            imasq(ipl)=-ipln*masdim
            iplp=ipl-1
          endif
 123    continue
**      write (6,*) ' imasq ',lmasq/na
**      write (6,*) (imasq(ipl),ipl=1,lmasq/na)








C*** **** ****









      ITMASQ(I)=IMASQ


      if (na.gt.0) then
          IPREL=  IMMMM(1)
          IDERL=  IMMMM(NA)
          lcara(2,i)=iprel
          lcara(3,i)=iderl
      endif
          IPPVV(NA+1)=IPA-1





      SEGSUP LLIGN
         ILIGN(I)=LIGN


      nbths=nbthr
C*    write (6,*) 'longueur ligne ',nvall
C nb de ligne multiple du nb de threads
C blocage ligne lecture-ecriture pour minimiser le cache
      if (mod(i+1-il1,nbths).eq.0
     >  .and.mactic.gt.NGMAXZ*nbthro.OR.I+1-il1.gt.768)  then
         il2=i
         GOTO 4
      endif


    2 CONTINUE
      IL2=INO
      GO TO 4
    3 IL2=I-1
      loligp=lolig
      if (imasq.eq.0.and.lign.ne.0) segsup lign
    4 CONTINUE
      nbthro=nbthrs
*     if (mactic.le.50000) nbthro=1
      nbthro=max(1,mactic/200000)
      nbthro=min(nbthrs,nbthro)
      nbthr=nbthro
C
      IF(IL2.GE.IL1) GO TO 40
C
C ****  APPEL AUX ERREURS  MESSAGE PAS ASSEZ DE PLACE MEMOIRE
C
C      ITYP=48
      CALL ERREUR(48)
      if (ithrd.eq.1) call threadis
      RETURN
   40 CONTINUE
      IM=INC




      DO 352 IH=IL2 ,IL1,-1
      LIGN=   ILIGN(IH  )
      IL=INC
      DO 354 JH=1,    IMMM(/1)
      IM=MIN(IM,    IMMM(JH))
      IL=MIN(IL,    IMMM(JH))
 354  CONTINUE
      IML=IL
      IMM=ipno(IM)
  352 CONTINUE
C  353 CONTINUE
      LIGN=ILIGN(IL1)
















      IL11=    IPREL


C
C  ****  BOUCLE  *5*  TRAVAILLE SUR LE NOEUD I QUI EST EN LECTURE
C
C     if (ngmaxz.eq.ngmaxx) write (6,*) 'resolution in core ',il1,il2
C     if (ngmaxz.ne.ngmaxx) write (6,*) 'resolution out of core ',
C    >      il1,il2
      lig1=   ilign(imin)
      ipos=0
      iper=imin
      ider=imin-1
      iderac=imin-1
      if (ngmaxz.lt.ngmaxx*2) ngmaxz=ngmaxx
      macsec=0
      isec=0

      IL1i=il1
      DO 5 I=IMIN ,IL2
      IMASQ=ITMASQ(I)

      LIG1=   ILIGN(I)

      IF(I.LT.IL1)  GO TO 7
C
C  ******* LE NOEUD I EST EN MEMOIRE IL EST TRIANGULE JUSQU'A
C  ******* IPREL  IL FAUT CONTINUER TOUTE LES LIGNES PUIS CALCULER
C  ******* LE TERME DIAGONAL
C
      LIGN=LIG1
      DO 156 KHG=1,IMMM(/1)

      II=IPREL-1+KHG
      IMMM(KHG)=0
      NN=IPPVV(KHG+1)

      NNM1=IPPVV(KHG)

      N=NN-NNM1
      DIAG(II)=VAL(NN)
      IF(N.EQ.1)  GO TO 8
      NMI=N-II
      IDEP=MAX(IL11,2-NMI)
      KIDEP=IDEP+NMI
      KI1=N-1
      KQ=-NMI
      VAL(NN)=VAL(NN)+
     #CHOLE1(   ILIGN,LIGN,VAL(1+IPPVV(KHG)),DIAG(1-NMI),   IPNO(1-NMI),
     # IPPVV(1),KHG,IVPO(1),KIDEP,KI1,KQ,IMASQ(1),1+IPPVV(KHG),
     # PREC,nbop(1))
       imasq(nn/masdim+1)=1
       imasq(n/masdim+1)=1
   8  CONTINUE
      diagref=max(abs(diag(ii)),diagmin)
      diagcmp=diagref*1d-10
      IF(   ITTR(II).EQ.0.AND.
     & ABS(     VAL(NN)).GT.diagcmp)  GO TO 12
      IF(   ITTR(II).NE.0.AND.
     & ABS(     VAL(NN)).GT.diagcmp)  GO TO 12
C  il faut mettre une valeur plus grande sur les LX car on a un probleme de conditionnement
C  sur le calcul des reactions en cas de 2 relations presque identique
C
C  **** ON VIENT DE DETECTER UN MODE D'ENSEMBLE
C  **** ON AJOUTE A LA STRUCTURE UN RESSORT EGAL A CELUI QUI EXISTAIT
C  **** AU PREALABLE SUR CETTE INCONNUE.
C
*     write (6,*) ' chole mode d ensemble ittr ligne ',
*    >      ittr(ii),ii,diag(ii),val(nn),diagref
C  on garde le signe car il fau un moins sur les ML
       vmaxi=diagref
       do ipv=1+ippvv(khg),nn
        vmaxi=max(vmaxi,abs(val(ipv)))
       enddo
      if(   ittr(ii).NE.0) then
       VAL(NN)=val(nn)-4.D0*diagref
       NENSLX=NENSLX+1
      else
       val(nn)=vmaxi
      endif
      NENS=NENS+1
           IMMM(KHG)=NENS
   12 CONTINUE


*  stabilisation
      IF (ISTAB.NE.0) THEN
*  elimination des Nan
       if (.not.(abs(val(nn)).lt.xgrand*xzprec)) then
         val(nn)=xgrand*xzprec
         write (6,*) 'Nan dans chole ligne',ii
       endif
*
       diagcmp=abs(diagmin)*1d-5+xpetit/xzprec
       if (val(nn).lt.-diagmax*1d-3.and.ittr(ii).eq.0) then
        val(nn)=abs(val(nn))
***     val(nn)=diagmax*1d-3
        if (immm(khg).eq.0) NENS=NENS+1
        IMMM(KHG)=NENS
       elseif (val(nn).le.diagcmp.and.ittr(ii).eq.0 ) then
        if (isr.eq.0.or.iimpi.gt.0)
     &     write (6,*) ' stabilisation RESO ',ii,val(nn),diag(ii)
        isr=isr+1
        val(nn)=max(diagcmp,-val(nn))
        if (immm(khg).eq.0) NENS=NENS+1
        IMMM(KHG)=NENS
       else
        if (ittr(ii).eq.0) diagmin=min(diagmin,abs(val(nn)))
       endif
       if (val(nn).ge.abs(diag(ii))*stmult.and.ittr(ii).ne.0) then
        if (isrl.eq.0.or.iimpi.gt.0)
     &     write (6,*) ' stabilisation RESO lagrange ',ii,val(nn)
        isrl=isrl+1
        val(nn)=-abs(diag(ii))*stmult
        if (immm(khg).eq.0) then
           NENS=NENS+1
           NENSLX=NENSLX+1
        endif
        IMMM(KHG)=NENS
       endif
      ENDIF





      DIAG(II)=     VAL(NN)
      IF(abs(DIAG(II)).gt.xpetit)  GO TO 41
      DIAG(II)=diagmax
      if (ittr(ii).ne.0) diag(ii)=-diagmax
      VAL(NN)=DIAG(II)
      GO TO 41
C
C  ****  ENVOI ERREUR MATRICE SINGUIERE
C
C      ITYP=49
      INTERR(1)=I
      CALL ERREUR(49)
      if (ithrd.eq.1) then
        call threadis
      endif
      RETURN
C
C  ****  ON COMPTE LE NOMBRE DE TERMES DIAGONAUX NEGATIFS
C        ET LE NOMBRE DE MULTIPLICATEUR DE LAGRANGE
C
   41 IF(DIAG(II).LT.0.D0)  INEG=INEG+1
      IF(   ITTR(II).NE.0) NBLAG=NBLAG+1

  156 CONTINUE
      NA=IMMM(/1)
C
C  RECOMPACTAGE DE LIGN (DEJA ENTIEREMENT TRAITEE)
C
      if (na.gt.0)
     >CALL COMPAC(     VAL(1),NBPAR,KIVPO(1),KIVLO(1),
     #    NVALL,     IPPVV(1),IZROSF,NA,PREC,imasq(1),iprel,iderl)

C on recree lign car la compacter en place emiette la memoire
       lig1=lign
       segini /err=1431/ lig1
 1431  continue
       do it=1,nvall
        lig1.val(it)=val(it)
       enddo
       do it=1,na
        lig1.immm(it)=immm(it)
        lig1.ippvv(it)=ippvv(it)
       enddo
        lig1.ippvv(na+1)=ippvv(na+1)
        lig1.iml=iml
        lig1.iprel=iprel
        lig1.iderl=iderl
        lig1.iml=iml
        lcara(2,i)=lig1.iprel
        lcara(3,i)=lig1.iderl
        lcara(1,i)=lig1.iml
       if (lign.ne.lig1) then
        segsup lign
        lign=lig1
       else
        segadj lign
       endif
          ilign(i)=lign
      NVSTOR=NVSTOR+NVALL
      nvstrm=max(nvstrm,nvall)
      DO 143 LHG=1,NBPAR
            IVPO(2*LHG-1)=KIVPO(LHG)
            IVPO(2*LHG)  =KIVLO(LHG)
 143  CONTINUE
C   Si la ligne est petite, il n'y a rien a gagner a paralleliser
      nbthr=min(nbthro,(nvall*(il2-il1+1))/64+1)
C*    write (6,*) ' nbthr-1 ',nbthr


      segsup imasq
      imasq=itmasq(i)
      if (i.gt.1) then
       lig1=ilign(i-1)
       segdes lig1
       iderac=min(iderac,i-2)
      endif

C
C  ****  ON TRIANGULARISE LES AUTRES LIGNES
C
      il1=il1+1
      if (il1.gt.il2) goto 5
      LIG1=ILIGN(I)
      lign=ilign(il1)
      IL11=IPREL
      goto 7
C  72  continue
  71  continue
      if (iper.gt.ider) then
        call erreur(48)
        return
      endif
      if (i.lt.il1-10) then
        ngmaxz= (oooval(1,1)/nbths)*0.95
c       write (ioimp,*) ' passage au  grand ngmax ',i,il1,il2,ngmaxz
      endif
      if (isec.ne.0) ider=isec
      macsec=0
      isec=0
C      soit parce qu'on a fini, soit parce qu'on manque de memoire
C      il faut executer les lignes activees puis les desactiver
C      lancer les chole3 et attendre qu'ils soient finis
      if (ipos.ne.0) then
C       write (6,*) ' lancement thread ',iper,ider,il1,il2
        if (iper.gt.ider) then
          write (6,*) ' erreur interne chole '
          call erreur(5)
        endif
C*    write (6,*) ' nbthr-2 ',nbthr
        nbthr=min(nbthr,il2-il1+1)
C*    write (6,*) ' nbthr-3 ',nbthr
        if (nbthr.ge.1) then
          LILIGN=MILIGN
          do ith=2,nbthr
            call threadid(ith,chole3i)
          enddo
          call chole3i(1)
          do ith=2,nbthr
            call threadif(ith)
          enddo

        else
          LILIGN=MILIGN
          do ith=1,nbthr
            call chole3i(ith)
          enddo
        endif
      endif

C  test ctrlC
      if (ierr.ne.0) goto 9999
      iposm=max(iposm,ipos)
      ipos=0
      iderf=ider-1
      if (ider.ne.il1-1) iderf=ider
      do il=iderf,iper,-1
        lign=ilign(il)
        segdes lign
C       write (6,*) ' desactivation ligne ',il
      enddo
       iderac=min(iderac,iper-1)
      iper=ider+1
C     write (6,*) ' iper ider il1 ',iper,ider,il1
      if (iper.ne.il1) goto 7

      goto 5
    7 CONTINUE
C  blocage secondaire sur les lignes en lecture pour minimiser le cache
**    if (isec.le.iper+nbthrs) then
**      if (macsec.gt.ngmaxz*nbthrs*2) then
**       isec=i-1
C  on continue a activer pour voir si on doit passer en mode lent
**       goto 72
**      endif
**    endif
C*    if (i.gt.iderac) SEGACT/err=71/LIG1
      SEGACT/err=71/LIG1
C      macsec=macsec+ooolen(lign)
      ipos=ipos+1
      ider=i
      if (i.gt.iderac) iderac=i
      if (i.eq.il1-1)   goto 71
    5 CONTINUE
C     write (6,*) ' il1 il2 apres 5 ',il1,il2
      DO 11 I=IL1,IL2
        LIGN=   ILIGN(I)
        SEGDES,LIGN


   11 CONTINUE
      nbopt=0
      do ith=1,nbthro
       nbopt=nbopt+nbop(ith)
       nbop(ith)=0
      enddo
      nbopin=nbopt
      nbopit=nbopit+nbopin
      call timespv(ittime)
      kcourp=kcour
      kcour=(ittime(1)+ittime(2))/10
      kdiff=kcour-kcourp
C*      write (6,*) ' nb operation temps ',nbopin,kdiff
      if (kdiff.gt.5) then
       perf=nbopin/kdiff
C*    if (nbchan.ne.0) perfp=perf
*      write (6,*) 'perf ngmaxy il1 il2',perf,ngmaxx,il1i,il2
       if (perf.lt.perfp*0.90 .and.nbchan.ne.1  ) then
         nbchan=1
         ngmaxx=ngmaxx*0.90
         perfp=perf
       elseif (nbchan.eq.0) then
         nbchan=-1
        ngmaxx=ngmaxx*1.10
        perfp=max(perf,perfp)
       else
        nbchan=0
       endif
C*    nbchan=0
       ngmaxx=max(10000,min(1000000000,ngmaxx))
       ngmaxz=ngmaxx
       endif

      iderac=min(iderac,il1-1)
      macsec=0
      isec=0
      IF(IL2.LT.INO)  GO TO 1
C  ON MET A JOUR LE NOMBRE DE TERMES DIAGONAUX NEGATIF
C   ON ENLEVE LE NOMBRE DE MULTIPLICATEUR DE LAGRANGE
C       INEG=INEG-NBLAG
C     on ne compte pas 2 fois les multiplicateurs qui vont etre
C     elimines lors de la resolution car mode d'ensemble
      INEG=INEG-(NBLAG-NENSLX)
      if (iimpi.ne.0.and.NENSLX.gt.0) WRITE(IOIMP,4820) NENSLX
 4820 FORMAT(I12,' MODES D ENSEMBLE PORTANT SUR DES MULTIPLICATEURS',
     1' DE LAGRANGE DETECTES')

      IF (IIMPI.EQ.1) WRITE(IOIMP,4821) NVSTOC
 4821 FORMAT( ' NOMBRE DE VALEURS  DANS LE PROFIL',I12)
      IF (IIMPI.EQ.1) WRITE(IOIMP,4822) NVSTOR
 4822 FORMAT( ' NOMBRE DE VALEURS STOCKEES DANS LE PROFIL',I12)
      IF (IIMPI.EQ.1) WRITE(IOIMP,4823) NVaor
 4823 FORMAT( ' NOMBRE DE VALEURS initiales',I9)
C     IF (IIMPI.EQ.1) WRITE(IOIMP,4824) nbopit/1d6/(kcour-kcouri)
C 4824 FORMAT( ' Performance en Gigaflops ',F8.1)
      INTERR(1)=NVSTOR
      reaerr(1)=nvstor/inc**(4.D0/3.D0)
      reaerr(2)=2.D0*nbopit/1.D6/max(1,(kcour-kcouri))
      IF (IPASV.EQ.0) CALL ERREUR(-278)
      IPASV=1
      SEGDES,MINCPO
      SEGDES,MIMIK
      SEGDES,MMATRI
      SEGDES,MILIGN
      SEGDES,MDIAG
      MMATRX=MMATRI
      SEGSUP KIVPO,KIVLO,ITMASQ
C     write (6,*) ' chole ipos max ',iposm
 9999 continue
      if (ithrd.eq.1) then
        call threadis
      endif
      RETURN
      END

































