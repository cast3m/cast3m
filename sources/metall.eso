C METALL    SOURCE    CB215821  18/12/04    21:15:46     10020
C METALL    SOURCE    PV        14/05/18    21:15:48     9660
      SUBROUTINE METALL(iwrk52, iwrmet)
C
C     Modele METALLURGIE : LEBLOND / KOISTINEN
C     Appelle par COML6
C     En entrées : Le segment de travail WRK52 (voir include DECHE)
C                  Le segment IMODEL du modele elementaire (metallurgie)
C     En sortie : ecrit les proportions de phases finales
C     dans le tableau WRK52.VARF
C
      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)

      PARAMETER (NPHASE=20)
      REAL*8 delta(NPHASE)
      REAL*8 Prop(NPHASE)
      REAL*8 PropPr(NPHASE)
      REAL*8 VAR0L(NPHASE)
      REAL*8 TYPREA(NPHASE)
      INTEGER NPROD(NPHASE)
      INTEGER NREAC(NPHASE)
      REAL*8 CRITER(NPHASE)

      CHARACTER*4 MOT4a,MOT4b,MOT4c

-INC CCOPTIO
-INC SMCHAML
-INC CCHAMP
-INC DECHE
-INC CCREEL
-INC SMMODEL
-INC SMLENTI
-INC SMLMOTS

      wrk52 = iwrk52
      wrkmet = iwrmet

c~ C     Pour moi, test :
c~         if(temp0 .eq. 3000.D0) then
c~           itoto = 1
c~           WRITE(*,*) '***********MOI, debut metall.eso***********'
c~         else
c~           itoto = 0
c~         endif
c~ C     FIN TEST MOI

      XSECUR = 1.D-8
      ITMAXI = 1000

      if( VAR0(/1) .gt. NPHASE ) then
        CALL ERREUR(21)
        RETURN
      endif

      do ini = 1, VAR0(/1)
        VAR0L(ini) = VAR0(ini)
      enddo

      do i = 1, TYPES(/2)

        IF     ( TYPES(i) .eq. 'KOIS' ) THEN
          TYPREA(i) = 1
        ELSE IF( TYPES(i) .eq. 'LEBL' ) THEN
          TYPREA(i) = 2
        ELSE
          CALL ERREUR(21)
          RETURN
        ENDIF

C       NREAC(i) = Valeur de la position du reactif de la reaction
C                   numero i dans le tableau PHASES
C       Optimisation pour eviter COMPARE_STRING (LENTISSIME)

        MOT4a=REACTI(i)
        MOT4c=PRODUI(i)
        DO III=1,PHASES(/2)
          MOT4b=PHASES(III)
          IF(MOT4a .EQ. MOT4b)THEN
            NREAC(i) = III
          ENDIF
          IF(MOT4c .EQ. MOT4b)THEN
            NPROD(i) = III
          ENDIF
        ENDDO

C        CALL PLACE(PHASES, PHASES(/2), NREAC(i), REACTI(i) )
C       NPROD(i) = Valeur de la position du produit de la reaction
C                   numero i dans le tableau PHASES
C        CALL PLACE(PHASES, PHASES(/2), NPROD(i), PRODUI(i) )

      enddo

      SomPha = 0.D0
      do i = 1, VAR0(/1), 1
        SomPha = SomPha + VAR0(i)
      enddo
      if( ABS (SomPha - 1.D0) .GT. XZPREC*100.D0 ) then
        REAERR(1) = SomPha
        REAERR(2) = ABS (SomPha - 1.D0)
        CALL ERREUR(1079)
        RETURN
      endif

      DT = tempf -temp0
      temp0L = temp0
      tempfL = tempf
      idec = 1
      ndec = 1

C     Convergence si la norme infini de la matrice des coeffs < 1
C     On se donne de la securite => 0.5 < 1
      borne = 0.5D0

C     Theta-methode
      theta = 0.5D0

      ndec = 1

      DTL = DT

 10   continue

C     Boucle sur les sous-pas de temps
      do idec = 1, ndec

C       On determine le temps debut et fin de pas local,
        if( idec .eq. 1 ) then
          temp0L = temp0
          tempfL = temp0L + DTL

          alphaf = (tempf - tempfL)/(tempf - temp0)
          alpha0 = (tempf - temp0L)/(tempf - temp0)

          ture0L = ture0(1)
          turefL = alphaf*ture0(1) + (1-alphaf)*turef(1)
        else if( idec .eq. ndec ) then
          temp0L = FLOAT(ndec-1)*DTL + temp0
          tempfL = tempf

          alphaf = (tempf - tempfL)/(tempf - temp0)
          alpha0 = (tempf - temp0L)/(tempf - temp0)

          ture0L = alpha0*ture0(1) + (1-alpha0)*turef(1)
          turefL = turef(1)
        else
          temp0L = FLOAT(idec)*DTL + temp0
          tempfL = temp0L + DTL

          alphaf = (tempf - tempfL)/(tempf - temp0)
          alpha0 = (tempf - temp0L)/(tempf - temp0)

          ture0L = alpha0*ture0(1) + (1-alpha0)*turef(1)
          turefL = alphaf*ture0(1) + (1-alphaf)*turef(1)
        endif

        do ini = 1, VAR0(/1)
          Prop(ini) = VAR0L(ini)
          PropPr(ini) = Prop(ini)
          delta(ini) = 0.D0
          CRITER(ini) = 0.D0
        enddo

C       Boucle de convergence => on en sort lorsque CV ou trop grand nb
C       d'iterations
        iconv = 1
 30     continue

          icont = 1
C         Boucle sur les differentes reactions
          do i = 1, TYPES(/2)

            ireac = NREAC(i)
            iprod = NPROD(i)

            if( TYPREA(i) .eq. 1 ) then
C             Cas KOISTINEN
              aMS1 = valma0(icont)
              aMS2 = valmat(icont)
              aKM1 = valma0(icont+1)
              aKM2 = valmat(icont+1)

              if( idec .eq. 1 ) then
                aMS1L = aMS1
                aMS2L = alphaf*aMS1 + (1.D0-alphaf)*aMS2

                aKM1L = aKM1
                aKM2L = alphaf*aKM1 + (1.D0-alphaf)*aKM2
              else if( idec .eq. ndec ) then
                aMS1L = alpha0*aMS1 + (1.D0-alpha0)*aMS2
                aMS2L = aMS2

                aKM1L = alpha0*aKM1 + (1.D0-alpha0)*aKM2
                aKM2L = aKM2
              else
                aMS1L = alpha0*aMS1 + (1.D0-alpha0)*aMS2
                aMS2L = alphaf*aMS1 + (1.D0-alphaf)*aMS2

                aKM1L = alpha0*aKM1 + (1.D0-alpha0)*aKM2
                aKM2L = alphaf*aKM1 + (1.D0-alphaf)*aKM2
              endif

C             La reaction a lieu seulement si T°C < MS
              if( ture0L .lt. aMS1L  .OR.
     &            turefL .lt. aMS2L      ) then
C TEST MOI
c~               if( ( ture0L .lt. aMS1  .AND. turefL .lt. aMS2 ) .AND.
c~      &            ( (turefL - ture0L) .lt. 0.D0 )               ) then
C FIN TEST MOI

C               Tpoint corrige localement en cas de chevauchement avec MS
                TpoiLo = ( MIN(turefL,aMS1L) - MIN(ture0L,aMS2L) ) / DTL

C               critere de convergence local
                crit1 = ABS(DTL*aKM2L*TpoiLo*theta)
                CRITER(ireac) = CRITER(ireac) + crit1
                CRITER(iprod) = CRITER(iprod) + crit1
                critma = MAX(CRITER(ireac), CRITER(iprod))


                IF( critma .ge. borne ) THEN
C                On sous-decoupe le pas avant de recommencer entierement
                  ndec = INT( 1.D0 + (critma / borne) ) * ndec
                  DTL = DT/ndec

C                 TEST MOI, on recommence pas au tout debut !
c~                   ndec = INT( 1.D0 + (critma / borne) ) *
c~      &                   (ndec - idec + 1)
c~                   DTL = (tempf -temp0L)/ndec

c~                   temp0 = temp0L
c~                   ture0(1) = ture0L
c~                   valma0(icont) = aMS1L
c~                   valma0(icont+1) = aKM1L
C                 FIN TEST MOI

                  GO TO 10
                ENDIF

                AijL = ( ((1.D0 - theta)*VAR0L(ireac)*aKM1L) +
     &                   ( theta        *Prop(ireac) *aKM2L) ) * TpoiLo

C               AijL negatif car on definit une reaction d'un seul sens
                AijL = MIN(AijL, 0.D0)

C               Test pour verifier que le reactif calcule sera bien
C               compri entre 0 et 1. Correction de AijL si besoin
                PhTEST = VAR0L(ireac) + delta(ireac) + (DTL*AijL)
                if(PhTEST .lt. 0.D0) then
                  AijL= (       XZPREC - VAR0L(ireac)
     &                   - delta(ireac)) / DTL
                else if(PhTEST .gt. 1.D0) then
                  AijL= (1.D0 - XZPREC - VAR0L(ireac)
     &                   - delta(ireac)) / DTL
                endif
C               Test pour verifier que le produit calcule sera bien
C               compri entre 0 et 1. Correction de AijL si besoin
                PhTEST = VAR0L(iprod) + delta(iprod) - (DTL*AijL)
                if(PhTEST .lt. 0.D0) then

                  AijL= (  VAR0L(iprod) - XZPREC
     &                   + delta(iprod)) / DTL

                else if(PhTEST .gt. 1.D0) then
                  AijL= (XZPREC - 1.D0 + VAR0L(iprod)
     &                   + delta(iprod)) / DTL
                endif

                delta(ireac) = delta(ireac) + (DTL*AijL)
                delta(iprod) = delta(iprod) - (DTL*AijL)

              endif

            icont = icont + 2
            else if ( TYPREA(i) .eq. 2 ) then
C             Cas LEBLOND
              PEQ1 = valma0(icont)
              PEQ2 = valmat(icont)
              TAU1 = valma0(icont+1)
              TAU2 = valmat(icont+1)
              F1 = valma0(icont+2)
              F2 = valmat(icont+2)

              if( idec .eq. 1 ) then
                PEQ1L = PEQ1
                PEQ2L = alphaf*PEQ1 + (1.D0-alphaf)*PEQ2

                TAU1L = TAU1
                TAU2L = alphaf*TAU1 + (1.D0-alphaf)*TAU2

                F1L = F1
                F2L = alphaf*F1 + (1.D0-alphaf)*F2
              else if( idec .eq. ndec ) then
                PEQ1L = alpha0*PEQ1 + (1.D0-alpha0)*PEQ2
                PEQ2L = PEQ2

                TAU1L = alpha0*TAU1 + (1.D0-alpha0)*TAU2
                TAU2L = TAU2

                F1L = alpha0*F1 + (1.D0-alpha0)*F2
                F2L = F2
              else
                PEQ1L = alpha0*PEQ1 + (1.D0-alpha0)*PEQ2
                PEQ2L = alphaf*PEQ1 + (1.D0-alphaf)*PEQ2

                TAU1L = alpha0*TAU1 + (1.D0-alpha0)*TAU2
                TAU2L = alphaf*TAU1 + (1.D0-alphaf)*TAU2

                F1L = alpha0*F1 + (1.D0-alpha0)*F2
                F2L = alphaf*F1 + (1.D0-alphaf)*F2
              endif

C             critere de convergence local
              crit1 = ABS(DTL*F2L*(1.D0 - theta)*(-1.D0*(PEQ2L/TAU2L)))
              crit2 = ABS(DTL*F2L*(1.D0 - theta)*(1.D0 - PEQ2L)/TAU2L)
              CRITER(ireac) = CRITER(ireac) + crit1
              CRITER(iprod) = CRITER(iprod) + crit2
              critma = MAX(CRITER(ireac), CRITER(iprod))

              IF( critma .ge. borne ) THEN
C                On sous-decoupe le pas avant de recommencer entierement
                ndec = INT( 1.D0 + (critma / borne) ) * ndec
                DTL = DT/ndec

C                 TEST MOI, on recommence pas au tout debut !
c~                   ndec = INT( 1.D0 + (critma / borne) ) *
c~      &                   (ndec - idec + 1)
c~                   DTL = (tempf -temp0L)/ndec

c~                   temp0 = temp0L
c~                   ture0(1) = ture0L
c~                   valma0(icont) = PEQ1L
c~                   valma0(icont+1) = TAU1L
c~                   valma0(icont+2) = F1L
C                 FIN TEST MOI

                GO TO 10
              ENDIF

C             TAU Local doit etre superieur a XPETIT :
              if( ABS(TAU1L) .lt. XPETIT .OR.
     &            ABS(TAU2L) .lt. XPETIT ) THEN
                  INTERR(1) = i
                  CALL ERREUR(1081)
                  RETURN
              endif

              AijL= ( (F1L*VAR0L(iprod)*theta*(1.D0 - PEQ1L)/TAU1L) +
     &                (F2L*Prop(iprod)*(1.D0 - theta)*(1.D0 - PEQ2L)
     &                                                  /TAU2L) ) -
     &              ( (F1L*VAR0L(ireac)*theta*PEQ1L/TAU1L) +
     &                (F2L*Prop(ireac)*(1.D0 - theta)*PEQ2L/TAU2L) )

C             AijL negatif car on definit une reaction d'un seul sens
              AijL = MIN(AijL, 0.D0)


C             Test pour verifier que la phase calcule sera bien
C             comprise entre 0 et 1. Ajustement de AijL si besoin
              PhTEST = VAR0L(ireac) + delta(ireac) + (DTL*AijL)
              if(PhTEST .lt. 0.D0) then
                AijL= (       XZPREC - VAR0L(ireac) - delta(ireac)) /DTL
              else if(PhTEST .gt. 1.D0) then
                AijL= (1.D0 - XZPREC - VAR0L(ireac) - delta(ireac)) /DTL
              endif
C             Test pour verifier que le produit calcule sera bien
C             compri entre 0 et 1. Correction de AijL si besoin
              PhTEST = VAR0L(iprod) + delta(iprod) - (DTL*AijL)
              if(PhTEST .lt. 0.D0) then
                AijL= (  VAR0L(iprod) - XZPREC
     &                 + delta(iprod)) / DTL

              else if(PhTEST .gt. 1.D0) then
                AijL= (XZPREC - 1.D0 + VAR0L(iprod)
     &                 + delta(iprod)) / DTL
              endif

              delta(ireac) = delta(ireac) + (DTL*AijL)
              delta(iprod) = delta(iprod) - (DTL*AijL)

            icont = icont + 3
            else
              CALL ERREUR(21)
              RETURN
            endif

          enddo
C         FIN Boucle sur les differentes reactions

          rmax = 0.D0
          do ifini = 1, VAR0(/1)

            PropPr(ifini) = Prop(ifini)
            Prop(ifini) = VAR0L(ifini) + delta(ifini)

            delta(ifini) = 0.D0
            CRITER(ifini) = 0.D0

            if( ABS(PropPr(ifini) - Prop(ifini)) .gt. rmax ) then
              rmax = ABS(PropPr(ifini) - Prop(ifini))
            endif

          enddo

C         On sort de la Boucle infinie si on a CV
          if( rmax .lt. XSECUR ) GO TO 20
C         On sort de la Boucle infinie apres un tres grand nombre
C         d'iterations
          if( iconv .gt. ITMAXI ) GO TO 20

          iconv = iconv + 1
        GO TO 30
 20     continue
C       FIN Boucle de convergence

C       Erreur si on a pas converge :
        if( rmax .gt. XSECUR ) then

c~           WRITE(*,*) 'MOI, metall, ture0(1)=',ture0(1)
c~           WRITE(*,*) 'MOI, metall, turef(1)=',turef(1)
c~           WRITE(*,*) 'MOI, metall, ture0L=',ture0L
c~           WRITE(*,*) 'MOI, metall, turefL=',turefL
c~           Tpoint = ( turef(1) - ture0(1) ) / DT
c~           WRITE(*,*) 'MOI, metall, Tpoint=',Tpoint

          CALL ERREUR(460)
          RETURN
        endif


C       La prop en debut du pas N = La prop en fin de pas N-1
        do i = 1, var0(/1), 1
          var0L(i) = Prop(i)
        enddo

      enddo
C     FIN Boucle sur les sous-pas de temps

C     Ecricture du resultat (fin du pas de temps)
      do i = 1, varf(/1), 1
        varf(i) = var0L(i)
      enddo

      iwrk52 = wrk52

      RETURN
      END


