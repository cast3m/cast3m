C MODJF2    SOURCE    CB215821  17/11/30    21:16:51     9639
      SUBROUTINE MODJF2(WRK0,NMATT,EPSP1,EPSP2,YLIM1,YLIM2,Z1,Z2,Y1,Y2,
     1                  JSIGN,SIG1,SIG2,CONV,DT)
C
C     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C     %                                                               %
C     %  INTEGRATION DU MODJFD2 UNILATERAL AVEC FERMETURE LINEAIRE     %
C     %          DE FISSURES EN CONTRAINTES PLANES                    %
C     %                (MODCLB NON ASSOCIE)                           %
C     %      A L"AIDE DE LA METHODE DE DICHOTOMIE                     %
C     %    AJOUT VICOENDOMMAGEMENT J.F. DUBE                          %
C     %                                                               %
C     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C
C
C
C        VARIABLES D"ENTREES
C
C
      IMPLICIT INTEGER(I-N)
      REAL*8 EPSP1,EPSP2
C
C        VARIABLES DE SORTIE
C
C
      REAL*8 SIG1,SIG2,Z1,Z2,Y1,Y2,DT
      INTEGER JSIGN(3)
      LOGICAL CONV
C
C
C        PARAMETRES D"EVOLUTION
C
C
      REAL*8 E,NU,A1,A2,B1,B2,Y01,Y02,SIGF
      REAL*8 BETA1,BETA2,YLIM1,YLIM2
C
C
C        VARIABLES INTERNES
C
C
      REAL*8 Y001,Y002,DY01,DY02,hdp1,hdp2
      REAL*8 DELTASIG
      INTEGER NDIM
      PARAMETER (NDIM=6)
      REAL*8 JACOB(NDIM,NDIM),J15,J16,J25,J26
      REAL*8 DELAFON(NDIM)
      REAL*8 X(NDIM),DX(NDIM),X0(NDIM),XX,XIG1,XIG2
      REAL*8 ERREUR,TEST
      REAL*8 H1,H2,HT,HT2,trf
      REAL*8 ALFA1,ALFA2
      REAL*8 SIGY
      REAL*8 UN,DEUX
      REAL*8 ZMAX
      INTEGER ITER ,I,DIMPB
      LOGICAL LDOM1,LDOM2,evol1,evol2
      REAL*8 M1,M2,ALPHA1,ALPHA2
      REAL*8 x3,x4,x5,x6,dx5,dx6
      INTEGER NMATT,IMAX
      REAL*8 pas1,erreurd1,xd1,xg1,pas2,erreurd2,xd2,xg2
      REAL*8 erreur_max,fctd1,fctd2
      logical passage1,passage2
      SEGMENT WRK0
         REAL*8 XMAT(NMATT)
      ENDSEGMENT
      UN=1.D0
      DEUX=2.D0
      ZMAX=1.d+04
      E     = XMAT(1)
      NU    = XMAT(2)
      Y001  = XMAT(5)
      Y002  = XMAT(6)
      A1    = XMAT(7)
      A2    = XMAT(8)
      B1    = XMAT(9)
      B2    = XMAT(10)
      BETA1 = XMAT(11)
      BETA2 = XMAT(12)
      SIGF  = XMAT(13)
      M1    = XMAT(14)
      M2    = XMAT(15)
      ALPHA1= XMAT(16)
      ALPHA2= XMAT(17)
      SIGY  =SQRT(2.D0*E*Y001)
*      DELTASIG=SIGY*1.D-4
      DELTASIG=0.d0
*      print*,'E,NU,Y01,Y02,A1,A2,B1,B2,BETA1,BETA2'
*      print*,E,NU,Y01,Y02,A1,A2,B1,B2,BETA1,BETA2
      TEST=1.D-12
      ERREUR=1.D0
      ITER=0
      X(1)=SIG1
      X(2)=SIG2
      X(3)=Y1
      X(4)=Y2
      X(5)=Z1
      X(6)=Z2
      DO I=1, NDIM
         X0(I)=X(I)
      END DO
      x5=Z1
      x6=z2
C
C
C
      JACOB(1,1) = -1.d0
      JACOB(1,2) = 0.D0
      JACOB(1,3) = 0.D0
      JACOB(1,4) = 0.D0
      JACOB(1,5) = 0.D0
      JACOB(1,6) = 0.D0
      JACOB(2,1) = 0.D0
      JACOB(2,2) = -1.d0
      JACOB(2,3) = 0.D0
      JACOB(2,4) = 0.D0
      JACOB(2,5) = 0.D0
      JACOB(2,6) = 0.D0
      JACOB(3,1) = 0.D0
      JACOB(3,2) = 0.D0
      JACOB(3,3) = -1.d0
      JACOB(3,4) = 0.D0
      JACOB(3,5) = 0.D0
      JACOB(3,6) = 0.D0
      JACOB(4,1) = 0.D0
      JACOB(4,2) = 0.D0
      JACOB(4,3) = 0.D0
      JACOB(4,4) = -1.d0
      JACOB(4,5) = 0.D0
      JACOB(4,6) = 0.D0
      JACOB(5,1) = 0.D0
      JACOB(5,2) = 0.D0
      JACOB(5,3) = 0.D0
      JACOB(5,4) = 0.D0
      JACOB(5,5) = -1.d0
      JACOB(5,6) = 0.D0
      JACOB(6,1) = 0.D0
      JACOB(6,2) = 0.D0
      JACOB(6,3) = 0.D0
      JACOB(6,4) = 0.D0
      JACOB(6,5) = 0.D0
      JACOB(6,6) = -1.d0
      Erreur_max=1.0d-10
      pas1=1.0
      Xd1=z1
      Xg1=z1
      imax=0
      Erreurd1=1.0
      passage1=.true.
      Do while ( (Erreurd1 .GT. Erreur_max) .and. (pas1 .ge. 1.d-6) )
         x(5)=xd1+pas1

c         print*,'*** Z1 ***'
c         print*,x(5)

**      Calcul de Y01 modifie par l'effet de vitesse
c        dp1=(dim(x(5),z1)/(x(5)*z1*dt))
c         y01=y001+m1*dp1**alpha1

         pas2=1.0
         Xd2=z2
         Xg2=x(6)
         Erreurd2=1.0
         passage2=.true.
         X(4)=Y2
         Do while ((Erreurd2 .GT. Erreur_max) .and. (pas2 .ge. 1.d-6))
            imax=imax+1
            if (imax .ge. 10000) then
              print*,'pb dans jfd2'
              conv=.false.
              return
            end if
            x(6)=xd2+pas2

c            print*,'*** Z2 ***'
c            print*,x(6)

**      Calcul de Y02 modifie par l'effet de vitesse
c            dp2=(dim(x(6),z2)/(x(6)*z2*dt))
c            y02=y002+m2*dp2**alpha2
**      Calcul de sigma et Y1 et Y2
            ERREUR=1.D0
            ITER=0
            X(1)=Sig1
            X(2)=Sig2
            DO WHILE (ERREUR .GT. TEST .AND. ITER .LE. 100)
               ITER=ITER+1
               IF (X(1) .GE. DELTASIG) THEN
                  H1=UN
               ELSE IF (X(1) .LE. -DELTASIG) THEN
                  H1=0.D0
               ELSE
                  H1=(X(1)+DELTASIG)/(DEUX*DELTASIG)
               END IF
               IF (X(2) .GE. DELTASIG) THEN
                  H2=UN
               ELSE IF (X(2) .LE. -DELTASIG) THEN
                  H2=0.D0
               ELSE
                  H2=(X(2)+DELTASIG)/(DEUX*DELTASIG)
               END IF
c
c     smooth transition on ht ht2
c
               trf = x(1) + x(2)
               IF(trf.GE.deltasig)THEN
                  HT=UN
                  HT2=0.D0
               else if(trf.ge.(-deltasig)) then
                  ht = (trf+deltasig)/DEUX/deltasig
                  ht2 = UN-ht
               else if(trf.ge.(-sigf+deltasig)) then
                  ht = 0.D+00
                  ht2 = UN
               else if(trf.ge.(-sigf-deltasig)) then
                  ht = 0.D+00
c           ht2 =UN- (trf-(sigf-deltasig))/(DEUX*sigf)
                  ht2 = (trf+sigf+deltasig)/DEUX/deltasig
               else
                  ht = 0.D+00
                  ht2 = 0.D+00
               endif
c         print*,'DTjfd',dt
**      Calcul de Y01 modifie par l'effet de vitesse
               dy01=(dim(x(5),z1)/(x(5)*z1*dt))
               hdp1=1.0
               if (dy01 .gt. 0.0) hdp1=0.0
               y01=y001+m1*dy01**alpha1
**      Calcul de Y02 modifie par l'effet de vitesse
               dy02=(dim(x(6),z2)/(x(6)*z2*dt))
               hdp2=1.0
               if (dy02 .gt. 0.0) hdp2=0.0
               y02=y002+m2*dy02**alpha2
c         print*,'dans clbeco iter=',iter,' y01=',y01,'y02=',y02

               ldom1=.false.
               evol1=.false.
               ldom2=.false.
               evol2=.false.
c         print*,'y1',x(3),'ylim1',ylim1
c         print*,'z1',x(5),'x5',x5
c         print*,'ldom1',ldom1,'ldom2',ldom2
C        =====> PROBLEME ELASTIQUE
C
C
C        CALCUL DU JACOBIEN
C
C
         JACOB(3,1) = H1*X(1)*X(5)*X(5)/E
C
         JACOB(3,2) = H2*X(2)*X(5)*X(5)/E
C
         JACOB(4,1) = (UN-H1)*X(1)*X(6)*X(6)/E
C
         JACOB(4,2) = (UN-H2)*X(2)*X(6)*X(6)/E
C
C        CALCUL DU SECOND MEMBRE
C
      XIG1 =((((X(5)-UN)*BETA1*HT2+(X(5)-UN)*BETA1*HT-E*EPSP2+(X(6)-UN)
     1  *BETA2)*NU+BETA1*(X(6)*(H2+X(5)*(UN-H2)-UN)+X(5)**2*H2-X(5)*H2)
     2  *HT2+BETA1*(X(6)*(H2+X(5)*(UN-H2)-UN)+X(5)**2*H2-X(5)*H2)*HT+
     3  BETA2*(X(6)*(X(5)*H2+H2-UN)-X(5)*H2+X(6)**2*(UN-H2))+E*EPSP1*
     4  (X(6)*(H2-UN)-X(5)*H2))*SIGF+(BETA1*E*(X(5)*EPSP2-EPSP2)+
     5  (UN-X(5))*BETA1*E*EPSP1)*HT2)/((NU**2+H1*(X(5)*X(6)*(2*H2-UN)-
     6  X(5)**2*H2+X(6)**2*(UN-H2))-X(5)*X(6)*H2+X(6)**2*(H2-UN))*SIGF+
     7  (DEUX-DEUX*X(5))*BETA1*HT2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*
     8  (-H2+X(5)*(H2-DEUX)+DEUX))+((X(5)-UN)*X(6)-X(5)**2+X(5))
     9  *BETA1*H1)*HT2)
C
      XIG2 =((((X(5)-UN)*BETA1*HT2+(X(5)-UN)*BETA1*HT-E*EPSP1+(X(6)-UN)
     1  *BETA2)*NU+(((UN-X(5))*X(6)+X(5)**2-X(5))*BETA1*H1+(X(5)-UN)*
     2  X(6)*BETA1)*HT2+(((UN-X(5))*X(6)+X(5)**2-X(5))*BETA1*H1+
     3  (X(5)-UN)*X(6)*BETA1)*HT+(E*(X(6)*EPSP2-X(5)*EPSP2)+(-X(6)**2+
     4  (X(5)+UN)*X(6)-X(5))*BETA2)*H1-X(6)*E*EPSP2+(X(6)**2-X(6))*
     5  BETA2)*SIGF+(BETA1*E*(EPSP2-X(5)*EPSP2)+(X(5)-UN)*BETA1*E*EPSP1)
     6  *HT2)/((NU**2+H1*(X(5)*X(6)*(DEUX*H2-UN)-X(5)**2*H2+X(6)**2*
     7  (UN-H2))-X(5)*X(6)*H2+X(6)**2*(H2-UN))*SIGF+(DEUX-DEUX*X(5))*
     8  BETA1*HT2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*
     9  (H2-DEUX)+DEUX))+((X(5)-UN)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)

         DELAFON(1) =X(1)-XIG1
C
         DELAFON(2) =X(2)-XIG2
C
         XX= (H1*X(1)*X(1)+H2*X(2)*X(2))*X(5)*X(5)/(DEUX*E)
         DELAFON(3) = X(3)-XX
C
         XX=((UN-H1)*X(1)*X(1)+(UN-H2)*X(2)*X(2) )
     1      *X(6)*X(6)/(DEUX*E)
         DELAFON(4) = X(4)-XX
C
         IF (LDOM1) THEN
C
C        =====> ENDOMMAGEMENT EN TRACTION
C
      J15 = (((BETA1*HT2+BETA1*HT)*NU+BETA1*(DEUX*X(5)*H2-H2+X(6)*(UN-H2
     &   ))*HT2+BETA1*(DEUX*X(5)*H2-H2+X(6)*(UN-H2))*HT+BETA2*(X(6)*H2-H
     &   2)-E*EPSP1*H2)*SIGF+(BETA1*E*EPSP2-BETA1*E*EPSP1)*HT2)/((NU**2+
     &   H1*(X(5)*X(6)*(DEUX*H2-UN)-X(5)**2*H2+X(6)**2*(UN-H2))-X(5)*X(6
     &   )*H2+X(6)**2*(H2-UN))*SIGF+(DEUX-DEUX*X(5))*BETA1*HT2*NU+(BETA1
     &   *(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-DEUX)+DEUX))+((X(5)-UN
     &   )*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)-((H1*(X(6)*(DEUX*H2-UN)-DEU
     &   X*X(5)*H2)-X(6)*H2)*SIGF-DEUX*BETA1*HT2*NU+(BETA1*(-DEUX*X(5)*H
     &   2+H2+X(6)*(H2-DEUX))+(X(6)-DEUX*X(5)+UN)*BETA1*H1)*HT2)*((((X(5
     &   )-UN)*BETA1*HT2+(X(5)-UN)*BETA1*HT-E*EPSP2+(X(6)-UN)*BETA2)*NU+
     &   BETA1*(X(6)*(H2+X(5)*(UN-H2)-UN)+X(5)**2*H2-X(5)*H2)*HT2+BETA1*
     &   (X(6)*(H2+X(5)*(UN-H2)-UN)+X(5)**2*H2-X(5)*H2)*HT+BETA2*(X(6)*(
     &   X(5)*H2+H2-UN)-X(5)*H2+X(6)**2*(UN-H2))+E*EPSP1*(X(6)*(H2-UN)-X
     &   (5)*H2))*SIGF+(BETA1*E*(X(5)*EPSP2-EPSP2)+(UN-X(5))*BETA1*E*EPS
     &   P1)*HT2)/((NU**2+H1*(X(5)*X(6)*(DEUX*H2-UN)-X(5)**2*H2+X(6)**2*
     &   (UN-H2))-X(5)*X(6)*H2+X(6)**2*(H2-UN))*SIGF+(DEUX-DEUX*X(5))*BE
     &   TA1*HT2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-DEUX)
     &   +DEUX))+((X(5)-UN)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)**2
C
C
      J25 = (((BETA1*HT2+BETA1*HT)*NU+((-X(6)+DEUX*X(5)-UN)*BETA1*H1+X(6
     &   )*BETA1)*HT2+((-X(6)+DEUX*X(5)-UN)*BETA1*H1+X(6)*BETA1)*HT+((X(
     &   6)-UN)*BETA2-E*EPSP2)*H1)*SIGF+(BETA1*E*EPSP1-BETA1*E*EPSP2)*HT
     &   2)/((NU**2+H1*(X(5)*X(6)*(DEUX*H2-UN)-X(5)**2*H2+X(6)**2*(UN-H2
     &   ))-X(5)*X(6)*H2+X(6)**2*(H2-UN))*SIGF+(DEUX-DEUX*X(5))*BETA1*HT
     &   2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-DEUX)+DEUX)
     &   )+((X(5)-UN)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)-((H1*(X(6)*(DEUX
     &   *H2-UN)-DEUX*X(5)*H2)-X(6)*H2)*SIGF-DEUX*BETA1*HT2*NU+(BETA1*(-
     &   DEUX*X(5)*H2+H2+X(6)*(H2-DEUX))+(X(6)-DEUX*X(5)+UN)*BETA1*H1)*H
     &   T2)*((((X(5)-UN)*BETA1*HT2+(X(5)-UN)*BETA1*HT-E*EPSP1+(X(6)-UN)
     &   *BETA2)*NU+(((UN-X(5))*X(6)+X(5)**2-X(5))*BETA1*H1+(X(5)-UN)*X(
     &   6)*BETA1)*HT2+(((UN-X(5))*X(6)+X(5)**2-X(5))*BETA1*H1+(X(5)-UN)
     &   *X(6)*BETA1)*HT+(E*(X(6)*EPSP2-X(5)*EPSP2)+(-X(6)**2+(X(5)+UN)*
     &   X(6)-X(5))*BETA2)*H1-X(6)*E*EPSP2+(X(6)**2-X(6))*BETA2)*SIGF+(B
     &   ETA1*E*(EPSP2-X(5)*EPSP2)+(X(5)-UN)*BETA1*E*EPSP1)*HT2)/((NU**2
     &   +H1*(X(5)*X(6)*(DEUX*H2-UN)-X(5)**2*H2+X(6)**2*(UN-H2))-X(5)*X(
     &   6)*H2+X(6)**2*(H2-UN))*SIGF+(DEUX-DEUX*X(5))*BETA1*HT2*NU+(BETA
     &   1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-DEUX)+DEUX))+((X(5)-U
     &   N)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)**2
C
            JACOB(1,5) = J15
            JACOB(2,5) = J25
            JACOB(3,5) = (H1*X(1)*X(1)+H2*X(2)*X(2))*X(5)/E
            JACOB(4,5) = 0.D0
            JACOB(5,5) = -1.D0
     &     -A1*B1*(A1*(X(3)-Y01))**(B1-UN)
     &     *alpha1*m1*dy01**alpha1/(dy01+hdp1)/(x(5)**2*dt)
            JACOB(5,1) = 0.D0
            JACOB(5,2) = 0.D0
            JACOB(5,3) = A1*B1*(A1*(X(3)-Y01))**(B1-UN)
            JACOB(5,4) = 0.D0
            DELAFON(5) = X(5)-((A1*(X(3)-Y01))**B1+UN)

            IF (LDOM2) THEN
C
C        =====> ENDOMMAGEMENT EN COMPRESSION
C
      J16 = (BETA2*NU+BETA1*(H2+X(5)*(1-H2)-1)*HT2+BETA1*(H2+X(5)*(1-H2)
     1   -1)*HT+BETA2*(X(5)*H2+H2+2*X(6)*(1-H2)-1)+E*EPSP1*(H2-1))*SIGF/
     2   ((NU**2+H1*(X(5)*X(6)*(2*H2-1)-X(5)**2*H2+X(6)**2*(1-H2))-X(5)*
     3   X(6)*H2+X(6)**2*(H2-1))*SIGF+(2-2*X(5))*BETA1*HT2*NU+(BETA1*(-X
     4   (5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-2)+2))+((X(5)-1)*X(6)-X(5)
     5   **2+X(5))*BETA1*H1)*HT2)-((H1*(X(5)*(2*H2-1)+2*X(6)*(1-H2))-X(5
     6   )*H2+2*X(6)*(H2-1))*SIGF+(BETA1*(-H2+X(5)*(H2-2)+2)+(X(5)-1)*BE
     7   TA1*H1)*HT2)*((((X(5)-1)*BETA1*HT2+(X(5)-1)*BETA1*HT-E*EPSP2+(X
     8   (6)-1)*BETA2)*NU+BETA1*(X(6)*(H2+X(5)*(1-H2)-1)+X(5)**2*H2-X(5)
     9   *H2)*HT2+BETA1*(X(6)*(H2+X(5)*(1-H2)-1)+X(5)**2*H2-X(5)*H2)*HT+
     :   BETA2*(X(6)*(X(5)*H2+H2-1)-X(5)*H2+X(6)**2*(1-H2))+E*EPSP1*(X(6
     ;   )*(H2-1)-X(5)*H2))*SIGF+(BETA1*E*(X(5)*EPSP2-EPSP2)+(1-X(5))*BE
     <   TA1*E*EPSP1)*HT2)/((NU**2+H1*(X(5)*X(6)*(2*H2-1)-X(5)**2*H2+X(6
     =   )**2*(1-H2))-X(5)*X(6)*H2+X(6)**2*(H2-1))*SIGF+(2-2*X(5))*BETA1
     >   *HT2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-2)+2))+(
     ?   (X(5)-1)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)**2
C
      J26 = (BETA2*NU+((1-X(5))*BETA1*H1+(X(5)-1)*BETA1)*HT2+((1-X(5))*B
     1   ETA1*H1+(X(5)-1)*BETA1)*HT+(E*EPSP2+(-2*X(6)+X(5)+1)*BETA2)*H1-
     2   E*EPSP2+(2*X(6)-1)*BETA2)*SIGF/((NU**2+H1*(X(5)*X(6)*(2*H2-1)-X
     3   (5)**2*H2+X(6)**2*(1-H2))-X(5)*X(6)*H2+X(6)**2*(H2-1))*SIGF+(2-
     4   2*X(5))*BETA1*HT2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)
     5   *(H2-2)+2))+((X(5)-1)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)-((H1*(X
     6   (5)*(2*H2-1)+2*X(6)*(1-H2))-X(5)*H2+2*X(6)*(H2-1))*SIGF+(BETA1*
     7   (-H2+X(5)*(H2-2)+2)+(X(5)-1)*BETA1*H1)*HT2)*((((X(5)-1)*BETA1*H
     8   T2+(X(5)-1)*BETA1*HT-E*EPSP1+(X(6)-1)*BETA2)*NU+(((1-X(5))*X(6)
     9   +X(5)**2-X(5))*BETA1*H1+(X(5)-1)*X(6)*BETA1)*HT2+(((1-X(5))*X(6
     :   )+X(5)**2-X(5))*BETA1*H1+(X(5)-1)*X(6)*BETA1)*HT+(E*(X(6)*EPSP2
     ;   -X(5)*EPSP2)+(-X(6)**2+(X(5)+1)*X(6)-X(5))*BETA2)*H1-X(6)*E*EPS
     <   P2+(X(6)**2-X(6))*BETA2)*SIGF+(BETA1*E*(EPSP2-X(5)*EPSP2)+(X(5)
     =   -1)*BETA1*E*EPSP1)*HT2)/((NU**2+H1*(X(5)*X(6)*(2*H2-1)-X(5)**2*
     >   H2+X(6)**2*(1-H2))-X(5)*X(6)*H2+X(6)**2*(H2-1))*SIGF+(2-2*X(5))
     ?   *BETA1*HT2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-2)
     @   +2))+((X(5)-1)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)**2
C
C
               JACOB(1,6) = J16
               JACOB(2,6) = J26
               JACOB(3,6) = 0.D0
               JACOB(4,6) = ((1.D0-H1)*X(1)*X(1)+(1.D0-H2)
     &                      *X(2)*X(2))*X(6)/E
               JACOB(5,6) = 0.D0
               JACOB(6,6) = -1.D0
     &     -A2*B2*(A2*(X(4)-Y02))**(B2-UN)
     &     *alpha2*m2*dy02**alpha2/(dy02+hdp2)/(x(6)**2*dt)
               JACOB(6,1) = 0.D0
               JACOB(6,2) = 0.D0
               JACOB(6,3) = 0.D0
*               JACOB(6,4) = (A2*B2*(X(4)-Y02)**(B2-1.0))
               JACOB(6,4) = A2*B2*(A2*(X(4)-Y02))**(B2-1.0)
               JACOB(6,5) = 0.D0
*               DELAFON(6) = X(6)-(A2*(X(4)-Y02)**B2+1.0)
               DELAFON(6) = X(6)-((A2*(X(4)-Y02))**B2+1.0)
               DIMPB=6
            ELSE
               DIMPB=5
            END IF
         ELSE
C
C        =====> PAS D'ENDOMMAGEMENT EN TRACTION
C
            IF (LDOM2) THEN
C
C        =====> ENDOMMAGEMENT EN COMPRESSION
C
      J16 = (BETA2*NU+BETA1*(H2+X(5)*(1-H2)-1)*HT2+BETA1*(H2+X(5)*(1-H2)
     1   -1)*HT+BETA2*(X(5)*H2+H2+2*X(6)*(1-H2)-1)+E*EPSP1*(H2-1))*SIGF/
     2   ((NU**2+H1*(X(5)*X(6)*(2*H2-1)-X(5)**2*H2+X(6)**2*(1-H2))-X(5)*
     3   X(6)*H2+X(6)**2*(H2-1))*SIGF+(2-2*X(5))*BETA1*HT2*NU+(BETA1*(-X
     4   (5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-2)+2))+((X(5)-1)*X(6)-X(5)
     5   **2+X(5))*BETA1*H1)*HT2)-((H1*(X(5)*(2*H2-1)+2*X(6)*(1-H2))-X(5
     6   )*H2+2*X(6)*(H2-1))*SIGF+(BETA1*(-H2+X(5)*(H2-2)+2)+(X(5)-1)*BE
     7   TA1*H1)*HT2)*((((X(5)-1)*BETA1*HT2+(X(5)-1)*BETA1*HT-E*EPSP2+(X
     8   (6)-1)*BETA2)*NU+BETA1*(X(6)*(H2+X(5)*(1-H2)-1)+X(5)**2*H2-X(5)
     9   *H2)*HT2+BETA1*(X(6)*(H2+X(5)*(1-H2)-1)+X(5)**2*H2-X(5)*H2)*HT+
     :   BETA2*(X(6)*(X(5)*H2+H2-1)-X(5)*H2+X(6)**2*(1-H2))+E*EPSP1*(X(6
     ;   )*(H2-1)-X(5)*H2))*SIGF+(BETA1*E*(X(5)*EPSP2-EPSP2)+(1-X(5))*BE
     <   TA1*E*EPSP1)*HT2)/((NU**2+H1*(X(5)*X(6)*(2*H2-1)-X(5)**2*H2+X(6
     =   )**2*(1-H2))-X(5)*X(6)*H2+X(6)**2*(H2-1))*SIGF+(2-2*X(5))*BETA1
     >   *HT2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-2)+2))+(
     ?   (X(5)-1)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)**2
C
      J26 = (BETA2*NU+((1-X(5))*BETA1*H1+(X(5)-1)*BETA1)*HT2+((1-X(5))*B
     1   ETA1*H1+(X(5)-1)*BETA1)*HT+(E*EPSP2+(-2*X(6)+X(5)+1)*BETA2)*H1-
     2   E*EPSP2+(2*X(6)-1)*BETA2)*SIGF/((NU**2+H1*(X(5)*X(6)*(2*H2-1)-X
     3   (5)**2*H2+X(6)**2*(1-H2))-X(5)*X(6)*H2+X(6)**2*(H2-1))*SIGF+(2-
     4   2*X(5))*BETA1*HT2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)
     5   *(H2-2)+2))+((X(5)-1)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)-((H1*(X
     6   (5)*(2*H2-1)+2*X(6)*(1-H2))-X(5)*H2+2*X(6)*(H2-1))*SIGF+(BETA1*
     7   (-H2+X(5)*(H2-2)+2)+(X(5)-1)*BETA1*H1)*HT2)*((((X(5)-1)*BETA1*H
     8   T2+(X(5)-1)*BETA1*HT-E*EPSP1+(X(6)-1)*BETA2)*NU+(((1-X(5))*X(6)
     9   +X(5)**2-X(5))*BETA1*H1+(X(5)-1)*X(6)*BETA1)*HT2+(((1-X(5))*X(6
     :   )+X(5)**2-X(5))*BETA1*H1+(X(5)-1)*X(6)*BETA1)*HT+(E*(X(6)*EPSP2
     ;   -X(5)*EPSP2)+(-X(6)**2+(X(5)+1)*X(6)-X(5))*BETA2)*H1-X(6)*E*EPS
     <   P2+(X(6)**2-X(6))*BETA2)*SIGF+(BETA1*E*(EPSP2-X(5)*EPSP2)+(X(5)
     =   -1)*BETA1*E*EPSP1)*HT2)/((NU**2+H1*(X(5)*X(6)*(2*H2-1)-X(5)**2*
     >   H2+X(6)**2*(1-H2))-X(5)*X(6)*H2+X(6)**2*(H2-1))*SIGF+(2-2*X(5))
     ?   *BETA1*HT2*NU+(BETA1*(-X(5)**2*H2+X(5)*H2+X(6)*(-H2+X(5)*(H2-2)
     @   +2))+((X(5)-1)*X(6)-X(5)**2+X(5))*BETA1*H1)*HT2)**2
C
C

               JACOB(1,5) = J16
               JACOB(2,5) = J26
               JACOB(3,5) = 0.D0
               JACOB(4,5) = ((1.D0-H1)*X(1)*X(1)+(1.D0-H2)
     &                      *X(2)*X(2))*X(6)/E
               JACOB(5,5) = -1.D0
     &     -A2*B2*(A2*(X(4)-Y02))**(B2-UN)
     &     *alpha2*m2*dy02**alpha2/(dy02+hdp2)/(x(6)**2*dt)
               JACOB(5,1) = 0.D0
               JACOB(5,2) = 0.D0
               JACOB(5,3) = 0.D0
*               JACOB(5,4) = (A2*B2*(X(4)-Y02)**(B2-1.0))
               JACOB(5,4) = A2*B2*(A2*(X(4)-Y02))**(B2-1.0)
*               DELAFON(5) = X(6)-(A2*(X(4)-Y02)**B2+1.0)
               DELAFON(5) = X(6)-((A2*(X(4)-Y02))**B2+1.0)
               DIMPB=5
            ELSE
               DIMPB=4
            END IF
         END IF
C
C        RESOLUTION
C
         CALL GAUSCL(JACOB,DX,DELAFON,NDIM,DIMPB,0)
C
C        CALCUL DE L"ERREUR ET DE LA NOUVELLE SOLUTION
C
               ERREUR=0.D0
               do i=1,ndim
                  erreur=erreur+(delafon(i)*delafon(i))
               enddo
               ERREUR=0.D0
               DO I=1,2
                  ERREUR=ERREUR+DX(I)*DX(I)/(SIGY*SIGY)
                  X(I)=X(I)+DX(I)
c            if (x(i) .ge. 0.) then
c               x(i)=MIN(1.d+15,x(i))
c            else
c               x(i)=max(-1.d+15,x(i))
c            endif
               END DO
               X(3)=X(3)+DX(3)
               X3=MAX(X(3),Y01)
c         X3=MIN(ABS(X3),1.d+07)
               ERREUR=ERREUR+DX(3)*DX(3)/(x3*x3)
               X(4)=X(4)+DX(4)
               X4=MAX(X(4),Y02)
c         X4=MIN(ABS(X4),1.d+07)
               ERREUR=ERREUR+DX(4)*DX(4)/(x4*x4)
c         if (.not. ldom1) then
c            dx5=(x(5)-x5)*1.0/4.0
c            x(5)=dx5+x5
c            x(5)=max(z1,x(5))
c            ERREUR=ERREUR+DX5*DX5/(z1*z1)
c         endif
c         if (.not. ldom2) then
c            dx6=(x(6)-x6)/4.
c            x(6)=dx6+x6
c            x(6)=max(z2,x(6))
c            ERREUR=ERREUR+DX6*DX6/(z2*z2)
c         endif
               IF (LDOM1) THEN
                 IF ((X(5)+DX(5)).LT.Z1) THEN
                    DX(5)=(Z1-X(5))
                 END IF
                 IF ( X(5) .GT. ZMAX)THEN
                   DX(5)=ZMAX + 0.1D0 - X(5)
                 END IF
                 X(5)=X(5)+DX(5)
                 ERREUR=ERREUR+DX(5)*DX(5)/(z1*z1)
                 IF (LDOM2) THEN
                    IF ((X(6)+DX(6)).LT.Z2) THEN
                       DX(6)=(Z2-X(6))
                    END IF
                    IF ( X(6) .GT. ZMAX)THEN
                      DX(6)=ZMAX + 0.1D0 - X(6)
                    END IF
                    X(6)=X(6)+DX(6)
                    ERREUR=ERREUR+DX(6)*DX(6)/(z2*z2)
                 END IF
               ELSE IF (LDOM2) THEN
                 IF ((X(6)+DX(5)).LT.Z2) THEN
                    DX(5)=(Z2-X(6))
                 END IF
                 IF ( X(6) .GT. ZMAX)THEN
                   DX(5)=ZMAX + 0.1D0 - X(6)
                 END IF
                 X(6)=X(6)+DX(5)
                 ERREUR=ERREUR+DX(5)*DX(5)/(z2*z2)
               END IF


         IF (ERREUR .GT. 1.D+100)THEN
            CONV=.FALSE.
           print*,'erreur dans modele',erreur
           print*,'iteration num',iter
           print*,'delafon',delafon
            RETURN
         END IF
C
C        QUELQUES IMPRESSIONS EN CAS D'ERREUR
C
         if (.not. conv )then
            PRINT*,'ITERATION  ',ITER,'ERREUR',erreur
            print*,'LDOM1  :',LDOM1,'   LDOM2  :',LDOM2
            PRINT*,'EPS1= ',EPSP1,'  EPS2= ',EPSP2
            PRINT*,'SIG1:',X(1) ,'   DSIG1:',DX(1),'ERR :',DELAFON(1)
            PRINT*,'SIG2:',X(2) ,'   DSIG2:',DX(2),'ERR :',DELAFON(2)
            PRINT*,'Y1  :',X(3) ,'   DY1  :',DX(3),'ERR :',DELAFON(3)
            PRINT*,'Y2  :',X(4) ,'   DY2  :',DX(4),'ERR :',DELAFON(4)
            PRINT*,'Z1  :',X(5) ,'   DZ1  :',DX(5),'ERR :',DELAFON(5)
            PRINT*,'Z2  :',X(6) ,'   DZ2  :',DX(6),'ERR :',DELAFON(6)
            PRINT*,'H1',H1,'H2',H2,ht,ht2
            PRINT*
            write(*,200)jacob
          END IF

            END DO

***     pour z2   ****
********************
            fctd2=0.
            If ( x(4) .Ge. Y02 ) Then
**      si z converge est > a x(6) alors fctd est < 0
               Fctd2 =-( 1.0+(A2*(-Y02 + X(4)))**B2-X(6) )
               if (fctd2.ge.0.0 .and. x(6).eq.z2) fctd2 =0.0
            Else
               if (x(4) .le. y002 ) then
                  fctd2=x(6)-z2
c                  x(6)=z2
               else
                  Fctd2 =x(6)-z2
               endif
            Endif
            If ( Fctd2 .lt. 0.0) then
               Xg2=Xd2
               if (passage2) pas2=pas2*2.0
               Xd2=Xd2+pas2
            Else
               Xd2=Xg2
               Pas2=Pas2/2.0
               Xd2=Xd2+pas2
               passage2=.false.
            Endif
            Erreurd2=(fctd2*fctd2)/(z2*z2)
            if (x(6) .gt. zmax) then
               x(6)=zmax
               Erreurd2=0.0
            endif

c            print*,'Erreurd2'
c            print*,Erreurd2,x(4),y02,y002

         ENDDO

***     pour z1   ****
********************
         fctd1=0.0
         If ( x(3) .Ge. Y01 ) Then
**      si z converge est > a x(5) alors fctd1 est < 0
            Fctd1 =-( 1.0+(A1*(-Y01 + X(3)))**B1-X(5) )
            if (fctd1.ge.0.0 .and. x(5).eq.z1) fctd1=0.0
         Else
            if (x(3) .le. y001) then
               fctd1=x(5)-z2
               x(5)=z1
            else
               Fctd1 =x(5)-z2
            endif
         Endif
         If ( Fctd1 .lt. 0.0) then
            Xg1=Xd1
            if (passage1) pas1=pas1*2.0
            Xd1=Xd1+pas1
         Else
            Xd1=Xg1
            Pas1=Pas1/2.0
            Xd1=Xd1+pas1
            passage1=.false.
         Endif
         Erreurd1=(Fctd1*Fctd1)/(z1*z1)
         if (x(5) .gt. zmax) then
            x(5)=zmax
            Erreurd1=0.0
         endif

c         print*,'Erreurd1'
c         print*,Erreurd1,x(3),y02,Y002

      ENDDO

      IF (ERREUR .GT. TEST ) THEN
         CONV=.FALSE.
      ELSE
         CONV=.TRUE.
         SIG1= X(1)
         SIG2= X(2)
         Y1    = X(3)
         Y2    = X(4)
         Z1    = X(5)
         Z2    = X(6)
         IF (SIG1 .GE. 0.D0) THEN
            JSIGN(1)=1
         ELSE
            JSIGN(1)=0
         END IF
         IF (SIG2.GE. 0.D0)THEN
            JSIGN(2)=1
         ELSE
            JSIGN(2)=0
         END IF
         JSIGN(3)=1
      END IF
      RETURN
200   format(6(6(2x,e11.4),/))
      END






