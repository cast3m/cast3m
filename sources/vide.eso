C VIDE      SOURCE    JC220346  17/07/25    21:15:23     9517
C***********************************************************************
C NOM         : VIDE
C DESCRIPTION : Crée des objets vides de types/sous-types donnés
C***********************************************************************
C HISTORIQUE :  13/03/2012 : JCARDO : création de l'opérateur
C HISTORIQUE :  17/04/2012 : JCARDO : ajout de SMDEFOR et SMVECTE
C HISTORIQUE :  12/10/2012 : JCARDO : ajout de SMCHARG
C***********************************************************************
C Prière de PRENDRE LE TEMPS DE COMPLÉTER LES COMMENTAIRES
C en cas de modification de ce sous-programme afin de faciliter
C la maintenance !
C***********************************************************************
C APPELÉ PAR : pilot.eso
C***********************************************************************
C ENTRÉES :: aucune
C SORTIES :: aucune
C***********************************************************************
C SYNTAXE (GIBIANE) :
C
C        OBJ1,...,OBJn = VIDE [GROUPE1,...,GROUPEn]
C
C    ou  TAB1 = VIDE ('TABULER' ( |LENTI1| ) ) [GROUPE1,...,GROUPEn]
C                                 |LREEL1|
C                                 |LMOTS1|
C
C
C    avec GROUPEi de la forme :  MOTAi(/MOTBi)(*ENTIi)
C
C***********************************************************************
      SUBROUTINE VIDE

      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)

-INC CCGEOME
-INC CCOPTIO

-INC SMELEME
-INC SMCHPOI
-INC SMCHAML
-INC SMMODEL
-INC SMRIGID
-INC SMEVOLL
-INC SMLENTI
-INC SMLREEL
-INC SMLMOTS
-INC SMLCHPO
-INC SMTABLE
-INC SMDEFOR
-INC SMVECTE
-INC SMCHARG
-INC SMNUAGE

      CHARACTER*20 MARG
      CHARACTER*8 CHAI,TYIN,TYOB
      CHARACTER*4 CHAA

      CHARACTER*4 MSPE(2)
      DATA MSPE/'*   ','/   '/

      PARAMETER (LMTYP=15)
      CHARACTER*8 MTYP(LMTYP)
      DATA MTYP/'MAILLAGE',
     .          'CHPOINT ',
     .          'MCHAML  ',
     .          'MMODEL  ',
     .          'RIGIDITE',
     .          'EVOLUTIO',
     .          'LISTENTI',
     .          'LISTREEL',
     .          'LISTMOTS',
     .          'LISTCHPO',
     .          'TABLE   ',
     .          'DEFORME ',
     .          'VECTEUR ',
     .          'CHARGEME',
     .          'NUAGE'   /

      CHARACTER*4 MNAT(2)
      DATA MNAT/'DIFF','DISC'/


C     On crée le segment IPSORT pour que l'ordre des objets en sortie
C     corresponde bien à celui des arguments en entrée (ordre inverse)
C     => MOINS UTILE POUR L'OPTION 'TABULER' (MAIS QUAND MÊME UTILISÉ)
      SEGMENT IPSORT
          INTEGER IPOOBJ(NOBJ)
          CHARACTER*8 MTYPOB(NOBJ)
      ENDSEGMENT

C     NOBJ = nombre d'objets vides créés au total par cette subroutine
      NOBJ=0
      SEGINI IPSORT



C     **************************************************************
C     DÉTERMINATION DU MODE D'ÉCRITURE EN SORTIE
C     **************************************************************
C
C     Deux possibilités pour sortir les résultats :
C
C      - Option 'TABU' => les objets sont placés dans une table dont
C                         les indices peuvent être choisis soit par
C                         l'utilisateur, soit automatiquement
C
C                         ITAB  |   IRET         |   TYIN
C                      ---------+----------------+---------------
C                          1    |   0            |   ENTIER
C                          2    |   -> LISTENTI  |   ENTIER
C                          3    |   -> LISTREEL  |   FLOTTANT
C                          4    |   -> LISTMOTS  |   MOT
C
C      - Par défaut => on sort les objets séparément
C
      CALL LIRCHA(CHAA,1,LCHTA)

C     =============
C     OPTION 'TABU'
C     =============
      IF (CHAA.EQ.'TABU') THEN
          ITAB=1
          TYIN='ENTIER  '

C         L'utilisateur a-t-il transmis une liste d'indices ?
          CHAI='        '
          CALL LIRABJ(CHAI,IRET,0,IRETOU)
          IF (IRETOU.EQ.1) THEN

C          => OUI : objet LISTENTI, LISTREEL ou LISTMOTS
              IF (CHAI.EQ.'LISTENTI') THEN
                  ITAB=2
                  TYIN='ENTIER  '
                  MLENT1=IRET
                  SEGACT MLENT1
              ELSEIF (CHAI.EQ.'LISTREEL') THEN
                  ITAB=3
                  TYIN='FLOTTANT'
                  MLREE1=IRET
                  SEGACT MLREE1
              ELSEIF (CHAI.EQ.'LISTMOTS') THEN
                  ITAB=4
                  TYIN='MOT     '
                  MLMOT1=IRET
                  SEGACT MLMOT1

C          => NON : autres objets
              ELSEIF (CHAI.EQ.'MOT') THEN
                  CALL REFUS
              ELSE
C                 ERREUR CRITIQUE 39 (On ne veut pas d'objet de type %m1:8)
                  MOTERR(1:8)=CHAI
                  CALL ERREUR(39)
                  WRITE(IOIMP,*) '(l''option TABU requiert ',
     &                           'éventuellement un objet de type ',
     &                           'LISTENTI, LISTREEL ou LISTMOTS)'
              ENDIF

          ENDIF

C     =================
C     OPTION PAR DÉFAUT
C     =================
      ELSE
          ITAB=0

C         Le MOT qu'on a lu n'était pas censé être lu maintenant...
          CALL REFUS
      ENDIF






C     **************************************************************
C     LECTURE DU TYPE D'OBJET VIDE À CRÉER
C     **************************************************************
C
C     On cherche des triplets de la forme ITYP[/MARG][*NLIR]
C                (l'ordre des options * et / est indifférent)
C
C      - ITYP correspond au type d'objet à créer (position dans MTYP)
C      - MARG contient parfois le sous-type (par défaut = '        ')
C      - NLIR indique le nombre d'objets à créer (par défaut = 1)
C

      NLIR=0
      ICOD=1
C     (ICOD permet d'obliger l'utilisateur à entrer au moins un MOT)


    1 IF (NLIR.EQ.0) THEN

C         Lecture du type d'objet à créer. Si aucun => fin subroutine
          CALL LIRCHA(CHAI,ICOD,LCHAI)
          IF (LCHAI.EQ.0) GOTO 999

C         On vérifie que ce type d'objet est prévu dans MTYP
          CALL OPTLI(ITYP,MTYP,CHAI,LMTYP)
          IF (ITYP.EQ.0) THEN
C             ERREUR CRITIQUE 9 (Objet inconnu %m1:8)
              MOTERR(1:8)=CHAI
              CALL ERREUR(9)
              WRITE(IOIMP,*) '(on ne sait pas créer ce type',
     &                       ' d''objet vide)'
              RETURN
          ENDIF

C         On a trouvé un MOT correct.
          NLIR=1

C         On cherche les éventuels caractères * ou /
          IARG=0
          MARG='        '
          ISPA=0
          DO 2 J=1,2
              CALL LIRMOT(MSPE,2,ISPE,0)
              IF (ISPE.EQ.0) GOTO 2
C             (Rmq: LIRMOT appelle REFUS si aucun mot ne correspond)

              IF (ISPA.EQ.ISPE) THEN
C                 ERREUR CRITIQUE 880 (Syntaxe incorrecte, voir notice)
                  CALL ERREUR(880)
                  CHAI=MSPE(ISPE)
                  WRITE(IOIMP,*) '(le caractère spécial ',CHAI(1:1),
     &                           ' apparait 2 fois)'
                  RETURN
              ENDIF

C             Caractère * trouvé => mise à jour de NLIR
              IF (ISPE.EQ.1) THEN
                CALL LIRENT(NLIR,1,IRET)
C             Caractère / trouvé => mise à jour de MARG
              ELSE IF (ISPE.EQ.2) THEN
                  IARG=1
                  CALL LIRCHA(MARG,1,LMARG)
              ENDIF

              ISPA=ISPE
    2     CONTINUE
      ENDIF


C     **************************************************************
C     INITIALISATION D'UN SEGMENT VIDE POUR LE TYPE D'OBJET DÉSIRÉ
C     **************************************************************

      GOTO (10,20,30,40,50,60,70,80,90,100,110,120,130,140,150),ITYP


C     ===============================
C     Objet MAILLAGE
C     ===============================
C     => MARG correspond au type d'élément (variable ITYPEL)

   10 ITEL=ILCOUR
      IF (IARG.EQ.1) THEN
          CALL CHRMOT(NOMS,100,MARG(1:4),ITEL)
          IF (ITEL.EQ.0) THEN
C             ERREUR CRITIQUE 16 (Type d'élément incorrect)
              CALL ERREUR(16)
              WRITE(IOIMP,*) '(le nom ',MARG(1:4),
     &                       ' ne correspond à aucun élément connu)'
              RETURN
          ENDIF
      ENDIF

      NBELEM=0
      NBSOUS=0
      NBREF=0
      NBNN=NBNNE(ITEL)
      IF (NOMS(ITEL).EQ.'POLY') THEN
          NBNN = 14
      ELSE IF (NOMS(ITEL).EQ.'MULT') THEN
          NBNN = 9999
      ENDIF

      SEGINI MELEME
      ITYPEL=ITEL

      IOBJ=MELEME
      SEGDES MELEME
      GOTO 900


C     ===============================
C     Objet CHPOINT
C     ===============================
C     => MARG donne la nature du champ par points (variable JATTRI(1))

   20 NAT=1
      NSOUPO=0

      IJAT1 = 0
      IF (IARG.EQ.1) THEN
          CALL CHRMOT(MNAT,2,MARG(1:4),IJAT1)
          IF (IJAT1.EQ.0) THEN
C             ERREUR CRITIQUE 881 (Syntaxe incorrecte : on attend %m1:30)
              MOTERR(1:30)='soit DISCRET, soit DIFFUS     '
              CALL ERREUR(881)
              WRITE(IOIMP,*) '(le mot ',MARG(1:LMARG),' ne désigne pas',
     &                       ' une nature valide)'
              RETURN
          ENDIF
      ENDIF

C     Creation du CHPOINT + Definition du Type, Titre et Attribut du CHPOINT
      SEGINI,MCHPOI
      IFOPOI=IFOMOD
      MTYPOI   = ' '
      MOCHDE   = 'CHPOINT CREE PAR VIDE'
      JATTRI(1)=  IJAT1

      IOBJ     = MCHPOI
      SEGDES,MCHPOI
      GOTO 900


C     ===============================
C     Objet MCHAML
C     ===============================
C     => MARG n'est pas utilisé

   30 N1=0
      N3=0
      L1=8

      SEGINI MCHELM
      IFOCHE=IFOMOD
      TITCHE='        '

      IOBJ=MCHELM
      SEGDES MCHELM
      GOTO 900


C     ===============================
C     Objet MMODEL
C     ===============================
C     => MARG n'est pas utilisé

   40 N1=0

      SEGINI MMODEL

      IOBJ=MMODEL
      SEGDES MMODEL
      GOTO 900


C     ===============================
C     Objet RIGIDITE
C     ===============================
C     => MARG indique le type de matrice (variable MTYMAT)

   50 NRIGEL=0

      SEGINI MRIGID
      MTYMAT=MARG(1:8)

      IOBJ=MRIGID
      SEGDES MRIGID
      GOTO 900


C     ===============================
C     Objet EVOLUTIO
C     ===============================
C     => MARG indique le type d evolution (REEL ou COMPLEXE)

   60 N=0

      SEGINI MEVOLL
      ITYEVO=MARG(1:8)
C      write(ioimp,*) 'ITYEVO=', ITYEVO

      IOBJ=MEVOLL
      SEGDES MEVOLL
      GOTO 900


C     ===============================
C     Objet LISTENTI
C     ===============================
C     => MARG n'est pas utilisé

   70 JG=0

      SEGINI MLENTI

      IOBJ=MLENTI
      SEGDES MLENTI
      GOTO 900


C     ===============================
C     Objet LISTREEL
C     ===============================
C     => MARG n'est pas utilisé

   80 JG=0

      SEGINI MLREEL

      IOBJ=MLREEL
      SEGDES MLREEL
      GOTO 900


C     ===============================
C     Objet LISTMOTS
C     ===============================
C     => MARG n'est pas utilisé

   90 JGN=4
      JGM=0

      SEGINI MLMOTS

      IOBJ=MLMOTS
      SEGDES MLMOTS
      GOTO 900


C     ===============================
C     Objet LISTCHPO
C     ===============================
C     => MARG n'est pas utilisé

  100 N1=0

      SEGINI MLCHPO

      IOBJ=MLCHPO
      SEGDES MLCHPO
      GOTO 900


C     ===============================
C     Objet TABLE
C     ===============================
C     => MARG donne le sous-type de la table (indice 'SOUSTYPE')

  110 M=0

      SEGINI MTABLE
      IF (IARG.EQ.1) THEN
          CALL ECCTAB(MTABLE,'MOT',0,0.D0,'SOUSTYPE',.TRUE.,0,
     &                       'MOT',0,0.D0,MARG(1:8) ,.TRUE.,0)
      ENDIF

      IOBJ=MTABLE
      SEGDES MTABLE
      GOTO 900


C     ===============================
C     Objet DEFORME
C     ===============================
C     => MARG n'est pas utilisé

  120 NDEF=0

      SEGINI MDEFOR

      IOBJ=MDEFOR
      SEGDES MDEFOR
      GOTO 900


C     ===============================
C     Objet VECTEUR
C     ===============================
C     => MARG n'est pas utilisé

  130 NVEC=0
      ID=0

      SEGINI MVECTE

      IOBJ=MVECTE
      SEGDES MVECTE
      GOTO 900


C     ===============================
C     Objet CHARGEME
C     ===============================
C     => MARG n'est pas utilisé

  140 N=0

      SEGINI MCHARG

      IOBJ=MCHARG
      SEGDES MCHARG
      GOTO 900


C     ===============================
C     Objet NUAGE
C     ===============================
C     => MARG n'est pas utilisé

  150 NVAR  =0
      NBCOUP=0

      SEGINI MNUAGE

      IOBJ=MNUAGE
      SEGDES MNUAGE
      GOTO 900




C     **************************************************************
C     FIN DE LA CRÉATION D'UN OBJET
C     **************************************************************

  900 CONTINUE

C     S'il y avait plusieurs objets de même type à créer, en voilà un de moins
      NLIR=NLIR-1

C     On mémorise son pointeur et son type dans le segment IPSORT
      NOBJ=NOBJ+1
      SEGADJ IPSORT
      IPOOBJ(NOBJ)=IOBJ
      MTYPOB(NOBJ)=MTYP(ITYP)

C     On remonte là-haut pour voir s'il y a d'autres objets à créer
C     (cette fois, ce ne sera plus obligatoire)
      ICOD=0
      GOTO 1





C     **************************************************************
C     FIN DE LA SUBROUTINE
C     **************************************************************
C
C     On écrit sur la sortie les objets stockés dans IPSORT :
C      - Option 'TABU' => les objets sont placés dans une table
C      - Par défaut    => on sort les objets séparément
C

  999 CONTINUE

C     =============================================
C     SORTIE SOUS FORME DE PLUSIEURS OBJETS SÉPARÉS
C     =============================================
      IF (ITAB.EQ.0) THEN
*         Il faut inverser l'ordre pour ECROBJ
          DO IA=1,NOBJ
              IB=NOBJ-IA+1
              IPOO=IPOOBJ(IB)
              TYOB=MTYPOB(IB)
              CALL ECROBJ(TYOB,IPOO)
          ENDDO


C     =====================================
C     SORTIE SOUS FORME D'UNE TABLE INDICÉE
C     =====================================
C     Si l'objet LISTENTI/LISTREEL/LISTMOTS définissant les indices à
C     utiliser est trop court, les indices manquants seront des entiers
C     correspondant à l'ordre de création de l'objet
      ELSE
          M=NOBJ
          SEGINI MTAB1

          CHAI='        '
          IVAL=0
          XVAL=0.D0

          LONGLI=NOBJ
          IF (ITAB.EQ.2) LONGLI=MLENT1.LECT(/1)
          IF (ITAB.EQ.3) LONGLI=MLREE1.PROG(/1)
          IF (ITAB.EQ.4) LONGLI=MLMOT1.MOTS(/2)

          DO IA=1,NOBJ
              IF (IA.GT.LONGLI) THEN
C                 L'objet LIST**** est trop petit, on change de mode
C                 d'indexation
                  ITAB=1
                  TYIN='ENTIER  '
              ENDIF

              IF (ITAB.EQ.1) IVAL=IA
              IF (ITAB.EQ.2) IVAL=MLENT1.LECT(IA)
              IF (ITAB.EQ.3) XVAL=MLREE1.PROG(IA)
              IF (ITAB.EQ.4) CHAI(1:4)=MLMOT1.MOTS(IA)

              IPOO=IPOOBJ(IA)
              TYOB=MTYPOB(IA)
              CALL ECCTAB(MTAB1,TYIN,IVAL,XVAL,CHAI,.TRUE.,0,
     &                          TYOB,0   ,0.D0,' ' ,.TRUE.,IPOO)
          ENDDO

          CALL ECROBJ('TABLE',MTAB1)
          SEGDES MTAB1
      ENDIF

      SEGSUP IPSORT



      RETURN

      END












