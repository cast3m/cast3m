C IMPOS2    SOURCE    MB234859  19/01/21    21:15:13     10049

*  impo bloc en 2D

      SUBROUTINE IMPOS2

      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8 (A-H,O-Z)

-INC CCOPTIO

-INC SMCOORD
-INC SMELEME
-INC SMRIGID
-INC SMCHPOI
-INC SMCHAML
-INC CCREEL

* directions moyennes aux sommets
      segment mfopa2
        real*8 xms(nbpts),yms(nbpts)
      endsegment

      character*4 modepl(4),moforc(4)

      data modepl /'UX  ','UY  ','UR  ','UZ  '/
      data moforc /'FX  ','FY  ','FR  ','FZ  '/
*
      idimp1 = IDIM + 1
*
*  Lecture du maillage support des conditions de contact
*
      call lirobj('MAILLAGE',ipt1,1,iretou)
      call lirent(isous,0,iretou)
      mchel1=0
      call lirent(mchel1,0,iretou)
      if (ierr.ne.0) return
*
*  Activation du maillage et petites verifications
*
      segact ipt1
      nbno1 = ipt1.num(/1)
      nbel1 = ipt1.num(/2)
      if (ipt1.lisous(/1).ne.0) call erreur(25)
      if (ipt1.itypel.ne.22) call erreur(16)
      if (nbno1.ne.4 .and. nbno1.ne.5) call erreur(16)
      if (ierr.ne.0) goto 900
*
*  Indice des ddls concernes en fonction du mode 2D
*
      imo = 1
      if (ifour.eq.0) imo = 3
*
*   Increment sur le nombre d'elements de contact retenus et utilises
*   dans le chpoint (mpoval et igeoc) et rigidite pour agrandir les
*   longueurs des segments adequats
      incnel = 2000
*
*  Creation de la raideur des conditions de contact
*  Remplissage de l'entete commun
*
      nrigel = 1
      segini mrigid
      ichole = 0
      imgeo1 = 0
      imgeo2 = 0
      isupeq = 0
      iforig = ifomod
      coerig(1)=1.d0
      mtymat='RIGIDITE'
*
*     MCHAML materiau associe au MMODEL
      MELVA1 = 0
      MELVA2 = 0
      IF (MCHEL1.NE.0) THEN
        SEGACT, MCHEL1
        MCHAM1 = MCHEL1.ICHAML(isous)
        SEGACT, MCHAM1
        NBCO = MCHAM1.NOMCHE(/2)
        DO JCMP = 1,NBCO
          IF (MCHAM1.NOMCHE(JCMP).EQ.'JEU') THEN
            MELVA1 = MCHAM1.IELVAL(JCMP)
            SEGACT, MELVA1
            NELJ = MELVA1.VELCHE(/2)
            NPTELJ = min(MELVA1.VELCHE(/1),4)
            WRITE(*,*) 'NELJ NPTELJ ',NELJ,NPTELJ
          ENDIF
          IF (MCHAM1.NOMCHE(JCMP).EQ.'ADHE') THEN
            MELVA2 = MCHAM1.IELVAL(JCMP)
            SEGACT, MELVA2
            NELA = MELVA2.VELCHE(/2)
            NPTELA = min(MELVA2.VELCHE(/1),4)
          ENDIF
        ENDDO
      ENDIF
*
*     Creation du chpoint de depi
*
      nat=1
      nsoupo=1
      segini mchpoi
      mtypoi='DEPIMP'
      mochde='engendré par impose'
      ifopoi=ifomod
      jattri(1)=2
*
      nc=1
      IF (MELVA2.NE.0) nc=2
      segini msoupo
      ipchp(1)=msoupo
      nocomp(1)='FLX '
      nocons(1)='                '
      IF (MELVA2.NE.0) THEN
        nocomp(2)='FADH'
        nocons(2)='                '
      ENDIF
*
      nbnn  =1
      nbelem=incnel
      nbref =0
      nbsous=0
      segini ipt7
      ipt7.itypel=1
      igeoc=ipt7
*
      n=incnel
      segini mpoval
      ipoval=mpoval
*
*  Calcul des directions moyennes
      segact mcoord
      nbpts = xcoor(/1)/(idim+1)
      segini mfopa2
      ip1o=0
      ip2o=0
*      write (6,*) ' impos2 iel1 ',nbel1,idimp1
      do 820 iel=1,nbel1
*
        ip1=ipt1.num(2,iel)
        ip2=ipt1.num(3,iel)
* on suppose que les elements de frottements appuyes sur la même facette se suivent
* et on ne les comptabilise qu'une fois
        if (ip1.eq.ip1o.and.ip2.eq.ip2o) goto 820
        ip1o=ip1
        ip2o=ip2
        ipv1 = (ip1-1)*idimp1
        xp1 = xcoor(ipv1+1)
        yp1 = xcoor(ipv1+2)
        ipv2 = (ip2-1)*idimp1
        xp2 = xcoor(ipv2+1)
        yp2 = xcoor(ipv2+2)
*
*    normale a la droite (12)
*
        x12 = xp2 - xp1
        y12 = yp2 - yp1
        xn =  -y12
        yn =   x12
        sn = sqrt (xn*xn + yn*yn)
        sn = max(xpetit,sn)
        xn = xn/sn
        yn = yn/sn
        xms(ip1)=xms(ip1)+xn
        yms(ip1)=yms(ip1)+yn
        xms(ip2)=xms(ip2)+xn
        yms(ip2)=yms(ip2)+yn
 820  continue
        do 821 ip = 1,nbpts
         sn = xms(ip)*xms(ip)+yms(ip)*yms(ip)
         sn = max(sqrt(abs(sn)),xpetit*1d10)
         xms(ip)=xms(ip)/sn
         yms(ip)=yms(ip)/sn
 821  continue
*
*
*  Nombre de noeuds dans le chpoint (en totalite) : ipt7 et mpoval
      nelch = 0
*
*=======================================================================
* Formulation "faible" du contact : relation segment-segment (type 0)
*=======================================================================
* Nouvelle formulation, une seule relation par element maitre
* Il faut donc reunir les relations portant sur le meme multiplicateur
************************************************************************
      if (nbno1.ne.5) goto 500
*
*  Creation du meleme associe a la relation
      nbnn  =5
      nbelem=incnel
      nbsous=0
      nbref =0
      segini meleme
      itypel=22
      irigel(1,nrigel) = meleme
*
*  Creation du descriptif commun a toutes les raideurs
*
      nligrp=9
      nligrd=nligrp
      segini,descr
      lisinc(1)='LX  '
      lisdua(1)='FLX '
      noelep(1)=1
      noeled(1)=1
      do 100 i = 2, nligrp, 2
        lisinc(i  )=modepl(imo)
        lisinc(i+1)=modepl(imo+1)
        lisdua(i  )=moforc(imo)
        lisdua(i+1)=moforc(imo+1)
        noelep(i  )=(i+2)/2
        noelep(i+1)=noelep(i)
        noeled(i  )=noelep(i)
        noeled(i+1)=noelep(i)
 100  continue
      segdes,descr
      irigel(3,nrigel) = descr
*
*     creation du segment xmatri
*
      nelrig=incnel
      segini xmatri
      irigel(4,nrigel) = xmatri
*
*     ce qu'on cree est unilateral
*
      irigel(6,nrigel) = 1
*
*     ce qu'on cree est symetrique
*
      irigel(7,nrigel) = 0
*
*  Nombre d'elements crees dans meleme=irigel(nrigel,1), ipt7 et mpoval
      nelri0 = 0
*
*  boucle sur le maillage support
*
      do 110 iel = 1, nbel1
*
        xjr = 0d0
        if (MELVA1.ne.0) then
           nel1 = min (iel,nelj)
           xjr = melva1.velche(nptelj,nel1)
        endif
        ip1 = ipt1.num(2,iel)
        ip2 = ipt1.num(3,iel)
        ip3 = ipt1.num(4,iel)
        ip4 = ipt1.num(5,iel)
*        write(ioimp,*) iel,ip1,ip2,ip3,ip4,ipt1.num(1,iel)
*  verification (provisoire) que pas de noeuds doubles
        if (ip1.eq.ip3) goto 110
        if (ip1.eq.ip4) goto 110
        if (ip2.eq.ip3) goto 110
        if (ip2.eq.ip4) goto 110
*
        ipv = (ip1-1)*idimp1
        xp1 = xcoor(ipv+1)
        yp1 = xcoor(ipv+2)
        ipv = (ip2-1)*idimp1
        xp2 = xcoor(ipv+1)
        yp2 = xcoor(ipv+2)
        xp12 = xp2 - xp1
        yp12 = yp2 - yp1
*
        ipv = (ip3-1)*idimp1
        xp3 = xcoor(ipv+1)
        yp3 = xcoor(ipv+2)
        ipv = (ip4-1)*idimp1
        xp4 = xcoor(ipv+1)
        yp4 = xcoor(ipv+2)
        xp34 = xp4 - xp3
        yp34 = yp4 - yp3
*
*   orientations respectives correctes des 2 segments :
*   "normales de sens opposes" = produit scalaire negatif ou nul
        scal = xp12*xp34 + yp12*yp34
        xl12 = sqrt(xp12**2+yp12**2)
        xl34 = sqrt(xp34**2+yp34**2)
*       if (scal.gt.-xl12*xl34*0.5) goto 110
        if (scal.gt.0.d0) goto 110
*
*   critere d'acceptation de l'élément :
*   angles des diagonales
        xl13 = sqrt((xp3-xp1)**2+(yp3-yp1)**2)
        xl14 = sqrt((xp4-xp1)**2+(yp4-yp1)**2)
        xl23 = sqrt((xp3-xp2)**2+(yp3-yp2)**2)
        xl24 = sqrt((xp4-xp2)**2+(yp4-yp2)**2)
        sca312 = (xp3-xp1)*(xp3-xp2)+(yp3-yp1)*(yp3-yp2)
        sca412 = (xp4-xp1)*(xp4-xp2)+(yp4-yp1)*(yp4-yp2)
        sca134 = (xp1-xp3)*(xp1-xp4)+(yp1-yp3)*(yp1-yp4)
        sca234 = (xp2-xp3)*(xp2-xp4)+(yp2-yp3)*(yp2-yp4)
*        write(ioimp,*) sca312/(xl13*xl23),sca412/(xl14*xl24),
*    &                  sca134/(xl13*xl14),sca234/(xl23*xl24)
**      if (sca312/(xl13*xl23).gt.0.50.and.
**   >      sca412/(xl14*xl24).gt.0.50.and.
**   >      sca134/(xl13*xl14).gt.0.50.and.
**   >      sca234/(xl23*xl24).gt.0.50)  goto 110

*   nouveau critere acceptation
*   pts dans un cercle centree sur 1-2 aggrandi
        xp1e=xp1-(xp2-xp1)
        yp1e=yp1-(yp2-yp1)
        xp2e=xp2+(xp2-xp1)
        yp2e=yp2+(yp2-yp1)
        sca312 = (xp3-xp1e)*(xp3-xp2e)+(yp3-yp1e)*(yp3-yp2e)
        sca412 = (xp4-xp1e)*(xp4-xp2e)+(yp4-yp1e)*(yp4-yp2e)
        if (sca312.gt.0.d0.and.
     >      sca412.gt.0.d0) goto 110









*
* Quelle est la relation ???
*
*   direction du contact unitaire
*
        xr = xp12 - xp34
        yr = yp12 - yp34
        sr = sqrt(xr*xr + yr*yr)
        xr = xr/sr
        yr = yr/sr
*        write(ioimp,*) 'direction contact',xr,yr,yr,-xr
*
*   projection des points sur la direction du contact
*
        xl1 = xp1*xr + yp1*yr
        xl2 = xp2*xr + yp2*yr
        xl3 = xp3*xr + yp3*yr
        xl4 = xp4*xr + yp4*yr

*        write(ioimp,*) 'projection pts sur contact',xl1,xl2,xl3,xl4
*
*   calcul de l'intersection des projections
*
        xm1 = min(xl1,xl2)
        xm2 = max(xl1,xl2)
        xm3 = min(xl3,xl4)
        xm4 = max(xl3,xl4)
*        write(ioimp,*) ' xmi',xm1,xm2,xm3,xm4
*
*  critere de precision sur l'intersection
*
        xcr = min(xm2-xm1,xm4-xm3)*(1.d-10)
*
*  taille de l'intersection
*
        xi = max(xm1,xm3)
        xj = min(xm2,xm4)
        xl = xj - xi
*        write(ioimp,*) ' intersection',xi,xj,xl,xcr
*
*              write (6,*) ' impos2 ',ip1,ip2,ip3,ip4,xcr,xl
*       if (xl.le.xcr) goto 110
        if (xl.le.0.d0) goto 110
*
*   distance des points a leur projection
*
        d1 = (xp1-xl1*xr)*yr-(yp1-xl1*yr)*xr
        d2 = (xp2-xl2*xr)*yr-(yp2-xl2*yr)*xr
        d3 = (xp3-xl3*xr)*yr-(yp3-xl3*yr)*xr
        d4 = (xp4-xl4*xr)*yr-(yp4-xl4*yr)*xr
*
*  coordonnées paramétriques de l'intersection sur les segments 1-2 et 3-4
*
        xi2 = (xi-xl1) / (xl2-xl1)
        xi1 = (xl2-xi) / (xl2-xl1)

        xj2 = (xj-xl1) / (xl2-xl1)
        xj1 = (xl2-xj) / (xl2-xl1)

        xi4 = (xi-xl3) / (xl3-xl4)
        xi3 = (xl4-xi) / (xl3-xl4)

        xj4 = (xj-xl3) / (xl3-xl4)
        xj3 = (xl4-xj) / (xl3-xl4)
*
*        write(ioimp,*) ' xi1 xi2 xi3 xi4 xj1 xj2 xj3 xj4 xl '
*        write(ioimp,*)  xi1,xi2,xi3,xi4,xj1,xj2,xj3,xj4,xl
*        write(ioimp,*) ' d1 d2 d3 d4 ',d1,d2,d3,d4
*
* surface actuelle
*
        sc = ((xi1+xj1)*d1+(xi2+xj2)*d2+(xi3+xj3)*d3+(xi4+xj4)*d4)*0.5
*        write(ioimp,*) 'Surface actuelle :',sc
*
* on a un element ou imposer la relation a ajouter
*
        nelri0 = nelri0 + 1
        nelch  = nelch +1
*
*   on ajuste les differents segments
*
        if (nelri0.gt.nelrig) then
          nelrig = nelrig + incnel
          segadj,xmatri
          nbelem = nbelem + incnel
          nbnn = 5
          segadj,meleme
          nbnn = 1
          segadj,ipt7
          n = n + incnel
          segadj,mpoval
        endif
*
*   on range dans le meleme
*
        num(1,nelri0) = ipt1.num(1,iel)
        num(2,nelri0) = ip1
        num(3,nelri0) = ip2
        num(4,nelri0) = ip3
        num(5,nelri0) = ip4
        icolor(nelri0)=1
*
*   on remplit le xmatri
*
*  lambda
        re(1,1,nelri0)= 0.d0
*  ip1
        re(2,1,nelri0)=  yr * (xi1+xj1) * 0.5  * xl
        re(3,1,nelri0)= -xr * (xi1+xj1) * 0.5  * xl
*  ip2
        re(4,1,nelri0)=  yr * (xi2+xj2) * 0.5  * xl
        re(5,1,nelri0)= -xr * (xi2+xj2) * 0.5  * xl
*  ip3
        re(6,1,nelri0)=  yr * (xi3+xj3) * 0.5  * xl
        re(7,1,nelri0)= -xr * (xi3+xj3) * 0.5  * xl
*  ip4
        re(8,1,nelri0)=  yr * (xi4+xj4) * 0.5  * xl
        re(9,1,nelri0)= -xr * (xi4+xj4) * 0.5  * xl
*
*  on transpose
        do 120 ic = 2, nligrp
          re(1,ic,nelri0)=re(ic,1,nelri0)
 120    continue
*
*  Le reste est nul
*
*  remplissage du champoint de depi et du maillage support
*
        ipt7.num(1,nelch)=ipt1.num(1,iel)
        vpocha(nelch,1) = (-sc - xjr) * xl
        IF (MELVA2.NE.0) THEN
          NEL2 = min (iel,NELA)
          VPOCHA(nelch,2) = max(MELVA2.VELCHE(NPTELA,NEL2),0.D0)*xl
        ENDIF
*     write (6,*) 'impos2 vpocha re ',vpocha(nelch,1),
*    >  (re(ip,1,nelri0),ip=2,9)
*
 110   continue

*     write (ioimp,*) ' nb relation type 0 ',nbelem,n,nelri0

* Ajustement au plus juste puis desactivation des segments lies
* a la rigidite du type 0
      if (nelri0.ne.nelrig) then
        nelrig = nelri0
        segadj,xmatri
        nbelem = nelri0
        nbnn = 5
        segadj,meleme
      endif
      segdes,meleme,xmatri
*
* S'il n'y a pas d'elements en contact, alors pas de relation unilaterale
*     if (nelri0.eq.0) irigel(6,nrigel)=0






      GOTO 1000

*=======================================================================
* Formulation "forte" (standard) du contact :
*=======================================================================
 500  continue
*
* Relation type 2 : noeud-segment
*---------------------------------
*     creation du meleme associe a la relation
*
      nbnn   = 4
      nbelem = incnel
      nbsous = 0
      nbref  = 0
      segini meleme
      itypel=22
      irigel(1,nrigel)=meleme
*
*     creation du descriptif commun a toutes les raideurs
*
      nligrp=7
      nligrd=nligrp
      segini descr
      lisinc(1)='LX  '
      lisdua(1)='FLX '
      noelep(1)=1
      noeled(1)=1
      do 510 i=2,nligrp,2
        lisinc(i  )=modepl(imo)
        lisinc(i+1)=modepl(imo+1)
        lisdua(i  )=moforc(imo)
        lisdua(i+1)=moforc(imo+1)
        noelep(i  )=(i+2)/2
        noelep(i+1)=noelep(i)
        noeled(i  )=noelep(i)
        noeled(i+1)=noelep(i)
 510  continue
      segdes,descr
      irigel(3,nrigel)=descr
*
*     creation du segment xmatri
*
      nelrig=incnel
      segini xmatri
      irigel(4,nrigel)=xmatri
*
*     ce qu'on cree est unilateral
*
      irigel(6,nrigel)=1
*
*     ce qu'on cree est symetrique
*
      irigel(7,nrigel)=0
*
*  Nombre d'elements dans la rigidite de type 2
      nelri2=0
*
*  boucle sur le maillage support
*
      do 520 iel = 1,nbel1
        xjr = 0.d0
        if (MELVA1.ne.0) then
          nel1 = min (iel,nelj)
          xjr = melva1.velche(nptelj,nel1)
*        write(ioimp,*) iel,xjr,mchel1
        endif
        ip1 = ipt1.num(2,iel)
        ip2 = ipt1.num(3,iel)
        jp  = ipt1.num(4,iel)
*D       write(ioimp,*) iel,ip1,ip2,jp
*
*  verification que pas relation du point sur lui meme
        if (jp.eq.ip1) goto 520
        if (jp.eq.ip2) goto 520

        ipv = (ip1-1)*idimp1
        xp1 = xcoor(ipv+1)
        yp1 = xcoor(ipv+2)
        ipv = (ip2-1)*idimp1
        xp2 = xcoor(ipv+1)
        yp2 = xcoor(ipv+2)
        ipv = (jp-1)*idimp1
        xp  = xcoor(ipv+1)
        yp  = xcoor(ipv+2)

        x12 = xp2 - xp1
        y12 = yp2 - yp1
        x1p = xp - xp1
        y1p = yp - yp1
        x2p = xp - xp2
        y2p = yp - yp2
        sr2=x12**2+y12**2
        sr= sqrt (max(xpetit,sr2))

*  distance signee de p a la ligne 1-2
        dp12s = x1p * y12 - y1p * x12
*        write(ioimp,*) 'dist. signee',dp12s
*   verif que le point est du bon cote du segment (a une tolerance de ratrapage pres)
*       if (dp12s.lt.-sr2) goto 520

*  verification si autre point dans le cercle de selection (tres legerement agrandi)
        tx12=x12/sr
        ty12=y12/sr
        x1e = xp1-tx12*xszpre
        y1e = yp1-ty12*xszpre
        x2e = xp2+tx12*xszpre
        y2e = yp2+ty12*xszpre
        x1pe=xp-x1e
        y1pe=yp-y1e
        x2pe=xp-x2e
        y2pe=yp-y2e
        d1pe = x1pe*x1pe + y1pe*y1pe
        d2pe = x2pe*x2pe + y2pe*y2pe
        if (abs(d1pe).lt.XPETIT) d1pe=1
        if (abs(d2pe).lt.XPETIT) d2pe=1
        scal = (x1pe*x2pe + y1pe*y2pe) / sqrt(d1pe*d2pe)
*        write(ioimp,*) 'cos(angle_1p2)',scal
        if (scal.gt.0.8) goto 520
*
* on a un point ou imposer la relation
* Quelle est la relation ???
*
*   direction de la relation
*
* initialisation avec la direction normale, calcul du point projete, puis
* iteration en reestimant la normale a partir du point projete
*
         xn =  -y12
         yn =   x12
*        sn = sqrt (max(xpetit,xn*xn + yn*yn))
         xn = xn/sr
         yn = yn/sr

        do iter=1,16
*   calcul du pt a mettre en relation avec ip : alpha ip2 + (1-alpha) ip1
*  projection suivant la normale
           beta=(x1p*y12-y1p*x12)
           beta=beta/((xn*y12-yn*x12))
           xpr=xp-beta*xn
           ypr=yp-beta*yn
           alpha=((xpr-xp1)*x12+(ypr-yp1)*y12)/sr2
           alpha=min(max(0.d0,alpha),1.d0)
*
* nouvelle normale normalisee
        xn=(1.-alpha)*xms(ip1)+alpha*xms(ip2)
        yn=(1.-alpha)*yms(ip1)+alpha*yms(ip2)
           sn = sqrt (max(xpetit,xn*xn + yn*yn))
         xn = xn/sn
         yn = yn/sn
        enddo
* verif dans le segment
        alpha=((xpr-xp1)*x12+(ypr-yp1)*y12)/sr2
        pond = 1.d0
        if (alpha.lt.0.d0) pond = (1d4+1) + 1d4*alpha
        if (alpha.gt.1.d0) pond = (1d4+1) + 1d4*(alpha-1.d0)
        if (pond.lt.0.d0) goto 520
*  verif compatibilite avec la normale au poin impactant
        if (xms(jp)*xn+yms(jp)*yn.gt. -0.0d0) then
**        write (6,*) ' impos2 normales incompatibes 1 ',
**   >  jp,xjeu,dpm,dist
          goto 520
        endif
 1954   continue
*
* on a un element ou imposer la relation a ajouter
*
        nelri2 = nelri2 + 1
        nelch = nelch + 1
*
*   on ajuste les differents segments
*
        if (nelri2.gt.nelrig) then
          nelrig = nelrig + incnel
          segadj,xmatri
          nbelem = nbelem + incnel
          nbnn = 4
          segadj,meleme
          nbnn = 1
          segadj,ipt7
          n = n + incnel
          segadj,mpoval
        endif
*
*   on range dans le meleme
*
        num(1,nelri2)=ipt1.num(1,iel)
        num(2,nelri2)=ip1
        num(3,nelri2)=ip2
        num(4,nelri2)=jp
*
*   on remplit le xmatri
*
*  lambda
        re(1,1,nelri2)= 0.d0
*  ip1
        re(2,1,nelri2)=  -xn * (1.-alpha) * sr * pond
        re(3,1,nelri2)=  -yn * (1.-alpha) * sr * pond
*  ip2
        re(4,1,nelri2)=  -xn * alpha      * sr * pond
        re(5,1,nelri2)=  -yn * alpha      * sr * pond
*  jp
        re(6,1,nelri2)= xn              * sr   * pond
        re(7,1,nelri2)= yn              * sr   * pond
*  on transpose
        re(1,2,nelri2) = re(2,1,nelri2)
        re(1,3,nelri2) = re(3,1,nelri2)
        re(1,4,nelri2) = re(4,1,nelri2)
        re(1,5,nelri2) = re(5,1,nelri2)
        re(1,6,nelri2) = re(6,1,nelri2)
        re(1,7,nelri2) = re(7,1,nelri2)
*  le reste est nul
*
*  remplissage du champoint de depi
*
        xjeu1 = x1p*xn + y1p*yn
        xjeu2 = x2p*xn + y2p*yn
        xjeu  = (1.-alpha)*xjeu1 + alpha * xjeu2
        ipt7.num(1,nelch) = ipt1.num(1,iel)
        vpocha(nelch,1) = (-xjeu - xjr)*sr * pond
        IF (MELVA2.NE.0) THEN
          NEL2 = min (iel,NELA)
          VPOCHA(nelch,2) = max(MELVA2.VELCHE(NPTELA,NEL2),0.D0)*sr
        ENDIF
*        write(ioimp,*) ' jeu type 2 ',nelri2,nelch,vpocha(nelch,1),
*     &                 ipt7.num(1,nelch),ip1,ip2,jp
 520  continue
*
*D      write (ioimp,*) ' nb relation type 2 ',nelri2
*
* Ajustement au plus juste puis desactivation des segments lies
* a la rigidite du type 2
      if (nelri2.ne.nelrig) then
        nelrig = nelri2
        segadj,xmatri
        nbelem = nelri2
        nbnn = 4
        segadj,meleme
      endif
      segdes,meleme,xmatri
*
*  si il n'y a rien on dit que pas unilateral pour pas passer dans unilater
*     if (nbelem.eq.0) irigel(6,nrigel) = 0
*
 700  CONTINUE
*
*      GOTO 1000
*
*----------------------------
*    on renvoie le resultat
*----------------------------
 1000 CONTINUE
      segsup mfopa2
*
* Ajustement au plus juste du chpoint de depi (jeu) : mpoval et ipt7
* puis desactivation du chpoint
      if (n.ne.nelch) then
        n = nelch
        segadj,mpoval
        nbnn   = 1
        nbelem = nelch
        nbsous = 0
        nbref  = 0
        segadj,ipt7
      endif
      segdes,mpoval,ipt7
      segdes,msoupo,mchpoi
* Desctivation de la matrice de raideur de contact
      segdes,mrigid
*
* Reunion des relations portant sur le meme multiplicateur de lagrange
*
      call impofu(MRIGID,MCHPOI)
*
* Ecriture des objets resultats
      call ecrobj('RIGIDITE',mrigid)
      call ecrobj('CHPOINT',mchpoi)

 900  continue
      segdes,ipt1

      return
      end












